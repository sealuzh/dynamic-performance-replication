/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:28:05 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.File;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariableTypeTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      short short0 = Utility.searchOpcode("IN7]z");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("C=@oRQrdly5}", "C=@oRQrdly5}", "C=@oRQrdly5}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: C=@oRQrdly5}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "E:}";
      String string0 = Utility.methodTypeToSignature("E:}", stringArray0);
      assertEquals("(LE:};)LE:};", string0);
      
      String string1 = Utility.getSignature("E:}");
      assertEquals("LE:};", string1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = Utility.setBit(512, 512);
      assertEquals(513, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = Utility.format((-1529), (-1529), true, 'u');
      assertEquals("-1529", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Invalid signature: ");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("TFlrlB&,F:}/%WzZ<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TFlrlB&,F:}/%WzZ<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(RVN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RVN'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = Utility.accessToString(184, true);
      assertEquals("static final transient", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = Utility.classOrInterface((-1865));
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("[aAstore");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `aAstore'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{null, null, null}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "G+wJ-sz~sd:+";
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
      assertEquals("{\"G+wJ-sz~sd:+\"}", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.typeOfMethodSignature("s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("a_<G|R*`ok$W\"Z0", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 190, (-677));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)68;
      byteArray0[0] = (byte)40;
      byteArray0[2] = (byte)40;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3008, 609);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-78), (int) (byte)41);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)44;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)44, (-309));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)47;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 73, 1535);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      byte[] byteArray0 = Utility.decode("{java.lang.Object@18cd066a,", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 175, 175);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 57, 57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte) (-79);
      byteArray0[1] = (byte)51;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)51, (byte)51);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)51, (int) (byte) (-79));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = object0;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = Utility.decode("java.lang.Object@6d73d4ed, null, null, null, java.lang.Object@6d73d4ed, null, java.lang.Object@6d73d4ed", false);
      Utility.accessToString((-1722704279));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 387, 196);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = Utility.decode("ewG5AB1$Ka|V >d%", false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteArray0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 977, 4350);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = Utility.decode("Q9]>=P+hF^;i", false);
      Utility.accessToString((-891));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2256, 158);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      String string1 = Utility.getSignature("<clinit>");
      assertEquals("L<clinit>;", string1);
      
      byte[] byteArray0 = Utility.decode("L<clinit>;", false);
      String string2 = Utility.accessToString(5082);
      assertEquals("private static final volatile transient native interface synthetic", string2);
      
      String string3 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2332), 68);
      assertEquals("0:    astore_1\n1:    istore_1\n2:    dadd\n3:    idiv\n4:    lmul\n5:    fdiv\n6:    lmul\n7:    ineg\n8:    istore_3\n9:    istore_0\n", string3);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)83, (int) (byte)82);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      String string0 = Constants.ILLEGAL_OPCODE;
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 78, (int) (byte)90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Othro_", false);
      String string0 = Utility.accessToString((int) (byte) (-109));
      assertEquals("public private final transient native interface abstract strictfp synthetic annotation enum", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-109), 1974);
      assertEquals("0:    iastore\n1:    ineg\n2:    imul\n3:    frem\n4:    ddiv\n5:    swap\n", string1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)99;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)99, (int) (byte)99);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("qk&6YI,", false);
      Utility.getSignature("qk&6YI,");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 147, 41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("dload", false);
      String string0 = Utility.accessToString(97);
      assertEquals("public synchronized volatile", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-59), (int) (byte) (-59));
      assertArrayEquals(new byte[] {(byte)100, (byte)108, (byte)111, (byte)97, (byte)100}, byteArray0);
      assertEquals("0:    isub\n1:    idiv\n2:    ddiv\n3:    ladd\n4:    isub\n", string1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte)123;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 1772);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    lshr\n5:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-78), (int) (byte) (-78));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)24;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2072, (int) (byte)24);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("R;LI 9P<[g>VKx=n}5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[g>VKx=n}5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode("ar<O8 r$dr2^Z3", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"dr\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("]Nl$,vsC{4@Y5", false);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = Utility.convertString("*26&Z#cRmb_]fHtw}F$");
      assertEquals("*26&Z#cRmb_]fHtw}F$", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("QT91(y= a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QT91(y= a'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = Utility.replace(";d[!UQ>g?$g", ";d[!UQ>g?$g", ";d[!UQ>g?$g");
      assertEquals(";d[!UQ>g?$g", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Utility.methodSignatureReturnType("Clone Not S}upported");
      try { 
        Utility.typeOfMethodSignature("gXm\"LoXn<d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: gXm\"LoXn<d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("V");
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("}kTTGqE/", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$7dkTTGqE$_", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      short short0 = Utility.searchOpcode("impdep2");
      assertEquals((short)255, short0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-55), (-55));
      assertTrue(boolean0);
      
      String string0 = Utility.accessToString(2707, true);
      assertEquals("public private final transient strictfp", string0);
      
      String string1 = Utility.compactClassName("dup_x2", false);
      assertEquals("dup_x2", string1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      try { 
        Utility.typeOfSignature("7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      try { 
        Utility.typeOfSignature("QT9;1(y=aa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QT9;1(y=aa
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("iOvoke-ynaQic", false);
      Utility.getSignature("iOvoke-ynaQic");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4164, 1724, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.classOrInterface(568);
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-95);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2706), (int) (byte)55);
      assertEquals("0:    fconst_1\n1:    lstore\t\t%161\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
      
      int int0 = Utility.clearBit(42, (byte)12);
      assertEquals(42, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = Utility.getSignature("(");
      assertEquals("L(;", string0);
      
      String string1 = Utility.methodSignatureReturnType("StackMapTable");
      assertEquals("short", string1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Utility.typeOfSignature("Illegal type: ");
      try { 
        Utility.typeOfSignature("}ojVzACt_<iL2Y&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: }ojVzACt_<iL2Y&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = Utility.convertString("jbhBDLz@b.A\" P1Z(");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = Utility.decode(":r.FFQ19Oh^-U*]Z", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1001, 1001);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 190, (int) (byte)65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = Utility.decode(":rBFFQ19Oh^-U*]Z", false);
      String string0 = Utility.compactClassName(":rBFFQ19Oh^-U*]Z", ":rBFFQ19Oh^-U*]Z", false);
      assertEquals(":rBFFQ19Oh^-U*]Z", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-891), 871);
      assertEquals("0:    land\n1:    astore\t\t%114\n3:    lstore_3\n4:    fstore_3\n5:    fstore_3\n6:    fastore\n7:    daload\n8:    dstore\t\t%79\n10:   imul\n11:   dup2_x2\n12:   aload_3\n13:   castore\n14:   aload_0\n15:   dup2_x1\n16:   dup_x1\n", string1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("f1tc[E#Bn8sE%U", false);
      String string0 = Utility.accessToString(255);
      assertEquals("public private protected static final synchronized volatile transient", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2094), 47);
      assertEquals("0:    fsub\n1:    daload\n2:    ineg\n3:    dadd\n4:    dup_x2\n5:    fstore_2\n6:    fload_1\n7:    lstore_3\n8:    fdiv\n9:    fstore\t\t%115\n11:   fstore_2\n12:   fload_3\n13:   castore\n", string1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("'", false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2011), (-2011));
      assertEquals("0:    dload_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)0;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-155), 137);
      assertEquals("0:    lstore_3\n1:    <illegal opcode>\n2:    ishr\n3:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(anonymous)", "(anonymous)", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `anonymous)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      Utility.getSignature("<clinit>");
      try { 
        Utility.methodSignatureReturnType("L<clinit>;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `clinit>;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object object0 = new Object();
      try { 
        Utility.methodSignatureReturnType("L<illegal;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<illegal;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("\"6L", (String[]) null);
      assertEquals("()L\"6L;", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("R;LI 9P<[g>VKx=n}5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R;LI 9P<[g>VKx=n}5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = Utility.decode("{j#va.lang.Object@18cd066a,", false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-793), 1738);
      assertEquals("0:    lshr\n1:    fmul\n2:    fload_1\n3:    fneg\n4:    ladd\n5:    iaload\n6:    idiv\n7:    ladd\n8:    fdiv\n9:    dsub\n10:   iaload\n11:   iastore\n12:   fadd\n13:   fmul\n14:   lsub\n15:   dadd\n16:   ineg\n17:   lstore_1\n18:   daload\n19:   fstore\t\t%99\n21:   isub\n22:   faload\n23:   istore\t\t%54\n25:   ladd\n26:   aload_2\n", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = Utility.getSignature("\t<");
      assertEquals("L<;", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = Utility.getSignature(" ieds2\n");
      assertEquals("Lieds2;", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-66);
      Utility.convertString("53");
      try { 
        Utility.typeOfSignature("53");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 53
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = Utility.getSignature("tie}B*+");
      assertEquals("Ltie}B*+;", string0);
      
      String string1 = Utility.methodSignatureReturnType("Ltie}B*+;");
      assertEquals("tie}B*+", string1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)73;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 201, (int) (byte)32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object[] objectArray0 = new Object[12];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      Utility.printArray(objectArray0, true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"f,r7]JbP`M-@Gd";
      String string0 = Utility.methodTypeToSignature("{java.lang.Object@ca86382, java.lang.Object@ca86382, java.lang.Object@ca86382, null, null, null, null, null, null, null, null, null}", stringArray0);
      Utility.decode("(L\"f,r7]JbP`M-@Gd;)L{java/lang/Object@ca86382,;", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = Utility.methodSignatureToString("(L\"f,r7]JbP`M-@Gd;)L{java/lang/Object@ca86382,;", "Lclass;V", "boolean", true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Utility.methodTypeToSignature(":rBFFQ19Oh^-U*]Z", (String[]) null);
      Utility.methodSignatureReturnType("()L:rBFFQ19Oh^-U*]Z;");
      String string0 = Utility.getSignature("()L:rBFFQ19Oh^-U*]Z;");
      assertEquals("L()L:rBFFQ19Oh^-U*]Z;;", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)31;
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-97), 2143);
      assertEquals("0:    if_icmpeq\t\t#7936\n", string1);
      
      String string2 = Utility.methodSignatureToString("()L:rBFFQ19Oh^-U*]Z;", "L()L:rBFFQ19Oh^-U*]Z;;", ">uXfU(gQCz9.Auc", true);
      assertEquals(">uXfU(gQCz9.Auc :rBFFQ19Oh^-U*]Z L()L:rBFFQ19Oh^-U*]Z;;()", string2);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      byte[] byteArray0 = Utility.decode("^r9bEs#G9EV~>lc@ QV", false);
      Utility.accessToString(20);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1772, 82);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Constants.ILLEGAL_OPCODE;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-3623), 1343);
      assertEquals("0:    bastore\n", string1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "p/XZF*;+H<__;{";
      byte[] byteArray0 = Utility.decode("byte", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 8, 233);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)125;
      String string0 = Constants.ILLEGAL_OPCODE;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)125, (int) (byte)125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(u%5TN+AVz(k;4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (u%5TN+AVz(k;4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte)34;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-71), (int) (byte) (-71));
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    fload_0\n7:    nop\n8:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)74, (-309));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-87);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)77, (int) (byte) (-87));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      try { 
        Utility.typeOfSignature("HmFR#1e8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HmFR#1e8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("LhzE-%yBT+&n;V");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = Utility.decode("athow", false);
      Utility.compactClassName("athow");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 106, 443);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object object0 = new Object();
      Utility.decode(":rBFFQ19Oh^-U*]Z", false);
      Utility.compactClassName(":rBFFQ19Oh^-U*]Z", ":rBFFQ19Oh^-U*]Z", false);
      try { 
        Utility.typeOfSignature("+K?&J:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K?&J:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utility.getSignature("\"6L");
      // Undeclared exception!
      try { 
        Utility.signatureToString("NnS/Uk", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NnS/Uk'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\"6L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"6L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 398;
      Utility.accessToString(398);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("private protected static transient native", "private protected static transient native", "private protected static transient native");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: private protected static transient native
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte)34;
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-LGi>~:qc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -LGi>~:qc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("[aAstore");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [aAstore
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)17, (int) (byte)17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)36;
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte) (-103);
      byteArray0[7] = (byte) (-2);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-281), 158);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dload_3
         // 1:    wide\t(wide)
         // 2:    dload\t\t%9216
         // 5:    <illegal opcode>
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!+njRm x,X:{^ME:{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: njRm x,X:{^ME:{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = Utility.toHexString(byteArray0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals("00 00", string0);
      
      try { 
        Utility.typeOfSignature("00 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 00 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-81), (byte)46, (byte) (-81), (byte) (-127), (byte) (-81), (byte) (-81), (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-127), (int) (byte) (-81));
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-81), (byte)46, (byte) (-81), (byte) (-127), (byte) (-81), (byte) (-81), (byte)0}, byteArray0);
      assertEquals("0:    dreturn\n1:    iaload\n2:    dreturn\n3:    lor\n4:    dreturn\n5:    dreturn\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = Utility.format(170, (-1423), false, 'T');
      assertNotNull(string0);
      assertEquals("170", string0);
      
      try { 
        Utility.typeOfSignature("170");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 170
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      try { 
        Utility.typeOfSignature("PMGClass(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PMGClass(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8n~dY9TT*PLoK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8n~dY9TT*PLoK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      try { 
        Utility.typeOfSignature("A.-Yd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A.-Yd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-78);
      try { 
        Utility.methodSignatureReturnType("YJv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YJv'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-67);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("C**PVtjH");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-58);
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      try { 
        Utility.typeOfSignature("MLHn<nUNm301FoD87^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MLHn<nUNm301FoD87^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)8}, byteArray0);
      assertFalse(boolean0);
      
      int int0 = Utility.clearBit((-418), (-418));
      assertEquals((-1073742242), int0);
      
      boolean boolean1 = Utility.isSet((-418), 128);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.compactClassName("void");
      assertNotNull(string0);
      assertEquals("void", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      stringArray0[2] = "void";
      stringArray0[3] = "void";
      stringArray0[4] = "void";
      stringArray0[5] = "void";
      stringArray0[6] = "void";
      stringArray0[7] = "void";
      stringArray0[8] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("6zb;-`{", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)54, (byte)122, (byte)98, (byte)59, (byte)45, (byte)96, (byte)123}, byteArray0);
      
      try { 
        Utility.typeOfSignature("6zb;-`{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6zb;-`{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      try { 
        Utility.typeOfSignature("?z*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?z*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.printArray((Object[]) null, true, true);
      assertNull(string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("00", string1);
      
      String string2 = "R4ot&C$lL";
      try { 
        Utility.typeOfSignature("R4ot&C$lL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R4ot&C$lL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      try { 
        Utility.typeOfSignature("E:}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E:}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.getSignature("long");
      assertNotNull(string0);
      assertEquals("J", string0);
      
      String string1 = Utility.methodSignatureReturnType("J");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("long", string1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = Utility.convertString("Wh$u3K}4)<FW<lq=}");
      assertNotNull(string0);
      assertEquals("Wh$u3K}4)<FW<lq=}", string0);
      
      String string1 = Utility.accessToString(110, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("private protected static synchronized volatile", string1);
      
      String string2 = Utility.compactClassName("Wh$u3K}4)<FW<lq=}", "Wh$u3K}4)<FW<lq=}", false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("Wh$u3K}4)<FW<lq=}", string2);
      
      int int0 = Utility.clearBit(86, 0);
      assertEquals(86, int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      String string3 = Utility.toHexString(byteArray0);
      assertNotNull(string3);
      assertArrayEquals(new byte[] {(byte)4}, byteArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("04", string3);
      
      String string4 = Utility.replace("private protected static synchronized volatile", "YTe", "aload_1");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("private protected static synchronized volatile", string4);
      
      try { 
        Utility.methodSignatureReturnType("Kp%#OHe{4iL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Kp%#OHe{4iL'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2012), (-2012));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dstore_1
         // 1:    lxor
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      String string1 = Utility.getSignature("<clinit>");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("L<clinit>;", string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)88;
      byteArray0[2] = (byte)88;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)88, 79);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "if_icmpgt";
      stringArray0[1] = "if_icmpgt";
      stringArray0[2] = "if_icmpgt";
      byte[] byteArray0 = Utility.decode("if_icmpgt", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)105, (byte)102, (byte)95, (byte)105, (byte)99, (byte)109, (byte)112, (byte)103, (byte)116}, byteArray0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-542), (-542));
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)105, (byte)102, (byte)95, (byte)105, (byte)99, (byte)109, (byte)112, (byte)103, (byte)116}, byteArray0);
      assertEquals("0:    lmul\n1:    fsub\n2:    swap\n3:    lmul\n4:    dadd\n5:    ldiv\n6:    irem\n7:    dsub\n8:    ineg\n", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = Utility.compactClassName("3T(=+=^Q[5$");
      assertNotNull(string0);
      assertEquals("3T(=+=^Q[5$", string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "3T(=+=^Q[5$";
      objectArray0[1] = (Object) "3T(=+=^Q[5$";
      objectArray0[2] = (Object) "3T(=+=^Q[5$";
      objectArray0[3] = (Object) "3T(=+=^Q[5$";
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{3T(=+=^Q[5$, 3T(=+=^Q[5$, 3T(=+=^Q[5$, 3T(=+=^Q[5$}", string1);
      
      try { 
        Utility.decode("3T(=+=^Q[5$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)78;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2417, 64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = Utility.decode(":rBFFQ19Oh^-U*]Z", false);
      assertNotNull(byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertNotNull(string0);
      assertEquals("land", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte byte0 = ElementValue.PRIMITIVE_FLOAT;
      assertEquals((byte)70, byte0);
      
      try { 
        Utility.methodSignatureReturnType("U", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = Utility.toHexString(byteArray0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals("00 00", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "`xS\"=Y@8Q4)&xxFxJ=";
      stringArray0[1] = "00 00";
      stringArray0[2] = "00 00";
      stringArray0[3] = "00 00";
      stringArray0[4] = "!a0jD6d";
      stringArray0[5] = "`xS\"=Y@8Q4)&xxFxJ=";
      String string1 = Utility.methodTypeToSignature("`xS\"=Y@8Q4)&xxFxJ=", stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray1 = Utility.decode("!a0jD6d", false);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)33, (byte)97, (byte)48, (byte)106, (byte)68, (byte)54, (byte)100}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      String string2 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)0, (-1575));
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)33, (byte)97, (byte)48, (byte)106, (byte)68, (byte)54, (byte)100}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0:    lload_3\n1:    ladd\n2:    faload\n3:    fmul\n4:    fstore_1\n5:    istore\t\t%100\n", string2);
      assertNotSame(byteArray1, byteArray0);
      
      try { 
        Utility.typeOfSignature("(L`xS\"=Y@8Q4)&xxFxJ=;L00;L00;L00;L!a0jD6d;L`xS\"=Y@8Q4)&xxFxJ=;)L`xS\"=Y@8Q4)&xxFxJ=;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (L`xS\"=Y@8Q4)&xxFxJ=;L00;L00;L00;L!a0jD6d;L`xS\"=Y@8Q4)&xxFxJ=;)L`xS\"=Y@8Q4)&xxFxJ=;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)68;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 54, (-2107));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("J;Zii76pK7akHUo_");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      try { 
        Utility.typeOfSignature("W$s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W$s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature(",H/L4.^:N'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,H/L4.^:N'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("TFlrlB&,F:}/%WzZ<");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("3", "3", false);
      assertNotNull(string0);
      assertEquals("3", string0);
      
      try { 
        Utility.typeOfSignature("3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)83;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte) (-65);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 67, (int) (byte) (-65));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-121);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-121), (int) (byte) (-121));
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)85, (byte) (-121)}, byteArray0);
      assertEquals("0:    castore\n1:    i2d\n", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      String string0 = Utility.toHexString(byteArray0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)86}, byteArray0);
      assertEquals("56", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)86, (int) (byte)86);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)126;
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)126, (int) (byte)126);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = Utility.decode("{j#va.lang.Object@18cd066a,", false);
      assertNotNull(byteArray0);
      
      byte byte0 = Utility.typeOfSignature("Sr^;B");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)109;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1351, (int) (byte)125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Visiting non-standard PMGClass object");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-95);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-1), (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), (int) (byte) (-1));
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-1), (byte) (-95), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    nop\n1:    impdep2\n2:    impdep2\n3:    if_icmplt\t\t#3\n6:    nop\n7:    nop\n8:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Z\"n~6oamZiY`");
      assertNotNull(string0);
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"f,r7]JbP`M-@Gd";
      String string1 = Utility.methodTypeToSignature("<init>", stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(L\"f,r7]JbP`M-@Gd;)L<init>;", string1);
      
      byte[] byteArray0 = Utility.decode("(L\"f,r7]JbP`M-@Gd;)L<init>;", false);
      assertNotNull(byteArray0);
      
      String string2 = Utility.convertString("\"f,r7]JbP`M-@Gd");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\\\"f,r7]JbP`M-@Gd", string2);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("E:}", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E:}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!OZF<,DH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OZF<,DH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      String string0 = Utility.toHexString(byteArray0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-126), (byte)0, (byte)0}, byteArray0);
      assertEquals("82 00 00", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-126), (int) (byte) (-126));
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-126), (byte)0, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    ixor\n1:    nop\n2:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*26&Z#cRmb_]fHtw}F$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 26&Z#cRmb_]fHtw}F$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("{java.lang.Object@18cd066a,", false);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-60);
      try { 
        Utility.typeOfSignature("4MiPBH)sC8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4MiPBH)sC8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Byte code error: ");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("P ij0Tk,_nB?]aM+C", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P ij0Tk,_nB?]aM+C'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      try { 
        Utility.typeOfSignature("X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = "&v\"A^zxf\\/+{W1|";
      try { 
        Utility.typeOfSignature("&v\"A^zxf/+{W1|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &v\"A^zxf/+{W1|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)17;
      String string0 = "!OZF<,DH";
      try { 
        Utility.typeOfSignature("GwI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GwI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+%n2TLa2B(\"z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %n2TLa2B(\"z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("*DSG}");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)17;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-106), (int) (byte)17);
      assertNotNull(string0);
      assertEquals("0:    sipush\t\t0\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-35);
      String string0 = Utility.toHexString(byteArray0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)14, (byte)105, (byte)67, (byte) (-35)}, byteArray0);
      assertEquals("0e 69 43 dd", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 195, (-1999));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-76);
      String string0 = Utility.toHexString(byteArray0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-76)}, byteArray0);
      assertEquals("b4", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 14, 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-77);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)83, 90, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)75;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1336, (int) (byte) (-59));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      String string1 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string1);
      assertEquals("<illegal opcode>", string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)21;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 191, 168);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-110);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("i2c", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)20, (byte)0}, byteArray0);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-122);
      String string0 = Utility.methodSignatureReturnType("D{fXE/rVv6xe`t 5G/");
      assertNotNull(string0);
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte byte0 = Utility.typeOfSignature("File");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-59), (int) (byte) (-59));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string0);
      assertEquals("goto\t\t#7168", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = Utility.compactClassName("'");
      assertNotNull(string0);
      assertEquals("'", string0);
      
      String string1 = Utility.convertString("'");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\\'", string1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)31, (int) (byte)31);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-97);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-97), (int) (byte) (-97));
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-97), (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    nop\n1:    if_icmpeq\t\t#1\n", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 19, (-2747));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-91);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1072), (int) (byte) (-91));
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-91), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    nop\n1:    if_acmpeq\t\t#1\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-71), 173);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature(">\t", (String[]) null);
      assertNotNull(string0);
      assertEquals("()L>;", string0);
      
      byte[] byteArray0 = Utility.decode("fstore_2", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)102, (byte)115, (byte)116, (byte)111, (byte)114, (byte)101, (byte)95, (byte)50}, byteArray0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)102, (byte)115, (byte)116, (byte)111, (byte)114, (byte)101, (byte)95, (byte)50}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("fstore_2", string1);
      
      short short0 = Utility.searchOpcode("fstore_2");
      assertEquals((short)69, short0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-75);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-75), 54);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)10;
      byteArray0[1] = (byte)28;
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)28, (int) (byte)28);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-61);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-106), 3888);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-106), (byte) (-106), (byte) (-61), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    nop\n1:    fcmpg\n2:    fcmpg\n3:    monitorexit\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-503), 515);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals("0:    nop\n1:    nop\n", string0);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-80);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 102, 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[aAstore");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("NW?j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NW?j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[1] = (byte) (-102);
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-102), (int) (byte) (-102));
      assertEquals(3, constantPool0.getLength());
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    ifne\t\t#1\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n", string0);
      
      String string1 = Utility.convertString("0:    nop\n1:    ifne\t\t#1\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    nop\\n1:    ifne\t\t#1\\n4:    nop\\n5:    nop\\n6:    nop\\n7:    nop\\n8:    nop\\n9:    nop\\n10:   nop\\n", string1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, int0);
      
      String string0 = Utility.signatureToString("B[$c8AnNj.!{gZS", true);
      assertNotNull(string0);
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-41);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-109), (byte) (-41), (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-109), (int) (byte) (-109));
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-109), (byte) (-41), (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    i2s\n1:    <illegal opcode>\n2:    nop\n3:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      String string1 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string1);
      assertEquals("<illegal opcode>", string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)82;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-5);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 106, (int) (byte)27);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte byte0 = (byte)36;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)36;
      byteArray0[0] = (byte)36;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)120;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)120);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)36, (byte)0, (byte)0, (byte)120, (byte)120}, byteArray0);
      assertEquals("0:    fload_2\n1:    nop\n2:    nop\n3:    ishl\n4:    ishl\n", string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    fload_2\n1:    nop\n2:    nop\n3:    ishl\n4:    ishl\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    fload_2
         // 1:    nop
         // 2:    nop
         // 3:    ishl
         // 4:    ishl
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)25;
      byteArray0[4] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)25, 174);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte)77;
      String string0 = Utility.toHexString(byteArray0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)29, (byte)9, (byte) (-23), (byte)90, (byte)8, (byte) (-123), (byte)68, (byte)77}, byteArray0);
      assertEquals("1d 09 e9 5a 08 85 44 4d", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3319), (int) (byte) (-123));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)29, (byte)9, (byte) (-23), (byte)90, (byte)8, (byte) (-123), (byte)68, (byte)77}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    iload_3\n1:    lconst_0\n2:    <illegal opcode>\n3:    dup_x1\n4:    iconst_5\n5:    i2l\n6:    fstore_1\n7:    astore_2\n", string1);
      
      try { 
        Utility.methodSignatureReturnType("1d 09 e9 5a 08 85 44 4d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `1d 09 e9 5a 08 85 44 4d'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("G+wJ-sz~s:+", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G+wJ-sz~s:+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte byte0 = Constants.ATTR_EXCEPTIONS;
      assertEquals((byte)3, byte0);
      
      try { 
        Utility.typeOfSignature("$M\"H/yJk>Z0t%:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $M\"H/yJk>Z0t%:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = true;
      String string0 = Utility.compactClassName("\t<", "\t<", true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      try { 
        Utility.typeOfSignature("#|jag");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #|jag
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      String string1 = Utility.getSignature("<clinit>");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("L<clinit>;", string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string2 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("<illegal opcode>", string2);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-62);
      String string3 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-62), (int) (byte) (-62));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(string3);
      assertArrayEquals(new byte[] {(byte) (-62)}, byteArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("0:    monitorenter\n", string3);
      assertNotSame(constantPool1, constantPool0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)113;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3930, 161);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[2] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 190, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[2];
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantPool0.accept(emptyVisitor0);
      assertEquals(0, constantPool0.getLength());
      
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)34;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-932), 100);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = "6zb;-`{";
      String string1 = Utility.convertString("6zb;-`{");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("6zb;-`{", string1);
      
      byte[] byteArray0 = Utility.decode("6zb;-`{", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)54, (byte)122, (byte)98, (byte)59, (byte)45, (byte)96, (byte)123}, byteArray0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "6zb;-`{";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("~p1im#9i,G[['s", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[['s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Utility.typeOfSignature("9yS%Bt%8ZC^7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9yS%Bt%8ZC^7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-115);
      byteArray0[3] = (byte) (-115);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 1675);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-115), (byte)0, (byte)0, (byte) (-115), (byte)0}, byteArray0);
      assertEquals("0:    f2d\n1:    nop\n2:    nop\n3:    f2d\n4:    nop\n", string0);
      
      // Undeclared exception!
      try { 
        constantPool0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-85);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-64), 152);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 50701. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      byte[] byteArray0 = Utility.decode("? extends ", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)63, (byte)32, (byte)101, (byte)120, (byte)116, (byte)101, (byte)110, (byte)100, (byte)115, (byte)32}, byteArray0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(8);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(8, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)63, (byte)32, (byte)101, (byte)120, (byte)116, (byte)101, (byte)110, (byte)100, (byte)115, (byte)32}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)63, (byte)32, (byte)101, (byte)120, (byte)116, (byte)101, (byte)110, (byte)100, (byte)115, (byte)32}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("lstore_0", string1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)87;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 245, 200);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      try { 
        Utility.typeOfSignature("/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-58);
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (-1729));
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-58), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    nop\n1:    ifnull\t\t#1\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)49;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte) (-116);
      String string0 = Utility.toHexString(byteArray0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)49, (byte)0, (byte)127, (byte) (-116)}, byteArray0);
      assertEquals("00 31 00 7f 8c", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)127);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)49, (byte)0, (byte)127, (byte) (-116)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    nop\n1:    daload\n2:    nop\n3:    land\n4:    f2l\n", string1);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)51;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)51, (-1081));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)121;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)121, 598);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-115);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-115), (-1659));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-122);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 9, 47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")/mI!x?oIUl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )/mI!x?oIUl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-73), (int) (byte) (-73));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature(":rBFFQ19Oh^-U*]Z", (String[]) null);
      assertNotNull(string0);
      assertEquals("()L:rBFFQ19Oh^-U*]Z;", string0);
      
      try { 
        Utility.typeOfSignature("'#'Z^u;1Al");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '#'Z^u;1Al
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-84);
      byteArray0[2] = (byte) (-84);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 2429);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-84), (byte)0, (byte) (-84)}, byteArray0);
      assertEquals("0:    ireturn\n1:    nop\n2:    ireturn\n", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-104);
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-104), (int) (byte) (-104));
      assertEquals(3, constantPool0.getLength());
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-104), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    nop\n1:    dcmpg\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
      
      String string1 = Utility.convertString("0:    nop\n1:    dcmpg\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    nop\\n1:    dcmpg\\n2:    nop\\n3:    nop\\n4:    nop\\n5:    nop\\n6:    nop\\n7:    nop\\n", string1);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("LineNumber(", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LineNumber(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Utility.typeOfSignature("U\"U1p]7|8s,ON*@/G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U\"U1p]7|8s,ON*@/G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-55);
      byteArray0[4] = (byte) (-55);
      int int0 = 1772;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 1772);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-101);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2, 78);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-117);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-117), (int) (byte) (-117));
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-117), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    f2i\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-114), (byte) (-114), (byte) (-81)}, byteArray0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-114), (int) (byte) (-114));
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-114), (byte) (-114), (byte) (-81)}, byteArray0);
      assertEquals("0:    d2i\n1:    d2i\n2:    dreturn\n", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)17;
      byteArray0[4] = (byte)17;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)17;
      String string0 = Utility.toHexString(byteArray0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)17, (byte)0, (byte)17, (byte)17}, byteArray0);
      assertEquals("9b 11 00 11 11", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2263, (-667));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-68);
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-68), 79);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    newarray\t\t<<illegal type>>\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string1);
      
      String string2 = Utility.methodSignatureReturnType("Invalid constant pool reference: ", true);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("int", string2);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-98);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 32, (-4127), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        Utility.methodSignatureReturnType("OyDa3!.|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OyDa3!.|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("M?9B:gXm_", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M?9B:gXm_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)18, (-646));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)59;
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte)109;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-91), (int) (byte)88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    arraylength
         // 1:    ldiv
         // 2:    if_acmpeq\t\t#15106
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = "C7o4$x_!";
      try { 
        Utility.decode("C7o4$x_!", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-90);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-90), 811);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      try { 
        Utility.methodSignatureReturnType("W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-85);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), (int) (byte) (-85));
      assertNotNull(string0);
      assertEquals("0:    lookupswitch\tdefault = 0, npairs = 0 ()\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 19, (int) (byte)36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)8, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-67);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-67), (int) (byte) (-67));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte) (-85);
      byteArray0[8] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)8, 185);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-70), (int) (byte) (-70));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-114);
      int int0 = (-1213);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 346, (-1213));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-74);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-74), (int) (byte) (-74));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-63), 173);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)19, (int) (byte)19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-27);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-93), (int) (byte) (-93));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("=NI`0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =NI`0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(9, (byte) (-30));
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(9, constantInterfaceMethodref0.getClassIndex());
      assertEquals((-30), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertNotNull(constantInterfaceMethodref0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-94);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-30), (int) (byte) (-94));
      assertEquals(1, constantPool0.getLength());
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-94), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    if_icmpge\t\t#0\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
      
      int int0 = Utility.clearBit((byte) (-94), (-1506));
      assertEquals((-1073741918), int0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-94), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("$a2$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = Utility.getSignature("From\tTo\tHandler\tType\n");
      assertNotNull(string0);
      assertEquals("LFrom;", string0);
      
      String string1 = Utility.methodSignatureReturnType("From\tTo\tHandler\tType\n");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("float", string1);
      
      boolean boolean0 = Utility.isSet(716, 716);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte) (-72);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 149, (int) (byte) (-72));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(8, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), 4209);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = Utility.getSignature("\"6L");
      assertNotNull(string0);
      assertEquals("L\"6L;", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string1 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<illegal opcode>", string1);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte) (-54);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)74, (byte) (-18), (byte)123, (byte) (-44), (byte)80, (byte)121, (byte) (-128), (byte) (-54)}, byteArray0);
      
      String string2 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-18), 46);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)74, (byte) (-18), (byte)123, (byte) (-44), (byte)80, (byte)121, (byte) (-128), (byte) (-54)}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0:    dstore_3\n1:    <illegal opcode>\n2:    lshr\n3:    <illegal opcode>\n4:    lastore\n5:    lshl\n6:    ior\n7:    breakpoint\n", string2);
      assertNotSame(constantPool0, constantPool1);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-103);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-103), 173);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-103), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    nop\n1:    ifeq\t\t#1\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
      
      String string1 = Utility.format((-1322), 173, false, 'J');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ-1322", string1);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-88);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-88), (int) (byte) (-88));
      assertNotNull(string0);
      assertEquals("0:    jsr\t\t#0\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-106);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-106), 895);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-106), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    nop\n1:    fcmpg\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-112);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 36, (-1453), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-108)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 83, (-1338));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-61);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), 3888);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    fcmpg
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("\t<", "\t<", true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      try { 
        Utility.typeOfSignature("Yxq{O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Yxq{O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)122;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1165), (int) (byte)113);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)76, (byte)47, (byte)113, (byte)122}, byteArray0);
      assertEquals("0:    i2b\n1:    astore_1\n2:    laload\n3:    lrem\n4:    ishr\n", string0);
      
      String string1 = "if_icmpgt";
      try { 
        Utility.methodSignatureArgumentTypes("if_icmpgt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmpgt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-122);
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-122);
      byteArray1[1] = (byte) (-122);
      byteArray1[2] = (byte) (-2);
      byteArray1[3] = (byte) (-122);
      byteArray1[4] = (byte) (-122);
      byteArray1[5] = (byte) (-122);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-122), (byte) (-122), (byte) (-122), (byte) (-122), (byte) (-122), (byte) (-122)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-122), (byte) (-122), (byte) (-2), (byte) (-122), (byte) (-122), (byte) (-122)}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte) (-120);
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-11));
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((-11), constantInteger0.getBytes());
      assertNotNull(constantInteger0);
      
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((-11), constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger1.getTag());
      assertEquals((-11), constantInteger1.getBytes());
      assertNotNull(constantInteger1);
      assertTrue(constantInteger1.equals((Object)constantInteger0));
      
      constantArray0[0] = (Constant) constantInteger1;
      ConstantInteger constantInteger2 = new ConstantInteger((byte) (-127));
      assertEquals((byte)3, constantInteger2.getTag());
      assertEquals((-127), constantInteger2.getBytes());
      assertNotNull(constantInteger2);
      assertFalse(constantInteger2.equals((Object)constantInteger0));
      assertFalse(constantInteger2.equals((Object)constantInteger1));
      
      ConstantInteger constantInteger3 = new ConstantInteger(constantInteger2);
      assertEquals((byte)3, constantInteger2.getTag());
      assertEquals((-127), constantInteger2.getBytes());
      assertEquals((-127), constantInteger3.getBytes());
      assertEquals((byte)3, constantInteger3.getTag());
      assertNotNull(constantInteger3);
      assertFalse(constantInteger2.equals((Object)constantInteger0));
      assertFalse(constantInteger2.equals((Object)constantInteger1));
      assertFalse(constantInteger3.equals((Object)constantInteger1));
      assertFalse(constantInteger3.equals((Object)constantInteger0));
      assertTrue(constantInteger3.equals((Object)constantInteger2));
      
      constantArray0[1] = (Constant) constantInteger3;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(2, constantPool1.getLength());
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 922, (int) (byte)22);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)10;
      byteArray0[6] = (byte) (-62);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-80);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 183, 1381);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = Utility.getSignature("H[cj_:QcTh+1R]c>3l");
      assertNotNull(string0);
      assertEquals("[LH;", string0);
      
      try { 
        Utility.methodSignatureArgumentTypes("H[cj_:QcTh+1R]c>3l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H[cj_:QcTh+1R]c>3l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte) (-82);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 176, (int) (byte) (-87));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)2;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1228), (int) (byte)70);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)70, (byte) (-113), (byte)76, (byte)2, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    fstore_3\n1:    d2l\n2:    astore_1\n3:    iconst_m1\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-127), (int) (byte) (-83));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lreturn
         // 1:    lor
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("'h4t:;$4De{E?ASC{|l", false);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-27);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-123), (int) (byte) (-123));
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-123), (byte) (-27)}, byteArray0);
      assertEquals("0:    i2l\n1:    <illegal opcode>\n", string0);
  }
}
