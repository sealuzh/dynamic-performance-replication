/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 13:37:58 GMT 2019
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import org.xmlpull.mxp1_serializer.MXSerializer;
import org.xmlpull.v1.XmlSerializer;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.InitialFieldValue;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "dl";
      Component component0 = errorPage0.attributes(stringArray0);
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("characters ]]> are not allowed in content");
      Form form0 = new Form(errorPage0, "characters ]]> are not allowed in content", actionExpression0);
      Checkbox checkbox0 = new Checkbox(form0, (String) null, "r`oWQ5^tcp43rH[{");
      // Undeclared exception!
      try { 
        checkbox0.textarea("INVOKESPECIAL java/lang/Float.<init>::(F)V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      Component component0 = table0.s((Object) errorPage0);
      Component component1 = component0.fieldset();
      component1.id("java.lang.String@0000000016");
      assertFalse(component1._isGeneratedId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StandaloneComponent standaloneComponent0 = errorPage0.getPage();
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      Component component0 = table0.s((Object) errorPage0);
      Component component1 = component0.fieldset();
      component1.eval("");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
      assertTrue(table0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.renderHint((CharSequence) null);
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, "(Ljava/lang/Object;)Ljava/lang/Object;", "(Ljava/lang/Object;)Ljava/lang/Object;");
      submit0.renderHint("gp6c[om$${3D)U54G,");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Form form0 = new Form("j aQ5M?K");
      List<Component> list0 = form0.findAll((ElExpression) null);
      assertNotNull(list0);
      assertEquals("j aQ5M?K", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.end("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression ''.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("BQ^");
      Form form0 = new Form(errorPage0, "BQ^", actionExpression0);
      form0.attribute((String) null, (CharSequence) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.actionBinding("feature name should not be null");
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.wrapSelf();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Form form0 = new Form("3 D}Bc");
      // Undeclared exception!
      try { 
        form0.var();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "in epilog non whitespace content is not allowed but got ", "in epilog non whitespace content is not allowed but got ");
      Checkbox checkbox0 = new Checkbox(fileInput0, "JQlD8/b,]GCKwo{yzIH", "JQlD8/b,]GCKwo{yzIH");
      Radio radio0 = new Radio(checkbox0, "a-8v@_;gRQ]d}*k!vrM", "JQlD8/b,]GCKwo{yzIH");
      // Undeclared exception!
      try { 
        radio0.table();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.sup((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Form form0 = new Form("");
      Short short0 = new Short((short)1);
      // Undeclared exception!
      try { 
        form0.sub((Object) short0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "eLf?s}Rt", "eLf?s}Rt");
      // Undeclared exception!
      try { 
        fileInput0.strong();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Form form0 = new Form("");
      MockDate mockDate0 = new MockDate((-1878), (-1878), (-1878), 95, (-1878), 1060);
      // Undeclared exception!
      try { 
        form0.strike((Object) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "/HDyN]r3(&)u", "/HDyN]r3(&)u");
      Label label0 = new Label(checkbox0, checkbox0);
      FileInput fileInput0 = new FileInput(label0, "u/tQi4", "u/tQi4");
      // Undeclared exception!
      try { 
        checkbox0.small((Object) fileInput0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Form form0 = new Form("#ffW|OR");
      Float float0 = new Float(0.0);
      // Undeclared exception!
      try { 
        form0.small((Object) float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Form form0 = new Form("empty string is not allowed for ignorable whitespace");
      // Undeclared exception!
      try { 
        form0.s();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.remove("id=\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "&n&0ZqMdT=uJhY", "&n&0ZqMdT=uJhY");
      TableBlock tableBlock0 = new TableBlock(fileInput0);
      TextInput textInput0 = new TextInput(tableBlock0, "&n&0ZqMdT=uJhY", "&n&0ZqMdT=uJhY");
      Checkbox checkbox0 = new Checkbox(textInput0, "&n&0ZqMdT=uJhY", "^B,s0<e3qY|x>T");
      // Undeclared exception!
      try { 
        checkbox0.rawText(checkbox0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("#6g?+sCcax#^");
      // Undeclared exception!
      try { 
        xmlEntityRef0.pre((Object) "#6g?+sCcax#^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("^/ir4=k5W{Ch4)T");
      // Undeclared exception!
      try { 
        xmlEntityRef0.placeholder("^/ir4=k5W{Ch4)T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Form form0 = new Form("j aQ5M?K");
      // Undeclared exception!
      try { 
        form0.passwordInput("apFe<}!zXrQTHs/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Form form0 = new Form("java.lang.StringBuffer@0000000007");
      // Undeclared exception!
      try { 
        form0.param("java.lang.StringBuffer@0000000007", "java.lang.StringBuffer@0000000007");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Form form0 = new Form("INVOKEINTERFACE: java/util/List.get");
      // Undeclared exception!
      try { 
        form0.object();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "", "java.lang.String@0000000010");
      // Undeclared exception!
      try { 
        textInput0.noframes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h2();
      // Undeclared exception!
      try { 
        component0.message("java.nio.HeapCharBuffer@0000000004");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Form form0 = new Form("Qz)k5");
      // Undeclared exception!
      try { 
        form0.li();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000010");
      // Undeclared exception!
      try { 
        form0.label();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Form form0 = new Form("org.mvel.conversion.BooleanCH$5");
      // Undeclared exception!
      try { 
        form0.kbd((Object) "org.mvel.conversion.BooleanCH$5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.String@0000000026");
      Submit submit0 = new Submit(xmlEntityRef0, "java.lang.String@0000000026", "java.lang.String@0000000026");
      Hidden hidden0 = new Hidden(submit0, "java.lang.String@0000000026", "java.lang.String@0000000026");
      // Undeclared exception!
      try { 
        submit0.h5((Object) hidden0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, "Eb", (String) null);
      // Undeclared exception!
      try { 
        submit0.h4();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "java.lang.String@0000000010", "java.lang.String@0000000010");
      // Undeclared exception!
      try { 
        fileInput0.h3((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "kG(<x7", "A{vntL+f;MF:QMLE=j");
      // Undeclared exception!
      try { 
        checkbox0.h3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Form form0 = new Form("xmI");
      Radio radio0 = new Radio(form0, "xmI", "xmI");
      DateInput dateInput0 = new DateInput(radio0, "xmI", "xmI", "xmI");
      // Undeclared exception!
      try { 
        dateInput0.h3();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Form form0 = new Form("?/,WrL-");
      // Undeclared exception!
      try { 
        form0.h2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.form("qTX15", (ActionExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Form", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.find("wheel.components.FormElement");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id wheel.components.FormElement on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("@5D");
      // Undeclared exception!
      try { 
        xmlEntityRef0.fileInput((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "Block_1", "Block_1");
      // Undeclared exception!
      try { 
        submit0.em();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Form form0 = new Form("INVOKEVIRTUAL ");
      // Undeclared exception!
      try { 
        form0.div();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "|z#!6)m7O9'[Xy=ib3\"", "P");
      Checkbox checkbox0 = new Checkbox(textInput0, "|z#!6)m7O9'[Xy=ib3\"", "|qKf%S@n@8I60flI");
      FileInput fileInput0 = new FileInput((Component) null, "|qKf%S@n@8I60flI", "Class");
      // Undeclared exception!
      try { 
        checkbox0.dd((Object) fileInput0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(",9[[U:if3b.");
      // Undeclared exception!
      try { 
        xmlEntityRef0.cite((Object) ",9[[U:if3b.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Form form0 = new Form("2HR95nB");
      // Undeclared exception!
      try { 
        form0.button();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._wrapComponentId("feature name should not be null");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "eLf?s}Rt");
      block0.hashCode();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.object();
      Component component0 = errorPage0.noframes();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertEquals("Block_3", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.getComponents();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("wheel_ErrorPage");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(errorPage0, "J4eVQ94JMlG4?R", (String) null, (ISelectModel) null, elExpression0);
      Form form0 = new Form("BH-7#@${eB");
      // Undeclared exception!
      try { 
        form0.addFormElement(checkboxGroup0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "wheel_ErrorPage", "");
      // Undeclared exception!
      try { 
        fileInput0._getTopLevelComponent(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Form form0 = new Form("object");
      Form form1 = form0._getForm(true);
      assertEquals("object", form1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "kG(<x7", "A{vntL+f;MF:QMLE=j");
      List<Component> list0 = checkbox0._getChildren();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "", "No top level component found.");
      Radio radio0 = new Radio(textArea0, "No top level component found.", "");
      radio0.afterAdd();
      assertTrue(radio0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "\n  **  ENTER -> {bean: ", "\n  **  ENTER -> {bean: ");
      checkbox0.label("\n  **  ENTER -> {bean: ");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "wheel_ErrorPage", "");
      ActionExpression actionExpression0 = new ActionExpression("wheel_ErrorPage");
      FileInput fileInput1 = (FileInput)fileInput0.actionBinding(actionExpression0);
      assertEquals(1000, fileInput1.getMaxRequestSize());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "java.lang.String@0000000010", "java.lang.String@0000000010");
      Hidden hidden0 = new Hidden(radio0, "Y", "Y");
      // Undeclared exception!
      try { 
        hidden0.remove((Component) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.end();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not end compoennt, already at root.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("");
      Table table0 = new Table(block0, "");
      Component component0 = table0.end();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      // Undeclared exception!
      try { 
        tableRow0.end("/HDyN]r3(&)u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression '/HDyN]r3(&)u'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Text text0 = new Text(errorPage0, errorPage0);
      TableBlock tableBlock0 = new TableBlock(text0);
      Link link0 = new Link(tableBlock0, errorPage0);
      // Undeclared exception!
      try { 
        link0.dateFormat(":", ":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.legend();
      ElExpression elExpression0 = new ElExpression("wheel_ErrorPage");
      // Undeclared exception!
      try { 
        errorPage0.findAll(elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate finder expression ' wheel_ErrorPage'
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.address();
      ActionExpression actionExpression0 = new ActionExpression("<");
      ActionExpression actionExpression1 = actionExpression0.setOwner(component0);
      component0.sub((Object) errorPage0);
      // Undeclared exception!
      try { 
        actionExpression1.getUpdateComponentFunctionCall();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id null on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.get("QCBm|TV>j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id 'QCBm|TV>j'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "i", "i");
      Hidden hidden0 = new Hidden(checkbox0, "Lu.cO{'oSQ", "Lu.cO{'oSQ");
      // Undeclared exception!
      try { 
        hidden0.up(46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Form form0 = new Form("object");
      Component component0 = form0.up((-622));
      assertEquals("object", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.String@0000000026");
      DateInput dateInput0 = new DateInput(xmlEntityRef0, "KY", "KY", (CharSequence) null);
      boolean boolean0 = xmlEntityRef0.equals(dateInput0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "kG(<x7", "A{vntL+f;MF:QMLE=j");
      boolean boolean0 = checkbox0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      table0.tbody();
      table0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "/HDyN]r3(&)u", "/HDyN]r3(&)u");
      Label label0 = new Label(checkbox0, checkbox0);
      FileInput fileInput0 = new FileInput(label0, "u/tQi4", "u/tQi4");
      fileInput0.addInternalRenderHint((String) null);
      fileInput0.addInternalRenderHint("Could not evaluate expression ");
      assertTrue(label0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("yes");
      Form form0 = new Form(errorPage0, "qR", actionExpression0);
      Submit submit0 = new Submit(form0, "<!--", "[:aO NEk&rBs");
      form0.add(submit0);
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.object();
      Radio radio0 = new Radio(errorPage0, "P=*\"ZR:_HD?\"wmo>", "java.lang.String@0000000026");
      // Undeclared exception!
      try { 
        component0.add(radio0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add a form element. No surrounding form found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      block0.getComponents();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(block0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0._getTopLevelComponent(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Form form0 = new Form("dir");
      Form form1 = form0._getVisibleForm(true);
      assertEquals("dir", form1.getComponentId());
      assertNotNull(form1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "Block_1", "Block_1");
      Form form0 = submit0._getVisibleForm(true);
      assertNull(form0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Form form0 = new Form("expected <!-- for comment start");
      Form form1 = form0._getVisibleForm(false);
      assertEquals("expected <!-- for comment start", form0.getComponentId());
      assertNull(form1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("yes");
      Form form0 = new Form(errorPage0, "qR", actionExpression0);
      Submit submit0 = new Submit(form0, "<!--", "[:aO NEk&rBs");
      // Undeclared exception!
      try { 
        submit0.reset("frameset");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Text text0 = new Text(errorPage0, errorPage0);
      ActionExpression actionExpression0 = new ActionExpression("iOmXd^>=O@JiJ<:");
      Form form0 = new Form(text0, "iOmXd^>=O@JiJ<:", actionExpression0);
      // Undeclared exception!
      try { 
        form0.id("iOmXd^>=O@JiJ<:");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("");
      Table table0 = new Table(block0, "");
      assertEquals("Table_1", table0.getComponentId());
      
      table0.id((String) null);
      assertFalse(table0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "object", "object");
      // Undeclared exception!
      try { 
        textArea0.id("5XQrMV_XXLt2]l6@*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      table0.tbody();
      // Undeclared exception!
      try { 
        table0.renderComponent((XmlSerializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.RenderableComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, errorPage0);
      link0._renderActions((XmlSerializer) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(link0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "wheel_ErrorPage", "");
      String[] stringArray0 = new String[4];
      FileInput fileInput1 = (FileInput)fileInput0.attributes(stringArray0);
      assertEquals("wheel_ErrorPage", fileInput1.getFormElementName());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        errorPage0.attributes(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attributes must be given in name, value pairs.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.String@0000000026");
      String[] stringArray0 = new String[0];
      Component component0 = xmlEntityRef0.attributes(stringArray0);
      assertFalse(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[8];
      errorPage0.attributes(stringArray0);
      errorPage0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.attributes((String[]) null);
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      Table table0 = new Table(checkbox0, "");
      TableBlock tableBlock0 = table0.colgroup();
      tableBlock0.renderHint("");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, " ~CU2e(]", "base");
      // Undeclared exception!
      try { 
        radio0.code();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "u", "u");
      // Undeclared exception!
      try { 
        checkbox0.em((Object) checkbox0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "", "&X");
      // Undeclared exception!
      try { 
        fileInput0.h1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("I]!/lc'oZ,ii'WHSh");
      TableBlock tableBlock0 = new TableBlock(block0);
      TableRow tableRow0 = tableBlock0.tr();
      Component component0 = tableRow0.cite((Object) errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Component component0 = tableBlock0.del((Object) errorPage0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "i!QM#bc>j5%Mca.YX6");
      TableRow tableRow0 = new TableRow(table0);
      FileInput fileInput0 = new FileInput(tableRow0, "jFF]", "No corresponding component found for end expression '");
      // Undeclared exception!
      try { 
        fileInput0.h5((Object) "jFF]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dfn();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.sup();
      assertTrue(component0._isGeneratedId());
      
      Table table0 = new Table(errorPage0, "'");
      table0.id("");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      Component component0 = table0.s((Object) errorPage0);
      Component component1 = component0.fieldset();
      component1.noscript();
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Form form0 = new Form("T@K>T@'eVJa>[#*+");
      // Undeclared exception!
      try { 
        form0.q();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Form form0 = new Form("");
      DateInput dateInput0 = new DateInput(form0, "q", "meta", "");
      // Undeclared exception!
      try { 
        dateInput0.span();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.abbr();
      Component component1 = errorPage0.legend((Object) component0);
      Component component2 = component0.pre((Object) component1);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component2._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      NumberInput numberInput0 = new NumberInput((Component) null, "B|R<=c@GQNn`Ld", "6q'pC</-");
      // Undeclared exception!
      try { 
        numberInput0.td();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Td component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      Component component0 = table0.s((Object) errorPage0);
      Component component1 = component0.fieldset();
      TableBlock tableBlock0 = table0.tbody();
      tableBlock0.addFirst(component1);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Link link0 = new Link(errorPage0, object0);
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        link0.select("", dynamicSelectModel0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "'");
      ActionExpression actionExpression0 = new ActionExpression("'");
      // Undeclared exception!
      try { 
        table0.form("", actionExpression0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A Form must always have a given componentId.
         //
         verifyException("wheel.components.Form", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      // Undeclared exception!
      try { 
        tableBlock0.body();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Integer integer0 = new Integer(256);
      Component component0 = errorPage0.p((Object) integer0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      InitialFieldValue initialFieldValue0 = new InitialFieldValue(errorPage0, "V''t{H[c]\"B");
      Component component0 = errorPage0.a((Object) initialFieldValue0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("BQ^");
      Form form0 = new Form(errorPage0, "BQ^", actionExpression0);
      Component component0 = form0.label((Object) actionExpression0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.caption();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "4#,wydk\"iTkB^sI}dl3", "");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression((String) null);
      RadioGroup radioGroup0 = new RadioGroup(hidden0, "org.mvel.MVELInterpretedRuntime", "", stringSelectModel0, elExpression0);
      TableRow tableRow0 = new TableRow(radioGroup0);
      Component component0 = tableRow0.param(elExpression0, "org.mvel.MVELInterpretedRuntime");
      assertEquals("Any_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("RadioGroup_1", radioGroup0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "eLf?s}Rt");
      Component component0 = block0.ol();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Form form0 = new Form("");
      ElExpression elExpression0 = new ElExpression("`");
      // Undeclared exception!
      try { 
        form0.big((Object) elExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("I]!/lc'oZ,ii'WHSh");
      TableBlock tableBlock0 = new TableBlock(block0);
      TableRow tableRow0 = tableBlock0.tr();
      tableRow0.td();
      MXSerializer mXSerializer0 = new MXSerializer();
      // Undeclared exception!
      try { 
        tableRow0._render(mXSerializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // setOutput() must called set before serialization can start
         //
         verifyException("org.xmlpull.mxp1_serializer.MXSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "@zGYxzko)gal*", "b]utO\"q!6DNf");
      // Undeclared exception!
      try { 
        checkbox0.strong((Object) checkbox0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, "(Ljava/lang/Object;)Ljava/lang/Object;", "(Ljava/lang/Object;)Ljava/lang/Object;");
      // Undeclared exception!
      try { 
        submit0.thead();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Label label0 = new Label(errorPage0, errorPage0);
      TableRow tableRow0 = new TableRow(label0);
      TableBlock tableBlock0 = new TableBlock(tableRow0, (String) null);
      Submit submit0 = new Submit(tableBlock0, (String) null, (String) null);
      Checkbox checkbox0 = new Checkbox(errorPage0, "fvt5\\/Y", "F");
      submit0._setParent(checkbox0);
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "java.lang.StringBuffer@0000000007", "TO:&#phl>K");
      Text text0 = new Text(checkbox0, checkbox0);
      // Undeclared exception!
      try { 
        text0.address((Object) errorPage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("bdo");
      xmlEntityRef0._getActions();
      assertEquals("bdo", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("");
      block0.style();
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "j", "j");
      // Undeclared exception!
      try { 
        fileInput0.u((Object) "j");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("h4");
      // Undeclared exception!
      try { 
        xmlEntityRef0.br();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Any any0 = tableBlock0.col();
      // Undeclared exception!
      try { 
        any0.table();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("H_0N{D#_Kc>PH");
      // Undeclared exception!
      try { 
        xmlEntityRef0.textInput("H_0N{D#_Kc>PH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Form form0 = new Form("]enm?lwtTE0V1sWI;c");
      // Undeclared exception!
      try { 
        form0.th();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Th component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.var();
      component0.action("n'{gc'(|");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Label label0 = new Label(errorPage0, errorPage0);
      InitialFieldValue initialFieldValue0 = new InitialFieldValue(label0, "~M>QU");
      Text text0 = (Text)errorPage0.rawText(initialFieldValue0);
      assertTrue(text0.isCdata());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(text0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "java.lang.StringBuffer@0000000007", ")(#p4Uv<B2");
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.StringBuffer@0000000007");
      DynamicSelectModel dynamicSelectModel0 = xmlEntityRef0.selectModel();
      ElExpression elExpression0 = new ElExpression("wheel_ErrorPage");
      // Undeclared exception!
      try { 
        textArea0.radioGroup("java.lang.StringBuffer@0000000007", dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.sub();
      assertTrue(component0._isGeneratedId());
      
      errorPage0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.button();
      // Undeclared exception!
      try { 
        component0.submit("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("J\"83");
      // Undeclared exception!
      try { 
        xmlEntityRef0.link();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Form form0 = new Form((String) null);
      Checkbox checkbox0 = new Checkbox(form0, "~HAxI}K!<Dz,*\"", "~HAxI}K!<Dz,*\"");
      // Undeclared exception!
      try { 
        checkbox0.cite();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("");
      Table table0 = new Table(block0, "");
      table0.big();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("lzv1f~uu2F?-JaZ@%k");
      // Undeclared exception!
      try { 
        xmlEntityRef0.iframe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("BQ^");
      Form form0 = new Form(errorPage0, "BQ^", actionExpression0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        form0.message("", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.strike();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "4dS=[r2PzPpgM'J=^", "4dS=[r2PzPpgM'J=^");
      // Undeclared exception!
      try { 
        checkbox0.h1((Object) checkbox0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Form form0 = new Form("OVB-I~fV+J+!#P5n");
      // Undeclared exception!
      try { 
        form0.dd((Object) "OVB-I~fV+J+!#P5n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("I]!/lc'oZ,ii'WHSh");
      TableBlock tableBlock0 = new TableBlock(block0);
      TableRow tableRow0 = tableBlock0.tr();
      Label label0 = new Label(errorPage0, errorPage0);
      tableRow0._applyFormat(label0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(label0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("");
      Table table0 = new Table(block0, "");
      FileInput fileInput0 = new FileInput(table0, "0Ju*q3EH%l~MQ)Y7ZN", (String) null);
      // Undeclared exception!
      try { 
        fileInput0.title("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.tt();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("null");
      // Undeclared exception!
      try { 
        xmlEntityRef0.hr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.abbr();
      Component component1 = component0.script();
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "2jaD,:=.{c8j)", "iJ[WRr2/./q4WlHtS");
      Component component0 = errorPage0.dfn((Object) textInput0);
      ElExpression elExpression0 = new ElExpression("wheel_ErrorPage");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(errorPage0, "J4eVQ94JMlG4?R", (String) null, (ISelectModel) null, elExpression0);
      NumberInput numberInput0 = new NumberInput(checkboxGroup0, "J4eVQ94JMlG4?R", "wheel_ErrorPage");
      Component component1 = component0.pre();
      Component component2 = component1.small((Object) numberInput0);
      assertTrue(component2._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("wheel_ErrorPage");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(errorPage0, "J4eVQ94JMlG4?R", (String) null, (ISelectModel) null, elExpression0);
      Component component0 = checkboxGroup0.sub((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("wheel_ErrorPage");
      // Undeclared exception!
      try { 
        xmlEntityRef0.htmlText("wheel_ErrorPage");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      TextArea textArea0 = new TextArea(tableRow0, "Block_1", "Block_1");
      Radio radio0 = new Radio(textArea0, "Block_1", "jpB9?Es'/");
      // Undeclared exception!
      try { 
        radio0.li((Object) "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.h5();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.bdo("S'Xa");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Block_1");
      Component component0 = errorPage0.h3((Object) xmlEntityRef0);
      assertTrue(component0._isGeneratedId());
      assertEquals("Block_1", xmlEntityRef0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.code((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("h6");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, " ]^;HlG5C}m\"UKe8", " ]^;HlG5C}m\"UKe8");
      TableRow tableRow0 = new TableRow(hidden0);
      Checkbox checkbox0 = new Checkbox(tableRow0, " ]^;HlG5C}m\"UKe8", " ]^;HlG5C}m\"UKe8");
      // Undeclared exception!
      try { 
        checkbox0.numberInput(" ]^;HlG5C}m\"UKe8", (CharSequence) " ]^;HlG5C}m\"UKe8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.text("\n  **  ENTER -> {bean: ");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      TextInput textInput0 = new TextInput(block0, (String) null, (String) null);
      // Undeclared exception!
      try { 
        textInput0.h4((Object) errorPage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("I]!/lc'oZ,ii'WHSh");
      Component component0 = block0.h4();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("BQ^");
      Form form0 = new Form(errorPage0, "BQ^", actionExpression0);
      Component component0 = form0.span((Object) actionExpression0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("#_E#+S;')7<r8VH;zg");
      // Undeclared exception!
      try { 
        xmlEntityRef0.b();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("@5D");
      Submit submit0 = new Submit(xmlEntityRef0, "noscript", "3<'_m>(|w)");
      // Undeclared exception!
      try { 
        submit0.b((Object) "@5D");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, errorPage0);
      // Undeclared exception!
      try { 
        link0.buttonInput("Z+3ypz=/+qiM1Ot");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.entity("");
      assertEquals("wheel_components_XmlEntityRef", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.u();
      // Undeclared exception!
      try { 
        component0.passwordInput("[Sk26ceesd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "");
      // Undeclared exception!
      try { 
        tableBlock0.encode("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Boolean boolean0 = Boolean.FALSE;
      Component component0 = errorPage0.var((Object) boolean0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.ins();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "eLf?s}Rt");
      // Undeclared exception!
      try { 
        block0.colgroup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Colgroup component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("div");
      // Undeclared exception!
      try { 
        xmlEntityRef0.acronym();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("SRN");
      // Undeclared exception!
      try { 
        xmlEntityRef0.tt((Object) "SRN");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.radio("getTagName() == 'script' || getTagName() == 'style'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h2();
      Component component1 = component0.wrapSelf();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Form form0 = new Form("Component with id ");
      // Undeclared exception!
      try { 
        form0.ul();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, ")|~3Vw&6ApY:/;3", ")|~3Vw&6ApY:/;3");
      // Undeclared exception!
      try { 
        textArea0.abbr((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.div();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "", "No top level component found.");
      // Undeclared exception!
      try { 
        textArea0.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.em();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = errorPage0.getComponentName();
      assertEquals("ErrorPage", string0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "span", "span");
      // Undeclared exception!
      try { 
        fileInput0.base((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.strike(object0);
      Component component1 = component0.legend((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "B#<_S8dI;B$N#[K,", "java.lang.StringBuffer@0000000007");
      // Undeclared exception!
      try { 
        textArea0.q((Object) "B#<_S8dI;B$N#[K,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.a();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Label label0 = new Label(errorPage0, errorPage0);
      TableRow tableRow0 = new TableRow(label0);
      TableBlock tableBlock0 = new TableBlock(tableRow0, (String) null);
      Submit submit0 = new Submit(tableBlock0, (String) null, (String) null);
      // Undeclared exception!
      try { 
        submit0.del();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      Component component0 = table0.s((Object) errorPage0);
      Component component1 = component0.fieldset();
      component1.i();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.imageSubmit((String) null, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.tr();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tr component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.form(" on the page.");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "pu2", "java.lang.String@0000000010");
      // Undeclared exception!
      try { 
        checkbox0.dl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.samp((Object) form0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Form form0 = new Form("6Rl(SH3");
      // Undeclared exception!
      try { 
        form0.img(" ]2qZ<\"", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      TableBlock tableBlock0 = new TableBlock(checkbox0, "");
      TextArea textArea0 = new TextArea(tableBlock0, "^}Ro'K$m9MbsOT&j*", "^}Ro'K$m9MbsOT&j*");
      // Undeclared exception!
      try { 
        textArea0.numberInput("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      Table table0 = new Table(checkbox0, "");
      TableBlock tableBlock0 = table0.colgroup();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        tableBlock0.checkboxGroup("clone", dynamicSelectModel0, (ElExpression) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "F!`LTu|7", "F!`LTu|7");
      ElExpression elExpression0 = new ElExpression("");
      // Undeclared exception!
      try { 
        checkbox0.fileInput("[>h9yD51G%f\"a9R", elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, (String) null, "pre");
      // Undeclared exception!
      try { 
        submit0.i((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Form form0 = new Form("object");
      // Undeclared exception!
      try { 
        form0.fileInput("object");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.abbr();
      Component component1 = errorPage0.legend((Object) component0);
      component1._setComponentId("uf=");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000010");
      Map<String, String> map0 = form0.getAttributes();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.checkbox("java.lang.String@0000000020");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000010");
      // Undeclared exception!
      try { 
        form0.tbody();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tbody component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("cp*");
      // Undeclared exception!
      try { 
        xmlEntityRef0.blockquote();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "Long", "Long");
      // Undeclared exception!
      try { 
        checkbox0.strong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringBuffer stringBuffer0 = new StringBuffer(1460);
      Any any0 = new Any(errorPage0, stringBuffer0);
      // Undeclared exception!
      try { 
        any0.ins((Object) any0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "o", "java.lang.String@0000000010");
      FormElement formElement0 = checkbox0.fieldBinding("o");
      assertEquals("o", formElement0.getFormElementName());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.p();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("org.mvel.util.ExecutionStack");
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        xmlEntityRef0.area(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "_");
      TableBlock tableBlock0 = table0.colgroup();
      Component component0 = table0.acronym((Object) tableBlock0);
      // Undeclared exception!
      try { 
        component0.hidden("_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.abbr();
      Component component1 = errorPage0.legend((Object) component0);
      Component component2 = component1.h3();
      assertTrue(component2._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h6();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.abbr();
      Component component1 = component0.s();
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.requestFocus();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Form form0 = new Form("script");
      // Undeclared exception!
      try { 
        form0.dateInput("script", "/META-INF/services/org.xmlpull.v1.XmlPullParserFactory");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.var();
      component0.date();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.li();
      Table table0 = new Table(component0, "Stack trace:");
      errorPage0.sup((Object) table0);
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      TextInput textInput0 = new TextInput(xmlEntityRef0, "The FileFilter must not be null", "src");
      // Undeclared exception!
      try { 
        textInput0.small();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.frame("java.lang.String@0000000010");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.kbd((Object) "'");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.samp();
      Component component1 = component0.nbsp();
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      TableBlock tableBlock0 = table0.tbody();
      tableBlock0.label();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "i!QM#bc>j5%Mca.YX6");
      TableRow tableRow0 = new TableRow(table0);
      Component component0 = tableRow0.map("hIdoQ]__z");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
      assertFalse(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.actionBinding((String) null);
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("org.mvel.conversion.DoubleCH$10");
      // Undeclared exception!
      try { 
        xmlEntityRef0.tfoot();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tfoot component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h6((Object) xmlEntityRef0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "o", "java.lang.String@0000000010");
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        checkbox0.h2((Object) xmlEntityRef0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "object", "object");
      Component component0 = textArea0.clasS("object");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("object", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "T FWfc\"-$QGT$~B", "T FWfc\"-$QGT$~B");
      FileInput fileInput0 = new FileInput(hidden0, "16L-GM5)(P^MGD", "16L-GM5)(P^MGD");
      DynamicSelectModel dynamicSelectModel0 = fileInput0.selectModel();
      // Undeclared exception!
      try { 
        hidden0.multiSelect("16L-GM5)(P^MGD", dynamicSelectModel0, "java.lang.StringBuilder@0000000009");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Label label0 = new Label(errorPage0, errorPage0);
      Checkbox checkbox0 = new Checkbox(label0, "^ p`L", "^ p`L");
      Submit submit0 = new Submit(checkbox0, "^ p`L", "rC;>19qb'LX1l_}o,");
      // Undeclared exception!
      try { 
        submit0.legend();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.kbd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Form form0 = new Form("");
      String string0 = form0.toString();
      assertEquals("<form id=\"wheel_components_Form\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "=");
      Submit submit0 = new Submit(checkbox0, "K1rgh", "5B;|4uI*7PooK");
      // Undeclared exception!
      try { 
        checkbox0.dt((Object) submit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "parser must be on START_TAG to check for empty element", "SHs'x-PBck$n}sG/].");
      // Undeclared exception!
      try { 
        checkbox0.dd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
