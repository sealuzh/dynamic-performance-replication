/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 15:42:48 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.Locale;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 971.961474786;
      doubleArray1[1] = (-612.66553950486);
      doubleArray1[2] = (-3119.6937787);
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-753.16382142796);
      doubleArray1[7] = 1377.51091171648;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-753.16382142796);
      doubleArray2[2] = (-3119.6937787);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 971.961474786;
      doubleArray2[5] = 1.0;
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      double double0 = cRSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArray0);
      assertEquals(1, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(1, cRSMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      double double0 = cRSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(1, 1, (double) 1, (Random) mockRandom0);
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix0.to(matrixFactory0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 4184;
      int int1 = 1286;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4184, 1286);
      cRSMatrix0.rotate();
      cRSMatrix0.getColumn(1286);
      cRSMatrix0.removeLastColumn();
      cRSMatrix0.blankOfShape(int1, int0);
      int int2 = 0;
      MockRandom mockRandom0 = new MockRandom(int2);
      CRSMatrix.random(int2, int1, (double) int1, (Random) mockRandom0);
      int int3 = 1560;
      cRSMatrix0.minInRow(int3);
      int int4 = 13;
      CRSMatrix.random(int0, int4, (double) int2, (Random) mockRandom0);
      String string0 = "t\"!8ji)";
      CRSMatrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 3;
      CRSMatrix cRSMatrix0 = new CRSMatrix(3, 1, 1);
      Matrix matrix0 = cRSMatrix0.rotate();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.rotate();
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(2451);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2451
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)3;
      byteArray0[0] = (byte)3;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1, 1);
      cRSMatrix0.setAll(1);
      RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(1565);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1565, 1565);
      cRSMatrix0.copyOfShape(1573, 294);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1920);
      int int0 = 0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformColumn(0, vectorFunction0);
      cRSMatrix0.infinityNorm();
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.rowMajorIterator();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-85);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte)44;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-74);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-65);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      CRSMatrix cRSMatrix1 = CRSMatrix.fromBinary(byteArray0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      cRSMatrix1.withInverter(linearAlgebra_InverterFactory0);
      double double0 = 1578.0664;
      cRSMatrix1.setAll(double0);
      int int1 = 509;
      int int2 = 490;
      CRSMatrix.zero((int) byte2, int1, int2);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) byteArray0[4];
      intArray0[1] = (int) byte0;
      intArray0[2] = (int) byte4;
      intArray0[3] = (int) byteArray0[4];
      intArray0[4] = (int) byte3;
      intArray0[5] = int0;
      intArray0[6] = (int) byteArray0[5];
      intArray0[7] = (int) byte0;
      int int3 = 0;
      intArray0[8] = int3;
      cRSMatrix1.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transformColumn(1375, vectorFunction0);
      double double0 = cRSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2, 2);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      assertEquals(2.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 3181.0;
      doubleArray1[3] = (-1115.1884715);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 3181.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 571.7;
      doubleArray0[1] = doubleArray2;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertEquals(3181.0, cRSMatrix0.max(), 0.01);
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(0.5, cRSMatrix0.density(), 0.01);
      assertEquals((-1115.1884715), cRSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toColumnMajorSparseMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow(13, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(3, 3);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix0.getColumn(3);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(3, 3, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[7] = (double) 0;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transformColumn(0, vectorFunction0);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow((-3566));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) null);
      Matrix.randomSymmetric(0, (Random) null);
      cRSMatrix0.transform((MatrixFunction) null);
      cRSMatrix0.iteratorOfRow(0);
      cRSMatrix0.min();
      int int0 = (-3077);
      // Undeclared exception!
      try { 
        cRSMatrix0.setRow(1179, (-1.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1179
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.update((MatrixFunction) null);
      double double0 = new Integer(2864);
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(2864);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2865
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      SparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0);
      Matrix.randomSymmetric(0, (Random) null);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix1.toMatrixMarket();
      // Undeclared exception!
      try { 
        cRSMatrix1.set(0, 0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)77;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 3;
      CRSMatrix cRSMatrix0 = new CRSMatrix(3, 3);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.CANADA_FRENCH;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      cRSMatrix0.mkString(numberFormat0);
      cRSMatrix0.eachNonZeroInColumn(3, vectorProcedure0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1920);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1920, 188.53158083, (double)1920, 2858.7742084, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cRSMatrix0.transformColumn(0, vectorFunction0);
      cRSMatrix0.infinityNorm();
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.rowMajorIterator();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-85);
      byteArray0[0] = byte0;
      VectorAccumulator vectorAccumulator0 = null;
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix0.getColumn(byte0);
      int int0 = 2539;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix0.updateAt(int0, byte0, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 3;
      CRSMatrix cRSMatrix0 = new CRSMatrix(3, 3);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.getDisplayVariant();
      NumberFormat.getNumberInstance(locale0);
      cRSMatrix0.eachNonZeroInColumn(3, vectorProcedure0);
      cRSMatrix0.sliceTopLeft(3, 3);
      cRSMatrix0.product();
      cRSMatrix0.swapColumns(3, 3);
      cRSMatrix0.add(146.12623284076);
      int int1 = (-1124);
      int int2 = (-2835);
      // Undeclared exception!
      try { 
        cRSMatrix0.set((-2835), (-1124), 2875.3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2835' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 1140;
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (double) 1140;
      doubleArray0[1] = (double) 1140;
      doubleArray0[2] = (double) 1140;
      doubleArray0[3] = (double) 1140;
      doubleArray0[0] = (double) 1140;
      doubleArray0[5] = 2607.254724602;
      doubleArray0[13] = (double) 1140;
      doubleArray0[7] = (double) 1140;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(1140, 1140, doubleArray0);
      int int1 = (-2841);
      cRSMatrix0.copyOfShape(int0, int1);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      cRSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      int int2 = 0;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInColumn(int2, vectorProcedure0);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.rowMajorIterator();
      int int3 = (-2468);
      cRSMatrix0.copyOfShape(int3, int1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      cRSMatrix0.manhattanNorm();
      intArray0[0] = 2734;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2734' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[7] = (double) 0;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 0.0);
      cRSMatrix0.setAll(Double.NEGATIVE_INFINITY);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(490, 0, 0);
      // Undeclared exception!
      try { 
        cRSMatrix1.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Vector vector0 = cRSMatrix0.getColumn(1133);
      assertEquals(0, vector0.length());
      
      cRSMatrix0.setAll(1133);
      assertEquals(0, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4184, 1286);
      cRSMatrix0.rotate();
      int int0 = 2904;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix.random(4184, 1286, (-856.2502456359), (Random) mockRandom0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      double double0 = 2858.7742084;
      CRSMatrix.diagonal(int0, double0);
      cRSMatrix0.getRow(int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(2884, 2884, 3131.6965271966, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2155, 2155, 2155);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      CRSMatrix.diagonal(1774, 2904);
      cRSMatrix0.getRow(2155);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.setAll(Double.NEGATIVE_INFINITY);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1920);
      cRSMatrix0.iteratorOfRow(28);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1920, 188.53158083, (double)1920, 2858.7742084, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cRSMatrix0.transformColumn(0, vectorFunction0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix0.infinityNorm();
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.rowMajorIterator();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-85);
      byteArray0[0] = byte0;
      VectorAccumulator vectorAccumulator1 = null;
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator1);
      cRSMatrix0.getColumn(byte0);
      int int0 = 2539;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix0.updateAt(int0, byte0, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1, 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      ((CRSMatrix) rowMajorSparseMatrix0).set(1, 1, 1);
      boolean boolean0 = ((CRSMatrix) rowMajorSparseMatrix0).nonZeroAt(1, 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.rotate();
      double double0 = cRSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.fromCSV("");
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toColumnMajorSparseMatrix();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(13, 0.0);
      cRSMatrix1.rank();
      cRSMatrix0.getRow(0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1, 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      ((CRSMatrix) rowMajorSparseMatrix0).set(1, 1, 1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      ((CRSMatrix) rowMajorSparseMatrix0).updateAt(1, 1, matrixFunction0);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(159, (-146.257));
      cRSMatrix0.rotate();
      int int0 = (-556);
      cRSMatrix0.minInRow(int0);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(2, 1, doubleArray0);
      int int1 = 660;
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>(1715);
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 2);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0, sparseVector0);
      // Undeclared exception!
      try { 
        cRSMatrix0.setRow(1, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 2. Should be: 1.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1, 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      ((CRSMatrix) rowMajorSparseMatrix0).set(1, 1, 1);
      rowMajorSparseMatrix0.multiplyByItsTranspose();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ((CRSMatrix) rowMajorSparseMatrix0).eachInRow(10, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.getColumn(298);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.blank();
      cRSMatrix0.toBinary();
      assertTrue(cRSMatrix0.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        SparseMatrix.random(0, 0, (double) 0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(995, 995);
      cRSMatrix0.copyOfShape(995, 995);
      cRSMatrix0.min();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) cRSMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        SparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 437;
      doubleArray1[1] = (double) 437;
      doubleArray1[2] = (double) 437;
      doubleArray1[3] = (double) 437;
      doubleArray1[4] = (double) 437;
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      denseMatrix0.rank();
      // Undeclared exception!
      try { 
        SparseMatrix.block(cRSMatrix0, cRSMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 1554;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (-3119.6937787);
      doubleArray0[4] = (double) 1554;
      CRSMatrix cRSMatrix0 = new CRSMatrix(3, 1554, 773, doubleArray0, (int[]) null, (int[]) null);
      // Undeclared exception!
      try { 
        cRSMatrix0.max();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.random(5, (-1641), 0.3, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      // Undeclared exception!
      SparseMatrix.random(437, 1310, 1.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)34).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      cRSMatrix0.swapColumns(34, 34);
      CRSMatrix cRSMatrix1 = new CRSMatrix(34, 34, 34);
      int int0 = cRSMatrix1.rank();
      int int1 = 0;
      cRSMatrix0.getRow(0);
      cRSMatrix1.blankOfShape(int1, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 3;
      int int1 = 1750;
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1750;
      doubleArray0[1] = (double) 1750;
      doubleArray0[2] = 1555.209676871545;
      RowMajorSparseMatrix.from1DArray(1750, 3, doubleArray0);
      Matrix.random(int0, int1, mockRandom0);
      int int2 = 35;
      cRSMatrix0.iteratorOfRow(int2);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 1739;
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(1739);
      cRSMatrix1.getColumn(1739);
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(1095, 561, 1);
      int[] intArray0 = new int[5];
      intArray0[0] = 1095;
      intArray0[1] = 1095;
      intArray0[2] = 1739;
      intArray0[3] = 1739;
      intArray0[4] = 1739;
      cRSMatrix2.select(intArray0, intArray0);
      cRSMatrix2.min();
      cRSMatrix1.setAll(int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 1739;
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(1739);
      cRSMatrix1.getColumn(1739);
      int int1 = 1095;
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(1095, 561, 1);
      cRSMatrix1.transpose();
      int[] intArray0 = new int[5];
      intArray0[0] = int1;
      intArray0[1] = int1;
      intArray0[2] = int0;
      int int2 = (-2895);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.transformColumn(int2, vectorFunction0);
      intArray0[3] = int0;
      intArray0[4] = int0;
      cRSMatrix2.select(intArray0, intArray0);
      cRSMatrix2.min();
      cRSMatrix1.setAll(int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(1739);
      cRSMatrix1.getColumn(1739);
      CRSMatrix.zero(1095, 561, 1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachNonZeroInRow(1095, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Locale locale0 = Locale.GERMAN;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      cRSMatrix0.mkString(numberFormat0);
      RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix0.product();
      cRSMatrix0.swapColumns((-1790), (byte) (-24));
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(1739);
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(1095, 1739, 1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix3 = CRSMatrix.block(cRSMatrix2, cRSMatrix0, cRSMatrix1, cRSMatrix1);
      double double0 = 1478.1246245;
      String string0 = "/hw6";
      Matrix.fromCSV(string0);
      cRSMatrix3.setAll(double0);
      cRSMatrix3.nonZeroRowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      cRSMatrix0.getColumn(4);
      int int0 = 2019;
      // Undeclared exception!
      try { 
        CRSMatrix.zero(0, 13, 2019);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2, 2);
      Matrix matrix0 = cRSMatrix0.removeFirstColumn();
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, cRSMatrix0, matrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)34).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      cRSMatrix0.swapColumns(34, 34);
      CRSMatrix cRSMatrix1 = new CRSMatrix(34, 34, 34);
      cRSMatrix1.rank();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.maxInRow(0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      mockRandom0.longs();
      SparseMatrix.random(1582, 1582, 4.9E-324, (Random) mockRandom0);
      cRSMatrix0.maxInRow(1582);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 13;
      MockRandom mockRandom0 = new MockRandom(13);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(13, 1.0, (Random) mockRandom0);
      rowMajorSparseMatrix0.toSparseMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.multiplyByItsTranspose();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.foldRow(Integer.MAX_VALUE, vectorAccumulator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483647
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)34).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      cRSMatrix0.swapColumns(34, 34);
      CRSMatrix cRSMatrix1 = new CRSMatrix(34, 34, 34);
      cRSMatrix1.rank();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.minInRow(9);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.swapColumns(34, 34);
      CRSMatrix cRSMatrix1 = new CRSMatrix(8, 34, 8);
      int int0 = cRSMatrix1.rank();
      cRSMatrix0.maxInRow(0);
      int int1 = (-336);
      MockRandom mockRandom0 = new MockRandom(int1);
      CRSMatrix.randomSymmetric(int1, (double) int0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)34).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      cRSMatrix0.swapColumns(34, 34);
      CRSMatrix cRSMatrix1 = new CRSMatrix(34, 34, 34);
      cRSMatrix1.rank();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2117;
      intArray0[3] = 0;
      intArray0[4] = 0;
      cRSMatrix1.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.copyOfShape(1000, 13);
      int[] intArray0 = new int[1];
      intArray0[0] = 1000;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.eachInRow(981, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1, 1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldRows(vectorAccumulator0);
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1, 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cRSMatrix0.toRowMajorSparseMatrix();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.update((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(3, 3);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      cRSMatrix0.swapColumns(3, 3);
      CRSMatrix cRSMatrix1 = new CRSMatrix(1, 3, 1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.forEach(consumer0);
      cRSMatrix0.rank();
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(349);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 349
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1);
      cRSMatrix0.setAll(1);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix1 = new CRSMatrix(80, 13, 80);
      cRSMatrix1.setAll((-4083.471));
      assertEquals((-4083.471), cRSMatrix1.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(41);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(41, 1.0, (Random) mockRandom0);
      ((CRSMatrix) rowMajorSparseMatrix0).maxInRow(10);
      MockRandom mockRandom1 = new MockRandom(41);
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(11, 0.0, (Random) mockRandom1);
      cRSMatrix0.minInRow(4);
      org.evosuite.runtime.Random.setNextRandom(4);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      ((CRSMatrix) rowMajorSparseMatrix0).to(matrixFactory0);
      int int0 = 62;
      cRSMatrix0.getRow(int0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(13);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(13, 1.0, (Random) mockRandom0);
      ((CRSMatrix) rowMajorSparseMatrix0).maxInRow(10);
      ((CRSMatrix) rowMajorSparseMatrix0).copyOfShape(13, 7);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ((CRSMatrix) rowMajorSparseMatrix0).eachInRow(981, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 981
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CRSMatrix.zero(2, 2);
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      int[] intArray1 = new int[9];
      intArray1[0] = 2;
      intArray1[1] = 2;
      intArray1[2] = 2158;
      intArray1[3] = 2;
      intArray1[5] = 2;
      intArray1[2] = 884257973;
      intArray1[7] = 2;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2, 2, 2, doubleArray0, intArray0, intArray1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(34.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        cRSMatrix0.update(matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(13);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.transform(matrixFunction0);
      Matrix.random(13, 13, mockRandom0);
      cRSMatrix0.eachNonZeroInColumn(10, vectorProcedure0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '14' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1974, 1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateRow(1974, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1975
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int[] intArray0 = new int[5];
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transformRow(0, vectorFunction0);
      intArray0[0] = 1428;
      intArray0[1] = (-4337);
      intArray0[2] = 5;
      intArray0[3] = (-1070);
      intArray0[4] = (-51);
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      ((CRSMatrix) rowMajorSparseMatrix0).select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(789, 789);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(13, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(13);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(13, 1.0, (Random) mockRandom0);
      MockRandom mockRandom1 = new MockRandom(13);
      ((CRSMatrix) rowMajorSparseMatrix0).minInRow(4);
      int[] intArray0 = new int[1];
      intArray0[0] = 4;
      ((CRSMatrix) rowMajorSparseMatrix0).select(intArray0, intArray0);
      ((CRSMatrix) rowMajorSparseMatrix0).nonZeroRowMajorIterator();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      ((CRSMatrix) rowMajorSparseMatrix0).eachInRow(4, vectorProcedure0);
      ((CRSMatrix) rowMajorSparseMatrix0).setAll(4);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)77;
      byteArray0[0] = (byte)77;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2, 2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      RowMajorSparseMatrix.identity(2242);
      cRSMatrix0.nonZeroIteratorOfRow(2);
      cRSMatrix0.toBinary();
      double[][] doubleArray0 = new double[6][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 2242;
      doubleArray1[1] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (double) 2242;
      doubleArray3[1] = (double) 2;
      doubleArray3[2] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = (double) 2;
      doubleArray4[2] = 1077.90874;
      doubleArray4[3] = (double) 2242;
      doubleArray4[4] = (double) 2;
      doubleArray4[5] = (-1.0);
      doubleArray4[6] = (double) 2;
      doubleArray4[7] = (double) 2;
      doubleArray4[8] = (double) 2;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 0.6926258176;
      doubleArray5[1] = (double) 2;
      doubleArray5[2] = (-1.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 1077.90874;
      doubleArray6[1] = 1077.90874;
      doubleArray6[2] = 1077.90874;
      doubleArray6[3] = 1077.90874;
      doubleArray6[4] = 1077.90874;
      doubleArray0[5] = doubleArray6;
      CRSMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1, 1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2, 2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2, (double)2, Double.POSITIVE_INFINITY, (-346.58)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      RowMajorSparseMatrix.identity(2242);
      cRSMatrix0.nonZeroIteratorOfRow(2);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      double[][] doubleArray0 = new double[6][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 2242;
      doubleArray1[1] = (-1.0);
      doubleArray0[0] = doubleArray1;
      CRSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      byte[] byteArray0 = cRSMatrix0.toBinary();
      CRSMatrix.fromBinary(byteArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      cRSMatrix0.getColumn(4);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      int int0 = 13;
      double double0 = Double.POSITIVE_INFINITY;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      cRSMatrix0.multiply(1.0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2340.049572939654, (-861.630760854129), (-52.0), 5102.2, 5096.28025043395).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      int int1 = (-1602);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.identity((-1602));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(13, 1.0, (Random) mockRandom0);
      MockRandom mockRandom1 = new MockRandom();
      ((CRSMatrix) rowMajorSparseMatrix0).minInRow(4);
      int[] intArray0 = new int[10];
      intArray0[0] = 4;
      ((CRSMatrix) rowMajorSparseMatrix0).select(intArray0, intArray0);
      ((CRSMatrix) rowMajorSparseMatrix0).toBinary();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1, 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      rowMajorSparseMatrix0.transformRow(1, vectorFunction0);
      ((CRSMatrix) rowMajorSparseMatrix0).set(1, 1, 1);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1, 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      rowMajorSparseMatrix0.setRow(1, (double) 1);
      ((CRSMatrix) rowMajorSparseMatrix0).set(1, 1, 1);
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow((-1594));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1593
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1, 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.3, (double)1).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = rowMajorSparseMatrix0.transformRow(1, vectorFunction0);
      ((CRSMatrix) rowMajorSparseMatrix0).set(1, 1, 1);
      matrix0.minInRow(1);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1, 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1, (double)1).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = rowMajorSparseMatrix0.transformRow(1, vectorFunction0);
      matrix0.maxInRow(1);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(16, (byte)32);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      Matrix.randomSymmetric((byte)32, mockRandom0);
      cRSMatrix0.minInRow(6);
      cRSMatrix0.maxInRow(6);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformRow(6, vectorFunction0);
      // Undeclared exception!
      try { 
        cRSMatrix0.set(6, 3806, 3806);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3806' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.3, (double)1).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = rowMajorSparseMatrix0.transformRow(1, vectorFunction0);
      ((CRSMatrix) rowMajorSparseMatrix0).set(1, 1, 1);
      matrix0.minInRow(1);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(16, (byte)32);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      Matrix.randomSymmetric((byte)32, mockRandom0);
      cRSMatrix0.minInRow(6);
      cRSMatrix0.maxInRow(6);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1703.206131), (double)(byte)32, 0.0, 0.0, (-1703.206131)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformRow(6, vectorFunction0);
      // Undeclared exception!
      try { 
        cRSMatrix0.set(16, (byte)32, 1643.67);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '16' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = new CRSMatrix(4, 1, 4);
      Matrix matrix0 = cRSMatrix0.copyOfRows(1);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(matrix0, matrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
