/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 14:58:55 GMT 2019
 */

package org.firebirdsql.gds.impl.wire;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.security.Principal;
import java.util.Collection;
import java.util.Enumeration;
import java.util.Set;
import javax.security.auth.Subject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.BlobParameterBuffer;
import org.firebirdsql.gds.DatabaseParameterBuffer;
import org.firebirdsql.gds.EventHandle;
import org.firebirdsql.gds.EventHandler;
import org.firebirdsql.gds.GDSException;
import org.firebirdsql.gds.IscBlobHandle;
import org.firebirdsql.gds.IscDbHandle;
import org.firebirdsql.gds.IscStmtHandle;
import org.firebirdsql.gds.IscSvcHandle;
import org.firebirdsql.gds.IscTrHandle;
import org.firebirdsql.gds.ServiceParameterBuffer;
import org.firebirdsql.gds.ServiceRequestBuffer;
import org.firebirdsql.gds.TransactionParameterBuffer;
import org.firebirdsql.gds.XSQLDA;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.AbstractIscTrHandle;
import org.firebirdsql.gds.impl.DbAttachInfo;
import org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl;
import org.firebirdsql.gds.impl.wire.BlobParameterBufferImp;
import org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.wire.EventHandleImp;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.gds.impl.wire.ServiceParameterBufferImp;
import org.firebirdsql.gds.impl.wire.ServiceRequestBufferImp;
import org.firebirdsql.gds.impl.wire.TransactionParameterBufferImpl;
import org.firebirdsql.gds.impl.wire.WireXdrInputStream;
import org.firebirdsql.gds.impl.wire.XdrInputStream;
import org.firebirdsql.gds.impl.wire.XdrOutputStream;
import org.firebirdsql.gds.impl.wire.isc_blob_handle_impl;
import org.firebirdsql.gds.impl.wire.isc_db_handle_impl;
import org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl;
import org.firebirdsql.gds.impl.wire.isc_svc_handle_impl;
import org.firebirdsql.gds.impl.wire.isc_tr_handle_impl;
import org.firebirdsql.jca.FBConnectionRequestInfo;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractJavaGDSImpl_ESTest extends AbstractJavaGDSImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertNull(abstractIscTrHandle0);
      
      byte[] byteArray0 = new byte[0];
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) isc_stmt_handle_impl0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) javaGDSImpl0;
      byte[] byteArray1 = javaGDSImpl0.iscExpandDpb(byteArray0, 5, (-2526), objectArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(5, objectArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertNotNull(isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      try { 
        javaGDSImpl0.iscAttachDatabase("PURE_JAVA", isc_db_handle_impl0, databaseParameterBufferImp0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to complete network request to host \"localhost\".
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(abstractIscTrHandle0);
      
      isc_stmt_handle_impl0.setStatementType(61);
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(61, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlPrepare((IscTrHandle) null, (IscStmtHandle) isc_stmt_handle_impl0, (String) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.deepCopy();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo(databaseParameterBufferImp0);
      assertNotNull(fBConnectionRequestInfo0);
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer0));
      
      javaGDSImpl0.addProcessId(fBConnectionRequestInfo0);
      assertNotSame(javaGDSImpl0, javaGDSImpl1);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertFalse(javaGDSImpl0.equals((Object)javaGDSImpl1));
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer0));
      
      BlobParameterBuffer blobParameterBuffer0 = javaGDSImpl0.createBlobParameterBuffer();
      assertNotNull(blobParameterBuffer0);
      assertNotSame(javaGDSImpl0, javaGDSImpl1);
      assertFalse(javaGDSImpl0.equals((Object)javaGDSImpl1));
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNull(isc_db_handle_impl0);
      
      try { 
        javaGDSImpl0.iscOpenBlob2((IscDbHandle) null, isc_tr_handle_impl0, (IscBlobHandle) null, blobParameterBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl0.unregisterTransaction();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = (isc_svc_handle_impl)javaGDSImpl0.createIscSvcHandle();
      assertFalse(isc_svc_handle_impl0.isValid());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertNotNull(isc_svc_handle_impl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      EventHandleImp eventHandleImp0 = new EventHandleImp("PURE_JAVA");
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals("PURE_JAVA", eventHandleImp0.getEventName());
      assertNotNull(eventHandleImp0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertNotNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscCreateDatabase("NONE", isc_db_handle_impl0, (DatabaseParameterBuffer) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_db_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_db_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.deepCopy();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      javaGDSImpl0.addProcessId(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp1 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp1);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = (isc_blob_handle_impl)javaGDSImpl0.createIscBlobHandle();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertEquals(0, isc_blob_handle_impl1.getRblId());
      assertFalse(isc_blob_handle_impl1.isEof());
      assertNotNull(isc_blob_handle_impl1);
      
      try { 
        javaGDSImpl0.iscGetSegment(isc_blob_handle_impl0, 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = (isc_tr_handle_impl)javaGDSImpl0.createIscTrHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl0);
      
      XSQLDA xSQLDA0 = new XSQLDA(73);
      assertNotNull(xSQLDA0);
      assertEquals(73, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
      assertEquals(73, xSQLDA0.sqld);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecute(isc_tr_handle_impl0, isc_stmt_handle_impl0, (-434), xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      XSQLDA xSQLDA0 = new XSQLDA(2);
      assertNotNull(xSQLDA0);
      assertEquals(2, xSQLDA0.sqld);
      assertEquals(2, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecImmed2((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) isc_tr_handle_impl0, "Nd&(1ZizYU2b", 3, xSQLDA0, xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNotNull(isc_stmt_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNull(isc_db_handle_impl0);
      
      try { 
        javaGDSImpl0.fbCancelOperation((IscDbHandle) null, 2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_db_handle_impl0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl1 = isc_blob_handle_impl0.getDb();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNull(isc_db_handle_impl1);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      Integer integer1 = new Integer((-141688239));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-141688239), (int)integer1);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.connect((isc_db_handle_impl) null, "Db(()?fgIBNa=:B", integer1, "Db(()?fgIBNa=:B", databaseParameterBufferImp0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-141688239
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      int int0 = (-867);
      javaGDSImpl0.receiveResponse(isc_db_handle_impl0, (-867));
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertTrue(isc_db_handle_impl0.isValid());
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0.getTr();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNull(isc_tr_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl0);
      
      XSQLDA xSQLDA0 = null;
      try {
        xSQLDA0 = new XSQLDA((-867));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.XSQLDA", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(1, xSQLDA0.version);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecuteImmediate((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) isc_tr_handle_impl0, "org.firebirdsql.jdbc.pid", 5, xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      XSQLDA xSQLDA0 = new XSQLDA(4);
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(4, xSQLDA0.sqln);
      assertEquals(4, xSQLDA0.sqld);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[6];
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      assertNotNull(xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      assertNotNull(xSQLVAR1);
      assertNotSame(xSQLVAR0, xSQLVAR1);
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqltype);
      assertEquals(0, xSQLVAR1.sqlscale);
      
      xSQLVARArray0[0] = xSQLVAR1;
      XSQLVAR xSQLVAR2 = xSQLVAR1.deepCopy();
      assertNotNull(xSQLVAR2);
      assertNotSame(xSQLVAR0, xSQLVAR2);
      assertNotSame(xSQLVAR0, xSQLVAR1);
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertNotSame(xSQLVAR1, xSQLVAR2);
      assertNotSame(xSQLVAR2, xSQLVAR0);
      assertNotSame(xSQLVAR2, xSQLVAR1);
      assertFalse(xSQLVAR0.equals((Object)xSQLVAR1));
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR2.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR2.equals((Object)xSQLVAR1));
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqltype);
      assertEquals(0, xSQLVAR1.sqlscale);
      assertEquals(0, xSQLVAR2.sqltype);
      assertEquals(0, xSQLVAR2.sqllen);
      assertEquals(0, xSQLVAR2.sqlscale);
      assertEquals(0, xSQLVAR2.sqlsubtype);
      
      xSQLVARArray0[1] = xSQLVAR2;
      XSQLVAR xSQLVAR3 = xSQLVAR1.deepCopy();
      assertNotNull(xSQLVAR3);
      assertNotSame(xSQLVAR0, xSQLVAR3);
      assertNotSame(xSQLVAR0, xSQLVAR2);
      assertNotSame(xSQLVAR0, xSQLVAR1);
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertNotSame(xSQLVAR1, xSQLVAR2);
      assertNotSame(xSQLVAR1, xSQLVAR3);
      assertNotSame(xSQLVAR3, xSQLVAR1);
      assertNotSame(xSQLVAR3, xSQLVAR2);
      assertNotSame(xSQLVAR3, xSQLVAR0);
      assertFalse(xSQLVAR0.equals((Object)xSQLVAR2));
      assertFalse(xSQLVAR0.equals((Object)xSQLVAR1));
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR2));
      assertFalse(xSQLVAR3.equals((Object)xSQLVAR1));
      assertFalse(xSQLVAR3.equals((Object)xSQLVAR2));
      assertFalse(xSQLVAR3.equals((Object)xSQLVAR0));
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqltype);
      assertEquals(0, xSQLVAR1.sqlscale);
      assertEquals(0, xSQLVAR3.sqlscale);
      assertEquals(0, xSQLVAR3.sqllen);
      assertEquals(0, xSQLVAR3.sqlsubtype);
      assertEquals(0, xSQLVAR3.sqltype);
      
      xSQLVARArray0[2] = xSQLVAR3;
      XSQLVAR xSQLVAR4 = new XSQLVAR();
      assertNotNull(xSQLVAR4);
      assertFalse(xSQLVAR4.equals((Object)xSQLVAR2));
      assertFalse(xSQLVAR4.equals((Object)xSQLVAR3));
      assertFalse(xSQLVAR4.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR4.equals((Object)xSQLVAR1));
      assertEquals(0, xSQLVAR4.sqlscale);
      assertEquals(0, xSQLVAR4.sqlsubtype);
      assertEquals(0, xSQLVAR4.sqltype);
      assertEquals(0, xSQLVAR4.sqllen);
      
      xSQLVARArray0[3] = xSQLVAR4;
      XSQLVAR xSQLVAR5 = new XSQLVAR();
      assertNotNull(xSQLVAR5);
      assertFalse(xSQLVAR5.equals((Object)xSQLVAR1));
      assertFalse(xSQLVAR5.equals((Object)xSQLVAR3));
      assertFalse(xSQLVAR5.equals((Object)xSQLVAR2));
      assertFalse(xSQLVAR5.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR5.equals((Object)xSQLVAR4));
      assertEquals(0, xSQLVAR5.sqlscale);
      assertEquals(0, xSQLVAR5.sqltype);
      assertEquals(0, xSQLVAR5.sqlsubtype);
      assertEquals(0, xSQLVAR5.sqllen);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      ServiceParameterBufferImp serviceParameterBufferImp0 = new ServiceParameterBufferImp();
      assertNotNull(serviceParameterBufferImp0);
      
      ServiceRequestBufferImp serviceRequestBufferImp0 = (ServiceRequestBufferImp)javaGDSImpl0.createServiceRequestBuffer(3489);
      assertEquals(3489, serviceRequestBufferImp0.getTaskIdentifier());
      assertNotNull(serviceRequestBufferImp0);
      
      try { 
        javaGDSImpl0.iscServiceQuery((IscSvcHandle) null, serviceParameterBufferImp0, serviceRequestBufferImp0, (byte[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid service handle
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl0.forgetResultSets();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      isc_tr_handle_impl0.setDbHandle(isc_db_handle_impl0);
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)72;
      // Undeclared exception!
      try { 
        javaGDSImpl1.iscTransactionInformation(isc_tr_handle_impl0, byteArray0, (byte)69);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "parseSqlInfo started");
      assertFalse(boolean0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      int int0 = javaGDSImpl0.iscVaxInteger((byte[]) null, 1681, (-814));
      assertEquals(0, int0);
      
      DbAttachInfo dbAttachInfo0 = new DbAttachInfo("I>hU:/9");
      assertEquals("I>hU", dbAttachInfo0.getServer());
      assertEquals("/9", dbAttachInfo0.getFileName());
      assertEquals(3050, dbAttachInfo0.getPort());
      assertNotNull(dbAttachInfo0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp1 = (DatabaseParameterBufferImp)databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBufferImp1);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBufferImp1);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBufferImp0);
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBufferImp0));
      
      try { 
        javaGDSImpl0.internalAttachDatabase(dbAttachInfo0, (IscDbHandle) isc_db_handle_impl0, (DatabaseParameterBuffer) databaseParameterBufferImp1, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to complete network request to host \"I>hU\".
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = (isc_svc_handle_impl)javaGDSImpl0.createIscSvcHandle();
      assertFalse(isc_svc_handle_impl0.isValid());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertNotNull(isc_svc_handle_impl0);
      
      try { 
        javaGDSImpl0.iscServiceDetach(isc_svc_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid service handle
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(abstractIscTrHandle0);
      
      byte[] byteArray0 = new byte[0];
      try { 
        javaGDSImpl0.iscPrepareTransaction2((IscTrHandle) null, byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl1 = isc_blob_handle_impl0.getTr();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNull(isc_tr_handle_impl1);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertNotNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecuteImmediate((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) isc_tr_handle_impl0, "O~&F^g~*+k.DeI", "IOException in receiveSQLResponse", (-1953727402), xSQLDA0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_db_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_db_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      Integer integer0 = new Integer(612);
      assertNotNull(integer0);
      assertEquals(612, (int)integer0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      isc_blob_handle_impl isc_blob_handle_impl0 = (isc_blob_handle_impl)javaGDSImpl1.createIscBlobHandle();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscSeekBlob(isc_blob_handle_impl0, (-436), 612);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(0, xSQLDA0.sqld);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl1);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      isc_stmt_handle_impl1.setStatementType(1);
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(1, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertNotSame(isc_stmt_handle_impl1, isc_stmt_handle_impl0);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlSqlInfo(isc_stmt_handle_impl1, (byte[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertNotNull(isc_blob_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscCloseBlob(isc_blob_handle_impl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_blob_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_blob_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      BlobParameterBuffer blobParameterBuffer0 = javaGDSImpl1.createBlobParameterBuffer();
      assertNotNull(blobParameterBuffer0);
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      JavaGDSImpl javaGDSImpl2 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl2);
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl0));
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl1));
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl2.iscCreateBlob2(isc_db_handle_impl0, isc_tr_handle_impl0, (IscBlobHandle) null, blobParameterBuffer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_db_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_db_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscRollbackTransaction(isc_tr_handle_impl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_tr_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_tr_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_blob_handle_impl0.setBlobId((-261L));
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals((-261L), isc_blob_handle_impl0.getBlobId());
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscSeekBlob((IscBlobHandle) null, (-1917), (-1917));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNotNull(isc_stmt_handle_impl0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.getSqlCounts(isc_stmt_handle_impl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      ServiceParameterBuffer serviceParameterBuffer0 = javaGDSImpl0.createServiceParameterBuffer();
      assertNotNull(serviceParameterBuffer0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertNotNull(isc_stmt_handle_impl1);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl1.getTransaction();
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertNull(abstractIscTrHandle0);
      assertNotSame(isc_stmt_handle_impl1, isc_stmt_handle_impl0);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      XSQLDA xSQLDA0 = new XSQLDA(1);
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
      assertEquals(1, xSQLDA0.sqld);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp1 = (DatabaseParameterBufferImp)databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBufferImp1);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBufferImp1);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBufferImp0);
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBufferImp0));
      
      try { 
        javaGDSImpl0.iscReconnectTransaction((IscTrHandle) null, isc_db_handle_impl0, 6);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertNotNull(isc_db_handle_impl0);
      
      isc_db_handle_impl0.setResp_data_len(1);
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(1, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      
      javaGDSImpl0.receiveResponse(isc_db_handle_impl0, 3);
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(1, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(abstractIscTrHandle0);
      
      try { 
        javaGDSImpl0.iscPrepareTransaction((IscTrHandle) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertNotNull(isc_db_handle_impl0);
      
      isc_blob_handle_impl0.setDb(isc_db_handle_impl0);
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      
      org.firebirdsql.gds.impl.jni.EventHandleImp eventHandleImp0 = new org.firebirdsql.gds.impl.jni.EventHandleImp();
      assertFalse(eventHandleImp0.isValid());
      assertNull(eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals((-1), eventHandleImp0.getEventStructHandle());
      assertEquals((-1), eventHandleImp0.getSize());
      assertFalse(eventHandleImp0.isCancelled());
      assertNotNull(eventHandleImp0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "PURE_JAVA");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "PURE_JAVA");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      eventHandleImp0.setEventCount(3559);
      assertFalse(eventHandleImp0.isValid());
      assertNull(eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals(3559, eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getEventStructHandle());
      assertEquals((-1), eventHandleImp0.getSize());
      assertFalse(eventHandleImp0.isCancelled());
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscQueueEvents(isc_db_handle_impl0, eventHandleImp0, eventHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0.getTr();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertNull(isc_tr_handle_impl0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecuteImmediate((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) null, "xsqlda.sqln read as ", "xsqlda.sqln read as ", 5, xSQLDA0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_db_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_db_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      javaGDSImpl0.receiveResponse((isc_svc_handle_impl) null, (-4342));
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = javaGDSImpl0.createDatabaseParameterBuffer();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0.getTr();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNull(isc_tr_handle_impl0);
      
      try { 
        javaGDSImpl0.iscRollbackTransaction((IscTrHandle) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertNotNull(isc_db_handle_impl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.receiveResponse(isc_db_handle_impl0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNull(abstractIscTrHandle0);
      
      XSQLDA xSQLDA0 = new XSQLDA(1);
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(1, xSQLDA0.sqld);
      assertEquals(1, xSQLDA0.sqln);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = javaGDSImpl0.createDatabaseParameterBuffer();
      assertNotNull(databaseParameterBuffer0);
      
      XSQLDA xSQLDA1 = isc_stmt_handle_impl0.getInSqlda();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNull(xSQLDA1);
      
      try { 
        javaGDSImpl0.iscRollbackTransaction(isc_tr_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlDescribe(isc_stmt_handle_impl0, 6);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl0);
      
      byte byte0 = (byte) (-49);
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertNotNull(isc_svc_handle_impl0);
      
      ServiceParameterBufferImp serviceParameterBufferImp0 = new ServiceParameterBufferImp();
      assertNotNull(serviceParameterBufferImp0);
      
      ServiceRequestBufferImp serviceRequestBufferImp0 = (ServiceRequestBufferImp)javaGDSImpl0.createServiceRequestBuffer(13);
      assertEquals(13, serviceRequestBufferImp0.getTaskIdentifier());
      assertNotNull(serviceRequestBufferImp0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-123);
      try { 
        javaGDSImpl0.iscServiceQuery(isc_svc_handle_impl0, serviceParameterBufferImp0, serviceRequestBufferImp0, byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid service handle
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNull(isc_db_handle_impl0);
      
      BlobParameterBuffer blobParameterBuffer0 = javaGDSImpl0.createBlobParameterBuffer();
      assertNotNull(blobParameterBuffer0);
      
      try { 
        javaGDSImpl0.iscCreateBlob2((IscDbHandle) null, isc_tr_handle_impl0, isc_blob_handle_impl0, blobParameterBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl0.setStatementType((-1790264235));
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals((-1790264235), isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlDescribe(isc_stmt_handle_impl0, 53);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      XSQLDA xSQLDA0 = new XSQLDA(5);
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(5, xSQLDA0.sqld);
      assertEquals(5, xSQLDA0.sqln);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecuteImmediate((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) isc_tr_handle_impl0, "", "i9TjpC`", 0, xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.TransactionParameterBufferImpl transactionParameterBufferImpl0 = new org.firebirdsql.gds.impl.jni.TransactionParameterBufferImpl();
      assertNotNull(transactionParameterBufferImpl0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)13;
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlSqlInfo((IscStmtHandle) null, byteArray0, (byte)13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      isc_tr_handle_impl0.forgetResultSets();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlPrepare((IscTrHandle) isc_tr_handle_impl0, (IscStmtHandle) isc_stmt_handle_impl0, (String) null, "", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0.getTr();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNull(isc_tr_handle_impl0);
      
      isc_stmt_handle_impl0.registerTransaction((AbstractIscTrHandle) null);
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.getSqlPrepareInfo(isc_stmt_handle_impl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertNotNull(isc_svc_handle_impl0);
      
      ServiceRequestBufferImp serviceRequestBufferImp0 = new ServiceRequestBufferImp((-139));
      assertEquals((-139), serviceRequestBufferImp0.getTaskIdentifier());
      assertNotNull(serviceRequestBufferImp0);
      
      Integer integer0 = new Integer(930);
      assertNotNull(integer0);
      assertEquals(930, (int)integer0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = javaGDSImpl0.createDatabaseParameterBuffer();
      assertNotNull(databaseParameterBuffer0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      XSQLDA xSQLDA0 = new XSQLDA(4);
      assertNotNull(xSQLDA0);
      assertEquals(4, xSQLDA0.sqld);
      assertEquals(4, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
      
      // Undeclared exception!
      try { 
        AbstractJavaGDSImpl.calculateBLR(xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertNotNull(isc_db_handle_impl0);
      
      Collection<AbstractIscTrHandle> collection0 = isc_db_handle_impl0.getTransactions();
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertNotNull(collection0);
      
      int int0 = 55;
      isc_db_handle_impl0.setRdbId(55);
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      try { 
        javaGDSImpl0.isc_dsql_alloc_statement2(isc_db_handle_impl0, isc_stmt_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // feature is not supported
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl1.iscPrepareTransaction2(isc_tr_handle_impl0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscVaxInteger(byteArray0, 0, 77);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertNull(isc_db_handle_impl0);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertNotNull(isc_svc_handle_impl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        javaGDSImpl1.iscDsqlSqlInfo(isc_stmt_handle_impl0, byteArray0, (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(xdrOutputStream0);
      
      pipedOutputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      XdrInputStream xdrInputStream0 = new XdrInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(xdrInputStream0);
      
      try { 
        javaGDSImpl0.sendConnectPacket(xdrOutputStream0, xdrInputStream0, "org.firebirdsql.gds.impl.DatabaseParameterBufferExtension");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl0.setUpdateCount(738);
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(738, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsrId());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id_ptr());
      assertNotNull(isc_stmt_handle_impl1);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      XSQLDA xSQLDA0 = isc_stmt_handle_impl1.getInSqlda();
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsrId());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id_ptr());
      assertNull(xSQLDA0);
      assertNotSame(isc_stmt_handle_impl1, isc_stmt_handle_impl0);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      XSQLDA xSQLDA1 = new XSQLDA();
      assertNotNull(xSQLDA1);
      assertEquals(1, xSQLDA1.version);
      assertEquals(0, xSQLDA1.sqld);
      assertEquals(0, xSQLDA1.sqln);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl1.getRsr_rdb();
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsrId());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id_ptr());
      assertNull(isc_db_handle_impl0);
      assertNotSame(isc_stmt_handle_impl1, isc_stmt_handle_impl0);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl1.iscDsqlExecuteImmediate((IscDbHandle) null, (IscTrHandle) isc_tr_handle_impl0, (byte[]) null, (-2068126541), xSQLDA1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_tr_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_tr_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertNotNull(isc_svc_handle_impl0);
      
      try { 
        javaGDSImpl0.iscServiceDetach(isc_svc_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid service handle
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNotNull(isc_stmt_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.EventHandleImp eventHandleImp0 = new org.firebirdsql.gds.impl.jni.EventHandleImp();
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertFalse(eventHandleImp0.isValid());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals((-1), eventHandleImp0.getSize());
      assertEquals((-1), eventHandleImp0.getEventStructHandle());
      assertNull(eventHandleImp0.getEventName());
      assertFalse(eventHandleImp0.isCancelled());
      assertNotNull(eventHandleImp0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "META-INF/services/");
      assertFalse(boolean0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertNotNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscQueueEvents(isc_db_handle_impl0, eventHandleImp0, (EventHandler) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_db_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_db_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      
      try { 
        javaGDSImpl0.iscDsqlFetch(isc_stmt_handle_impl0, 0, xSQLDA0, 1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      assertFalse(isc_svc_handle_impl0.isValid());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertNotNull(isc_svc_handle_impl0);
      
      int int0 = 9;
      // Undeclared exception!
      try { 
        javaGDSImpl0.receiveResponse(isc_svc_handle_impl0, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertNotNull(isc_db_handle_impl0);
      
      isc_db_handle_impl0.setDialect((-1721));
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals((-1721), isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      isc_tr_handle_impl isc_tr_handle_impl1 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNotNull(isc_tr_handle_impl1);
      assertTrue(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl0));
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      EventHandleImp eventHandleImp0 = new EventHandleImp("KGZ!\"'2ch ");
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals("KGZ!\"'2ch ", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertNotNull(eventHandleImp0);
      
      javaGDSImpl0.iscEventCounts(eventHandleImp0);
      assertEquals(0, eventHandleImp0.getEventCount());
      assertEquals("KGZ!\"'2ch ", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals((-1), eventHandleImp0.getLocalId());
      
      isc_db_handle_impl0.setSubject((Subject) null);
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals((-1721), isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      
      TransactionParameterBuffer transactionParameterBuffer0 = javaGDSImpl0.newTransactionParameterBuffer();
      assertNotNull(transactionParameterBuffer0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscStartTransaction(isc_tr_handle_impl1, isc_db_handle_impl0, transactionParameterBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      EventHandleImp eventHandleImp0 = new EventHandleImp("PURE_JAVA");
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals("PURE_JAVA", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertNotNull(eventHandleImp0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl1.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl1.getResp_object());
      assertEquals(0L, isc_db_handle_impl1.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl1.getProtocol());
      assertEquals(0, isc_db_handle_impl1.getDialect());
      assertEquals(0, isc_db_handle_impl1.getRdb_id_ptr());
      assertTrue(isc_db_handle_impl1.isValid());
      assertEquals(0, isc_db_handle_impl1.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl1);
      
      isc_db_handle_impl1.setResp_blob_id(849L);
      assertEquals(849L, isc_db_handle_impl1.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl1.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl1.getResp_object());
      assertEquals(0, isc_db_handle_impl1.getProtocol());
      assertEquals(0, isc_db_handle_impl1.getDialect());
      assertEquals(0, isc_db_handle_impl1.getRdb_id_ptr());
      assertTrue(isc_db_handle_impl1.isValid());
      assertEquals(0, isc_db_handle_impl1.getODSMajorVersion());
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscQueueEvents(isc_db_handle_impl1, eventHandleImp0, eventHandler0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_db_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_db_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      isc_db_handle_impl0.setSubject((Subject) null);
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNotNull(isc_stmt_handle_impl0);
      
      String string0 = "STaRh!>i-";
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getRsrId());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertNotNull(isc_stmt_handle_impl1);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlDescribeBind(isc_stmt_handle_impl1, 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      isc_blob_handle_impl isc_blob_handle_impl1 = (isc_blob_handle_impl)javaGDSImpl0.createIscBlobHandle();
      assertFalse(isc_blob_handle_impl1.isEof());
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertEquals(0, isc_blob_handle_impl1.getRbl_id());
      assertEquals(0, isc_blob_handle_impl1.getPosition());
      assertNotNull(isc_blob_handle_impl1);
      assertNotSame(isc_blob_handle_impl1, isc_blob_handle_impl0);
      assertFalse(isc_blob_handle_impl1.equals((Object)isc_blob_handle_impl0));
      
      try { 
        javaGDSImpl0.iscGetSegment(isc_blob_handle_impl0, (-59));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertNotNull(isc_blob_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscCreateBlob2(isc_db_handle_impl0, isc_tr_handle_impl0, isc_blob_handle_impl0, (BlobParameterBuffer) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_blob_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_blob_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = (isc_tr_handle_impl)javaGDSImpl0.createIscTrHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_db_handle_impl0);
      
      javaGDSImpl0.receiveResponse((isc_db_handle_impl) null, 3);
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_blob_handle_impl0.setPosition((-2419));
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals((-2419), isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      JavaGDSImpl javaGDSImpl2 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl2);
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl0));
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl1));
      
      try { 
        javaGDSImpl2.fbCancelOperation((IscDbHandle) null, (-2405));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      EventHandleImp eventHandleImp0 = (EventHandleImp)javaGDSImpl0.createEventHandle("i.tT!|Qt9Q9dmd!");
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals("i.tT!|Qt9Q9dmd!", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertNotNull(eventHandleImp0);
      
      try { 
        javaGDSImpl0.iscQueueEvents((IscDbHandle) null, eventHandleImp0, (EventHandler) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream();
      assertNotNull(xdrOutputStream0);
      
      XdrInputStream xdrInputStream0 = new XdrInputStream();
      assertNotNull(xdrInputStream0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.sendConnectPacket(xdrOutputStream0, xdrInputStream0, "op_connect_request ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.XdrOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      try { 
        javaGDSImpl0.iscDsqlSetCursorName((IscStmtHandle) null, "eventHandle: ", 55);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid request handle
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertNotNull(isc_stmt_handle_impl1);
      assertNotSame(isc_stmt_handle_impl1, isc_stmt_handle_impl0);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlDescribe(isc_stmt_handle_impl1, 3362);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      javaGDSImpl0.addProcessName((DatabaseParameterBuffer) null);
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscInteger((byte[]) null, (-2), 2547);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      try { 
        javaGDSImpl0.iscDsqlFreeStatement((IscStmtHandle) null, 141);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid request handle
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = (isc_blob_handle_impl)javaGDSImpl0.createIscBlobHandle();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)4;
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertFalse(isc_blob_handle_impl1.isEof());
      assertEquals(0, isc_blob_handle_impl1.getRblId());
      assertNotNull(isc_blob_handle_impl1);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl1.getTr();
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertFalse(isc_blob_handle_impl1.isEof());
      assertEquals(0, isc_blob_handle_impl1.getRblId());
      assertNull(isc_tr_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = (isc_db_handle_impl)javaGDSImpl0.createIscDbHandle();
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.BlobParameterBufferImp blobParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.BlobParameterBufferImp();
      assertNotNull(blobParameterBufferImp0);
      
      try { 
        javaGDSImpl0.iscCreateBlob2(isc_db_handle_impl0, (IscTrHandle) null, isc_blob_handle_impl0, blobParameterBufferImp0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      EventHandleImp eventHandleImp0 = (EventHandleImp)javaGDSImpl0.createEventHandle("71eo=*cvyo;=");
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals("71eo=*cvyo;=", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertNotNull(eventHandleImp0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscQueueEvents(isc_db_handle_impl0, eventHandleImp0, eventHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_blob_handle_impl0.rbl_flagsAdd((-610));
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertTrue(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      
      isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0.getTr();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertTrue(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNull(isc_tr_handle_impl0);
      
      try { 
        javaGDSImpl0.iscPrepareTransaction((IscTrHandle) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      EventHandleImp eventHandleImp0 = new EventHandleImp("2Zj");
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals("2Zj", eventHandleImp0.getEventName());
      assertNotNull(eventHandleImp0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscQueueEvents(isc_db_handle_impl0, eventHandleImp0, eventHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscGetSegment((IscBlobHandle) null, 3050);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlPrepare((IscTrHandle) isc_tr_handle_impl0, (IscStmtHandle) isc_stmt_handle_impl0, (byte[]) null, 5);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_tr_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_tr_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertNotNull(isc_db_handle_impl0);
      
      isc_blob_handle_impl0.setDb(isc_db_handle_impl0);
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      
      isc_blob_handle_impl0.setPosition(5);
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(5, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      
      EventHandleImp eventHandleImp0 = (EventHandleImp)javaGDSImpl0.createEventHandle("XSWT]j?wfRy0\"q");
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals("XSWT]j?wfRy0\"q", eventHandleImp0.getEventName());
      assertNotNull(eventHandleImp0);
      
      javaGDSImpl0.iscCancelEvents(isc_db_handle_impl0, eventHandleImp0);
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals("XSWT]j?wfRy0\"q", eventHandleImp0.getEventName());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertNotNull(isc_svc_handle_impl0);
      
      javaGDSImpl0.receiveResponse(isc_svc_handle_impl0, 0);
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.deepCopy();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      javaGDSImpl0.addProcessName(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl1.openSocket(isc_db_handle_impl0, (DbAttachInfo) null, false, 4, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      EventHandleImp eventHandleImp0 = new EventHandleImp("PURE_JAVA");
      assertEquals("PURE_JAVA", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertNotNull(eventHandleImp0);
      
      eventHandleImp0.setLocalId(72);
      assertEquals("PURE_JAVA", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals(72, eventHandleImp0.getLocalId());
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertNotNull(isc_db_handle_impl0);
      
      javaGDSImpl0.iscCancelEvents(isc_db_handle_impl0, eventHandleImp0);
      assertEquals("PURE_JAVA", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals(72, eventHandleImp0.getLocalId());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      
      Integer integer0 = new Integer((-795));
      assertNotNull(integer0);
      assertEquals((-795), (int)integer0);
      
      DbAttachInfo dbAttachInfo0 = new DbAttachInfo("PURE_JAVA", integer0, "PURE_JAVA");
      assertEquals((-795), dbAttachInfo0.getPort());
      assertEquals("PURE_JAVA", dbAttachInfo0.getServer());
      assertEquals("PURE_JAVA", dbAttachInfo0.getFileName());
      assertNotNull(dbAttachInfo0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.internalAttachDatabase(dbAttachInfo0, (IscDbHandle) isc_db_handle_impl0, (DatabaseParameterBuffer) databaseParameterBufferImp0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-795
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      XSQLDA xSQLDA0 = new XSQLDA(6);
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(6, xSQLDA0.sqln);
      assertEquals(6, xSQLDA0.sqld);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertNotNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecuteImmediate((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) isc_tr_handle_impl0, (byte[]) null, (-1542), xSQLDA0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_tr_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_tr_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertNotNull(isc_db_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl1 = isc_stmt_handle_impl0.getRsr_rdb();
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNull(isc_db_handle_impl1);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlAllocateStatement(isc_db_handle_impl0, isc_stmt_handle_impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertNull(isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo(databaseParameterBuffer0);
      assertNotNull(fBConnectionRequestInfo0);
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      try { 
        javaGDSImpl0.internalAttachDatabase((DbAttachInfo) null, (IscDbHandle) null, (DatabaseParameterBuffer) fBConnectionRequestInfo0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_stmt_handle_impl0.notifyOpenResultSet();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertTrue(isc_stmt_handle_impl0.hasOpenResultSet());
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      String string0 = "IOException in receiveResponse";
      // Undeclared exception!
      try { 
        javaGDSImpl1.iscDsqlPrepare((IscTrHandle) isc_tr_handle_impl0, (IscStmtHandle) isc_stmt_handle_impl0, "isc_info_sql_relation ", "IOException in receiveResponse", 3394);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      isc_tr_handle_impl isc_tr_handle_impl1 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNotNull(isc_tr_handle_impl1);
      assertTrue(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl0));
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      isc_db_handle_impl0.setSubject((Subject) null);
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      
      TransactionParameterBuffer transactionParameterBuffer0 = javaGDSImpl0.newTransactionParameterBuffer();
      assertNotNull(transactionParameterBuffer0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscStartTransaction(isc_tr_handle_impl0, isc_db_handle_impl0, transactionParameterBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl0.setState(1571);
      assertEquals(1571, isc_tr_handle_impl0.getState());
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      isc_db_handle_impl0.setDialect((-259));
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals((-259), isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      
      javaGDSImpl0.receiveResponse(isc_db_handle_impl0, 0);
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals((-259), isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      
      WireXdrInputStream wireXdrInputStream0 = new WireXdrInputStream();
      assertNotNull(wireXdrInputStream0);
      
      isc_db_handle_impl0.in = wireXdrInputStream0;
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals((-259), isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl1 = isc_blob_handle_impl0.getTr();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNull(isc_tr_handle_impl1);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecuteImmediate((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) null, "f>+?H\"%JX5Q+HGL}/E", "24yi|6<@CM%*!la)5", 6, (XSQLDA) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNotNull(isc_stmt_handle_impl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      JavaGDSImpl javaGDSImpl2 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl2);
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl1));
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl0));
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      try { 
        javaGDSImpl2.iscCloseBlob(isc_blob_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream();
      assertNotNull(xdrOutputStream0);
      
      ServiceParameterBuffer serviceParameterBuffer0 = javaGDSImpl0.createServiceParameterBuffer();
      assertNotNull(serviceParameterBuffer0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)18;
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscTransactionInformation(isc_tr_handle_impl0, byteArray0, (byte) (-85));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      WireXdrInputStream wireXdrInputStream0 = new WireXdrInputStream();
      assertNotNull(wireXdrInputStream0);
      
      ServiceRequestBufferImp serviceRequestBufferImp0 = (ServiceRequestBufferImp)javaGDSImpl0.createServiceRequestBuffer(4);
      assertEquals(4, serviceRequestBufferImp0.getTaskIdentifier());
      assertNotNull(serviceRequestBufferImp0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      int int0 = (-414);
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertNotNull(isc_db_handle_impl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      DatabaseParameterBuffer databaseParameterBuffer0 = javaGDSImpl1.createDatabaseParameterBuffer();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      try { 
        javaGDSImpl0.iscAttachDatabase("org.firebirdsql.gds.GDSException", isc_db_handle_impl0, databaseParameterBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to complete network request to host \"localhost\".
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      WireXdrInputStream wireXdrInputStream0 = new WireXdrInputStream();
      assertNotNull(wireXdrInputStream0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.nextOperation(wireXdrInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.XdrInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      IscDbHandle iscDbHandle0 = isc_tr_handle_impl0.getDbHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNull(iscDbHandle0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecuteImmediate((IscDbHandle) null, (IscTrHandle) isc_tr_handle_impl0, (String) null, 5, xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      IscDbHandle iscDbHandle0 = isc_tr_handle_impl0.getDbHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNull(iscDbHandle0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-118);
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDatabaseInfo((IscDbHandle) null, byteArray0, (byte) (-118));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      String string0 = "\t";
      EventHandleImp eventHandleImp0 = new EventHandleImp("\t");
      assertEquals("\t", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertNotNull(eventHandleImp0);
      
      AbstractJavaGDSImpl.EventGlob abstractJavaGDSImpl_EventGlob0 = new AbstractJavaGDSImpl.EventGlob(eventHandler0, eventHandleImp0);
      assertEquals("\t", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertNotNull(abstractJavaGDSImpl_EventGlob0);
      
      EventHandleImp eventHandleImp1 = abstractJavaGDSImpl_EventGlob0.getEventHandle();
      assertEquals("\t", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp1.getEventCount());
      assertEquals((-1), eventHandleImp1.getLocalId());
      assertEquals((-1), eventHandleImp1.getEventId());
      assertEquals("\t", eventHandleImp1.getEventName());
      assertNotNull(eventHandleImp1);
      assertSame(eventHandleImp0, eventHandleImp1);
      assertSame(eventHandleImp1, eventHandleImp0);
      
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      AbstractJavaGDSImpl.EventGlob abstractJavaGDSImpl_EventGlob1 = new AbstractJavaGDSImpl.EventGlob(eventHandler1, eventHandleImp1);
      assertEquals("\t", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp1.getEventCount());
      assertEquals((-1), eventHandleImp1.getLocalId());
      assertEquals((-1), eventHandleImp1.getEventId());
      assertEquals("\t", eventHandleImp1.getEventName());
      assertNotNull(abstractJavaGDSImpl_EventGlob1);
      assertFalse(abstractJavaGDSImpl_EventGlob1.equals((Object)abstractJavaGDSImpl_EventGlob0));
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.getDescribeSelectInfo(isc_stmt_handle_impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscVaxInteger((byte[]) null, 56, 56);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertNotNull(isc_db_handle_impl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecImmed2((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) isc_tr_handle_impl0, (byte[]) null, 4, (XSQLDA) null, (XSQLDA) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(abstractIscTrHandle0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecImmed2((IscDbHandle) null, (IscTrHandle) null, (String) null, (String) null, 5, (XSQLDA) null, (XSQLDA) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      AbstractJavaGDSImpl.EventCoordinatorImp abstractJavaGDSImpl_EventCoordinatorImp0 = null;
      try {
        abstractJavaGDSImpl_EventCoordinatorImp0 = javaGDSImpl0.new EventCoordinatorImp(340, "PURE_JAVA", 340);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Unable to complete network request to host \"PURE_JAVA\".
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl$EventCoordinatorImp", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscEventCounts((EventHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      BlobParameterBuffer blobParameterBuffer0 = javaGDSImpl0.createBlobParameterBuffer();
      assertNotNull(blobParameterBuffer0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = (isc_blob_handle_impl)javaGDSImpl0.createIscBlobHandle();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscOpenBlob2(isc_db_handle_impl0, isc_tr_handle_impl0, isc_blob_handle_impl0, blobParameterBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_blob_handle_impl0.setRbl_id(4577);
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(4577, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      
      isc_blob_handle_impl0.setBlobId(269L);
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(4577, isc_blob_handle_impl0.getRbl_id());
      assertEquals(269L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      
      isc_blob_handle_impl0.setPosition((-1230));
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(4577, isc_blob_handle_impl0.getRbl_id());
      assertEquals((-1230), isc_blob_handle_impl0.getPosition());
      assertEquals(269L, isc_blob_handle_impl0.getBlobId());
      
      try { 
        javaGDSImpl0.iscPutSegment(isc_blob_handle_impl0, (byte[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      EventHandleImp eventHandleImp0 = new EventHandleImp("PURE_JAVA");
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals("PURE_JAVA", eventHandleImp0.getEventName());
      assertNotNull(eventHandleImp0);
      
      javaGDSImpl0.iscEventCounts(eventHandleImp0);
      assertEquals(0, eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals("PURE_JAVA", eventHandleImp0.getEventName());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl0.setDbHandle(isc_db_handle_impl0);
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      try { 
        javaGDSImpl0.iscCommitRetaining(isc_tr_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // transaction  is 
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "";
      EventHandleImp eventHandleImp0 = new EventHandleImp("");
      assertEquals("", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertNotNull(eventHandleImp0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      AbstractJavaGDSImpl.EventGlob abstractJavaGDSImpl_EventGlob0 = new AbstractJavaGDSImpl.EventGlob(eventHandler0, eventHandleImp0);
      assertEquals("", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertNotNull(abstractJavaGDSImpl_EventGlob0);
      
      EventHandleImp eventHandleImp1 = abstractJavaGDSImpl_EventGlob0.getEventHandle();
      assertEquals("", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals("", eventHandleImp1.getEventName());
      assertEquals((-1), eventHandleImp1.getLocalId());
      assertEquals((-1), eventHandleImp1.getEventCount());
      assertEquals((-1), eventHandleImp1.getEventId());
      assertNotNull(eventHandleImp1);
      assertSame(eventHandleImp0, eventHandleImp1);
      assertSame(eventHandleImp1, eventHandleImp0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertNotNull(isc_db_handle_impl0);
      
      isc_db_handle_impl0.setProtocol((-1983417233));
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertEquals((-1983417233), isc_db_handle_impl0.getProtocol());
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.deepCopy();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      try { 
        javaGDSImpl0.iscCreateDatabase("", isc_db_handle_impl0, databaseParameterBufferImp0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Bad connection string: ':' at beginning or end of:335544323
         //
         verifyException("org.firebirdsql.gds.impl.DbAttachInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(0, xSQLDA0.sqld);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_db_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl1);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      byte[] byteArray0 = AbstractJavaGDSImpl.describe_bind_info15;
      assertNotNull(byteArray0);
      assertEquals(13, byteArray0.length);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscInteger(byteArray0, (-1250), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1250
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = (isc_tr_handle_impl)javaGDSImpl0.createIscTrHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertNotNull(isc_svc_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.receiveResponse(isc_svc_handle_impl0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      IscTrHandle iscTrHandle0 = null;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)56;
      Integer integer0 = new Integer((byte)56);
      assertNotNull(integer0);
      assertEquals(56, (int)integer0);
      
      Integer integer1 = Integer.getInteger("jdbc:firebirdsql:native:", integer0);
      assertNotNull(integer1);
      assertEquals(56, (int)integer1);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNull(isc_db_handle_impl0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = javaGDSImpl0.createDatabaseParameterBuffer();
      assertNotNull(databaseParameterBuffer0);
      
      try { 
        javaGDSImpl0.internalAttachDatabase("", integer1, "jdbc:firebirdsql:native:", (IscDbHandle) null, databaseParameterBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl0.setStatementType(548);
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(548, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlSetCursorName(isc_stmt_handle_impl0, (String) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertNotNull(isc_stmt_handle_impl1);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl1.getRsr_rdb();
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertNull(isc_db_handle_impl0);
      assertNotSame(isc_stmt_handle_impl1, isc_stmt_handle_impl0);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      isc_db_handle_impl isc_db_handle_impl1 = (isc_db_handle_impl)javaGDSImpl0.createIscDbHandle();
      assertEquals(0, isc_db_handle_impl1.getProtocol());
      assertEquals(0, isc_db_handle_impl1.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl1.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl1.getDialect());
      assertEquals(0, isc_db_handle_impl1.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl1.getResp_data_len());
      assertEquals(0, isc_db_handle_impl1.getResp_object());
      assertTrue(isc_db_handle_impl1.isValid());
      assertNotNull(isc_db_handle_impl1);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscCreateDatabase("isc_info_sql_relation ", isc_db_handle_impl1, (DatabaseParameterBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      javaGDSImpl0.receiveResponse((isc_db_handle_impl) null, 0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertNotNull(isc_stmt_handle_impl1);
      
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl2.size());
      assertFalse(isc_stmt_handle_impl2.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl2.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl2.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl2.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl2.getStatementType());
      assertFalse(isc_stmt_handle_impl2.isValid());
      assertEquals(0, isc_stmt_handle_impl2.getSelectCount());
      assertFalse(isc_stmt_handle_impl2.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl2.getUpdateCount());
      assertNull(isc_stmt_handle_impl2.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl2.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl2);
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl1));
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl1.getRsr_rdb();
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertNull(isc_db_handle_impl0);
      assertNotSame(isc_stmt_handle_impl1, isc_stmt_handle_impl2);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl2));
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqln);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0.getTr();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNull(isc_tr_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl1.iscDsqlExecuteImmediate((IscDbHandle) null, (IscTrHandle) null, "PURE_JAVA", 0, xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      javaGDSImpl0.addProcessId(databaseParameterBufferImp0);
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertNotNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDetachDatabase(isc_db_handle_impl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_db_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_db_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscSeekBlob((IscBlobHandle) null, 6, 68);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertNotNull(isc_db_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNull(abstractIscTrHandle0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsrId());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertNotNull(isc_stmt_handle_impl1);
      
      XSQLDA xSQLDA0 = isc_stmt_handle_impl1.getOutSqlda();
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsrId());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertNull(xSQLDA0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecImmed2((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) null, "n]O}E?u4F3[", (String) null, 0, (XSQLDA) null, (XSQLDA) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_db_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_db_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(1, xSQLDA0.version);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertNotNull(isc_svc_handle_impl0);
      
      ServiceParameterBufferImp serviceParameterBufferImp0 = new ServiceParameterBufferImp();
      assertNotNull(serviceParameterBufferImp0);
      
      ServiceRequestBufferImp serviceRequestBufferImp0 = new ServiceRequestBufferImp(0);
      assertEquals(0, serviceRequestBufferImp0.getTaskIdentifier());
      assertNotNull(serviceRequestBufferImp0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = (isc_tr_handle_impl)javaGDSImpl0.createIscTrHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecImmed2((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) isc_tr_handle_impl0, "}1R", "isc_info_db_sql_dialect:", (-479), xSQLDA0, xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      DbAttachInfo dbAttachInfo0 = new DbAttachInfo(")6$AA");
      assertEquals(3050, dbAttachInfo0.getPort());
      assertEquals("localhost", dbAttachInfo0.getServer());
      assertEquals(")6$AA", dbAttachInfo0.getFileName());
      assertNotNull(dbAttachInfo0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl1 = isc_stmt_handle_impl0.getRsr_rdb();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNull(isc_db_handle_impl1);
      
      try { 
        javaGDSImpl0.internalAttachDatabase(dbAttachInfo0, (IscDbHandle) null, (DatabaseParameterBuffer) databaseParameterBufferImp0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = (isc_tr_handle_impl)javaGDSImpl0.createIscTrHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNotNull(isc_stmt_handle_impl0);
      
      XSQLDA xSQLDA0 = isc_stmt_handle_impl0.getInSqlda();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(xSQLDA0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecute2(isc_tr_handle_impl0, isc_stmt_handle_impl0, (-2300), (XSQLDA) null, (XSQLDA) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscSeekBlob(isc_blob_handle_impl0, 2, 1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_blob_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_blob_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)5;
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlSqlInfo(isc_stmt_handle_impl0, byteArray0, (-1918));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      try { 
        javaGDSImpl0.iscCreateDatabase("0", (IscDbHandle) null, databaseParameterBufferImp0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNull(abstractIscTrHandle0);
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)86;
      byteArray0[1] = (byte)86;
      byte byte2 = (byte) (-122);
      byteArray0[2] = (byte) (-122);
      byte byte3 = (byte) (-114);
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      try { 
        javaGDSImpl1.iscDsqlPrepare((IscTrHandle) null, (IscStmtHandle) isc_stmt_handle_impl0, "PURE_JAVA", "", (-291));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.getSqlCounts(isc_stmt_handle_impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      XSQLDA xSQLDA0 = new XSQLDA(2);
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(2, xSQLDA0.sqln);
      assertEquals(2, xSQLDA0.sqld);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertNotNull(isc_db_handle_impl0);
      
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      try { 
        javaGDSImpl0.internalAttachDatabase("4colo{D<'", integer0, (String) null, isc_db_handle_impl0, (DatabaseParameterBuffer) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null or empty filename in DbAttachInfo
         //
         verifyException("org.firebirdsql.gds.impl.DbAttachInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      isc_blob_handle_impl0.rbl_flagsRemove(335544721);
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNull(isc_db_handle_impl0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      TransactionParameterBuffer transactionParameterBuffer0 = javaGDSImpl0.newTransactionParameterBuffer();
      assertNotNull(transactionParameterBuffer0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) databaseParameterBufferImp0;
      byte[] byteArray0 = javaGDSImpl0.iscExpandDpb((byte[]) null, 2, 335544721, objectArray0);
      assertNull(byteArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      org.firebirdsql.gds.impl.jni.EventHandleImp eventHandleImp0 = new org.firebirdsql.gds.impl.jni.EventHandleImp();
      assertEquals((-1), eventHandleImp0.getSize());
      assertEquals((-1), eventHandleImp0.getEventStructHandle());
      assertNull(eventHandleImp0.getEventName());
      assertFalse(eventHandleImp0.isCancelled());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertFalse(eventHandleImp0.isValid());
      assertNotNull(eventHandleImp0);
      
      javaGDSImpl1.iscEventBlock(eventHandleImp0);
      assertEquals((-1), eventHandleImp0.getSize());
      assertEquals((-1), eventHandleImp0.getEventStructHandle());
      assertNull(eventHandleImp0.getEventName());
      assertFalse(eventHandleImp0.isCancelled());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertFalse(eventHandleImp0.isValid());
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertNotNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.disconnect(isc_db_handle_impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.isc_db_handle_impl", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream();
      assertNotNull(xdrOutputStream0);
      
      ServiceParameterBuffer serviceParameterBuffer0 = javaGDSImpl0.createServiceParameterBuffer();
      assertNotNull(serviceParameterBuffer0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)8;
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      isc_db_handle_impl isc_db_handle_impl0 = (isc_db_handle_impl)javaGDSImpl0.createIscDbHandle();
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      try { 
        javaGDSImpl0.internalAttachDatabase((String) null, (Integer) 3, (String) null, isc_db_handle_impl0, databaseParameterBufferImp0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null or empty filename in DbAttachInfo
         //
         verifyException("org.firebirdsql.gds.impl.DbAttachInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscCommitRetaining(isc_tr_handle_impl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_tr_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_tr_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertNotNull(isc_stmt_handle_impl1);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_blob_handle_impl0.setPosition((-1840));
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals((-1840), isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl1.fbCancelOperation(isc_db_handle_impl0, (-2405));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      javaGDSImpl0.addProcessName((DatabaseParameterBuffer) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      WireXdrInputStream wireXdrInputStream0 = new WireXdrInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(wireXdrInputStream0);
      
      try { 
        javaGDSImpl0.nextOperation(wireXdrInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertNotNull(isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0.getTr();
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNull(isc_tr_handle_impl0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecuteImmediate((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) null, "PURE_JAVA", "PURE_JAVA", 5, xSQLDA0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_db_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_db_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNull(isc_db_handle_impl0);
      
      DbAttachInfo dbAttachInfo0 = new DbAttachInfo("PURE_JAVA");
      assertEquals(3050, dbAttachInfo0.getPort());
      assertEquals("localhost", dbAttachInfo0.getServer());
      assertEquals("PURE_JAVA", dbAttachInfo0.getFileName());
      assertNotNull(dbAttachInfo0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.connect((isc_db_handle_impl) null, dbAttachInfo0, (DatabaseParameterBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.nextOperation((XdrInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecuteImmediate((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) isc_tr_handle_impl0, (String) null, (String) null, 1315, xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl1 = isc_blob_handle_impl0.getDb();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNull(isc_db_handle_impl1);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      DbAttachInfo dbAttachInfo0 = new DbAttachInfo("PURE_JAVA");
      assertEquals("localhost", dbAttachInfo0.getServer());
      assertEquals(3050, dbAttachInfo0.getPort());
      assertEquals("PURE_JAVA", dbAttachInfo0.getFileName());
      assertNotNull(dbAttachInfo0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      try { 
        javaGDSImpl0.connect((isc_db_handle_impl) null, dbAttachInfo0, (DatabaseParameterBuffer) databaseParameterBufferImp0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to complete network request to host \"localhost\".
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = (isc_blob_handle_impl)javaGDSImpl0.createIscBlobHandle();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)77;
      byteArray0[2] = (byte)4;
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscBlobInfo(isc_blob_handle_impl0, byteArray0, (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      javaGDSImpl1.addProcessName(databaseParameterBuffer0);
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      IscDbHandle iscDbHandle0 = isc_tr_handle_impl0.getDbHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNull(iscDbHandle0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      isc_tr_handle_impl isc_tr_handle_impl1 = (isc_tr_handle_impl)javaGDSImpl0.createIscTrHandle();
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNotNull(isc_tr_handle_impl1);
      assertNotSame(javaGDSImpl0, javaGDSImpl1);
      assertFalse(javaGDSImpl0.equals((Object)javaGDSImpl1));
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      try { 
        javaGDSImpl1.iscDetachDatabase((IscDbHandle) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)24;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)0;
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertEquals(0, isc_blob_handle_impl1.getRblId());
      assertFalse(isc_blob_handle_impl1.isEof());
      assertNotNull(isc_blob_handle_impl1);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl1.getDb();
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertEquals(0, isc_blob_handle_impl1.getRblId());
      assertFalse(isc_blob_handle_impl1.isEof());
      assertNull(isc_db_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNotNull(isc_stmt_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsrId());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertNotNull(isc_stmt_handle_impl1);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl1.getTransaction();
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsrId());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertNull(abstractIscTrHandle0);
      
      BlobParameterBufferImp blobParameterBufferImp0 = new BlobParameterBufferImp();
      assertNotNull(blobParameterBufferImp0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl1 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl1.getDialect());
      assertEquals(0, isc_db_handle_impl1.getODSMajorVersion());
      assertTrue(isc_db_handle_impl1.isValid());
      assertEquals(0, isc_db_handle_impl1.getResp_object());
      assertEquals(0L, isc_db_handle_impl1.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl1.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl1.getResp_data_len());
      assertEquals(0, isc_db_handle_impl1.getProtocol());
      assertNotNull(isc_db_handle_impl1);
      
      Integer integer0 = new Integer(3362);
      assertNotNull(integer0);
      assertEquals(3362, (int)integer0);
      
      DbAttachInfo dbAttachInfo0 = new DbAttachInfo("Hw3X:@M=s1!1mfM::,v", integer0, "Hw3X:@M=s1!1mfM::,v");
      assertEquals(3362, dbAttachInfo0.getPort());
      assertEquals("Hw3X:@M=s1!1mfM::,v", dbAttachInfo0.getFileName());
      assertEquals("Hw3X:@M=s1!1mfM::,v", dbAttachInfo0.getServer());
      assertNotNull(dbAttachInfo0);
      
      try { 
        javaGDSImpl0.openSocket(isc_db_handle_impl1, dbAttachInfo0, false, (byte)0, 4);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@5b61562d
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscCloseBlob((IscBlobHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)12;
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscVaxInteger(byteArray0, (byte)12, (byte)27);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertNotNull(isc_stmt_handle_impl1);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl2.getDeleteCount());
      assertFalse(isc_stmt_handle_impl2.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl2.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl2.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl2.size());
      assertEquals(0, isc_stmt_handle_impl2.getUpdateCount());
      assertFalse(isc_stmt_handle_impl2.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl2.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl2.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl2.isValid());
      assertEquals(0, isc_stmt_handle_impl2.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl2.getStatementType());
      assertNotNull(isc_stmt_handle_impl2);
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl0));
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl1));
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl2.getTransaction();
      assertEquals(0, isc_stmt_handle_impl2.getDeleteCount());
      assertFalse(isc_stmt_handle_impl2.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl2.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl2.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl2.size());
      assertEquals(0, isc_stmt_handle_impl2.getUpdateCount());
      assertFalse(isc_stmt_handle_impl2.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl2.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl2.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl2.isValid());
      assertEquals(0, isc_stmt_handle_impl2.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl2.getStatementType());
      assertNull(abstractIscTrHandle0);
      assertNotSame(isc_stmt_handle_impl2, isc_stmt_handle_impl0);
      assertNotSame(isc_stmt_handle_impl2, isc_stmt_handle_impl1);
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl0));
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl1));
      
      XSQLDA xSQLDA0 = new XSQLDA(1);
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.sqld);
      assertEquals(1, xSQLDA0.version);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertNotNull(isc_db_handle_impl0);
      
      try { 
        javaGDSImpl0.iscCommitRetaining((IscTrHandle) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNull(isc_db_handle_impl0);
      
      isc_blob_handle_impl isc_blob_handle_impl1 = new isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl1.isEof());
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertEquals(0, isc_blob_handle_impl1.getRbl_id());
      assertEquals(0, isc_blob_handle_impl1.getPosition());
      assertNotNull(isc_blob_handle_impl1);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      TransactionParameterBuffer transactionParameterBuffer0 = javaGDSImpl0.newTransactionParameterBuffer();
      assertNotNull(transactionParameterBuffer0);
      
      try { 
        javaGDSImpl0.iscStartTransaction(isc_tr_handle_impl0, (IscDbHandle) null, transactionParameterBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = (isc_db_handle_impl)javaGDSImpl0.createIscDbHandle();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertNotNull(isc_db_handle_impl0);
      
      String string0 = null;
      org.firebirdsql.gds.impl.jni.EventHandleImp eventHandleImp0 = null;
      try {
        eventHandleImp0 = new org.firebirdsql.gds.impl.jni.EventHandleImp((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.jni.EventHandleImp", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = (isc_blob_handle_impl)javaGDSImpl0.createIscBlobHandle();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)4;
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscBlobInfo(isc_blob_handle_impl0, byteArray0, (byte)4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = JavaGDSImpl.parseRawAddress("?\"fq");
      assertNull(byteArray0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      int int0 = 933;
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0.getTr();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNull(isc_tr_handle_impl0);
      
      try { 
        javaGDSImpl0.iscTransactionInformation((IscTrHandle) null, (byte[]) null, 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlPrepare((IscTrHandle) isc_tr_handle_impl0, (IscStmtHandle) isc_stmt_handle_impl0, "PURE_JAVA", 4);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqld);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscPutSegment((IscBlobHandle) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      int int0 = 3;
      IscStmtHandle iscStmtHandle0 = null;
      // Undeclared exception!
      try { 
        javaGDSImpl0.getDescribeBindInfo((IscStmtHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertNotNull(isc_db_handle_impl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      EventHandleImp eventHandleImp0 = (EventHandleImp)javaGDSImpl1.createEventHandle("PURE_JAVA");
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals("PURE_JAVA", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertNotNull(eventHandleImp0);
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      javaGDSImpl0.iscCancelEvents(isc_db_handle_impl0, eventHandleImp0);
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals("PURE_JAVA", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertNotSame(javaGDSImpl0, javaGDSImpl1);
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertFalse(javaGDSImpl0.equals((Object)javaGDSImpl1));
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      // Undeclared exception!
      try { 
        javaGDSImpl1.iscReconnectTransaction(isc_tr_handle_impl0, isc_db_handle_impl0, 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_tr_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_tr_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl1);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNull(isc_db_handle_impl0);
      
      try { 
        javaGDSImpl0.isc_dsql_alloc_statement2((IscDbHandle) null, isc_stmt_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // feature is not supported
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertNotNull(isc_svc_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.receiveResponse(isc_svc_handle_impl0, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_db_handle_impl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertNotNull(isc_stmt_handle_impl1);
      assertNotSame(isc_stmt_handle_impl1, isc_stmt_handle_impl0);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp1 = (DatabaseParameterBufferImp)databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBufferImp1);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBufferImp1);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBufferImp0);
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBufferImp0));
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp2 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp2);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp3 = (org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp)databaseParameterBufferImp2.removeExtensionParams();
      assertNotNull(databaseParameterBufferImp3);
      assertNotSame(databaseParameterBufferImp2, databaseParameterBufferImp3);
      assertNotSame(databaseParameterBufferImp3, databaseParameterBufferImp2);
      assertTrue(databaseParameterBufferImp3.equals((Object)databaseParameterBufferImp2));
      
      try { 
        javaGDSImpl0.internalAttachDatabase("h^Vos^p", (Integer) 2, "<Zq+_-", (IscDbHandle) null, databaseParameterBufferImp3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      try { 
        javaGDSImpl0.isc_dsql_alloc_statement2(isc_db_handle_impl0, (IscStmtHandle) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // feature is not supported
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_blob_handle_impl0.rbl_flagsAdd((-3393));
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertTrue(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      
      try { 
        javaGDSImpl0.iscDsqlFreeStatement((IscStmtHandle) null, 2518);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid request handle
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(1, xSQLDA0.version);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlFetch(isc_stmt_handle_impl0, (-254), xSQLDA0, (-254));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      javaGDSImpl0.receiveResponse((isc_svc_handle_impl) null, 1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      XSQLDA xSQLDA0 = new XSQLDA(5);
      assertNotNull(xSQLDA0);
      assertEquals(5, xSQLDA0.sqld);
      assertEquals(1, xSQLDA0.version);
      assertEquals(5, xSQLDA0.sqln);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecuteImmediate((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) isc_tr_handle_impl0, (byte[]) null, 3, xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      try { 
        javaGDSImpl0.iscDetachDatabase((IscDbHandle) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl1 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNotNull(isc_tr_handle_impl1);
      assertTrue(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl0));
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertNotNull(isc_stmt_handle_impl1);
      assertNotSame(isc_stmt_handle_impl1, isc_stmt_handle_impl0);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp1 = (DatabaseParameterBufferImp)databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBufferImp1);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBufferImp1);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBufferImp0);
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBufferImp0));
      
      Integer integer0 = Integer.valueOf((-1068));
      assertNotNull(integer0);
      assertEquals((-1068), (int)integer0);
      
      try { 
        javaGDSImpl0.internalAttachDatabase("!_c!I", integer0, "!_c!I", (IscDbHandle) null, databaseParameterBufferImp1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0.getTr();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertNull(isc_tr_handle_impl0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      isc_db_handle_impl isc_db_handle_impl0 = (isc_db_handle_impl)javaGDSImpl1.createIscDbHandle();
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertNotNull(isc_db_handle_impl0);
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecuteImmediate((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) null, "y(|.PFo1]-'.Pc*6", "xsqlda.sqln read as ", 0, xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl0.forgetResultSets();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      isc_tr_handle_impl0.setDbHandle(isc_db_handle_impl0);
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)69;
      javaGDSImpl1.receiveResponse((isc_svc_handle_impl) null, (-2615));
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)72;
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      XSQLDA xSQLDA0 = new XSQLDA(10);
      assertNotNull(xSQLDA0);
      assertEquals(10, xSQLDA0.sqld);
      assertEquals(1, xSQLDA0.version);
      assertEquals(10, xSQLDA0.sqln);
      
      // Undeclared exception!
      try { 
        javaGDSImpl1.iscDsqlExecuteImmediate((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) isc_tr_handle_impl0, "ISO8859_1", "ISO8859_1", 1, xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNotNull(isc_stmt_handle_impl0);
      
      XSQLDA xSQLDA0 = isc_stmt_handle_impl0.getOutSqlda();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNull(xSQLDA0);
      
      AbstractJavaGDSImpl.calculateBLR((XSQLDA) null);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 3050);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      isc_db_handle_impl isc_db_handle_impl0 = (isc_db_handle_impl)javaGDSImpl0.createIscDbHandle();
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      try { 
        javaGDSImpl0.iscAttachDatabase("T", isc_db_handle_impl0, databaseParameterBufferImp0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to complete network request to host \"localhost\".
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertNotNull(isc_stmt_handle_impl1);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlDescribe(isc_stmt_handle_impl1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNull(abstractIscTrHandle0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecute2((IscTrHandle) null, isc_stmt_handle_impl0, 385, (XSQLDA) null, (XSQLDA) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0.getTr();
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNull(isc_tr_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlPrepare((IscTrHandle) null, (IscStmtHandle) isc_stmt_handle_impl0, (String) null, "rSpW{", 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlSetCursorName(isc_stmt_handle_impl0, (String) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte)102;
      byteArray0[8] = (byte) (-66);
      boolean boolean0 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-115), (byte)0, (byte)59, (byte)74, (byte) (-104), (byte) (-115), (byte) (-58), (byte)102, (byte) (-66)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      isc_db_handle_impl0.setODSMajorVersion((-2457));
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals((-2457), isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.deepCopy();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      try { 
        javaGDSImpl0.iscAttachDatabase("isc_info_firebird_version:", isc_db_handle_impl0, databaseParameterBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Bad connection string: ':' at beginning or end of:isc_info_firebird_version:335544323
         //
         verifyException("org.firebirdsql.gds.impl.DbAttachInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertNotNull(isc_stmt_handle_impl0);
      
      XSQLDA xSQLDA0 = isc_stmt_handle_impl0.getInSqlda();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertNull(xSQLDA0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      isc_tr_handle_impl0.forgetResultSets();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      AbstractJavaGDSImpl.calculateBLR((XSQLDA) null);
      DatabaseParameterBuffer databaseParameterBuffer0 = javaGDSImpl0.createDatabaseParameterBuffer();
      assertNotNull(databaseParameterBuffer0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlFreeStatement(isc_stmt_handle_impl0, 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      int int0 = 100;
      Integer integer0 = new Integer(100);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(100, (int)integer0);
      
      DbAttachInfo dbAttachInfo0 = new DbAttachInfo("PURE_JAVA", integer0, "PURE_JAVA");
      assertEquals("PURE_JAVA", dbAttachInfo0.getServer());
      assertEquals("PURE_JAVA", dbAttachInfo0.getFileName());
      assertEquals(100, dbAttachInfo0.getPort());
      assertNotNull(dbAttachInfo0);
      assertTrue(integer0.equals((Object)int0));
      
      isc_db_handle_impl isc_db_handle_impl0 = (isc_db_handle_impl)javaGDSImpl0.createIscDbHandle();
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.internalAttachDatabase(dbAttachInfo0, (IscDbHandle) isc_db_handle_impl0, (DatabaseParameterBuffer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscRollbackRetaining(isc_tr_handle_impl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_tr_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_tr_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecuteImmediate((IscDbHandle) null, (IscTrHandle) isc_tr_handle_impl0, (byte[]) null, 3, xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_blob_handle_impl0.setDb(isc_db_handle_impl0);
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertTrue(isc_db_handle_impl0.isValid());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      
      isc_blob_handle_impl0.setPosition((-1230));
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals((-1230), isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      
      try { 
        javaGDSImpl0.iscPutSegment(isc_blob_handle_impl0, (byte[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = (isc_db_handle_impl)javaGDSImpl0.createIscDbHandle();
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertNotNull(isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_blob_handle_impl0.setBlobId(317L);
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(317L, isc_blob_handle_impl0.getBlobId());
      
      org.firebirdsql.gds.impl.jni.BlobParameterBufferImp blobParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.BlobParameterBufferImp();
      assertNotNull(blobParameterBufferImp0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscCreateBlob2(isc_db_handle_impl0, (IscTrHandle) null, isc_blob_handle_impl0, blobParameterBufferImp0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_blob_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_blob_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.getDescribeBindInfo(isc_stmt_handle_impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertNotNull(isc_svc_handle_impl0);
      
      isc_svc_handle_impl0.setResp_blob_id((-771L));
      assertEquals((-771L), isc_svc_handle_impl0.getResp_blob_id());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      
      javaGDSImpl0.receiveResponse(isc_svc_handle_impl0, 2366);
      assertEquals((-771L), isc_svc_handle_impl0.getResp_blob_id());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      isc_blob_handle_impl isc_blob_handle_impl0 = (isc_blob_handle_impl)javaGDSImpl1.createIscBlobHandle();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      try { 
        javaGDSImpl1.iscCloseBlob(isc_blob_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscVaxInteger(byteArray0, 4771, 4771);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4771
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      ServiceRequestBufferImp serviceRequestBufferImp0 = new ServiceRequestBufferImp(809);
      assertEquals(809, serviceRequestBufferImp0.getTaskIdentifier());
      assertNotNull(serviceRequestBufferImp0);
      
      ServiceParameterBuffer serviceParameterBuffer0 = javaGDSImpl1.createServiceParameterBuffer();
      assertNotNull(serviceParameterBuffer0);
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      Integer integer0 = new Integer(2394);
      assertNotNull(integer0);
      assertEquals(2394, (int)integer0);
      
      DbAttachInfo dbAttachInfo0 = null;
      try {
        dbAttachInfo0 = new DbAttachInfo("", integer0, "");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // null or empty filename in DbAttachInfo
         //
         verifyException("org.firebirdsql.gds.impl.DbAttachInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertNotNull(isc_db_handle_impl0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.deepCopy();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      javaGDSImpl0.addProcessId(databaseParameterBufferImp0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer0));
      
      BlobParameterBuffer blobParameterBuffer0 = javaGDSImpl0.createBlobParameterBuffer();
      assertNotNull(blobParameterBuffer0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlDescribeBind((IscStmtHandle) null, 2041);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = (isc_blob_handle_impl)javaGDSImpl0.createIscBlobHandle();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      int int0 = javaGDSImpl0.iscVaxInteger((byte[]) null, 831, (-2308));
      assertEquals(0, int0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.getSqlPrepareInfo(isc_stmt_handle_impl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = (isc_db_handle_impl)javaGDSImpl0.createIscDbHandle();
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertNotNull(isc_stmt_handle_impl0);
      
      int int0 = 738;
      isc_stmt_handle_impl0.setUpdateCount(738);
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(738, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      
      XSQLDA xSQLDA0 = isc_stmt_handle_impl0.getInSqlda();
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(738, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertNull(xSQLDA0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      byte[] byteArray0 = new byte[0];
      XSQLDA xSQLDA1 = new XSQLDA();
      assertNotNull(xSQLDA1);
      assertEquals(0, xSQLDA1.sqld);
      assertEquals(0, xSQLDA1.sqln);
      assertEquals(1, xSQLDA1.version);
      
      // Undeclared exception!
      try { 
        javaGDSImpl1.iscDsqlExecuteImmediate((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) isc_tr_handle_impl0, byteArray0, 2, xSQLDA1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_tr_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_tr_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl0.setDbHandle(isc_db_handle_impl0);
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscTransactionInformation(isc_tr_handle_impl0, byteArray0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      int int0 = 0;
      String string0 = "";
      AbstractJavaGDSImpl.EventCoordinatorImp abstractJavaGDSImpl_EventCoordinatorImp0 = null;
      try {
        abstractJavaGDSImpl_EventCoordinatorImp0 = javaGDSImpl0.new EventCoordinatorImp(0, "", 0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Unable to complete network request to host \"\".
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl$EventCoordinatorImp", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNull(isc_db_handle_impl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl1.iscCreateDatabase("+S|7/@V:dS&f", (IscDbHandle) null, (DatabaseParameterBuffer) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@V\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 3050);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      try { 
        javaGDSImpl0.iscAttachDatabase("PURE_JAVA", isc_db_handle_impl0, databaseParameterBufferImp0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to complete network request to host \"localhost\".
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscSeekBlob(isc_blob_handle_impl0, (-1942), (-1942));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.disconnect(isc_db_handle_impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.isc_db_handle_impl", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertNotNull(isc_blob_handle_impl0);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscBlobInfo(isc_blob_handle_impl0, byteArray0, 1458);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_blob_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_blob_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      XSQLDA xSQLDA0 = new XSQLDA(2);
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(2, xSQLDA0.sqld);
      assertEquals(2, xSQLDA0.sqln);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecImmed2((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) isc_tr_handle_impl0, (byte[]) null, 0, xSQLDA0, xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      byte byte0 = (byte) (-49);
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertNotNull(isc_svc_handle_impl0);
      
      ServiceParameterBufferImp serviceParameterBufferImp0 = new ServiceParameterBufferImp();
      assertNotNull(serviceParameterBufferImp0);
      
      ServiceRequestBufferImp serviceRequestBufferImp0 = (ServiceRequestBufferImp)javaGDSImpl0.createServiceRequestBuffer((byte) (-49));
      assertEquals((-49), serviceRequestBufferImp0.getTaskIdentifier());
      assertNotNull(serviceRequestBufferImp0);
      
      byte[] byteArray0 = new byte[0];
      try { 
        javaGDSImpl0.iscServiceQuery(isc_svc_handle_impl0, serviceParameterBufferImp0, (ServiceRequestBuffer) null, byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid service handle
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      BlobParameterBuffer blobParameterBuffer0 = javaGDSImpl0.createBlobParameterBuffer();
      assertNotNull(blobParameterBuffer0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PURE_JAVA");
      assertNotNull(mockFileOutputStream0);
      
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream(mockFileOutputStream0);
      assertNotNull(xdrOutputStream0);
      
      isc_tr_handle_impl0.setTransactionId((-2165));
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      isc_db_handle_impl0.out = xdrOutputStream0;
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      
      isc_blob_handle_impl isc_blob_handle_impl0 = (isc_blob_handle_impl)javaGDSImpl0.createIscBlobHandle();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscOpenBlob2(isc_db_handle_impl0, isc_tr_handle_impl0, isc_blob_handle_impl0, blobParameterBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlSetCursorName(isc_stmt_handle_impl0, (String) null, 60);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNull(isc_db_handle_impl0);
      
      try { 
        javaGDSImpl0.iscCreateDatabase((String) null, (IscDbHandle) null, (DatabaseParameterBuffer) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connection string missing
         //
         verifyException("org.firebirdsql.gds.impl.DbAttachInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNull(isc_db_handle_impl0);
      
      try { 
        javaGDSImpl0.iscDropDatabase((IscDbHandle) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNotNull(isc_stmt_handle_impl0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(0, xSQLDA0.sqld);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertNull(isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecuteImmediate((IscDbHandle) null, (IscTrHandle) isc_tr_handle_impl0, (String) null, "O~&F^g~+k.DeI", 4, xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl1 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl1.getProtocol());
      assertEquals(0, isc_db_handle_impl1.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl1.getResp_object());
      assertEquals(0, isc_db_handle_impl1.getResp_data_len());
      assertEquals(0, isc_db_handle_impl1.getODSMajorVersion());
      assertTrue(isc_db_handle_impl1.isValid());
      assertEquals(0L, isc_db_handle_impl1.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl1.getDialect());
      assertNotNull(isc_db_handle_impl1);
      assertFalse(isc_db_handle_impl1.equals((Object)isc_db_handle_impl0));
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_blob_handle_impl0.setBlobId((-241L));
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals((-241L), isc_blob_handle_impl0.getBlobId());
      
      isc_blob_handle_impl0.setDb(isc_db_handle_impl1);
      assertEquals(0, isc_db_handle_impl1.getProtocol());
      assertEquals(0, isc_db_handle_impl1.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl1.getResp_object());
      assertEquals(0, isc_db_handle_impl1.getResp_data_len());
      assertEquals(0, isc_db_handle_impl1.getODSMajorVersion());
      assertTrue(isc_db_handle_impl1.isValid());
      assertEquals(0L, isc_db_handle_impl1.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl1.getDialect());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals((-241L), isc_blob_handle_impl0.getBlobId());
      assertNotSame(isc_db_handle_impl1, isc_db_handle_impl0);
      assertFalse(isc_db_handle_impl1.equals((Object)isc_db_handle_impl0));
      
      try { 
        javaGDSImpl0.iscCloseBlob(isc_blob_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message (getMessage() has thrown an exception)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertNull(abstractIscTrHandle0);
      
      XSQLDA xSQLDA0 = new XSQLDA(1);
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.sqld);
      assertEquals(1, xSQLDA0.version);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_tr_handle_impl0.removeBlob(isc_blob_handle_impl0);
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertNotNull(isc_stmt_handle_impl1);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      try { 
        javaGDSImpl0.iscRollbackRetaining(isc_tr_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNull(isc_db_handle_impl0);
      
      try { 
        javaGDSImpl0.iscDsqlAllocateStatement((IscDbHandle) null, isc_stmt_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = (isc_blob_handle_impl)javaGDSImpl0.createIscBlobHandle();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      BlobParameterBufferImp blobParameterBufferImp0 = (BlobParameterBufferImp)javaGDSImpl0.createBlobParameterBuffer();
      assertNotNull(blobParameterBufferImp0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscTransactionInformation(isc_tr_handle_impl0, byteArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = (isc_blob_handle_impl)javaGDSImpl0.createIscBlobHandle();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      try { 
        javaGDSImpl0.iscGetSegment(isc_blob_handle_impl0, 3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertNotNull(isc_svc_handle_impl0);
      
      DbAttachInfo dbAttachInfo0 = new DbAttachInfo("PURE_JAVA");
      assertEquals(3050, dbAttachInfo0.getPort());
      assertEquals("PURE_JAVA", dbAttachInfo0.getFileName());
      assertEquals("localhost", dbAttachInfo0.getServer());
      assertNotNull(dbAttachInfo0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertNotNull(isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.internalAttachDatabase(dbAttachInfo0, (IscDbHandle) isc_db_handle_impl0, databaseParameterBuffer0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_db_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_db_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      isc_tr_handle_impl0.setTransactionId(2660);
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = (isc_blob_handle_impl)javaGDSImpl0.createIscBlobHandle();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertNotNull(isc_db_handle_impl0);
      
      isc_blob_handle_impl isc_blob_handle_impl1 = (isc_blob_handle_impl)javaGDSImpl0.createIscBlobHandle();
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertFalse(isc_blob_handle_impl1.isEof());
      assertEquals(0, isc_blob_handle_impl1.getRbl_id());
      assertEquals(0, isc_blob_handle_impl1.getPosition());
      assertNotNull(isc_blob_handle_impl1);
      assertNotSame(isc_blob_handle_impl1, isc_blob_handle_impl0);
      assertFalse(isc_blob_handle_impl1.equals((Object)isc_blob_handle_impl0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscOpenBlob2(isc_db_handle_impl0, isc_tr_handle_impl0, isc_blob_handle_impl1, (BlobParameterBuffer) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_db_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_db_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = (isc_db_handle_impl)javaGDSImpl0.createIscDbHandle();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertNotNull(isc_stmt_handle_impl0);
      
      XSQLDA xSQLDA0 = isc_stmt_handle_impl0.getInSqlda();
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertNull(xSQLDA0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNotNull(isc_tr_handle_impl1);
      assertFalse(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl0));
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      IscDbHandle iscDbHandle0 = isc_tr_handle_impl1.getDbHandle();
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNull(iscDbHandle0);
      assertNotSame(isc_tr_handle_impl1, isc_tr_handle_impl0);
      assertFalse(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl0));
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      isc_tr_handle_impl isc_tr_handle_impl2 = (isc_tr_handle_impl)javaGDSImpl0.createIscTrHandle();
      assertEquals(0, isc_tr_handle_impl2.getState());
      assertNotNull(isc_tr_handle_impl2);
      assertNotSame(javaGDSImpl0, javaGDSImpl1);
      assertFalse(javaGDSImpl0.equals((Object)javaGDSImpl1));
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      // Undeclared exception!
      try { 
        javaGDSImpl1.iscDetachDatabase(isc_db_handle_impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.isc_db_handle_impl", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertNotNull(isc_db_handle_impl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      BlobParameterBuffer blobParameterBuffer0 = javaGDSImpl0.createBlobParameterBuffer();
      assertNotNull(blobParameterBuffer0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0.getTr();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNull(isc_tr_handle_impl0);
      
      try { 
        javaGDSImpl0.iscCreateBlob2(isc_db_handle_impl0, (IscTrHandle) null, isc_blob_handle_impl0, blobParameterBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.BlobParameterBufferImp blobParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.BlobParameterBufferImp();
      assertNotNull(blobParameterBufferImp0);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertNotNull(isc_svc_handle_impl0);
      
      isc_svc_handle_impl0.setResp_object((-2479));
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertEquals((-2479), isc_svc_handle_impl0.getResp_object());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      
      javaGDSImpl0.receiveResponse(isc_svc_handle_impl0, 37);
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertEquals((-2479), isc_svc_handle_impl0.getResp_object());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertTrue(isc_svc_handle_impl0.isNotValid());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.getDescribeSelectInfo(isc_stmt_handle_impl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl0.notifyOpenResultSet();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertTrue(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDropDatabase(isc_db_handle_impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getRsrId());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertNotNull(isc_stmt_handle_impl1);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlAllocateStatement((IscDbHandle) null, isc_stmt_handle_impl1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ServiceParameterBufferImp serviceParameterBufferImp0 = new ServiceParameterBufferImp();
      assertNotNull(serviceParameterBufferImp0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      ServiceRequestBufferImp serviceRequestBufferImp0 = (ServiceRequestBufferImp)javaGDSImpl0.createServiceRequestBuffer(62);
      assertEquals(62, serviceRequestBufferImp0.getTaskIdentifier());
      assertNotNull(serviceRequestBufferImp0);
      
      try { 
        javaGDSImpl0.iscServiceStart((IscSvcHandle) null, serviceRequestBufferImp0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid service handle
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNull(isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      org.firebirdsql.gds.impl.jni.BlobParameterBufferImp blobParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.BlobParameterBufferImp();
      assertNotNull(blobParameterBufferImp0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscOpenBlob2((IscDbHandle) null, isc_tr_handle_impl0, isc_blob_handle_impl0, blobParameterBufferImp0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_tr_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_tr_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = (isc_svc_handle_impl)javaGDSImpl0.createIscSvcHandle();
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertNotNull(isc_svc_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscVaxInteger((byte[]) null, 83, 255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = (isc_db_handle_impl)javaGDSImpl0.createIscDbHandle();
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-59);
      byteArray0[0] = (byte) (-59);
      byte byte1 = (byte) (-118);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)38;
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDatabaseInfo(isc_db_handle_impl0, byteArray0, 69);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = JavaGDSImpl.parseRawAddress("?\"fq");
      assertNull(byteArray0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      ServiceRequestBufferImp serviceRequestBufferImp0 = (ServiceRequestBufferImp)javaGDSImpl0.createServiceRequestBuffer(933);
      assertEquals(933, serviceRequestBufferImp0.getTaskIdentifier());
      assertNotNull(serviceRequestBufferImp0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsrId());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertNotNull(isc_stmt_handle_impl1);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0.getTr();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNull(isc_tr_handle_impl0);
      
      XSQLDA xSQLDA0 = isc_stmt_handle_impl1.getOutSqlda();
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsrId());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertNull(xSQLDA0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl2 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl2.isSingletonResult());
      assertFalse(isc_stmt_handle_impl2.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl2.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl2.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl2.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl2.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl2.getStatementType());
      assertEquals(0, isc_stmt_handle_impl2.getRsrId());
      assertEquals(0, isc_stmt_handle_impl2.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl2.size());
      assertEquals(0, isc_stmt_handle_impl2.getDeleteCount());
      assertFalse(isc_stmt_handle_impl2.isValid());
      assertNull(isc_stmt_handle_impl2.getExecutionPlan());
      assertNotNull(isc_stmt_handle_impl2);
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl1));
      
      // Undeclared exception!
      try { 
        javaGDSImpl1.iscDsqlDescribeBind(isc_stmt_handle_impl2, 6);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertNotNull(isc_svc_handle_impl0);
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        javaGDSImpl0.receiveResponse(isc_svc_handle_impl0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      javaGDSImpl0.receiveResponse((isc_svc_handle_impl) null, (-4342));
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      javaGDSImpl0.addProcessName(databaseParameterBufferImp0);
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      IscDbHandle iscDbHandle0 = isc_tr_handle_impl0.getDbHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNull(iscDbHandle0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      isc_tr_handle_impl isc_tr_handle_impl1 = (isc_tr_handle_impl)javaGDSImpl1.createIscTrHandle();
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNotNull(isc_tr_handle_impl1);
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      JavaGDSImpl javaGDSImpl2 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl2);
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl0));
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl1));
      
      try { 
        javaGDSImpl2.iscDetachDatabase((IscDbHandle) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = (isc_svc_handle_impl)javaGDSImpl0.createIscSvcHandle();
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertNotNull(isc_svc_handle_impl0);
      
      ServiceRequestBufferImp serviceRequestBufferImp0 = new ServiceRequestBufferImp(52);
      assertEquals(52, serviceRequestBufferImp0.getTaskIdentifier());
      assertNotNull(serviceRequestBufferImp0);
      
      try { 
        javaGDSImpl0.iscServiceStart(isc_svc_handle_impl0, serviceRequestBufferImp0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid service handle
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDatabaseInfo(isc_db_handle_impl0, byteArray0, (-2107796326));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-67);
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlSqlInfo(isc_stmt_handle_impl0, byteArray0, (byte) (-67));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNull(isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.deepCopy();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      javaGDSImpl0.addProcessId(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo(databaseParameterBuffer0);
      assertNotNull(fBConnectionRequestInfo0);
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      javaGDSImpl0.addProcessId(fBConnectionRequestInfo0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl1 = isc_stmt_handle_impl0.getRsr_rdb();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNull(isc_db_handle_impl1);
      
      DbAttachInfo dbAttachInfo0 = new DbAttachInfo("PURE_JAVA");
      assertEquals(3050, dbAttachInfo0.getPort());
      assertEquals("PURE_JAVA", dbAttachInfo0.getFileName());
      assertEquals("localhost", dbAttachInfo0.getServer());
      assertNotNull(dbAttachInfo0);
      
      try { 
        javaGDSImpl0.openSocket((isc_db_handle_impl) null, dbAttachInfo0, false, 134, 134);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@5b613065
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = (isc_svc_handle_impl)javaGDSImpl0.createIscSvcHandle();
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertNotNull(isc_svc_handle_impl0);
      
      ServiceParameterBufferImp serviceParameterBufferImp0 = (ServiceParameterBufferImp)javaGDSImpl0.createServiceParameterBuffer();
      assertNotNull(serviceParameterBufferImp0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscServiceAttach((String) null, isc_svc_handle_impl0, serviceParameterBufferImp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNotNull(isc_tr_handle_impl1);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      IscDbHandle iscDbHandle0 = isc_tr_handle_impl1.getDbHandle();
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNull(iscDbHandle0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = javaGDSImpl0.createDatabaseParameterBuffer();
      assertNotNull(databaseParameterBuffer0);
      
      try { 
        javaGDSImpl0.iscAttachDatabase("", (IscDbHandle) null, databaseParameterBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Bad connection string: ':' at beginning or end of:335544323
         //
         verifyException("org.firebirdsql.gds.impl.DbAttachInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      DatabaseParameterBuffer databaseParameterBuffer1 = databaseParameterBufferImp0.deepCopy();
      assertNotNull(databaseParameterBuffer1);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer1);
      assertNotSame(databaseParameterBuffer1, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer1, databaseParameterBufferImp0);
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBuffer1.equals((Object)databaseParameterBufferImp0));
      assertTrue(databaseParameterBuffer1.equals((Object)databaseParameterBuffer0));
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0.getTr();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertNull(isc_tr_handle_impl0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("GNpzG\"fH~G1O'^U^", 3362);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byteArray0[6] = (byte)51;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      try { 
        javaGDSImpl0.iscPrepareTransaction2((IscTrHandle) null, byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(abstractIscTrHandle0);
      
      XSQLDA xSQLDA0 = new XSQLDA(1);
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(1, xSQLDA0.sqld);
      assertEquals(1, xSQLDA0.sqln);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscCloseBlob((IscBlobHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl0.setStatementType(2812);
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(2812, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.getSqlPrepareInfo(isc_stmt_handle_impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlSetCursorName(isc_stmt_handle_impl0, "2*@=^c'", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      ServiceParameterBufferImp serviceParameterBufferImp0 = new ServiceParameterBufferImp();
      assertNotNull(serviceParameterBufferImp0);
      
      try { 
        javaGDSImpl0.iscServiceAttach("D,*J1y?h54m^", (IscSvcHandle) null, serviceParameterBufferImp0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid service handle
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      XSQLDA xSQLDA0 = new XSQLDA(5);
      assertNotNull(xSQLDA0);
      assertEquals(5, xSQLDA0.sqld);
      assertEquals(5, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      isc_db_handle_impl0.setODSMinorVersion((-1210));
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals((-1210), isc_db_handle_impl0.getODSMinorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecuteImmediate((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) isc_tr_handle_impl0, (byte[]) null, 3, xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertNotNull(isc_svc_handle_impl0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = (isc_blob_handle_impl)javaGDSImpl0.createIscBlobHandle();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscBlobInfo(isc_blob_handle_impl0, byteArray0, 2147483645);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertNotNull(isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      BlobParameterBuffer blobParameterBuffer0 = javaGDSImpl0.createBlobParameterBuffer();
      assertNotNull(blobParameterBuffer0);
      assertNotSame(javaGDSImpl0, javaGDSImpl1);
      assertFalse(javaGDSImpl0.equals((Object)javaGDSImpl1));
      
      Integer integer0 = new Integer((-3248));
      assertNotNull(integer0);
      assertEquals((-3248), (int)integer0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl1.internalAttachDatabase("@,\":L2>9T^cYu!.Iu-~", integer0, "CqC<&", isc_db_handle_impl0, databaseParameterBufferImp0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_db_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_db_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = JavaGDSImpl.parseRawAddress("?\"fq");
      assertNull(byteArray0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0.getTr();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNull(isc_tr_handle_impl0);
      
      isc_stmt_handle_impl0.setSingletonResult(true);
      assertTrue(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      
      isc_blob_handle_impl0.setDb((isc_db_handle_impl) null);
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      
      isc_stmt_handle_impl0.setDeleteCount(41);
      assertTrue(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(41, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      
      isc_blob_handle_impl0.setDb((isc_db_handle_impl) null);
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscSeekBlob(isc_blob_handle_impl0, 933, (-645));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0.getTr();
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNull(isc_tr_handle_impl0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      XSQLDA xSQLDA0 = new XSQLDA(0);
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecute2((IscTrHandle) null, isc_stmt_handle_impl0, (-27), xSQLDA0, xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNotNull(isc_stmt_handle_impl0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscTransactionInformation(isc_tr_handle_impl0, (byte[]) null, 4);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_tr_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_tr_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.deepCopy();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNull(isc_db_handle_impl0);
      
      try { 
        javaGDSImpl0.iscCreateDatabase((String) null, (IscDbHandle) null, databaseParameterBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connection string missing
         //
         verifyException("org.firebirdsql.gds.impl.DbAttachInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      javaGDSImpl1.receiveResponse(isc_db_handle_impl0, 2);
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl1.createIscStmtHandle();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNotNull(isc_stmt_handle_impl0);
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      isc_db_handle_impl isc_db_handle_impl1 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl1.getProtocol());
      assertEquals(0, isc_db_handle_impl1.getDialect());
      assertEquals(0L, isc_db_handle_impl1.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl1.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl1.getResp_object());
      assertEquals(0, isc_db_handle_impl1.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl1.getResp_data_len());
      assertTrue(isc_db_handle_impl1.isValid());
      assertNotNull(isc_db_handle_impl1);
      assertFalse(isc_db_handle_impl1.equals((Object)isc_db_handle_impl0));
      
      try { 
        javaGDSImpl1.iscDsqlAllocateStatement(isc_db_handle_impl1, (IscStmtHandle) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid request handle
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDropDatabase(isc_db_handle_impl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_db_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_db_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte) (-106);
      byteArray0[7] = (byte) (-106);
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscInteger(byteArray0, (byte) (-72), 3362);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -72
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      try { 
        javaGDSImpl0.iscPrepareTransaction((IscTrHandle) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqln);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = (isc_blob_handle_impl)javaGDSImpl0.createIscBlobHandle();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      try { 
        javaGDSImpl0.iscDsqlFetch((IscStmtHandle) null, 3420, xSQLDA0, 3012);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid request handle
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertNotNull(isc_db_handle_impl0);
      
      isc_db_handle_impl0.setProtocol(3377);
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(3377, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl1.isEof());
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertEquals(0, isc_blob_handle_impl1.getRblId());
      assertNotNull(isc_blob_handle_impl1);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = (isc_tr_handle_impl)javaGDSImpl0.createIscTrHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      ServiceParameterBufferImp serviceParameterBufferImp0 = (ServiceParameterBufferImp)javaGDSImpl0.createServiceParameterBuffer();
      assertNotNull(serviceParameterBufferImp0);
      
      org.firebirdsql.gds.impl.jni.BlobParameterBufferImp blobParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.BlobParameterBufferImp();
      assertNotNull(blobParameterBufferImp0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscCreateBlob2(isc_db_handle_impl0, isc_tr_handle_impl0, isc_blob_handle_impl0, blobParameterBufferImp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = JavaGDSImpl.parseRawAddress("?\"fq");
      assertNull(byteArray0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      int int0 = 933;
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      ServiceRequestBufferImp serviceRequestBufferImp0 = (ServiceRequestBufferImp)javaGDSImpl0.createServiceRequestBuffer(933);
      assertEquals(933, serviceRequestBufferImp0.getTaskIdentifier());
      assertNotNull(serviceRequestBufferImp0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsrId());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id_ptr());
      assertNotNull(isc_stmt_handle_impl1);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl1.getRsr_rdb();
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsrId());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id_ptr());
      assertNull(isc_db_handle_impl0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp1 = (DatabaseParameterBufferImp)databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBufferImp1);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBufferImp1);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBufferImp0);
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBufferImp0));
      
      try { 
        javaGDSImpl0.internalAttachDatabase((String) null, (Integer) 2, (String) null, (IscDbHandle) null, databaseParameterBufferImp1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null or empty filename in DbAttachInfo
         //
         verifyException("org.firebirdsql.gds.impl.DbAttachInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      XSQLDA xSQLDA0 = new XSQLDA(5);
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(5, xSQLDA0.sqld);
      assertEquals(5, xSQLDA0.sqln);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      XSQLDA xSQLDA1 = new XSQLDA();
      assertNotNull(xSQLDA1);
      assertFalse(xSQLDA1.equals((Object)xSQLDA0));
      assertEquals(0, xSQLDA1.sqld);
      assertEquals(0, xSQLDA1.sqln);
      assertEquals(1, xSQLDA1.version);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      XSQLDA xSQLDA2 = isc_stmt_handle_impl0.getInSqlda();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(xSQLDA2);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecuteImmediate((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) isc_tr_handle_impl0, "LC ;}mc_ q", "org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl", 1392, (XSQLDA) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertNotNull(isc_svc_handle_impl0);
      
      isc_svc_handle_impl0.setHandle(335544559);
      assertFalse(isc_svc_handle_impl0.isNotValid());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertTrue(isc_svc_handle_impl0.isValid());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      
      int int0 = 9;
      // Undeclared exception!
      try { 
        javaGDSImpl0.receiveResponse(isc_svc_handle_impl0, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = (isc_tr_handle_impl)javaGDSImpl0.createIscTrHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp1 = (DatabaseParameterBufferImp)databaseParameterBufferImp0.deepCopy();
      assertNotNull(databaseParameterBufferImp1);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBufferImp1);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBufferImp0);
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBufferImp0));
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_db_handle_impl0);
      
      try { 
        javaGDSImpl0.iscAttachDatabase("@lP3yCb", (IscDbHandle) null, (DatabaseParameterBuffer) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl0.setDbHandle(isc_db_handle_impl0);
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte) (-116);
      try { 
        javaGDSImpl0.iscRollbackTransaction(isc_tr_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // transaction  is 
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertNotNull(isc_db_handle_impl0);
      
      String string0 = "[yR5D.yrY,\"j";
      isc_db_handle_impl0.setProtocol(2147483645);
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(2147483645, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      
      Integer integer0 = new Integer((-221));
      assertNotNull(integer0);
      assertEquals((-221), (int)integer0);
      
      DbAttachInfo dbAttachInfo0 = new DbAttachInfo("[yR5D.yrY,\"j", integer0, "[yR5D.yrY,\"j");
      assertEquals("[yR5D.yrY,\"j", dbAttachInfo0.getServer());
      assertEquals("[yR5D.yrY,\"j", dbAttachInfo0.getFileName());
      assertEquals((-221), dbAttachInfo0.getPort());
      assertNotNull(dbAttachInfo0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      int int0 = 335544332;
      databaseParameterBufferImp0.addArgument(335544332, 112);
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.connect(isc_db_handle_impl0, dbAttachInfo0, databaseParameterBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-221
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      
      try { 
        javaGDSImpl0.iscPrepareTransaction2((IscTrHandle) null, (byte[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = (isc_db_handle_impl)javaGDSImpl0.createIscDbHandle();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      javaGDSImpl0.addProcessName((DatabaseParameterBuffer) null);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl1);
      
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl2.getStatementType());
      assertEquals(0, isc_stmt_handle_impl2.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl2.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl2.size());
      assertFalse(isc_stmt_handle_impl2.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl2.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl2.getRsr_id());
      assertFalse(isc_stmt_handle_impl2.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl2.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl2.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl2.getUpdateCount());
      assertFalse(isc_stmt_handle_impl2.isValid());
      assertNotNull(isc_stmt_handle_impl2);
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl1));
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
      
      AbstractJavaGDSImpl.calculateIOLength(xSQLDA0);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
      
      try { 
        javaGDSImpl1.iscCommitRetaining((IscTrHandle) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("g:^uCr;N2'", 482);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      isc_db_handle_impl isc_db_handle_impl1 = (isc_db_handle_impl)javaGDSImpl0.createIscDbHandle();
      assertEquals(0, isc_db_handle_impl1.getProtocol());
      assertEquals(0L, isc_db_handle_impl1.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl1.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl1.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl1.getResp_object());
      assertEquals(0, isc_db_handle_impl1.getResp_data_len());
      assertEquals(0, isc_db_handle_impl1.getDialect());
      assertTrue(isc_db_handle_impl1.isValid());
      assertNotNull(isc_db_handle_impl1);
      assertNotSame(isc_db_handle_impl1, isc_db_handle_impl0);
      assertFalse(isc_db_handle_impl1.equals((Object)isc_db_handle_impl0));
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl2 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl2.getDialect());
      assertTrue(isc_db_handle_impl2.isValid());
      assertEquals(0, isc_db_handle_impl2.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl2.getProtocol());
      assertEquals(0, isc_db_handle_impl2.getRdb_id_ptr());
      assertEquals(0, isc_db_handle_impl2.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl2.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl2.getResp_object());
      assertNotNull(isc_db_handle_impl2);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscAttachDatabase("gdPGa{xqC?", isc_db_handle_impl2, databaseParameterBufferImp0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_db_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_db_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscCommitTransaction(isc_tr_handle_impl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_tr_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_tr_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNotNull(isc_stmt_handle_impl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      byte[] byteArray0 = AbstractJavaGDSImpl.describe_bind_info15;
      assertNotNull(byteArray0);
      assertEquals(13, byteArray0.length);
      
      // Undeclared exception!
      try { 
        javaGDSImpl1.getSqlCounts(isc_stmt_handle_impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream();
      assertNotNull(xdrOutputStream0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0.getTr();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNull(isc_tr_handle_impl0);
      
      XSQLDA xSQLDA0 = new XSQLDA(2);
      assertNotNull(xSQLDA0);
      assertEquals(2, xSQLDA0.sqld);
      assertEquals(2, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
      
      xSQLDA0.version = 1;
      xSQLDA0.sqln = 4;
      // Undeclared exception!
      try { 
        AbstractJavaGDSImpl.calculateIOLength(xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "PURE_JAVA");
      assertFalse(boolean0);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertNotNull(isc_svc_handle_impl0);
      
      isc_svc_handle_impl0.setHandle(0);
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertFalse(isc_svc_handle_impl0.isNotValid());
      assertTrue(isc_svc_handle_impl0.isValid());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      
      ServiceParameterBufferImp serviceParameterBufferImp0 = new ServiceParameterBufferImp();
      assertNotNull(serviceParameterBufferImp0);
      
      try { 
        javaGDSImpl0.iscServiceAttach("Y4#?Q#<A", isc_svc_handle_impl0, serviceParameterBufferImp0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // service Y4#?Q#<A is not defined
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl0.setAllRowsFetched(true);
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertTrue(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.size());
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlDescribe(isc_stmt_handle_impl0, (-1694));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      IscDbHandle iscDbHandle0 = isc_tr_handle_impl0.getDbHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNull(iscDbHandle0);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqln);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl1.iscDsqlExecuteImmediate((IscDbHandle) null, (IscTrHandle) isc_tr_handle_impl0, "//", 0, xSQLDA0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_tr_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_tr_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte) (-22);
      byteArray0[7] = (byte) (-39);
      try { 
        javaGDSImpl0.iscPutSegment(isc_blob_handle_impl0, byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_blob_handle_impl0.setDb(isc_db_handle_impl0);
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      
      try { 
        javaGDSImpl0.iscCloseBlob(isc_blob_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      XSQLDA xSQLDA0 = null;
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0.getTr();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNull(isc_tr_handle_impl0);
      
      byte[] byteArray0 = new byte[7];
      isc_blob_handle_impl0.setBlobId(206L);
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(206L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      
      byteArray0[0] = (byte)56;
      isc_db_handle_impl0.setODSMinorVersion(5);
      assertEquals(5, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-74);
      GDSException gDSException0 = GDSException.createWithXAErrorCode("|?P", 5);
      assertNull(gDSException0.getParam());
      assertFalse(gDSException0.isWarning());
      assertEquals((-1), gDSException0.getFbErrorCode());
      assertEquals(5, gDSException0.getXAErrorCode());
      assertEquals(0, gDSException0.getIntParam());
      assertNotNull(gDSException0);
      
      GDSException gDSException1 = gDSException0.getNext();
      assertNull(gDSException0.getParam());
      assertFalse(gDSException0.isWarning());
      assertEquals((-1), gDSException0.getFbErrorCode());
      assertEquals(5, gDSException0.getXAErrorCode());
      assertEquals(0, gDSException0.getIntParam());
      assertNull(gDSException1);
      
      isc_db_handle_impl0.addWarning((GDSException) null);
      assertEquals(5, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      
      byteArray0[6] = (byte)32;
      // Undeclared exception!
      try { 
        javaGDSImpl1.iscDsqlExecImmed2((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) null, byteArray0, 2024, (XSQLDA) null, (XSQLDA) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      try { 
        javaGDSImpl0.iscCommitTransaction(isc_tr_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlDescribe(isc_stmt_handle_impl0, (-347));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertNotNull(isc_db_handle_impl0);
      
      IscTrHandle iscTrHandle0 = null;
      byte[] byteArray0 = new byte[7];
      Subject subject0 = new Subject();
      assertNotNull(subject0);
      
      Class<Principal> class0 = Principal.class;
      Set<Principal> set0 = subject0.getPrincipals(class0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Subject subject1 = new Subject(false, set0, set0, set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(subject1);
      assertTrue(subject1.equals((Object)subject0));
      
      isc_db_handle_impl0.setSubject(subject1);
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotSame(subject0, subject1);
      assertNotSame(subject1, subject0);
      assertTrue(subject0.equals((Object)subject1));
      assertTrue(subject1.equals((Object)subject0));
      
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-33);
      isc_db_handle_impl0.setDialect((byte) (-124));
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals((-124), isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      
      byteArray0[5] = (byte)38;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte)126;
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNotNull(isc_stmt_handle_impl0);
      
      XSQLDA xSQLDA0 = isc_stmt_handle_impl0.getInSqlda();
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNull(xSQLDA0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecuteImmediate((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) null, byteArray0, 1243, (XSQLDA) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractJavaGDSImpl.calculateIOLength((XSQLDA) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = (isc_blob_handle_impl)javaGDSImpl0.createIscBlobHandle();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscTransactionInformation(isc_tr_handle_impl0, byteArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlDescribeBind(isc_stmt_handle_impl0, 38);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = "NONE";
      boolean boolean0 = NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "NONE");
      assertFalse(boolean0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      int int0 = (-867);
      isc_blob_handle_impl0.rbl_flagsRemove(47);
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      
      isc_blob_handle_impl0.setBlobId((-1190L));
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals((-1190L), isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      
      isc_blob_handle_impl0.rbl_flagsRemove((-867));
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals((-1190L), isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      
      try { 
        javaGDSImpl0.iscGetSegment(isc_blob_handle_impl0, 259);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = (isc_tr_handle_impl)javaGDSImpl0.createIscTrHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNull(isc_db_handle_impl0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(1, xSQLDA0.version);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecuteImmediate((IscDbHandle) null, (IscTrHandle) isc_tr_handle_impl0, (String) null, 0, xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)0;
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl1.isEof());
      assertEquals(0, isc_blob_handle_impl1.getRblId());
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertNotNull(isc_blob_handle_impl1);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl1.getDb();
      assertFalse(isc_blob_handle_impl1.isEof());
      assertEquals(0, isc_blob_handle_impl1.getRblId());
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertNull(isc_db_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNotNull(isc_stmt_handle_impl0);
      
      try { 
        javaGDSImpl0.iscDsqlAllocateStatement((IscDbHandle) null, isc_stmt_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      try { 
        javaGDSImpl1.iscCancelEvents((IscDbHandle) null, (EventHandle) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNull(isc_db_handle_impl0);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertNotNull(isc_svc_handle_impl0);
      
      ServiceRequestBufferImp serviceRequestBufferImp0 = new ServiceRequestBufferImp((-139));
      assertEquals((-139), serviceRequestBufferImp0.getTaskIdentifier());
      assertNotNull(serviceRequestBufferImp0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-123);
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      String string0 = null;
      try { 
        javaGDSImpl1.internalAttachDatabase("PURE_JAVA", (Integer) null, (String) null, (IscDbHandle) null, databaseParameterBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null or empty filename in DbAttachInfo
         //
         verifyException("org.firebirdsql.gds.impl.DbAttachInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertNotNull(isc_db_handle_impl0);
      
      javaGDSImpl0.receiveResponse(isc_db_handle_impl0, 0);
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscPrepareTransaction(isc_tr_handle_impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.getDescribeSelectInfo((IscStmtHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(abstractIscTrHandle0);
      
      XSQLDA xSQLDA0 = new XSQLDA(1);
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(1, xSQLDA0.sqld);
      assertEquals(1, xSQLDA0.sqln);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertNotNull(isc_db_handle_impl0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = javaGDSImpl0.createDatabaseParameterBuffer();
      assertNotNull(databaseParameterBuffer0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscPrepareTransaction(isc_tr_handle_impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      org.firebirdsql.gds.impl.jni.EventHandleImp eventHandleImp0 = new org.firebirdsql.gds.impl.jni.EventHandleImp("PURE_JAVA");
      assertEquals("PURE_JAVA", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getSize());
      assertEquals((-1), eventHandleImp0.getEventStructHandle());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertFalse(eventHandleImp0.isCancelled());
      assertFalse(eventHandleImp0.isValid());
      assertNotNull(eventHandleImp0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscEventCounts(eventHandleImp0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.EventHandleImp cannot be cast to org.firebirdsql.gds.impl.wire.EventHandleImp
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNull(isc_db_handle_impl0);
      
      isc_blob_handle_impl0.rbl_flagsRemove((-34));
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      
      EventHandleImp eventHandleImp0 = new EventHandleImp("71eo=*cvyo;=");
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals("71eo=*cvyo;=", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertNotNull(eventHandleImp0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.disconnect((isc_db_handle_impl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.createEventHandle((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.EventHandleImp", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertNotNull(isc_stmt_handle_impl1);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl1.getTransaction();
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertNull(abstractIscTrHandle0);
      assertNotSame(isc_stmt_handle_impl1, isc_stmt_handle_impl0);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertNotNull(isc_db_handle_impl0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      try { 
        javaGDSImpl0.iscAttachDatabase((String) null, isc_db_handle_impl0, databaseParameterBufferImp0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connection string missing
         //
         verifyException("org.firebirdsql.gds.impl.DbAttachInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      JavaGDSImpl javaGDSImpl2 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl2);
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl0));
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl1));
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      DbAttachInfo dbAttachInfo0 = new DbAttachInfo("L}0wHJ5Bb>mk8/8s", (Integer) 0, "o?Rj+2AW9-:h,");
      assertEquals("L}0wHJ5Bb>mk8/8s", dbAttachInfo0.getServer());
      assertEquals("o?Rj+2AW9-:h,", dbAttachInfo0.getFileName());
      assertEquals(0, dbAttachInfo0.getPort());
      assertNotNull(dbAttachInfo0);
      
      try { 
        javaGDSImpl2.internalAttachDatabase(dbAttachInfo0, (IscDbHandle) isc_db_handle_impl0, (DatabaseParameterBuffer) databaseParameterBufferImp0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to complete network request to host \"L}0wHJ5Bb>mk8/8s\".
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlDescribeBind(isc_stmt_handle_impl0, (-2375));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl0.setDbHandle(isc_db_handle_impl0);
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      try { 
        javaGDSImpl0.iscRollbackRetaining(isc_tr_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // transaction  is 
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertNotNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.fbCancelOperation(isc_db_handle_impl0, 39);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_db_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_db_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscCreateDatabase("Xt|Cb>bI:KD~OF|$Z", isc_db_handle_impl0, databaseParameterBufferImp0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_db_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_db_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertNotNull(isc_stmt_handle_impl1);
      
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl2.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl2.getStatementType());
      assertFalse(isc_stmt_handle_impl2.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl2.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl2.getUpdateCount());
      assertFalse(isc_stmt_handle_impl2.isValid());
      assertFalse(isc_stmt_handle_impl2.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl2.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl2.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl2.size());
      assertEquals(0, isc_stmt_handle_impl2.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl2.getInsertCount());
      assertNotNull(isc_stmt_handle_impl2);
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl1));
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      JavaGDSImpl javaGDSImpl2 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl2);
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl1));
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl0));
      
      javaGDSImpl1.addProcessName((DatabaseParameterBuffer) null);
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertNotSame(javaGDSImpl1, javaGDSImpl2);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl2));
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      IscDbHandle iscDbHandle0 = isc_tr_handle_impl0.getDbHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNull(iscDbHandle0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      isc_tr_handle_impl isc_tr_handle_impl1 = (isc_tr_handle_impl)javaGDSImpl1.createIscTrHandle();
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNotNull(isc_tr_handle_impl1);
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertNotSame(javaGDSImpl1, javaGDSImpl2);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl2));
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      try { 
        javaGDSImpl2.iscDetachDatabase((IscDbHandle) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertNotNull(isc_db_handle_impl0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      try { 
        javaGDSImpl0.connect(isc_db_handle_impl0, "PURE_JAVA", (Integer) 4, "PURE_JAVA", databaseParameterBufferImp0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to complete network request to host \"PURE_JAVA\".
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      try { 
        javaGDSImpl1.iscCommitRetaining(isc_tr_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      ServiceRequestBufferImp serviceRequestBufferImp0 = new ServiceRequestBufferImp(0);
      assertEquals(0, serviceRequestBufferImp0.getTaskIdentifier());
      assertNotNull(serviceRequestBufferImp0);
      
      ServiceParameterBuffer serviceParameterBuffer0 = javaGDSImpl0.createServiceParameterBuffer();
      assertNotNull(serviceParameterBuffer0);
      
      Integer integer0 = new Integer(3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      Integer integer1 = new Integer(6);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(6, (int)integer1);
      
      DbAttachInfo dbAttachInfo0 = new DbAttachInfo("NONE", integer1, "PURE_JAVA");
      assertEquals(6, dbAttachInfo0.getPort());
      assertEquals("PURE_JAVA", dbAttachInfo0.getFileName());
      assertEquals("NONE", dbAttachInfo0.getServer());
      assertNotNull(dbAttachInfo0);
      assertFalse(integer1.equals((Object)integer0));
      
      DatabaseParameterBuffer databaseParameterBuffer0 = javaGDSImpl0.createDatabaseParameterBuffer();
      assertNotNull(databaseParameterBuffer0);
      
      FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo(databaseParameterBuffer0);
      assertNotNull(fBConnectionRequestInfo0);
      
      try { 
        javaGDSImpl0.connect((isc_db_handle_impl) null, dbAttachInfo0, databaseParameterBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to complete network request to host \"NONE\".
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNull(isc_db_handle_impl0);
      
      Integer integer0 = new Integer(631);
      assertNotNull(integer0);
      assertEquals(631, (int)integer0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo((DatabaseParameterBuffer) null);
      assertNotNull(fBConnectionRequestInfo0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Integer integer1 = new Integer(631);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(631, (int)integer1);
      
      try { 
        javaGDSImpl0.connect((isc_db_handle_impl) null, "Di]%Iuo50qVu^", integer1, "GNpzG\"fH~G1O'^U^", databaseParameterBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to complete network request to host \"Di]%Iuo50qVu^\".
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      BlobParameterBuffer blobParameterBuffer0 = javaGDSImpl1.createBlobParameterBuffer();
      assertNotNull(blobParameterBuffer0);
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      try { 
        javaGDSImpl1.iscOpenBlob2(isc_db_handle_impl0, isc_tr_handle_impl0, (IscBlobHandle) null, blobParameterBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid BLOB handle
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      XSQLDA xSQLDA0 = new XSQLDA(1681);
      assertNotNull(xSQLDA0);
      assertEquals(1681, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
      assertEquals(1681, xSQLDA0.sqld);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      IscDbHandle iscDbHandle0 = isc_tr_handle_impl0.getDbHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNull(iscDbHandle0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      try { 
        javaGDSImpl0.iscReconnectTransaction(isc_tr_handle_impl0, (IscDbHandle) null, 0L);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(1, xSQLDA0.version);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscPrepareTransaction2(isc_tr_handle_impl0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = javaGDSImpl0.createDatabaseParameterBuffer();
      assertNotNull(databaseParameterBuffer0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscCommitTransaction(isc_tr_handle_impl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_tr_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_tr_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      XSQLDA xSQLDA0 = isc_stmt_handle_impl0.getOutSqlda();
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(xSQLDA0);
      
      AbstractJavaGDSImpl.calculateBLR((XSQLDA) null);
      isc_stmt_handle_impl0.clearRows();
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      
      isc_stmt_handle_impl0.statement = "TYPE2";
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertNotNull(isc_blob_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscGetSegment(isc_blob_handle_impl0, 1611);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_blob_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_blob_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNotNull(isc_stmt_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0.getTr();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNull(isc_tr_handle_impl0);
      
      byte[] byteArray0 = new byte[0];
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id_ptr());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsrId());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertNotNull(isc_stmt_handle_impl1);
      
      XSQLDA xSQLDA0 = isc_stmt_handle_impl1.getInSqlda();
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id_ptr());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsrId());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertNull(xSQLDA0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecImmed2((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) null, byteArray0, 5, (XSQLDA) null, (XSQLDA) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_db_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_db_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertNotNull(isc_db_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl1 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl1.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl1.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl1.getODSMajorVersion());
      assertTrue(isc_db_handle_impl1.isValid());
      assertEquals(0, isc_db_handle_impl1.getResp_object());
      assertEquals(0, isc_db_handle_impl1.getResp_data_len());
      assertEquals(0, isc_db_handle_impl1.getProtocol());
      assertEquals(0, isc_db_handle_impl1.getDialect());
      assertNotNull(isc_db_handle_impl1);
      assertFalse(isc_db_handle_impl1.equals((Object)isc_db_handle_impl0));
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(abstractIscTrHandle0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)20;
      byte byte0 = (byte) (-60);
      byteArray0[2] = (byte) (-60);
      isc_stmt_handle_impl0.setAllRowsFetched(true);
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertTrue(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.size());
      
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte) (-66);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[6] = (byte)56;
      byteArray0[7] = (byte) (-2);
      try { 
        javaGDSImpl0.iscDsqlPrepare((IscTrHandle) null, (IscStmtHandle) isc_stmt_handle_impl0, "MCn%", (int) (byte) (-60));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = "6";
      Integer integer0 = new Integer(809);
      assertNotNull(integer0);
      assertEquals(809, (int)integer0);
      
      DbAttachInfo dbAttachInfo0 = new DbAttachInfo("6", integer0, "PURE_JAVA");
      assertEquals("PURE_JAVA", dbAttachInfo0.getFileName());
      assertEquals(809, dbAttachInfo0.getPort());
      assertEquals("6", dbAttachInfo0.getServer());
      assertNotNull(dbAttachInfo0);
      
      int int0 = Integer.max((-59), 9);
      assertEquals(9, int0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      try { 
        javaGDSImpl0.openSocket((isc_db_handle_impl) null, dbAttachInfo0, false, (-141688239), (-141688239));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@f342dd0e
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertNotNull(isc_db_handle_impl0);
      
      isc_blob_handle_impl0.setDb(isc_db_handle_impl0);
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      
      isc_db_handle_impl0.setODSMinorVersion(81);
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(81, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      EventHandleImp eventHandleImp0 = (EventHandleImp)javaGDSImpl1.createEventHandle("PURE_JAVA");
      assertEquals("PURE_JAVA", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertNotNull(eventHandleImp0);
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      javaGDSImpl1.iscCancelEvents(isc_db_handle_impl0, eventHandleImp0);
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(81, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals("PURE_JAVA", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlDescribeBind(isc_stmt_handle_impl0, 204);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      BlobParameterBuffer blobParameterBuffer0 = javaGDSImpl0.createBlobParameterBuffer();
      assertNotNull(blobParameterBuffer0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = (isc_blob_handle_impl)javaGDSImpl0.createIscBlobHandle();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_blob_handle_impl isc_blob_handle_impl1 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl1.getRbl_id());
      assertEquals(0, isc_blob_handle_impl1.getPosition());
      assertFalse(isc_blob_handle_impl1.isEof());
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertNotNull(isc_blob_handle_impl1);
      assertFalse(isc_blob_handle_impl1.equals((Object)isc_blob_handle_impl0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte) (-72);
      isc_blob_handle_impl1.setDb(isc_db_handle_impl0);
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_blob_handle_impl1.getRbl_id());
      assertEquals(0, isc_blob_handle_impl1.getPosition());
      assertFalse(isc_blob_handle_impl1.isEof());
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertNotSame(isc_blob_handle_impl1, isc_blob_handle_impl0);
      assertFalse(isc_blob_handle_impl1.equals((Object)isc_blob_handle_impl0));
      
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte)33;
      byteArray0[8] = (byte)70;
      try { 
        javaGDSImpl0.iscPutSegment(isc_blob_handle_impl1, byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream();
      assertNotNull(xdrOutputStream0);
      
      ServiceParameterBufferImp serviceParameterBufferImp0 = new ServiceParameterBufferImp();
      assertNotNull(serviceParameterBufferImp0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      byte[] byteArray0 = new byte[5];
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscBlobInfo(isc_blob_handle_impl0, byteArray0, (-1659));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqld);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl1.iscDsqlExecImmed2((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) isc_tr_handle_impl0, "c", 6, xSQLDA0, xSQLDA0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_db_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_db_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertNull(abstractIscTrHandle0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(0, xSQLDA0.sqld);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecute((IscTrHandle) null, isc_stmt_handle_impl0, 6, xSQLDA0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl0.forgetResultSets();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      isc_tr_handle_impl0.setDbHandle(isc_db_handle_impl0);
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      try { 
        javaGDSImpl0.iscCommitTransaction(isc_tr_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // transaction  is 
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(0, xSQLDA0.sqld);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecute(isc_tr_handle_impl0, isc_stmt_handle_impl0, 0, xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      EventHandleImp eventHandleImp0 = (EventHandleImp)javaGDSImpl0.createEventHandle("3Z");
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals("3Z", eventHandleImp0.getEventName());
      assertNotNull(eventHandleImp0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      byte[] byteArray0 = AbstractJavaGDSImpl.describe_bind_info2;
      assertNotNull(byteArray0);
      assertEquals(14, byteArray0.length);
      
      TransactionParameterBuffer transactionParameterBuffer0 = javaGDSImpl0.newTransactionParameterBuffer();
      assertNotNull(transactionParameterBuffer0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl1.getSqlPrepareInfo((IscStmtHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      IscDbHandle iscDbHandle0 = isc_tr_handle_impl0.getDbHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNull(iscDbHandle0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)81;
      isc_tr_handle_impl0.forgetResultSets();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      isc_db_handle_impl isc_db_handle_impl0 = (isc_db_handle_impl)javaGDSImpl0.createIscDbHandle();
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertNotNull(isc_db_handle_impl0);
      
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)0;
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl0.setUpdateCount(62);
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(62, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      
      XSQLDA xSQLDA0 = isc_stmt_handle_impl0.getInSqlda();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(62, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNull(xSQLDA0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecuteImmediate((IscDbHandle) null, (IscTrHandle) isc_tr_handle_impl0, byteArray0, (int) (byte)0, (XSQLDA) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_tr_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_tr_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      String string0 = "GDS implementation for OpenOffice.";
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscAttachDatabase("GDS implementation for OpenOffice.", isc_db_handle_impl0, (DatabaseParameterBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertNotNull(isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlPrepare((IscTrHandle) isc_tr_handle_impl0, (IscStmtHandle) isc_stmt_handle_impl0, "org.firebirdsql.gds.XSQLVAR", (-72));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_tr_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_tr_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_blob_handle_impl0.rbl_flagsAdd(1911);
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertTrue(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      isc_blob_handle_impl0.setBlobId(1774L);
      assertEquals(1774L, isc_blob_handle_impl0.getBlobId());
      assertTrue(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      
      isc_blob_handle_impl0.setDb(isc_db_handle_impl0);
      assertEquals(1774L, isc_blob_handle_impl0.getBlobId());
      assertTrue(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertTrue(isc_db_handle_impl0.isValid());
      
      try { 
        javaGDSImpl0.iscCloseBlob(isc_blob_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNull(isc_db_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.getSqlPrepareInfo(isc_stmt_handle_impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl0.setAllRowsFetched(true);
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertTrue(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlDescribeBind(isc_stmt_handle_impl0, 23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertNotNull(isc_stmt_handle_impl1);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl2.size());
      assertFalse(isc_stmt_handle_impl2.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl2.getDeleteCount());
      assertNull(isc_stmt_handle_impl2.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl2.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl2.getStatementType());
      assertFalse(isc_stmt_handle_impl2.isValid());
      assertEquals(0, isc_stmt_handle_impl2.getSelectCount());
      assertFalse(isc_stmt_handle_impl2.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl2.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl2.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl2.getRsr_id());
      assertNotNull(isc_stmt_handle_impl2);
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl0));
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl1));
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl2.getTransaction();
      assertEquals(0, isc_stmt_handle_impl2.size());
      assertFalse(isc_stmt_handle_impl2.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl2.getDeleteCount());
      assertNull(isc_stmt_handle_impl2.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl2.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl2.getStatementType());
      assertFalse(isc_stmt_handle_impl2.isValid());
      assertEquals(0, isc_stmt_handle_impl2.getSelectCount());
      assertFalse(isc_stmt_handle_impl2.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl2.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl2.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl2.getRsr_id());
      assertNull(abstractIscTrHandle0);
      assertNotSame(isc_stmt_handle_impl2, isc_stmt_handle_impl0);
      assertNotSame(isc_stmt_handle_impl2, isc_stmt_handle_impl1);
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl0));
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl1));
      
      XSQLDA xSQLDA0 = new XSQLDA(1);
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.sqld);
      assertEquals(1, xSQLDA0.version);
      
      isc_stmt_handle_impl isc_stmt_handle_impl3 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl3.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl3.size());
      assertEquals(0, isc_stmt_handle_impl3.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl3.getStatementType());
      assertEquals(0, isc_stmt_handle_impl3.getDeleteCount());
      assertFalse(isc_stmt_handle_impl3.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl3.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl3.getRsr_id());
      assertFalse(isc_stmt_handle_impl3.isValid());
      assertFalse(isc_stmt_handle_impl3.isSingletonResult());
      assertFalse(isc_stmt_handle_impl3.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl3.getExecutionPlan());
      assertNotNull(isc_stmt_handle_impl3);
      assertFalse(isc_stmt_handle_impl3.equals((Object)isc_stmt_handle_impl1));
      assertFalse(isc_stmt_handle_impl3.equals((Object)isc_stmt_handle_impl2));
      assertFalse(isc_stmt_handle_impl3.equals((Object)isc_stmt_handle_impl0));
      
      isc_stmt_handle_impl isc_stmt_handle_impl4 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertFalse(isc_stmt_handle_impl4.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl4.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl4.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl4.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl4.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl4.size());
      assertEquals(0, isc_stmt_handle_impl4.getStatementType());
      assertFalse(isc_stmt_handle_impl4.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl4.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl4.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl4.getUpdateCount());
      assertFalse(isc_stmt_handle_impl4.isValid());
      assertNotNull(isc_stmt_handle_impl4);
      assertNotSame(isc_stmt_handle_impl4, isc_stmt_handle_impl1);
      assertNotSame(isc_stmt_handle_impl4, isc_stmt_handle_impl3);
      assertNotSame(isc_stmt_handle_impl4, isc_stmt_handle_impl2);
      assertNotSame(isc_stmt_handle_impl4, isc_stmt_handle_impl0);
      assertFalse(isc_stmt_handle_impl4.equals((Object)isc_stmt_handle_impl1));
      assertFalse(isc_stmt_handle_impl4.equals((Object)isc_stmt_handle_impl3));
      assertFalse(isc_stmt_handle_impl4.equals((Object)isc_stmt_handle_impl2));
      assertFalse(isc_stmt_handle_impl4.equals((Object)isc_stmt_handle_impl0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlSqlInfo(isc_stmt_handle_impl4, (byte[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      int int0 = 335544378;
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-106);
      int int1 = javaGDSImpl1.iscInteger(byteArray0, 335544378, (-1717986916));
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {(byte)12, (byte) (-106), (byte)12, (byte)12, (byte) (-106)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      AbstractJavaGDSImpl.EventCoordinatorImp abstractJavaGDSImpl_EventCoordinatorImp0 = null;
      try {
        abstractJavaGDSImpl_EventCoordinatorImp0 = javaGDSImpl0.new EventCoordinatorImp((byte)12, "PURE_JAVA", 32);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Unable to complete network request to host \"PURE_JAVA\".
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl$EventCoordinatorImp", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNull(abstractIscTrHandle0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      Integer integer0 = new Integer(6);
      assertNotNull(integer0);
      assertEquals(6, (int)integer0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      javaGDSImpl0.addProcessName((DatabaseParameterBuffer) null);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_blob_handle_impl0.setBlobId((-71L));
      assertEquals((-71L), isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      try { 
        javaGDSImpl0.iscPutSegment(isc_blob_handle_impl0, byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.getDescribeSelectInfo(isc_stmt_handle_impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.getSqlPrepareInfo(isc_stmt_handle_impl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      try { 
        javaGDSImpl0.iscDsqlPrepare((IscTrHandle) null, (IscStmtHandle) isc_stmt_handle_impl0, byteArray0, (-701));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      int int0 = javaGDSImpl0.iscVaxInteger((byte[]) null, 255, (-2307));
      assertEquals(0, int0);
      
      byte[] byteArray0 = JavaGDSImpl.parseRawAddress("vLhid|T$,");
      assertNull(byteArray0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNull(abstractIscTrHandle0);
      
      XSQLDA xSQLDA0 = new XSQLDA(0);
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertNotNull(isc_stmt_handle_impl1);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl1.getRsr_rdb();
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertNull(isc_db_handle_impl0);
      assertNotSame(isc_stmt_handle_impl1, isc_stmt_handle_impl0);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecImmed2((IscDbHandle) null, (IscTrHandle) null, "U^II_Wr$9YWFq9aw4z", 2642, xSQLDA0, xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_blob_handle_impl0.setBlobId((-2904L));
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals((-2904L), isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      isc_db_handle_impl0.setODSMinorVersion(2495);
      assertEquals(2495, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      
      BlobParameterBuffer blobParameterBuffer0 = javaGDSImpl0.createBlobParameterBuffer();
      assertNotNull(blobParameterBuffer0);
      
      blobParameterBuffer0.addArgument(1853, 1733);
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscOpenBlob2(isc_db_handle_impl0, isc_tr_handle_impl0, isc_blob_handle_impl0, blobParameterBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      try { 
        javaGDSImpl0.iscRollbackRetaining(isc_tr_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = (isc_svc_handle_impl)javaGDSImpl0.createIscSvcHandle();
      assertFalse(isc_svc_handle_impl0.isValid());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertNotNull(isc_svc_handle_impl0);
      
      ServiceRequestBuffer serviceRequestBuffer0 = null;
      try { 
        javaGDSImpl0.iscServiceStart(isc_svc_handle_impl0, (ServiceRequestBuffer) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid service handle
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertNotNull(isc_svc_handle_impl0);
      
      ServiceParameterBufferImp serviceParameterBufferImp0 = new ServiceParameterBufferImp();
      assertNotNull(serviceParameterBufferImp0);
      
      byte[] byteArray0 = javaGDSImpl0.iscExpandDpb((byte[]) null, 69, 0, (Object[]) null);
      assertNull(byteArray0);
      
      AbstractJavaGDSImpl.EventCoordinatorImp abstractJavaGDSImpl_EventCoordinatorImp0 = null;
      try {
        abstractJavaGDSImpl_EventCoordinatorImp0 = javaGDSImpl0.new EventCoordinatorImp(0, "PURE_JAVA", (-233));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-233
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      ServiceRequestBufferImp serviceRequestBufferImp0 = new ServiceRequestBufferImp(809);
      assertEquals(809, serviceRequestBufferImp0.getTaskIdentifier());
      assertNotNull(serviceRequestBufferImp0);
      
      ServiceParameterBuffer serviceParameterBuffer0 = javaGDSImpl1.createServiceParameterBuffer();
      assertNotNull(serviceParameterBuffer0);
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      Integer integer0 = new Integer(71);
      assertNotNull(integer0);
      assertEquals(71, (int)integer0);
      
      Integer integer1 = new Integer((-4108));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-4108), (int)integer1);
      
      DbAttachInfo dbAttachInfo0 = new DbAttachInfo("PURE_JAVA", integer1, "not received: op is ");
      assertEquals("not received: op is ", dbAttachInfo0.getFileName());
      assertEquals((-4108), dbAttachInfo0.getPort());
      assertEquals("PURE_JAVA", dbAttachInfo0.getServer());
      assertNotNull(dbAttachInfo0);
      assertFalse(integer1.equals((Object)integer0));
      
      DatabaseParameterBuffer databaseParameterBuffer0 = javaGDSImpl0.createDatabaseParameterBuffer();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(javaGDSImpl0, javaGDSImpl1);
      assertFalse(javaGDSImpl0.equals((Object)javaGDSImpl1));
      
      FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo(databaseParameterBuffer0);
      assertNotNull(fBConnectionRequestInfo0);
      assertFalse(javaGDSImpl0.equals((Object)javaGDSImpl1));
      
      // Undeclared exception!
      try { 
        javaGDSImpl1.connect((isc_db_handle_impl) null, dbAttachInfo0, (DatabaseParameterBuffer) fBConnectionRequestInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-4108
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      TransactionParameterBuffer transactionParameterBuffer0 = javaGDSImpl0.newTransactionParameterBuffer();
      assertNotNull(transactionParameterBuffer0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNotNull(isc_tr_handle_impl1);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      IscDbHandle iscDbHandle0 = isc_tr_handle_impl1.getDbHandle();
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNull(iscDbHandle0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscStartTransaction(isc_tr_handle_impl1, (IscDbHandle) null, (TransactionParameterBuffer) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_tr_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_tr_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecuteImmediate((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) isc_tr_handle_impl0, "xOmXuo(", "xOmXuo(", 2, xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      Integer integer0 = new Integer((-2420));
      assertNotNull(integer0);
      assertEquals((-2420), (int)integer0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.internalAttachDatabase("Xt|Cb>bI:KD~OF|$Z", integer0, "Xt|Cb>bI:KD~OF|$Z", isc_db_handle_impl0, databaseParameterBufferImp0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-2420
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      isc_tr_handle_impl0.setDbHandle(isc_db_handle_impl0);
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      byte[] byteArray0 = new byte[0];
      try { 
        javaGDSImpl0.iscPrepareTransaction2(isc_tr_handle_impl0, byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // transaction  is 
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":\"80uZ_(VPq[n7K(B");
      assertFalse(boolean0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl1.fbCancelOperation(isc_db_handle_impl0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      Integer integer0 = new Integer(3307);
      assertNotNull(integer0);
      assertEquals(3307, (int)integer0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertNotNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.internalAttachDatabase("utU%PB", integer0, "MNd/vil^@.ga&>d:!7", isc_db_handle_impl0, (DatabaseParameterBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertNotNull(isc_db_handle_impl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      Integer integer0 = new Integer((-1790264235));
      assertNotNull(integer0);
      assertEquals((-1790264235), (int)integer0);
      
      DbAttachInfo dbAttachInfo0 = new DbAttachInfo(" X+//\"eUo(b", integer0, "T*#\"_tM");
      assertEquals("T*#\"_tM", dbAttachInfo0.getFileName());
      assertEquals((-1790264235), dbAttachInfo0.getPort());
      assertEquals(" X+//\"eUo(b", dbAttachInfo0.getServer());
      assertNotNull(dbAttachInfo0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = javaGDSImpl0.createDatabaseParameterBuffer();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(javaGDSImpl0, javaGDSImpl1);
      assertFalse(javaGDSImpl0.equals((Object)javaGDSImpl1));
      
      FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo(databaseParameterBuffer0);
      assertNotNull(fBConnectionRequestInfo0);
      assertFalse(javaGDSImpl0.equals((Object)javaGDSImpl1));
      
      // Undeclared exception!
      try { 
        javaGDSImpl1.internalAttachDatabase(dbAttachInfo0, (IscDbHandle) isc_db_handle_impl0, (DatabaseParameterBuffer) fBConnectionRequestInfo0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1790264235
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "GNpzG\"fH~G1O'^U^");
      assertFalse(boolean0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("NONE", 808);
      boolean boolean2 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      EventHandleImp eventHandleImp0 = (EventHandleImp)javaGDSImpl0.createEventHandle("PiA~h YXCQ%^");
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals("PiA~h YXCQ%^", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertNotNull(eventHandleImp0);
      
      javaGDSImpl0.iscEventCounts(eventHandleImp0);
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals("PiA~h YXCQ%^", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals(0, eventHandleImp0.getEventCount());
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(abstractIscTrHandle0);
      
      byte[] byteArray0 = new byte[0];
      try { 
        javaGDSImpl0.iscDsqlPrepare((IscTrHandle) null, (IscStmtHandle) isc_stmt_handle_impl0, byteArray0, 5);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlPrepare((IscTrHandle) isc_tr_handle_impl0, (IscStmtHandle) isc_stmt_handle_impl0, "not received: op is ", "' at beginning or end of:", 1791);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = (isc_tr_handle_impl)javaGDSImpl0.createIscTrHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(0, xSQLDA0.sqld);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl1 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNotNull(isc_tr_handle_impl1);
      assertTrue(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl0));
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      org.firebirdsql.gds.impl.jni.TransactionParameterBufferImpl transactionParameterBufferImpl0 = new org.firebirdsql.gds.impl.jni.TransactionParameterBufferImpl();
      assertNotNull(transactionParameterBufferImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_blob_handle_impl isc_blob_handle_impl1 = new isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertEquals(0, isc_blob_handle_impl1.getPosition());
      assertEquals(0, isc_blob_handle_impl1.getRbl_id());
      assertFalse(isc_blob_handle_impl1.isEof());
      assertNotNull(isc_blob_handle_impl1);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDatabaseInfo((IscDbHandle) null, (byte[]) null, (-368));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      XSQLDA xSQLDA0 = new XSQLDA(1);
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(1, xSQLDA0.sqld);
      assertEquals(1, xSQLDA0.sqln);
      
      XSQLDA xSQLDA1 = new XSQLDA(6);
      assertNotNull(xSQLDA1);
      assertFalse(xSQLDA1.equals((Object)xSQLDA0));
      assertEquals(1, xSQLDA1.version);
      assertEquals(6, xSQLDA1.sqld);
      assertEquals(6, xSQLDA1.sqln);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscPrepareTransaction2(isc_tr_handle_impl0, (byte[]) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_tr_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_tr_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl1.getRblId());
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertFalse(isc_blob_handle_impl1.isEof());
      assertNotNull(isc_blob_handle_impl1);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = (DatabaseParameterBufferImp)javaGDSImpl0.createDatabaseParameterBuffer();
      assertNotNull(databaseParameterBufferImp0);
      
      try { 
        javaGDSImpl0.connect(isc_db_handle_impl0, (String) null, (Integer) 1, (String) null, databaseParameterBufferImp0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null or empty filename in DbAttachInfo
         //
         verifyException("org.firebirdsql.gds.impl.DbAttachInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
      
      AbstractJavaGDSImpl.calculateIOLength(xSQLDA0);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = (isc_svc_handle_impl)javaGDSImpl0.createIscSvcHandle();
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertNotNull(isc_svc_handle_impl0);
      
      ServiceParameterBufferImp serviceParameterBufferImp0 = new ServiceParameterBufferImp();
      assertNotNull(serviceParameterBufferImp0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscServiceAttach((String) null, isc_svc_handle_impl0, serviceParameterBufferImp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.deepCopy();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      isc_tr_handle_impl isc_tr_handle_impl0 = (isc_tr_handle_impl)javaGDSImpl0.createIscTrHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      try { 
        javaGDSImpl0.iscDsqlPrepare((IscTrHandle) isc_tr_handle_impl0, (IscStmtHandle) null, "op_create ", 96);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid request handle
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.disconnect((isc_db_handle_impl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = (isc_db_handle_impl)javaGDSImpl0.createIscDbHandle();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDetachDatabase(isc_db_handle_impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.isc_db_handle_impl", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_blob_handle_impl0.setPosition(4825);
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(4825, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(4825, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNull(isc_db_handle_impl0);
      
      DbAttachInfo dbAttachInfo0 = new DbAttachInfo("PURE_JAVA");
      assertEquals("localhost", dbAttachInfo0.getServer());
      assertEquals("PURE_JAVA", dbAttachInfo0.getFileName());
      assertEquals(3050, dbAttachInfo0.getPort());
      assertNotNull(dbAttachInfo0);
      
      try { 
        javaGDSImpl0.openSocket((isc_db_handle_impl) null, dbAttachInfo0, true, 49, 49);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@5b613065
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(abstractIscTrHandle0);
      
      try { 
        javaGDSImpl0.iscCommitTransaction((IscTrHandle) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      // Undeclared exception!
      try { 
        javaGDSImpl1.iscPrepareTransaction(isc_tr_handle_impl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_tr_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_tr_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl0.setStatementType(1121);
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(1121, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlDescribe(isc_stmt_handle_impl0, 510);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_db_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertNotNull(isc_stmt_handle_impl1);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      isc_db_handle_impl isc_db_handle_impl1 = isc_stmt_handle_impl1.getRsr_rdb();
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertNull(isc_db_handle_impl1);
      assertNotSame(isc_stmt_handle_impl1, isc_stmt_handle_impl0);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(1, xSQLDA0.version);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl2 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl2.isValid());
      assertEquals(0, isc_stmt_handle_impl2.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl2.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl2.getRsrId());
      assertEquals(0, isc_stmt_handle_impl2.size());
      assertEquals(0, isc_stmt_handle_impl2.getDeleteCount());
      assertFalse(isc_stmt_handle_impl2.isSingletonResult());
      assertFalse(isc_stmt_handle_impl2.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl2.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl2.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl2.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl2.getStatementType());
      assertFalse(isc_stmt_handle_impl2.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl2);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl2.getTransaction();
      assertFalse(isc_stmt_handle_impl2.isValid());
      assertEquals(0, isc_stmt_handle_impl2.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl2.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl2.getRsrId());
      assertEquals(0, isc_stmt_handle_impl2.size());
      assertEquals(0, isc_stmt_handle_impl2.getDeleteCount());
      assertFalse(isc_stmt_handle_impl2.isSingletonResult());
      assertFalse(isc_stmt_handle_impl2.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl2.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl2.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl2.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl2.getStatementType());
      assertFalse(isc_stmt_handle_impl2.hasOpenResultSet());
      assertNull(abstractIscTrHandle0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecuteImmediate((IscDbHandle) null, (IscTrHandle) null, "ZCv<", (-17), xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      
      ServiceRequestBufferImp serviceRequestBufferImp0 = new ServiceRequestBufferImp(0);
      assertEquals(0, serviceRequestBufferImp0.getTaskIdentifier());
      assertNotNull(serviceRequestBufferImp0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      ServiceParameterBuffer serviceParameterBuffer0 = javaGDSImpl1.createServiceParameterBuffer();
      assertNotNull(serviceParameterBuffer0);
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      try { 
        javaGDSImpl1.iscServiceQuery((IscSvcHandle) null, serviceParameterBuffer0, serviceRequestBufferImp0, (byte[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid service handle
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      IscDbHandle iscDbHandle0 = isc_tr_handle_impl0.getDbHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNull(iscDbHandle0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecImmed2((IscDbHandle) null, (IscTrHandle) isc_tr_handle_impl0, (byte[]) null, 5, xSQLDA0, xSQLDA0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_tr_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_tr_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      IscDbHandle iscDbHandle0 = null;
      TransactionParameterBuffer transactionParameterBuffer0 = javaGDSImpl0.newTransactionParameterBuffer();
      assertNotNull(transactionParameterBuffer0);
      
      try { 
        javaGDSImpl0.iscStartTransaction((IscTrHandle) null, (IscDbHandle) null, transactionParameterBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      javaGDSImpl0.receiveResponse((isc_db_handle_impl) null, 809);
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0.getTr();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNull(isc_tr_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNull(isc_db_handle_impl0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(0, xSQLDA0.sqld);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl1.iscDsqlExecuteImmediate((IscDbHandle) null, (IscTrHandle) null, (String) null, 3, xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0.getTr();
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNull(isc_tr_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertNotNull(isc_db_handle_impl0);
      
      isc_blob_handle_impl0.setDb(isc_db_handle_impl0);
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      
      ServiceRequestBufferImp serviceRequestBufferImp0 = (ServiceRequestBufferImp)javaGDSImpl0.createServiceRequestBuffer(3);
      assertEquals(3, serviceRequestBufferImp0.getTaskIdentifier());
      assertNotNull(serviceRequestBufferImp0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      try { 
        javaGDSImpl0.iscDsqlPrepare((IscTrHandle) null, (IscStmtHandle) isc_stmt_handle_impl0, "-`,rwy!'XBe%NGgq*\"", 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_db_handle_impl0);
      
      int int0 = 421;
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDatabaseInfo((IscDbHandle) null, (byte[]) null, 421);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = (isc_svc_handle_impl)javaGDSImpl0.createIscSvcHandle();
      assertFalse(isc_svc_handle_impl0.isValid());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertNotNull(isc_svc_handle_impl0);
      
      isc_svc_handle_impl0.setHandle(1940);
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertFalse(isc_svc_handle_impl0.isNotValid());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertTrue(isc_svc_handle_impl0.isValid());
      
      try { 
        javaGDSImpl0.iscServiceDetach(isc_svc_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid service handle
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertNotNull(isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlSetCursorName(isc_stmt_handle_impl0, "", 4149);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl1.getRsrId());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl1);
      
      XSQLDA xSQLDA0 = isc_stmt_handle_impl1.getInSqlda();
      assertEquals(0, isc_stmt_handle_impl1.getRsrId());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertNull(xSQLDA0);
      
      isc_stmt_handle_impl0.setDeleteCount(1166);
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(1166, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      
      try { 
        javaGDSImpl0.iscDsqlFetch(isc_stmt_handle_impl0, (-1469), (XSQLDA) null, (-2720));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // SQLDA missing or incorrect version, or incorrect number/type of variables
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(0, xSQLDA0.sqld);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      TransactionParameterBufferImpl transactionParameterBufferImpl0 = new TransactionParameterBufferImpl();
      assertNotNull(transactionParameterBufferImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscStartTransaction(isc_tr_handle_impl0, isc_db_handle_impl0, transactionParameterBufferImpl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_db_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_db_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl1.getRblId());
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertFalse(isc_blob_handle_impl1.isEof());
      assertNotNull(isc_blob_handle_impl1);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlPrepare((IscTrHandle) isc_tr_handle_impl0, (IscStmtHandle) isc_stmt_handle_impl0, byteArray0, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertNotNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.sendConnectPacket((XdrOutputStream) null, (XdrInputStream) null, "Pure Java GDS implementation.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.EventHandleImp eventHandleImp0 = new org.firebirdsql.gds.impl.jni.EventHandleImp();
      assertEquals((-1), eventHandleImp0.getEventStructHandle());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertFalse(eventHandleImp0.isCancelled());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getSize());
      assertNull(eventHandleImp0.getEventName());
      assertFalse(eventHandleImp0.isValid());
      assertNotNull(eventHandleImp0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscCancelEvents(isc_db_handle_impl0, eventHandleImp0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.EventHandleImp cannot be cast to org.firebirdsql.gds.impl.wire.EventHandleImp
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNotNull(isc_stmt_handle_impl0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
      
      try { 
        javaGDSImpl0.iscDsqlFetch(isc_stmt_handle_impl0, 42, xSQLDA0, 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_blob_handle_impl0.setBlobId(184L);
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(184L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscSeekBlob(isc_blob_handle_impl0, (-1929), (-1929));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlFreeStatement(isc_stmt_handle_impl0, 1588);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNull(isc_db_handle_impl0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = javaGDSImpl0.createDatabaseParameterBuffer();
      assertNotNull(databaseParameterBuffer0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.connect((isc_db_handle_impl) null, (DbAttachInfo) null, databaseParameterBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertNull(abstractIscTrHandle0);
      
      try { 
        javaGDSImpl0.iscDsqlPrepare((IscTrHandle) null, (IscStmtHandle) isc_stmt_handle_impl0, ", ", 6);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      Integer integer0 = new Integer((-127));
      assertNotNull(integer0);
      assertEquals((-127), (int)integer0);
      
      String string0 = "HL#[N]I(0)";
      DbAttachInfo dbAttachInfo0 = new DbAttachInfo("PURE_JAVA", integer0, "HL#[N]I(0)");
      assertEquals("HL#[N]I(0)", dbAttachInfo0.getFileName());
      assertEquals("PURE_JAVA", dbAttachInfo0.getServer());
      assertEquals((-127), dbAttachInfo0.getPort());
      assertNotNull(dbAttachInfo0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.deepCopy();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.connect(isc_db_handle_impl0, dbAttachInfo0, databaseParameterBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-127
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(0, xSQLDA0.sqld);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      try { 
        javaGDSImpl0.iscDsqlFetch(isc_stmt_handle_impl0, (-2581), (XSQLDA) null, 32767);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // SQLDA missing or incorrect version, or incorrect number/type of variables
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertNull(abstractIscTrHandle0);
      
      try { 
        javaGDSImpl0.iscRollbackRetaining((IscTrHandle) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message (getMessage() has thrown an exception)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      byte[] byteArray0 = new byte[1];
      try { 
        javaGDSImpl0.iscPutSegment(isc_blob_handle_impl0, byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      BlobParameterBuffer blobParameterBuffer0 = javaGDSImpl0.createBlobParameterBuffer();
      assertNotNull(blobParameterBuffer0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0.getTr();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertNull(isc_tr_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = (isc_db_handle_impl)javaGDSImpl0.createIscDbHandle();
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscCreateBlob2(isc_db_handle_impl0, (IscTrHandle) null, isc_blob_handle_impl0, blobParameterBuffer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_blob_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_blob_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      isc_tr_handle_impl0.forgetResultSets();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscReconnectTransaction(isc_tr_handle_impl0, (IscDbHandle) null, (-2557L));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_tr_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_tr_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      EventHandleImp eventHandleImp0 = new EventHandleImp("PURE_JAVA");
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals("PURE_JAVA", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertNotNull(eventHandleImp0);
      
      isc_db_handle_impl isc_db_handle_impl0 = (isc_db_handle_impl)javaGDSImpl0.createIscDbHandle();
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertNotNull(isc_db_handle_impl0);
      
      javaGDSImpl0.iscCancelEvents(isc_db_handle_impl0, eventHandleImp0);
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals("PURE_JAVA", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.EventHandleImp eventHandleImp0 = new org.firebirdsql.gds.impl.jni.EventHandleImp("PURE_JAVA");
      assertFalse(eventHandleImp0.isValid());
      assertEquals("PURE_JAVA", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getSize());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals((-1), eventHandleImp0.getEventStructHandle());
      assertFalse(eventHandleImp0.isCancelled());
      assertNotNull(eventHandleImp0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscEventCounts(eventHandleImp0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.EventHandleImp cannot be cast to org.firebirdsql.gds.impl.wire.EventHandleImp
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDatabaseInfo(isc_db_handle_impl0, (byte[]) null, 32767);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      isc_tr_handle_impl0.setState(74);
      assertEquals(74, isc_tr_handle_impl0.getState());
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecImmed2((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) isc_tr_handle_impl0, (byte[]) null, (-188), (XSQLDA) null, (XSQLDA) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertNotNull(isc_svc_handle_impl0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertNotNull(isc_stmt_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-57);
      int int0 = 1144;
      IscStmtHandle iscStmtHandle0 = null;
      try { 
        javaGDSImpl0.iscDsqlPrepare((IscTrHandle) null, (IscStmtHandle) null, "0M*2", (String) null, (-2035));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      isc_db_handle_impl isc_db_handle_impl0 = (isc_db_handle_impl)javaGDSImpl0.createIscDbHandle();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = (isc_blob_handle_impl)javaGDSImpl0.createIscBlobHandle();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.BlobParameterBufferImp blobParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.BlobParameterBufferImp();
      assertNotNull(blobParameterBufferImp0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscCreateBlob2(isc_db_handle_impl0, isc_tr_handle_impl0, isc_blob_handle_impl0, blobParameterBufferImp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNull(isc_db_handle_impl0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-6);
      byte byte0 = (byte)48;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)4;
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlPrepare((IscTrHandle) isc_tr_handle_impl0, (IscStmtHandle) isc_stmt_handle_impl0, byteArray0, (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)0;
      BlobParameterBuffer blobParameterBuffer0 = javaGDSImpl0.createBlobParameterBuffer();
      assertNotNull(blobParameterBuffer0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscCloseBlob(isc_blob_handle_impl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_blob_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_blob_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertNotNull(isc_db_handle_impl0);
      
      isc_blob_handle_impl0.setDb(isc_db_handle_impl0);
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      
      isc_blob_handle_impl0.setPosition(5);
      assertEquals(5, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      
      try { 
        javaGDSImpl0.iscCloseBlob(isc_blob_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNull(abstractIscTrHandle0);
      
      try { 
        javaGDSImpl0.iscCommitTransaction((IscTrHandle) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlDescribeBind(isc_stmt_handle_impl0, 23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-80);
      TransactionParameterBuffer transactionParameterBuffer0 = javaGDSImpl0.newTransactionParameterBuffer();
      assertNotNull(transactionParameterBuffer0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      ServiceParameterBuffer serviceParameterBuffer0 = javaGDSImpl0.createServiceParameterBuffer();
      assertNotNull(serviceParameterBuffer0);
      
      FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo(databaseParameterBuffer0);
      assertNotNull(fBConnectionRequestInfo0);
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.internalAttachDatabase((DbAttachInfo) null, (IscDbHandle) isc_db_handle_impl0, (DatabaseParameterBuffer) fBConnectionRequestInfo0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_db_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_db_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 1);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNull(isc_db_handle_impl0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.connect((isc_db_handle_impl) null, "PURE_JAVA", integer0, "PURE_JAVA", databaseParameterBufferImp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertNotNull(isc_stmt_handle_impl1);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl2.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl2.getStatementType());
      assertNull(isc_stmt_handle_impl2.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl2.isValid());
      assertFalse(isc_stmt_handle_impl2.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl2.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl2.getRsr_id());
      assertFalse(isc_stmt_handle_impl2.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl2.getDeleteCount());
      assertFalse(isc_stmt_handle_impl2.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl2.size());
      assertEquals(0, isc_stmt_handle_impl2.getSelectCount());
      assertNotNull(isc_stmt_handle_impl2);
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl0));
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl1));
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.deepCopy();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo(databaseParameterBuffer0);
      assertNotNull(fBConnectionRequestInfo0);
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl1 = isc_blob_handle_impl0.getDb();
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNull(isc_db_handle_impl1);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscOpenBlob2((IscDbHandle) null, isc_tr_handle_impl0, isc_blob_handle_impl0, (BlobParameterBuffer) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_blob_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_blob_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlFreeStatement(isc_stmt_handle_impl0, 138);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = (isc_db_handle_impl)javaGDSImpl0.createIscDbHandle();
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertNotNull(isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl0.setUpdateCount(738);
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(738, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl1.getRsrId());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertNotNull(isc_stmt_handle_impl1);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      XSQLDA xSQLDA0 = isc_stmt_handle_impl1.getOutSqlda();
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl1.getRsrId());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertNull(xSQLDA0);
      assertNotSame(isc_stmt_handle_impl1, isc_stmt_handle_impl0);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      AbstractJavaGDSImpl.calculateBLR((XSQLDA) null);
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl2.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl2.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl2.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl2.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl2.size());
      assertEquals(0, isc_stmt_handle_impl2.getStatementType());
      assertFalse(isc_stmt_handle_impl2.isValid());
      assertEquals(0, isc_stmt_handle_impl2.getSelectCount());
      assertFalse(isc_stmt_handle_impl2.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl2.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl2.getUpdateCount());
      assertFalse(isc_stmt_handle_impl2.isAllRowsFetched());
      assertNotNull(isc_stmt_handle_impl2);
      
      isc_stmt_handle_impl2.clearRows();
      assertFalse(isc_stmt_handle_impl2.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl2.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl2.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl2.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl2.size());
      assertEquals(0, isc_stmt_handle_impl2.getStatementType());
      assertFalse(isc_stmt_handle_impl2.isValid());
      assertEquals(0, isc_stmt_handle_impl2.getSelectCount());
      assertFalse(isc_stmt_handle_impl2.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl2.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl2.getUpdateCount());
      assertFalse(isc_stmt_handle_impl2.isAllRowsFetched());
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      TransactionParameterBufferImpl transactionParameterBufferImpl0 = (TransactionParameterBufferImpl)javaGDSImpl0.newTransactionParameterBuffer();
      assertNotNull(transactionParameterBufferImpl0);
      assertNotSame(javaGDSImpl0, javaGDSImpl1);
      assertFalse(javaGDSImpl0.equals((Object)javaGDSImpl1));
      
      isc_stmt_handle_impl isc_stmt_handle_impl3 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl3.getInsertCount());
      assertFalse(isc_stmt_handle_impl3.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl3.getDeleteCount());
      assertFalse(isc_stmt_handle_impl3.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl3.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl3.getStatementType());
      assertEquals(0, isc_stmt_handle_impl3.size());
      assertEquals(0, isc_stmt_handle_impl3.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl3.getUpdateCount());
      assertNull(isc_stmt_handle_impl3.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl3.isSingletonResult());
      assertFalse(isc_stmt_handle_impl3.isValid());
      assertNotNull(isc_stmt_handle_impl3);
      assertFalse(isc_stmt_handle_impl3.equals((Object)isc_stmt_handle_impl2));
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl3.getTransaction();
      assertEquals(0, isc_stmt_handle_impl3.getInsertCount());
      assertFalse(isc_stmt_handle_impl3.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl3.getDeleteCount());
      assertFalse(isc_stmt_handle_impl3.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl3.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl3.getStatementType());
      assertEquals(0, isc_stmt_handle_impl3.size());
      assertEquals(0, isc_stmt_handle_impl3.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl3.getUpdateCount());
      assertNull(isc_stmt_handle_impl3.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl3.isSingletonResult());
      assertFalse(isc_stmt_handle_impl3.isValid());
      assertNull(abstractIscTrHandle0);
      assertNotSame(isc_stmt_handle_impl3, isc_stmt_handle_impl2);
      assertFalse(isc_stmt_handle_impl3.equals((Object)isc_stmt_handle_impl2));
      
      try { 
        javaGDSImpl0.iscRollbackRetaining((IscTrHandle) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      javaGDSImpl0.receiveResponse((isc_svc_handle_impl) null, (-4342));
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      javaGDSImpl0.addProcessName(databaseParameterBufferImp0);
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      IscDbHandle iscDbHandle0 = isc_tr_handle_impl0.getDbHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNull(iscDbHandle0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_tr_handle_impl0.registerStatementWithTransaction(isc_stmt_handle_impl0);
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      XSQLDA xSQLDA0 = new XSQLDA(4);
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(4, xSQLDA0.sqln);
      assertEquals(4, xSQLDA0.sqld);
      
      JavaGDSImpl javaGDSImpl2 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl2);
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl1));
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl0));
      
      isc_tr_handle_impl isc_tr_handle_impl1 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNotNull(isc_tr_handle_impl1);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = javaGDSImpl1.createDatabaseParameterBuffer();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertNotSame(javaGDSImpl1, javaGDSImpl2);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl2));
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      org.firebirdsql.gds.impl.jni.TransactionParameterBufferImpl transactionParameterBufferImpl0 = new org.firebirdsql.gds.impl.jni.TransactionParameterBufferImpl();
      assertNotNull(transactionParameterBufferImpl0);
      
      // Undeclared exception!
      try { 
        AbstractJavaGDSImpl.calculateBLR(xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      XSQLDA xSQLDA0 = isc_stmt_handle_impl0.getInSqlda();
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(xSQLDA0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      XSQLDA xSQLDA1 = new XSQLDA();
      assertNotNull(xSQLDA1);
      assertEquals(1, xSQLDA1.version);
      assertEquals(0, xSQLDA1.sqln);
      assertEquals(0, xSQLDA1.sqld);
      
      JavaGDSImpl javaGDSImpl2 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl2);
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl1));
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl0));
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl2.iscDsqlExecuteImmediate((IscDbHandle) null, (IscTrHandle) isc_tr_handle_impl0, (byte[]) null, 1803, (XSQLDA) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_tr_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_tr_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = null;
      javaGDSImpl0.receiveResponse((isc_db_handle_impl) null, 809);
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0.getTr();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNull(isc_tr_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      XSQLDA xSQLDA0 = new XSQLDA(2);
      assertNotNull(xSQLDA0);
      assertEquals(2, xSQLDA0.sqld);
      assertEquals(2, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecute((IscTrHandle) null, isc_stmt_handle_impl0, 57, xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      try { 
        javaGDSImpl0.iscCloseBlob(isc_blob_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecute2(isc_tr_handle_impl0, isc_stmt_handle_impl0, 66, xSQLDA0, xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(xdrOutputStream0);
      
      xdrOutputStream0.writeInt((-84));
      assertEquals(0, pipedInputStream0.available());
      
      XdrInputStream xdrInputStream0 = new XdrInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(xdrInputStream0);
      
      int int0 = javaGDSImpl0.sendConnectPacket(xdrOutputStream0, xdrInputStream0, "org.firebirdsql.gds.impl.DatabaseParameterBufferExtension");
      assertEquals(0, pipedInputStream0.available());
      assertEquals((-84), int0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl0.setDbHandle(isc_db_handle_impl0);
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      try { 
        javaGDSImpl0.iscPrepareTransaction(isc_tr_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // transaction  is 
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_stmt_handle_impl0.notifyOpenResultSet();
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertTrue(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      
      isc_svc_handle_impl isc_svc_handle_impl0 = (isc_svc_handle_impl)javaGDSImpl1.createIscSvcHandle();
      assertFalse(isc_svc_handle_impl0.isValid());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertNotNull(isc_svc_handle_impl0);
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      ServiceParameterBufferImp serviceParameterBufferImp0 = (ServiceParameterBufferImp)javaGDSImpl0.createServiceParameterBuffer();
      assertNotNull(serviceParameterBufferImp0);
      assertNotSame(javaGDSImpl0, javaGDSImpl1);
      assertFalse(javaGDSImpl0.equals((Object)javaGDSImpl1));
      
      try { 
        javaGDSImpl1.iscServiceAttach("PURE_JAVA", isc_svc_handle_impl0, serviceParameterBufferImp0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // service PURE_JAVA is not defined
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      try { 
        javaGDSImpl0.iscCommitRetaining(isc_tr_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = (isc_svc_handle_impl)javaGDSImpl0.createIscSvcHandle();
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertNotNull(isc_svc_handle_impl0);
      
      ServiceParameterBufferImp serviceParameterBufferImp0 = new ServiceParameterBufferImp();
      assertNotNull(serviceParameterBufferImp0);
      
      try { 
        javaGDSImpl0.iscServiceAttach("ZcqG/A>eNH~VLP1lXRE", isc_svc_handle_impl0, serviceParameterBufferImp0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // service ZcqG/A>eNH~VLP1lXRE is not defined
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertNotNull(isc_stmt_handle_impl1);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertNotNull(isc_svc_handle_impl0);
      
      isc_stmt_handle_impl0.statement = null;
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      
      XdrOutputStream xdrOutputStream0 = isc_svc_handle_impl0.out;
      assertNull(xdrOutputStream0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.sendConnectPacket((XdrOutputStream) null, (XdrInputStream) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventHandleImp eventHandleImp0 = new EventHandleImp("");
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals("", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertNotNull(eventHandleImp0);
      
      AbstractJavaGDSImpl.EventGlob abstractJavaGDSImpl_EventGlob0 = new AbstractJavaGDSImpl.EventGlob(eventHandler0, eventHandleImp0);
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals("", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertNotNull(abstractJavaGDSImpl_EventGlob0);
      
      EventHandleImp eventHandleImp1 = abstractJavaGDSImpl_EventGlob0.getEventHandle();
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals("", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals((-1), eventHandleImp1.getEventId());
      assertEquals((-1), eventHandleImp1.getEventCount());
      assertEquals((-1), eventHandleImp1.getLocalId());
      assertEquals("", eventHandleImp1.getEventName());
      assertNotNull(eventHandleImp1);
      assertSame(eventHandleImp0, eventHandleImp1);
      assertSame(eventHandleImp1, eventHandleImp0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      String string0 = "";
      eventHandleImp1.setEventId((-2404));
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals("", eventHandleImp0.getEventName());
      assertEquals((-2404), eventHandleImp0.getEventId());
      assertEquals((-1), eventHandleImp1.getEventCount());
      assertEquals((-2404), eventHandleImp1.getEventId());
      assertEquals((-1), eventHandleImp1.getLocalId());
      assertEquals("", eventHandleImp1.getEventName());
      assertSame(eventHandleImp0, eventHandleImp1);
      assertSame(eventHandleImp1, eventHandleImp0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertNotNull(isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.deepCopy();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      try { 
        javaGDSImpl0.iscCreateDatabase("", isc_db_handle_impl0, databaseParameterBufferImp0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Bad connection string: ':' at beginning or end of:335544323
         //
         verifyException("org.firebirdsql.gds.impl.DbAttachInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0.getTr();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNull(isc_tr_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlPrepare((IscTrHandle) null, (IscStmtHandle) isc_stmt_handle_impl0, (String) null, (String) null, 47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertNotNull(isc_db_handle_impl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0.getTr();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNull(isc_tr_handle_impl0);
      
      try { 
        javaGDSImpl0.iscDsqlPrepare((IscTrHandle) null, (IscStmtHandle) isc_stmt_handle_impl0, "6sXLx^7p23Lonk", (String) null, 9);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertNull(isc_db_handle_impl0);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertNotNull(isc_svc_handle_impl0);
      
      byte byte0 = (byte)0;
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        javaGDSImpl1.iscDsqlSqlInfo(isc_stmt_handle_impl0, byteArray0, 543);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      XSQLDA xSQLDA0 = new XSQLDA(5);
      assertNotNull(xSQLDA0);
      assertEquals(5, xSQLDA0.sqld);
      assertEquals(5, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertNotNull(isc_db_handle_impl0);
      
      isc_db_handle_impl0.setODSMajorVersion((-1658));
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals((-1658), isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecuteImmediate((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) isc_tr_handle_impl0, (byte[]) null, 3, xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      isc_db_handle_impl isc_db_handle_impl0 = (isc_db_handle_impl)javaGDSImpl0.createIscDbHandle();
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.internalAttachDatabase((DbAttachInfo) null, (IscDbHandle) isc_db_handle_impl0, (DatabaseParameterBuffer) databaseParameterBufferImp0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = (isc_tr_handle_impl)javaGDSImpl0.createIscTrHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNull(isc_db_handle_impl0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(0, xSQLDA0.sqld);
      
      isc_tr_handle_impl isc_tr_handle_impl1 = (isc_tr_handle_impl)javaGDSImpl0.createIscTrHandle();
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNotNull(isc_tr_handle_impl1);
      assertNotSame(isc_tr_handle_impl1, isc_tr_handle_impl0);
      assertTrue(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl0));
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      BlobParameterBufferImp blobParameterBufferImp0 = new BlobParameterBufferImp();
      assertNotNull(blobParameterBufferImp0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscOpenBlob2((IscDbHandle) null, isc_tr_handle_impl1, isc_blob_handle_impl0, blobParameterBufferImp0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_blob_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_blob_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      try { 
        javaGDSImpl1.iscServiceDetach((IscSvcHandle) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid service handle
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscPrepareTransaction2(isc_tr_handle_impl0, byteArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_tr_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_tr_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      try { 
        javaGDSImpl0.iscReconnectTransaction(isc_tr_handle_impl0, (IscDbHandle) null, 1000L);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      isc_tr_handle_impl isc_tr_handle_impl1 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNotNull(isc_tr_handle_impl1);
      assertTrue(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl0));
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      try { 
        javaGDSImpl0.iscServiceAttach("$NnY~uHLbn-]ILyZ)i", (IscSvcHandle) null, (ServiceParameterBuffer) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid service handle
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_blob_handle_impl0.setDb(isc_db_handle_impl0);
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      
      try { 
        javaGDSImpl0.iscGetSegment(isc_blob_handle_impl0, 2724);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      isc_db_handle_impl0.socket = null;
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      isc_db_handle_impl isc_db_handle_impl1 = isc_stmt_handle_impl0.getRsr_rdb();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_db_handle_impl1);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlAllocateStatement(isc_db_handle_impl0, isc_stmt_handle_impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertNotNull(isc_db_handle_impl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(0, xSQLDA0.sqld);
      
      try { 
        javaGDSImpl0.iscDsqlFetch((IscStmtHandle) null, 1, xSQLDA0, (-385));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid request handle
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl0.setStatementType((-870));
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals((-870), isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.getSqlPrepareInfo(isc_stmt_handle_impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(xdrOutputStream0);
      
      XdrInputStream xdrInputStream0 = new XdrInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(xdrInputStream0);
      
      int int0 = javaGDSImpl0.sendConnectPacket(xdrOutputStream0, xdrInputStream0, "org.firebirdsql.gds.impl.wire.ServiceRequestBufferImp$3");
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNull(abstractIscTrHandle0);
      
      try { 
        javaGDSImpl0.iscRollbackTransaction((IscTrHandle) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl0.setDbHandle(isc_db_handle_impl0);
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      isc_blob_handle_impl isc_blob_handle_impl0 = (isc_blob_handle_impl)javaGDSImpl0.createIscBlobHandle();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      assertNotSame(javaGDSImpl0, javaGDSImpl1);
      assertFalse(javaGDSImpl0.equals((Object)javaGDSImpl1));
      
      // Undeclared exception!
      try { 
        javaGDSImpl1.iscSeekBlob(isc_blob_handle_impl0, 0, 485);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertNotNull(isc_db_handle_impl0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(0, xSQLDA0.sqld);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecImmed2((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) isc_tr_handle_impl0, "Trying to register a cancelled event handler", "?[8", 2, xSQLDA0, xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = javaGDSImpl0.iscInteger(byteArray0, 960, 960);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-33);
      byteArray1[1] = (byte) (-62);
      byteArray1[2] = (byte) (-32);
      byteArray1[3] = (byte) (-86);
      int int1 = 113;
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscVaxInteger(byteArray1, (-2563), 113);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2563
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl0.setStatementType((-1622041134));
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals((-1622041134), isc_stmt_handle_impl0.getStatementType());
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlPrepare((IscTrHandle) isc_tr_handle_impl0, (IscStmtHandle) isc_stmt_handle_impl0, "PURE_JAVA", 4);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl0.setDbHandle(isc_db_handle_impl0);
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      try { 
        javaGDSImpl0.iscRollbackTransaction(isc_tr_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // transaction  is 
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNotNull(isc_stmt_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      XSQLDA xSQLDA0 = new XSQLDA(6);
      assertNotNull(xSQLDA0);
      assertEquals(6, xSQLDA0.sqln);
      assertEquals(6, xSQLDA0.sqld);
      assertEquals(1, xSQLDA0.version);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNull(isc_db_handle_impl0);
      
      javaGDSImpl0.receiveResponse((isc_db_handle_impl) null, 1);
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl1 = isc_blob_handle_impl0.getDb();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNull(isc_db_handle_impl1);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNull(abstractIscTrHandle0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecuteImmediate((IscDbHandle) null, (IscTrHandle) null, (byte[]) null, 6, xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      try { 
        javaGDSImpl0.iscCommitTransaction(isc_tr_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlSetCursorName(isc_stmt_handle_impl0, (String) null, 54);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      String string0 = "";
      EventHandleImp eventHandleImp0 = (EventHandleImp)javaGDSImpl0.createEventHandle("");
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals("", eventHandleImp0.getEventName());
      assertNotNull(eventHandleImp0);
      
      eventHandleImp0.setEventId(64);
      assertEquals(64, eventHandleImp0.getEventId());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals("", eventHandleImp0.getEventName());
      
      try { 
        javaGDSImpl0.iscCancelEvents((IscDbHandle) null, eventHandleImp0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNull(abstractIscTrHandle0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertNotNull(isc_stmt_handle_impl1);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl1.createEventHandle((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.EventHandleImp", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      XSQLDA xSQLDA0 = new XSQLDA(23);
      assertNotNull(xSQLDA0);
      assertEquals(23, xSQLDA0.sqld);
      assertEquals(1, xSQLDA0.version);
      assertEquals(23, xSQLDA0.sqln);
      
      // Undeclared exception!
      try { 
        AbstractJavaGDSImpl.calculateIOLength(xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertNotNull(isc_stmt_handle_impl1);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl1.getRsr_rdb();
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertNull(isc_db_handle_impl0);
      assertNotSame(isc_stmt_handle_impl1, isc_stmt_handle_impl0);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl2 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertFalse(isc_stmt_handle_impl2.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl2.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl2.getStatementType());
      assertFalse(isc_stmt_handle_impl2.isValid());
      assertFalse(isc_stmt_handle_impl2.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl2.getInsertCount());
      assertNull(isc_stmt_handle_impl2.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl2.size());
      assertEquals(0, isc_stmt_handle_impl2.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl2.getUpdateCount());
      assertFalse(isc_stmt_handle_impl2.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl2.getRsr_id());
      assertNotNull(isc_stmt_handle_impl2);
      assertNotSame(isc_stmt_handle_impl2, isc_stmt_handle_impl1);
      assertNotSame(isc_stmt_handle_impl2, isc_stmt_handle_impl0);
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl1));
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl0));
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp1 = (DatabaseParameterBufferImp)databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBufferImp1);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBufferImp1);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBufferImp0);
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBufferImp0));
      
      isc_db_handle_impl isc_db_handle_impl1 = new isc_db_handle_impl();
      assertTrue(isc_db_handle_impl1.isValid());
      assertEquals(0, isc_db_handle_impl1.getResp_object());
      assertEquals(0, isc_db_handle_impl1.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl1.getProtocol());
      assertEquals(0L, isc_db_handle_impl1.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl1.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl1.getDialect());
      assertEquals(0, isc_db_handle_impl1.getResp_data_len());
      assertNotNull(isc_db_handle_impl1);
      
      try { 
        javaGDSImpl0.internalAttachDatabase("Cp857", (Integer) 0, (String) null, isc_db_handle_impl1, databaseParameterBufferImp0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null or empty filename in DbAttachInfo
         //
         verifyException("org.firebirdsql.gds.impl.DbAttachInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNull(isc_db_handle_impl0);
      
      isc_stmt_handle_impl0.setRsr_id((-771));
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals((-771), isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      
      int int0 = (-1720713001);
      Integer integer0 = new Integer((-1720713001));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1720713001), (int)integer0);
      
      DbAttachInfo dbAttachInfo0 = new DbAttachInfo("PURE_JAVA", integer0, "FBLog4j");
      assertEquals("PURE_JAVA", dbAttachInfo0.getServer());
      assertEquals("FBLog4j", dbAttachInfo0.getFileName());
      assertEquals((-1720713001), dbAttachInfo0.getPort());
      assertNotNull(dbAttachInfo0);
      assertTrue(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.openSocket((isc_db_handle_impl) null, dbAttachInfo0, false, 1, (-1720713001));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1720713001
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_db_handle_impl0);
      
      String string0 = "$_~C!=n?:k.f~I";
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      assertFalse(isc_svc_handle_impl0.isValid());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertNotNull(isc_svc_handle_impl0);
      
      ServiceRequestBufferImp serviceRequestBufferImp0 = new ServiceRequestBufferImp((-139));
      assertEquals((-139), serviceRequestBufferImp0.getTaskIdentifier());
      assertNotNull(serviceRequestBufferImp0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-4);
      try { 
        javaGDSImpl0.iscServiceQuery(isc_svc_handle_impl0, (ServiceParameterBuffer) null, serviceRequestBufferImp0, byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid service handle
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertNotNull(isc_db_handle_impl0);
      
      isc_db_handle_impl0.setResp_data_len(809);
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(809, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      
      isc_blob_handle_impl0.setDb(isc_db_handle_impl0);
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(809, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-16);
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      Integer integer0 = new Integer(1569);
      assertNotNull(integer0);
      assertEquals(1569, (int)integer0);
      
      try { 
        javaGDSImpl0.connect(isc_db_handle_impl0, "service_mgr", integer0, "service_mgr", databaseParameterBufferImp0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to complete network request to host \"service_mgr\".
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.getSqlPrepareInfo(isc_stmt_handle_impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNull(isc_db_handle_impl0);
      
      try { 
        javaGDSImpl0.isc_dsql_alloc_statement2((IscDbHandle) null, isc_stmt_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // feature is not supported
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl0.setDbHandle(isc_db_handle_impl0);
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      try { 
        javaGDSImpl0.iscCommitTransaction(isc_tr_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // transaction  is 
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = (isc_blob_handle_impl)javaGDSImpl0.createIscBlobHandle();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertEquals(0, isc_blob_handle_impl1.getRblId());
      assertFalse(isc_blob_handle_impl1.isEof());
      assertNotNull(isc_blob_handle_impl1);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl1.getDb();
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertEquals(0, isc_blob_handle_impl1.getRblId());
      assertFalse(isc_blob_handle_impl1.isEof());
      assertNull(isc_db_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNotNull(isc_stmt_handle_impl0);
      
      XSQLDA xSQLDA0 = isc_stmt_handle_impl0.getInSqlda();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNull(xSQLDA0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecImmed2((IscDbHandle) null, (IscTrHandle) null, "", 331, (XSQLDA) null, (XSQLDA) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      isc_db_handle_impl0.setRdbId(27);
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDetachDatabase(isc_db_handle_impl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_db_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_db_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertNotNull(isc_svc_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = (isc_db_handle_impl)javaGDSImpl0.createIscDbHandle();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertNotNull(isc_db_handle_impl0);
      
      isc_svc_handle_impl0.setResp_blob_id(1L);
      assertFalse(isc_svc_handle_impl0.isValid());
      assertEquals(1L, isc_svc_handle_impl0.getResp_blob_id());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      
      javaGDSImpl0.receiveResponse(isc_svc_handle_impl0, (-1073));
      assertFalse(isc_svc_handle_impl0.isValid());
      assertEquals(1L, isc_svc_handle_impl0.getResp_blob_id());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0.getTr();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNull(isc_tr_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertNotNull(isc_stmt_handle_impl0);
      
      XSQLDA xSQLDA0 = isc_stmt_handle_impl0.getInSqlda();
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertNull(xSQLDA0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecute((IscTrHandle) null, isc_stmt_handle_impl0, 0, (XSQLDA) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = (isc_blob_handle_impl)javaGDSImpl0.createIscBlobHandle();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      byte[] byteArray0 = new byte[0];
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(abstractIscTrHandle0);
      
      try { 
        javaGDSImpl0.iscDsqlPrepare((IscTrHandle) null, (IscStmtHandle) isc_stmt_handle_impl0, byteArray0, 44);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      String string0 = "";
      EventHandleImp eventHandleImp0 = (EventHandleImp)javaGDSImpl0.createEventHandle("");
      assertEquals("", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertNotNull(eventHandleImp0);
      
      try { 
        javaGDSImpl0.iscCancelEvents((IscDbHandle) null, eventHandleImp0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl0.setDbHandle(isc_db_handle_impl0);
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      isc_tr_handle_impl0.setDbHandle(isc_db_handle_impl0);
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      try { 
        javaGDSImpl1.iscCommitRetaining(isc_tr_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // transaction  is 
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      BlobParameterBufferImp blobParameterBufferImp0 = new BlobParameterBufferImp();
      assertNotNull(blobParameterBufferImp0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      try { 
        javaGDSImpl1.iscDsqlPrepare((IscTrHandle) isc_tr_handle_impl0, (IscStmtHandle) null, (byte[]) null, 1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid request handle
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      IscDbHandle iscDbHandle0 = isc_tr_handle_impl0.getDbHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNull(iscDbHandle0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      XSQLDA xSQLDA0 = new XSQLDA(0);
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      
      JavaGDSImpl javaGDSImpl2 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl2);
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl0));
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl1));
      
      isc_tr_handle_impl isc_tr_handle_impl1 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNotNull(isc_tr_handle_impl1);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      JavaGDSImpl javaGDSImpl3 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl3);
      assertFalse(javaGDSImpl3.equals((Object)javaGDSImpl0));
      assertFalse(javaGDSImpl3.equals((Object)javaGDSImpl1));
      assertFalse(javaGDSImpl3.equals((Object)javaGDSImpl2));
      
      DatabaseParameterBuffer databaseParameterBuffer0 = javaGDSImpl3.createDatabaseParameterBuffer();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(javaGDSImpl3, javaGDSImpl0);
      assertNotSame(javaGDSImpl3, javaGDSImpl1);
      assertNotSame(javaGDSImpl3, javaGDSImpl2);
      assertFalse(javaGDSImpl3.equals((Object)javaGDSImpl0));
      assertFalse(javaGDSImpl3.equals((Object)javaGDSImpl1));
      assertFalse(javaGDSImpl3.equals((Object)javaGDSImpl2));
      
      org.firebirdsql.gds.impl.jni.TransactionParameterBufferImpl transactionParameterBufferImpl0 = new org.firebirdsql.gds.impl.jni.TransactionParameterBufferImpl();
      assertNotNull(transactionParameterBufferImpl0);
      
      AbstractJavaGDSImpl.calculateBLR(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl3.iscStartTransaction(isc_tr_handle_impl1, (IscDbHandle) null, transactionParameterBufferImpl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.TransactionParameterBufferImpl cannot be cast to org.firebirdsql.gds.impl.wire.TransactionParameterBufferImpl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0.getTr();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNull(isc_tr_handle_impl0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(1, xSQLDA0.version);
      
      isc_blob_handle_impl isc_blob_handle_impl1 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl1.getPosition());
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertFalse(isc_blob_handle_impl1.isEof());
      assertEquals(0, isc_blob_handle_impl1.getRbl_id());
      assertNotNull(isc_blob_handle_impl1);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl1.getDb();
      assertEquals(0, isc_blob_handle_impl1.getPosition());
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertFalse(isc_blob_handle_impl1.isEof());
      assertEquals(0, isc_blob_handle_impl1.getRbl_id());
      assertNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecuteImmediate((IscDbHandle) null, (IscTrHandle) null, "NONE", "", (-1179), xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(1, xSQLDA0.version);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNull(isc_db_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(abstractIscTrHandle0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecImmed2((IscDbHandle) null, (IscTrHandle) null, (byte[]) null, 560, xSQLDA0, xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNotNull(isc_stmt_handle_impl0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      
      isc_stmt_handle_impl0.setInsertCount(0);
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      
      try { 
        javaGDSImpl0.iscDsqlFetch(isc_stmt_handle_impl0, 42, xSQLDA0, 2688);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = (isc_tr_handle_impl)javaGDSImpl0.createIscTrHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertNotNull(isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      XSQLDA xSQLDA0 = isc_stmt_handle_impl0.getInSqlda();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(xSQLDA0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecuteImmediate((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) isc_tr_handle_impl0, "@!7`W\"[WO6f{_-`", 86, (XSQLDA) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = (isc_tr_handle_impl)javaGDSImpl0.createIscTrHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlSetCursorName(isc_stmt_handle_impl0, (String) null, (-3784));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl0);
      
      byte byte0 = (byte) (-49);
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      assertFalse(isc_svc_handle_impl0.isValid());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertNotNull(isc_svc_handle_impl0);
      
      ServiceParameterBufferImp serviceParameterBufferImp0 = new ServiceParameterBufferImp();
      assertNotNull(serviceParameterBufferImp0);
      
      ServiceRequestBufferImp serviceRequestBufferImp0 = (ServiceRequestBufferImp)javaGDSImpl0.createServiceRequestBuffer(2579);
      assertEquals(2579, serviceRequestBufferImp0.getTaskIdentifier());
      assertNotNull(serviceRequestBufferImp0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      try { 
        javaGDSImpl1.iscServiceQuery(isc_svc_handle_impl0, serviceParameterBufferImp0, serviceRequestBufferImp0, (byte[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid service handle
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo((DatabaseParameterBuffer) null);
      assertNotNull(fBConnectionRequestInfo0);
      
      boolean boolean0 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)64, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Integer integer0 = new Integer((byte)64);
      assertNotNull(integer0);
      assertEquals(64, (int)integer0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      Integer integer1 = Integer.getInteger("GNpzG\"fH~G1O'^U^", integer0);
      assertNotNull(integer1);
      assertEquals(64, (int)integer1);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.connect(isc_db_handle_impl0, "4j\"*T", integer1, "GNpzG\"fH~G1O'^U^", (DatabaseParameterBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_tr_handle_impl0.removeBlob(isc_blob_handle_impl0);
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl1.getDescribeBindInfo(isc_stmt_handle_impl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      isc_blob_handle_impl0.setDb(isc_db_handle_impl0);
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      try { 
        javaGDSImpl0.iscGetSegment(isc_blob_handle_impl0, 1276);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscPrepareTransaction(isc_tr_handle_impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = (isc_tr_handle_impl)javaGDSImpl0.createIscTrHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      
      TransactionParameterBufferImpl transactionParameterBufferImpl0 = new TransactionParameterBufferImpl();
      assertNotNull(transactionParameterBufferImpl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscStartTransaction(isc_tr_handle_impl0, isc_db_handle_impl0, transactionParameterBufferImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventHandleImp eventHandleImp0 = new EventHandleImp("Z<7");
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals("Z<7", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertNotNull(eventHandleImp0);
      
      eventHandleImp0.calculateCount();
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals("Z<7", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals(0, eventHandleImp0.getEventCount());
      
      AbstractJavaGDSImpl.EventGlob abstractJavaGDSImpl_EventGlob0 = new AbstractJavaGDSImpl.EventGlob(eventHandler0, eventHandleImp0);
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals("Z<7", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals(0, eventHandleImp0.getEventCount());
      assertNotNull(abstractJavaGDSImpl_EventGlob0);
      
      EventHandler eventHandler1 = abstractJavaGDSImpl_EventGlob0.getEventHandler();
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals("Z<7", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals(0, eventHandleImp0.getEventCount());
      assertNotNull(eventHandler1);
      assertSame(eventHandler1, eventHandler0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      AbstractJavaGDSImpl.EventCoordinatorImp abstractJavaGDSImpl_EventCoordinatorImp0 = null;
      try {
        abstractJavaGDSImpl_EventCoordinatorImp0 = javaGDSImpl0.new EventCoordinatorImp(132, "PURE_JAVA", 16384);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Unable to complete network request to host \"PURE_JAVA\".
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl$EventCoordinatorImp", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDropDatabase(isc_db_handle_impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNotNull(isc_stmt_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNull(isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0.getTr();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNull(isc_tr_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.BlobParameterBufferImp blobParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.BlobParameterBufferImp();
      assertNotNull(blobParameterBufferImp0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscCreateBlob2((IscDbHandle) null, (IscTrHandle) null, isc_blob_handle_impl0, blobParameterBufferImp0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_blob_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_blob_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl0.setSelectCount(2737);
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(2737, isc_stmt_handle_impl0.getSelectCount());
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_stmt_handle_impl0.notifyOpenResultSet();
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertTrue(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(2737, isc_stmt_handle_impl0.getSelectCount());
      
      isc_svc_handle_impl isc_svc_handle_impl0 = (isc_svc_handle_impl)javaGDSImpl0.createIscSvcHandle();
      assertFalse(isc_svc_handle_impl0.isValid());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertNotNull(isc_svc_handle_impl0);
      
      ServiceParameterBufferImp serviceParameterBufferImp0 = (ServiceParameterBufferImp)javaGDSImpl0.createServiceParameterBuffer();
      assertNotNull(serviceParameterBufferImp0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertNotNull(isc_stmt_handle_impl1);
      assertNotSame(isc_stmt_handle_impl1, isc_stmt_handle_impl0);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      isc_db_handle_impl isc_db_handle_impl0 = (isc_db_handle_impl)javaGDSImpl1.createIscDbHandle();
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertNotNull(isc_db_handle_impl0);
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertFalse(isc_blob_handle_impl1.isEof());
      assertEquals(0, isc_blob_handle_impl1.getRblId());
      assertNotNull(isc_blob_handle_impl1);
      assertFalse(isc_blob_handle_impl1.equals((Object)isc_blob_handle_impl0));
      
      org.firebirdsql.gds.impl.jni.BlobParameterBufferImp blobParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.BlobParameterBufferImp();
      assertNotNull(blobParameterBufferImp0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscOpenBlob2(isc_db_handle_impl0, (IscTrHandle) null, isc_blob_handle_impl1, blobParameterBufferImp0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_blob_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_blob_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscPrepareTransaction2(isc_tr_handle_impl0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      EventHandleImp eventHandleImp0 = (EventHandleImp)javaGDSImpl0.createEventHandle("PURE_JAVA");
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals("PURE_JAVA", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertNotNull(eventHandleImp0);
      assertNotSame(javaGDSImpl0, javaGDSImpl1);
      assertFalse(javaGDSImpl0.equals((Object)javaGDSImpl1));
      
      try { 
        javaGDSImpl0.iscCancelEvents((IscDbHandle) null, eventHandleImp0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      TransactionParameterBuffer transactionParameterBuffer0 = javaGDSImpl0.newTransactionParameterBuffer();
      assertNotNull(transactionParameterBuffer0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNull(isc_db_handle_impl0);
      
      Integer integer0 = new Integer(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      try { 
        javaGDSImpl0.connect((isc_db_handle_impl) null, "", integer0, "OOREMOTE", databaseParameterBufferImp0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to complete network request to host \"\".
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlFreeStatement(isc_stmt_handle_impl0, (-1019));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertNotNull(isc_stmt_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getRsrId());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertNotNull(isc_stmt_handle_impl1);
      
      XSQLDA xSQLDA0 = isc_stmt_handle_impl1.getOutSqlda();
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getRsrId());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertNull(xSQLDA0);
      
      try { 
        javaGDSImpl0.iscDsqlFetch(isc_stmt_handle_impl0, (-1934512090), (XSQLDA) null, 34);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // SQLDA missing or incorrect version, or incorrect number/type of variables
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNull(isc_db_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl0.setStatementType(70);
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(70, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      
      isc_stmt_handle_impl0.notifyOpenResultSet();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertTrue(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(70, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlFreeStatement(isc_stmt_handle_impl0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(1, xSQLDA0.version);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      ServiceParameterBufferImp serviceParameterBufferImp0 = new ServiceParameterBufferImp();
      assertNotNull(serviceParameterBufferImp0);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      assertFalse(isc_svc_handle_impl0.isValid());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertNotNull(isc_svc_handle_impl0);
      
      ServiceRequestBufferImp serviceRequestBufferImp0 = new ServiceRequestBufferImp(0);
      assertEquals(0, serviceRequestBufferImp0.getTaskIdentifier());
      assertNotNull(serviceRequestBufferImp0);
      
      try { 
        javaGDSImpl0.iscServiceQuery(isc_svc_handle_impl0, serviceParameterBufferImp0, serviceRequestBufferImp0, (byte[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid service handle
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlFreeStatement(isc_stmt_handle_impl0, (-2147483626));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertNull(abstractIscTrHandle0);
      
      IscDbHandle iscDbHandle0 = null;
      isc_stmt_handle_impl0.setRsrId(3057);
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(3057, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      
      org.firebirdsql.gds.impl.jni.TransactionParameterBufferImpl transactionParameterBufferImpl0 = new org.firebirdsql.gds.impl.jni.TransactionParameterBufferImpl();
      assertNotNull(transactionParameterBufferImpl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscStartTransaction((IscTrHandle) null, (IscDbHandle) null, transactionParameterBufferImpl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.TransactionParameterBufferImpl cannot be cast to org.firebirdsql.gds.impl.wire.TransactionParameterBufferImpl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(abstractIscTrHandle0);
      
      XSQLDA xSQLDA0 = new XSQLDA(1);
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.sqld);
      assertEquals(1, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertNotNull(isc_db_handle_impl0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.deepCopy();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      javaGDSImpl0.addProcessId(databaseParameterBufferImp0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer0));
      
      BlobParameterBuffer blobParameterBuffer0 = javaGDSImpl0.createBlobParameterBuffer();
      assertNotNull(blobParameterBuffer0);
      
      try { 
        javaGDSImpl0.iscOpenBlob2(isc_db_handle_impl0, isc_tr_handle_impl0, (IscBlobHandle) null, blobParameterBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid BLOB handle
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      AbstractJavaGDSImpl.EventCoordinatorImp abstractJavaGDSImpl_EventCoordinatorImp0 = null;
      try {
        abstractJavaGDSImpl_EventCoordinatorImp0 = javaGDSImpl0.new EventCoordinatorImp(335544378, (String) null, (-414));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-414
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertNotNull(isc_db_handle_impl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      isc_db_handle_impl0.setODSMajorVersion(106);
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(106, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      
      EventHandleImp eventHandleImp0 = (EventHandleImp)javaGDSImpl1.createEventHandle("PURE_JAVA");
      assertEquals("PURE_JAVA", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertNotNull(eventHandleImp0);
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      javaGDSImpl0.iscCancelEvents(isc_db_handle_impl0, eventHandleImp0);
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(106, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals("PURE_JAVA", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertNotSame(javaGDSImpl0, javaGDSImpl1);
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertFalse(javaGDSImpl0.equals((Object)javaGDSImpl1));
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      String string0 = "H%w$%N[XZVhQMpf2]";
      try { 
        Integer.decode("PURE_JAVA");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"PURE_JAVA\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(abstractIscTrHandle0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-115);
      try { 
        javaGDSImpl0.iscTransactionInformation((IscTrHandle) null, byteArray0, 520);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(abstractIscTrHandle0);
      
      org.firebirdsql.gds.impl.jni.TransactionParameterBufferImpl transactionParameterBufferImpl0 = new org.firebirdsql.gds.impl.jni.TransactionParameterBufferImpl();
      assertNotNull(transactionParameterBufferImpl0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      try { 
        javaGDSImpl0.iscDropDatabase((IscDbHandle) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("xsqlda.sqln read as ", 5);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      IscStmtHandle iscStmtHandle0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.getSqlCounts((IscStmtHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      XSQLDA xSQLDA0 = new XSQLDA(1681);
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(1681, xSQLDA0.sqld);
      assertEquals(1681, xSQLDA0.sqln);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertNotNull(isc_db_handle_impl0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscReconnectTransaction(isc_tr_handle_impl0, isc_db_handle_impl0, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(0, xSQLDA0.sqld);
      
      AbstractJavaGDSImpl.calculateBLR(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(0, xSQLDA0.sqld);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlDescribe((IscStmtHandle) null, 1405);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      TransactionParameterBuffer transactionParameterBuffer0 = javaGDSImpl0.newTransactionParameterBuffer();
      assertNotNull(transactionParameterBuffer0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertNotNull(isc_db_handle_impl0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      isc_db_handle_impl0.setODSMinorVersion((-257));
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals((-257), isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getRsrId());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertNotNull(isc_stmt_handle_impl1);
      
      byte[] byteArray0 = isc_db_handle_impl0.getResp_data();
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals((-257), isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertNotNull(byteArray0);
      assertEquals(65536, byteArray0.length);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDetachDatabase(isc_db_handle_impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.isc_db_handle_impl", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      DatabaseParameterBuffer databaseParameterBuffer0 = javaGDSImpl1.createDatabaseParameterBuffer();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      try { 
        javaGDSImpl0.iscCreateDatabase("xsqlda.sqln read as ", (IscDbHandle) null, databaseParameterBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_blob_handle_impl0.rbl_flagsAdd((-2236));
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertTrue(isc_blob_handle_impl0.isEof());
      
      isc_blob_handle_impl0.setDb(isc_db_handle_impl0);
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertTrue(isc_blob_handle_impl0.isEof());
      
      try { 
        javaGDSImpl0.iscGetSegment(isc_blob_handle_impl0, 128);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl0.setDbHandle(isc_db_handle_impl0);
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte) (-89);
      byteArray0[7] = (byte)63;
      try { 
        javaGDSImpl0.iscPrepareTransaction2(isc_tr_handle_impl0, byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // transaction  is 
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      ServiceRequestBufferImp serviceRequestBufferImp0 = (ServiceRequestBufferImp)javaGDSImpl0.createServiceRequestBuffer(512);
      assertEquals(512, serviceRequestBufferImp0.getTaskIdentifier());
      assertNotNull(serviceRequestBufferImp0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = (isc_blob_handle_impl)javaGDSImpl0.createIscBlobHandle();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.BlobParameterBufferImp blobParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.BlobParameterBufferImp();
      assertNotNull(blobParameterBufferImp0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      javaGDSImpl0.addProcessId(databaseParameterBufferImp0);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      XdrInputStream xdrInputStream0 = new XdrInputStream(sequenceInputStream0);
      assertNotNull(xdrInputStream0);
      
      try { 
        javaGDSImpl0.nextOperation(xdrInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.XdrInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      javaGDSImpl0.addProcessId(databaseParameterBufferImp0);
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl0.getTr();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNull(isc_tr_handle_impl0);
      
      try { 
        javaGDSImpl0.iscReconnectTransaction((IscTrHandle) null, (IscDbHandle) null, (-1660L));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      try { 
        javaGDSImpl0.iscRollbackTransaction(isc_tr_handle_impl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertNotNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.fbCancelOperation(isc_db_handle_impl0, (-2014522721));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNull(isc_db_handle_impl0);
      
      Integer integer0 = new Integer(631);
      assertNotNull(integer0);
      assertEquals(631, (int)integer0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo(databaseParameterBuffer0);
      assertNotNull(fBConnectionRequestInfo0);
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      try { 
        javaGDSImpl0.connect((isc_db_handle_impl) null, (String) null, integer0, "", fBConnectionRequestInfo0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null or empty filename in DbAttachInfo
         //
         verifyException("org.firebirdsql.gds.impl.DbAttachInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      XSQLDA xSQLDA0 = new XSQLDA(2);
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(2, xSQLDA0.sqld);
      assertEquals(2, xSQLDA0.sqln);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscReconnectTransaction(isc_tr_handle_impl0, isc_db_handle_impl0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = (isc_db_handle_impl)javaGDSImpl0.createIscDbHandle();
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl1 = isc_blob_handle_impl0.getDb();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNull(isc_db_handle_impl1);
      
      Integer integer0 = new Integer(31);
      assertNotNull(integer0);
      assertEquals(31, (int)integer0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl2 = isc_stmt_handle_impl0.getRsr_rdb();
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNull(isc_db_handle_impl2);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      int int0 = databaseParameterBufferImp0.getArgumentAsInt(3);
      assertEquals(0, int0);
      
      try { 
        javaGDSImpl0.connect((isc_db_handle_impl) null, "parseDatabaseInfo: first 2 bytes are ", integer1, ",kno!b0Ds]*?^S>", databaseParameterBufferImp0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to complete network request to host \"parseDatabaseInfo: first 2 bytes are \".
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscGetSegment((IscBlobHandle) null, 1951);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      int int0 = 612;
      Integer integer0 = new Integer(612);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(612, (int)integer0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      isc_blob_handle_impl isc_blob_handle_impl0 = (isc_blob_handle_impl)javaGDSImpl1.createIscBlobHandle();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      isc_blob_handle_impl0.setBlobId((-823L));
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals((-823L), isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscSeekBlob(isc_blob_handle_impl0, (-436), 612);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      IscDbHandle iscDbHandle0 = isc_tr_handle_impl0.getDbHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNull(iscDbHandle0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      isc_tr_handle_impl0.forgetResultSets();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      isc_db_handle_impl isc_db_handle_impl0 = (isc_db_handle_impl)javaGDSImpl0.createIscDbHandle();
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertNotNull(isc_db_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl0.setUpdateCount(593);
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(593, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      
      XSQLDA xSQLDA0 = isc_stmt_handle_impl0.getInSqlda();
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(593, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNull(xSQLDA0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertNotNull(isc_stmt_handle_impl1);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl1.getTransaction();
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertNull(abstractIscTrHandle0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlPrepare((IscTrHandle) isc_tr_handle_impl0, (IscStmtHandle) isc_stmt_handle_impl0, (String) null, (-1915));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNull(isc_db_handle_impl0);
      
      EventHandleImp eventHandleImp0 = (EventHandleImp)javaGDSImpl0.createEventHandle("71eo=*cvyo;=");
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertEquals("71eo=*cvyo;=", eventHandleImp0.getEventName());
      assertNotNull(eventHandleImp0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      try { 
        javaGDSImpl0.iscQueueEvents((IscDbHandle) null, eventHandleImp0, eventHandler0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNotNull(isc_stmt_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsrId());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id_ptr());
      assertNotNull(isc_stmt_handle_impl1);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.getDescribeBindInfo(isc_stmt_handle_impl1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl1.createIscStmtHandle();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNotNull(isc_stmt_handle_impl0);
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlPrepare((IscTrHandle) isc_tr_handle_impl0, (IscStmtHandle) isc_stmt_handle_impl0, "", 809);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      javaGDSImpl0.addProcessId(databaseParameterBufferImp0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3050);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(xdrOutputStream0);
      
      XdrInputStream xdrInputStream0 = new XdrInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(xdrInputStream0);
      
      int int0 = javaGDSImpl0.sendConnectPacket(xdrOutputStream0, xdrInputStream0, "Yzh8G!#!0[`?K)J$#N");
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      javaGDSImpl0.addProcessId((DatabaseParameterBuffer) null);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscPutSegment((IscBlobHandle) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      XSQLDA xSQLDA0 = new XSQLDA(5);
      assertNotNull(xSQLDA0);
      assertEquals(5, xSQLDA0.sqln);
      assertEquals(5, xSQLDA0.sqld);
      assertEquals(1, xSQLDA0.version);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscBlobInfo((IscBlobHandle) null, (byte[]) null, 1996);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertNotNull(isc_stmt_handle_impl1);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl2.getUpdateCount());
      assertNull(isc_stmt_handle_impl2.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl2.size());
      assertEquals(0, isc_stmt_handle_impl2.getSelectCount());
      assertFalse(isc_stmt_handle_impl2.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl2.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl2.getDeleteCount());
      assertFalse(isc_stmt_handle_impl2.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl2.getStatementType());
      assertFalse(isc_stmt_handle_impl2.isValid());
      assertFalse(isc_stmt_handle_impl2.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl2.getRsr_id());
      assertNotNull(isc_stmt_handle_impl2);
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl0));
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl1));
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl2.getTransaction();
      assertEquals(0, isc_stmt_handle_impl2.getUpdateCount());
      assertNull(isc_stmt_handle_impl2.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl2.size());
      assertEquals(0, isc_stmt_handle_impl2.getSelectCount());
      assertFalse(isc_stmt_handle_impl2.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl2.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl2.getDeleteCount());
      assertFalse(isc_stmt_handle_impl2.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl2.getStatementType());
      assertFalse(isc_stmt_handle_impl2.isValid());
      assertFalse(isc_stmt_handle_impl2.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl2.getRsr_id());
      assertNull(abstractIscTrHandle0);
      assertNotSame(isc_stmt_handle_impl2, isc_stmt_handle_impl0);
      assertNotSame(isc_stmt_handle_impl2, isc_stmt_handle_impl1);
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl0));
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl1));
      
      XSQLDA xSQLDA0 = new XSQLDA(1);
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.sqld);
      assertEquals(1, xSQLDA0.sqln);
      assertEquals(1, xSQLDA0.version);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertNotNull(isc_db_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecImmed2((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) null, "$F c6j", (-59), xSQLDA0, xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = isc_blob_handle_impl0.getDb();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = (isc_tr_handle_impl)javaGDSImpl0.createIscTrHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      BlobParameterBufferImp blobParameterBufferImp0 = (BlobParameterBufferImp)javaGDSImpl1.createBlobParameterBuffer();
      assertNotNull(blobParameterBufferImp0);
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscCreateBlob2((IscDbHandle) null, isc_tr_handle_impl0, isc_blob_handle_impl0, blobParameterBufferImp0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_blob_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_blob_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(1, xSQLDA0.version);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecuteImmediate((IscDbHandle) null, (IscTrHandle) isc_tr_handle_impl0, "", (-184), xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte) (-111);
      byteArray0[7] = (byte) (-3);
      byte[] byteArray1 = javaGDSImpl0.iscExpandDpb(byteArray0, 17, (byte)54, (Object[]) null);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte)54, (byte)98, (byte)6, (byte) (-2), (byte)66, (byte) (-111), (byte) (-3)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte)54, (byte)98, (byte)6, (byte) (-2), (byte)66, (byte) (-111), (byte) (-3)}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNull(abstractIscTrHandle0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getRsrId());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertNotNull(isc_stmt_handle_impl1);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl1.getRsr_rdb();
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getRsrId());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertNull(isc_db_handle_impl0);
      
      TransactionParameterBufferImpl transactionParameterBufferImpl0 = new TransactionParameterBufferImpl();
      assertNotNull(transactionParameterBufferImpl0);
      
      try { 
        javaGDSImpl0.iscStartTransaction((IscTrHandle) null, (IscDbHandle) null, transactionParameterBufferImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNull(abstractIscTrHandle0);
      
      XSQLDA xSQLDA0 = new XSQLDA(100);
      assertNotNull(xSQLDA0);
      assertEquals(100, xSQLDA0.sqln);
      assertEquals(100, xSQLDA0.sqld);
      assertEquals(1, xSQLDA0.version);
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertNotNull(isc_stmt_handle_impl1);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNull(isc_db_handle_impl0);
      assertNotSame(isc_stmt_handle_impl0, isc_stmt_handle_impl1);
      assertFalse(isc_stmt_handle_impl0.equals((Object)isc_stmt_handle_impl1));
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      org.firebirdsql.gds.impl.jni.TransactionParameterBufferImpl transactionParameterBufferImpl0 = new org.firebirdsql.gds.impl.jni.TransactionParameterBufferImpl();
      assertNotNull(transactionParameterBufferImpl0);
      
      org.firebirdsql.gds.impl.jni.EventHandleImp eventHandleImp0 = new org.firebirdsql.gds.impl.jni.EventHandleImp();
      assertEquals((-1), eventHandleImp0.getSize());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertFalse(eventHandleImp0.isValid());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertNull(eventHandleImp0.getEventName());
      assertFalse(eventHandleImp0.isCancelled());
      assertEquals((-1), eventHandleImp0.getEventStructHandle());
      assertNotNull(eventHandleImp0);
      
      javaGDSImpl0.iscEventBlock(eventHandleImp0);
      assertEquals((-1), eventHandleImp0.getSize());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertFalse(eventHandleImp0.isValid());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertNull(eventHandleImp0.getEventName());
      assertFalse(eventHandleImp0.isCancelled());
      assertEquals((-1), eventHandleImp0.getEventStructHandle());
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      javaGDSImpl0.addProcessId(databaseParameterBufferImp0);
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      Integer integer0 = new Integer((-1051));
      assertNotNull(integer0);
      assertEquals((-1051), (int)integer0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.connect(isc_db_handle_impl0, ")#d", integer0, ")#d", databaseParameterBufferImp0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1051
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-79);
      byte byte0 = (byte)124;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte)66;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) javaGDSImpl0;
      objectArray0[1] = (Object) (byte)124;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (byte)124;
      byte[] byteArray1 = javaGDSImpl0.iscExpandDpb(byteArray0, (byte) (-79), (byte) (-1), objectArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte)64, (byte)58, (byte) (-79), (byte)124, (byte)28, (byte) (-1), (byte)32, (byte)66}, byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte)64, (byte)58, (byte) (-79), (byte)124, (byte)28, (byte) (-1), (byte)32, (byte)66}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertEquals(4, objectArray0.length);
      
      byte[] byteArray2 = JavaGDSImpl.parseRawAddress("PURE_JAVA");
      assertNull(byteArray2);
      
      String string0 = "Can't register plugins ";
      AbstractJavaGDSImpl.EventCoordinatorImp abstractJavaGDSImpl_EventCoordinatorImp0 = null;
      try {
        abstractJavaGDSImpl_EventCoordinatorImp0 = javaGDSImpl0.new EventCoordinatorImp((byte) (-79), "Can't register plugins ", (-1553));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1553
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = (isc_tr_handle_impl)javaGDSImpl0.createIscTrHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      BlobParameterBufferImp blobParameterBufferImp0 = (BlobParameterBufferImp)javaGDSImpl0.createBlobParameterBuffer();
      assertNotNull(blobParameterBufferImp0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl1.iscGetSegment(isc_blob_handle_impl0, 5);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_blob_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_blob_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = (isc_blob_handle_impl)javaGDSImpl0.createIscBlobHandle();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.BlobParameterBufferImp blobParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.BlobParameterBufferImp();
      assertNotNull(blobParameterBufferImp0);
      
      try { 
        javaGDSImpl0.iscOpenBlob2((IscDbHandle) null, isc_tr_handle_impl0, isc_blob_handle_impl0, blobParameterBufferImp0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)23;
      isc_blob_handle_impl0.rbl_flagsAdd((byte) (-121));
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertTrue(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      
      byteArray0[5] = (byte) (-83);
      try { 
        javaGDSImpl0.iscPutSegment(isc_blob_handle_impl0, byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      XSQLDA xSQLDA0 = new XSQLDA(4);
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(4, xSQLDA0.sqld);
      assertEquals(4, xSQLDA0.sqln);
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[6];
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      assertNotNull(xSQLVAR0);
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqltype);
      
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      assertNotNull(xSQLVAR1);
      assertNotSame(xSQLVAR0, xSQLVAR1);
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR1.sqltype);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqlscale);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      
      xSQLVARArray0[0] = xSQLVAR1;
      XSQLVAR xSQLVAR2 = xSQLVAR1.deepCopy();
      assertNotNull(xSQLVAR2);
      assertNotSame(xSQLVAR0, xSQLVAR1);
      assertNotSame(xSQLVAR0, xSQLVAR2);
      assertNotSame(xSQLVAR1, xSQLVAR2);
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertNotSame(xSQLVAR2, xSQLVAR0);
      assertNotSame(xSQLVAR2, xSQLVAR1);
      assertFalse(xSQLVAR0.equals((Object)xSQLVAR1));
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR2.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR2.equals((Object)xSQLVAR1));
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR1.sqltype);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqlscale);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      assertEquals(0, xSQLVAR2.sqlsubtype);
      assertEquals(0, xSQLVAR2.sqllen);
      assertEquals(0, xSQLVAR2.sqltype);
      assertEquals(0, xSQLVAR2.sqlscale);
      
      xSQLVARArray0[1] = xSQLVAR2;
      XSQLVAR xSQLVAR3 = xSQLVAR1.deepCopy();
      assertNotNull(xSQLVAR3);
      assertNotSame(xSQLVAR0, xSQLVAR1);
      assertNotSame(xSQLVAR0, xSQLVAR3);
      assertNotSame(xSQLVAR0, xSQLVAR2);
      assertNotSame(xSQLVAR1, xSQLVAR2);
      assertNotSame(xSQLVAR1, xSQLVAR0);
      assertNotSame(xSQLVAR1, xSQLVAR3);
      assertNotSame(xSQLVAR3, xSQLVAR1);
      assertNotSame(xSQLVAR3, xSQLVAR0);
      assertNotSame(xSQLVAR3, xSQLVAR2);
      assertFalse(xSQLVAR0.equals((Object)xSQLVAR1));
      assertFalse(xSQLVAR0.equals((Object)xSQLVAR2));
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR2));
      assertFalse(xSQLVAR1.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR3.equals((Object)xSQLVAR1));
      assertFalse(xSQLVAR3.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR3.equals((Object)xSQLVAR2));
      assertEquals(0, xSQLVAR0.sqlsubtype);
      assertEquals(0, xSQLVAR0.sqlscale);
      assertEquals(0, xSQLVAR0.sqllen);
      assertEquals(0, xSQLVAR0.sqltype);
      assertEquals(0, xSQLVAR1.sqltype);
      assertEquals(0, xSQLVAR1.sqllen);
      assertEquals(0, xSQLVAR1.sqlscale);
      assertEquals(0, xSQLVAR1.sqlsubtype);
      assertEquals(0, xSQLVAR3.sqlscale);
      assertEquals(0, xSQLVAR3.sqltype);
      assertEquals(0, xSQLVAR3.sqllen);
      assertEquals(0, xSQLVAR3.sqlsubtype);
      
      xSQLVARArray0[2] = xSQLVAR3;
      XSQLVAR xSQLVAR4 = new XSQLVAR();
      assertNotNull(xSQLVAR4);
      assertFalse(xSQLVAR4.equals((Object)xSQLVAR2));
      assertFalse(xSQLVAR4.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR4.equals((Object)xSQLVAR1));
      assertFalse(xSQLVAR4.equals((Object)xSQLVAR3));
      assertEquals(0, xSQLVAR4.sqltype);
      assertEquals(0, xSQLVAR4.sqllen);
      assertEquals(0, xSQLVAR4.sqlscale);
      assertEquals(0, xSQLVAR4.sqlsubtype);
      
      xSQLVARArray0[3] = xSQLVAR4;
      XSQLVAR xSQLVAR5 = new XSQLVAR();
      assertNotNull(xSQLVAR5);
      assertFalse(xSQLVAR5.equals((Object)xSQLVAR2));
      assertFalse(xSQLVAR5.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR5.equals((Object)xSQLVAR4));
      assertFalse(xSQLVAR5.equals((Object)xSQLVAR1));
      assertFalse(xSQLVAR5.equals((Object)xSQLVAR3));
      assertEquals(0, xSQLVAR5.sqllen);
      assertEquals(0, xSQLVAR5.sqltype);
      assertEquals(0, xSQLVAR5.sqlsubtype);
      assertEquals(0, xSQLVAR5.sqlscale);
      
      xSQLVARArray0[4] = xSQLVAR5;
      XSQLVAR xSQLVAR6 = xSQLVAR4.deepCopy();
      assertNotNull(xSQLVAR6);
      assertNotSame(xSQLVAR4, xSQLVAR2);
      assertNotSame(xSQLVAR4, xSQLVAR0);
      assertNotSame(xSQLVAR4, xSQLVAR1);
      assertNotSame(xSQLVAR4, xSQLVAR5);
      assertNotSame(xSQLVAR4, xSQLVAR6);
      assertNotSame(xSQLVAR4, xSQLVAR3);
      assertNotSame(xSQLVAR6, xSQLVAR0);
      assertNotSame(xSQLVAR6, xSQLVAR2);
      assertNotSame(xSQLVAR6, xSQLVAR4);
      assertNotSame(xSQLVAR6, xSQLVAR3);
      assertNotSame(xSQLVAR6, xSQLVAR5);
      assertNotSame(xSQLVAR6, xSQLVAR1);
      assertFalse(xSQLVAR4.equals((Object)xSQLVAR2));
      assertFalse(xSQLVAR4.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR4.equals((Object)xSQLVAR1));
      assertFalse(xSQLVAR4.equals((Object)xSQLVAR5));
      assertFalse(xSQLVAR4.equals((Object)xSQLVAR3));
      assertFalse(xSQLVAR6.equals((Object)xSQLVAR0));
      assertFalse(xSQLVAR6.equals((Object)xSQLVAR2));
      assertFalse(xSQLVAR6.equals((Object)xSQLVAR4));
      assertFalse(xSQLVAR6.equals((Object)xSQLVAR3));
      assertFalse(xSQLVAR6.equals((Object)xSQLVAR5));
      assertFalse(xSQLVAR6.equals((Object)xSQLVAR1));
      assertEquals(0, xSQLVAR4.sqltype);
      assertEquals(0, xSQLVAR4.sqllen);
      assertEquals(0, xSQLVAR4.sqlscale);
      assertEquals(0, xSQLVAR4.sqlsubtype);
      assertEquals(0, xSQLVAR6.sqlscale);
      assertEquals(0, xSQLVAR6.sqllen);
      assertEquals(0, xSQLVAR6.sqltype);
      assertEquals(0, xSQLVAR6.sqlsubtype);
      
      xSQLVARArray0[5] = xSQLVAR6;
      xSQLDA0.sqlvar = xSQLVARArray0;
      AbstractJavaGDSImpl.calculateBLR(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(4, xSQLDA0.sqld);
      assertEquals(4, xSQLDA0.sqln);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = (isc_stmt_handle_impl)javaGDSImpl0.createIscStmtHandle();
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertNotNull(isc_stmt_handle_impl1);
      assertFalse(isc_stmt_handle_impl1.equals((Object)isc_stmt_handle_impl0));
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      isc_stmt_handle_impl isc_stmt_handle_impl2 = (isc_stmt_handle_impl)javaGDSImpl1.createIscStmtHandle();
      assertFalse(isc_stmt_handle_impl2.isValid());
      assertNull(isc_stmt_handle_impl2.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl2.getUpdateCount());
      assertFalse(isc_stmt_handle_impl2.isSingletonResult());
      assertFalse(isc_stmt_handle_impl2.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl2.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl2.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl2.size());
      assertEquals(0, isc_stmt_handle_impl2.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl2.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl2.getStatementType());
      assertEquals(0, isc_stmt_handle_impl2.getInsertCount());
      assertNotNull(isc_stmt_handle_impl2);
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertNotSame(isc_stmt_handle_impl2, isc_stmt_handle_impl1);
      assertNotSame(isc_stmt_handle_impl2, isc_stmt_handle_impl0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl1));
      assertFalse(isc_stmt_handle_impl2.equals((Object)isc_stmt_handle_impl0));
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp1 = (DatabaseParameterBufferImp)databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBufferImp1);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBufferImp1);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBufferImp0);
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBufferImp0));
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_db_handle_impl();
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getRdb_id_ptr());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertNotNull(isc_db_handle_impl0);
      
      try { 
        javaGDSImpl0.internalAttachDatabase((String) null, (Integer) 3, "", isc_db_handle_impl0, databaseParameterBufferImp1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null or empty filename in DbAttachInfo
         //
         verifyException("org.firebirdsql.gds.impl.DbAttachInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_blob_handle_impl0.setRbl_id(34);
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(34, isc_blob_handle_impl0.getRbl_id());
      
      isc_tr_handle_impl0.addBlob(isc_blob_handle_impl0);
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(34, isc_blob_handle_impl0.getRbl_id());
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscVaxInteger((byte[]) null, (-3225), 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      try { 
        javaGDSImpl0.fbCancelOperation((IscDbHandle) null, (-1105));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      IscDbHandle iscDbHandle0 = null;
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      int int0 = 0;
      int int1 = 911;
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertNotNull(isc_stmt_handle_impl1);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl1.getTransaction();
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertNull(abstractIscTrHandle0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecImmed2((IscDbHandle) null, (IscTrHandle) null, "Cp1257", "GNpzG\"fH~G1O'^U^", 0, (XSQLDA) null, (XSQLDA) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertNotNull(isc_svc_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl0);
      
      byte[] byteArray0 = AbstractJavaGDSImpl.sql_prepare_info2;
      assertNotNull(byteArray0);
      assertEquals(14, byteArray0.length);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertNotNull(isc_blob_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscPutSegment(isc_blob_handle_impl0, byteArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_blob_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_blob_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertNotNull(isc_db_handle_impl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      JavaGDSImpl javaGDSImpl2 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl2);
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl0));
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl1));
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = javaGDSImpl2.createDatabaseParameterBuffer();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(javaGDSImpl2, javaGDSImpl0);
      assertNotSame(javaGDSImpl2, javaGDSImpl1);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl0));
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl1));
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      org.firebirdsql.gds.impl.jni.TransactionParameterBufferImpl transactionParameterBufferImpl0 = new org.firebirdsql.gds.impl.jni.TransactionParameterBufferImpl();
      assertNotNull(transactionParameterBufferImpl0);
      
      isc_db_handle_impl isc_db_handle_impl1 = (isc_db_handle_impl)javaGDSImpl0.createIscDbHandle();
      assertEquals(0, isc_db_handle_impl1.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl1.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl1.getProtocol());
      assertEquals(0, isc_db_handle_impl1.getResp_data_len());
      assertEquals(0, isc_db_handle_impl1.getDialect());
      assertEquals(0, isc_db_handle_impl1.getResp_object());
      assertEquals(0, isc_db_handle_impl1.getODSMajorVersion());
      assertTrue(isc_db_handle_impl1.isValid());
      assertNotNull(isc_db_handle_impl1);
      assertNotSame(javaGDSImpl0, javaGDSImpl2);
      assertNotSame(javaGDSImpl0, javaGDSImpl1);
      assertNotSame(isc_db_handle_impl1, isc_db_handle_impl0);
      assertFalse(javaGDSImpl0.equals((Object)javaGDSImpl2));
      assertFalse(javaGDSImpl0.equals((Object)javaGDSImpl1));
      assertFalse(isc_db_handle_impl1.equals((Object)isc_db_handle_impl0));
      
      isc_blob_handle_impl isc_blob_handle_impl0 = (isc_blob_handle_impl)javaGDSImpl1.createIscBlobHandle();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertNotNull(isc_blob_handle_impl0);
      assertNotSame(javaGDSImpl1, javaGDSImpl2);
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl2));
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      isc_db_handle_impl1.setDialect(218);
      assertEquals(0, isc_db_handle_impl1.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl1.getResp_blob_id());
      assertEquals(218, isc_db_handle_impl1.getDialect());
      assertEquals(0, isc_db_handle_impl1.getProtocol());
      assertEquals(0, isc_db_handle_impl1.getResp_data_len());
      assertEquals(0, isc_db_handle_impl1.getResp_object());
      assertEquals(0, isc_db_handle_impl1.getODSMajorVersion());
      assertTrue(isc_db_handle_impl1.isValid());
      assertNotSame(javaGDSImpl0, javaGDSImpl2);
      assertNotSame(javaGDSImpl0, javaGDSImpl1);
      assertNotSame(isc_db_handle_impl1, isc_db_handle_impl0);
      assertFalse(javaGDSImpl0.equals((Object)javaGDSImpl2));
      assertFalse(javaGDSImpl0.equals((Object)javaGDSImpl1));
      assertFalse(isc_db_handle_impl1.equals((Object)isc_db_handle_impl0));
      
      org.firebirdsql.gds.impl.jni.BlobParameterBufferImp blobParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.BlobParameterBufferImp();
      assertNotNull(blobParameterBufferImp0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl1.iscCreateBlob2(isc_db_handle_impl1, isc_tr_handle_impl0, isc_blob_handle_impl0, blobParameterBufferImp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      Integer integer0 = Integer.getInteger("PURE_JAVA");
      assertNull(integer0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.deepCopy();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo(databaseParameterBuffer0);
      assertNotNull(fBConnectionRequestInfo0);
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer0));
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      try { 
        javaGDSImpl0.connect((isc_db_handle_impl) null, "Cp850", (Integer) null, "GNpzG\"fH~G1O'^U^", fBConnectionRequestInfo0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to complete network request to host \"Cp850\".
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = (isc_blob_handle_impl)javaGDSImpl0.createIscBlobHandle();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      
      try { 
        javaGDSImpl0.iscCreateBlob2((IscDbHandle) null, isc_tr_handle_impl0, isc_blob_handle_impl0, (BlobParameterBuffer) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = null;
      int int0 = 809;
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertNotNull(isc_blob_handle_impl0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)4;
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscBlobInfo(isc_blob_handle_impl0, byteArray0, (byte)11);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_blob_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_blob_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscSeekBlob(isc_blob_handle_impl0, 2394, 809);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertNotNull(isc_db_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertNull(abstractIscTrHandle0);
      
      XSQLDA xSQLDA0 = new XSQLDA(5);
      assertNotNull(xSQLDA0);
      assertEquals(5, xSQLDA0.sqld);
      assertEquals(1, xSQLDA0.version);
      assertEquals(5, xSQLDA0.sqln);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecImmed2((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) null, (String) null, 4, xSQLDA0, xSQLDA0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2339), (-2339));
      assertEquals((-2339), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      WireXdrInputStream wireXdrInputStream0 = new WireXdrInputStream(byteArrayInputStream0);
      assertEquals((-2339), byteArrayInputStream0.available());
      assertNotNull(wireXdrInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      ServiceRequestBufferImp serviceRequestBufferImp0 = (ServiceRequestBufferImp)javaGDSImpl0.createServiceRequestBuffer((-2339));
      assertEquals((-2339), serviceRequestBufferImp0.getTaskIdentifier());
      assertNotNull(serviceRequestBufferImp0);
      
      try { 
        javaGDSImpl0.nextOperation(wireXdrInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.XdrInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqld);
      assertEquals(0, xSQLDA0.sqln);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertNotNull(isc_stmt_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertNull(isc_db_handle_impl0);
      
      isc_stmt_handle_impl0.setSelectCount(5);
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(5, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl1.getUpdateCount());
      assertFalse(isc_stmt_handle_impl1.isValid());
      assertFalse(isc_stmt_handle_impl1.isSingletonResult());
      assertNull(isc_stmt_handle_impl1.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl1.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl1.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl1.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl1.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl1.size());
      assertEquals(0, isc_stmt_handle_impl1.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl1.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl1.getStatementType());
      assertNotNull(isc_stmt_handle_impl1);
      
      int int0 = javaGDSImpl0.iscInteger((byte[]) null, 129, 129);
      assertEquals(0, int0);
      
      try { 
        javaGDSImpl0.iscCreateDatabase((String) null, (IscDbHandle) null, databaseParameterBufferImp0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connection string missing
         //
         verifyException("org.firebirdsql.gds.impl.DbAttachInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      int int0 = 0;
      int int1 = javaGDSImpl0.iscVaxInteger((byte[]) null, 73, 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      DbAttachInfo dbAttachInfo0 = null;
      try {
        dbAttachInfo0 = new DbAttachInfo((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Connection string missing
         //
         verifyException("org.firebirdsql.gds.impl.DbAttachInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      int int0 = javaGDSImpl0.iscInteger((byte[]) null, (-1739), (-1739));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = (isc_blob_handle_impl)javaGDSImpl0.createIscBlobHandle();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_blob_handle_impl0.setRbl_id(4432);
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(4432, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertNotNull(isc_db_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl0);
      
      XSQLDA xSQLDA0 = isc_stmt_handle_impl0.getOutSqlda();
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNull(xSQLDA0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecImmed2((IscDbHandle) isc_db_handle_impl0, (IscTrHandle) isc_tr_handle_impl0, "ErRqaoEzxYYwO", (-3024), (XSQLDA) null, (XSQLDA) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertNotNull(isc_db_handle_impl0);
      
      isc_blob_handle_impl0.setDb(isc_db_handle_impl0);
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      
      isc_blob_handle_impl isc_blob_handle_impl1 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl1.getRbl_id());
      assertEquals(0, isc_blob_handle_impl1.getPosition());
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertFalse(isc_blob_handle_impl1.isEof());
      assertNotNull(isc_blob_handle_impl1);
      assertFalse(isc_blob_handle_impl1.equals((Object)isc_blob_handle_impl0));
      
      byte[] byteArray0 = new byte[0];
      try { 
        javaGDSImpl0.iscPutSegment(isc_blob_handle_impl1, byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid database handle (no active connection)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertNotNull(isc_stmt_handle_impl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      // Undeclared exception!
      try { 
        javaGDSImpl1.iscDsqlPrepare((IscTrHandle) isc_tr_handle_impl0, (IscStmtHandle) isc_stmt_handle_impl0, "3:jS5%CF['he4&F]", 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      BlobParameterBuffer blobParameterBuffer0 = javaGDSImpl0.createBlobParameterBuffer();
      assertNotNull(blobParameterBuffer0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".~bufSZ*d7D.");
      assertNotNull(mockFileOutputStream0);
      
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream(mockFileOutputStream0);
      assertNotNull(xdrOutputStream0);
      
      isc_tr_handle_impl0.setTransactionId((-2165));
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      isc_db_handle_impl0.out = xdrOutputStream0;
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      
      isc_blob_handle_impl isc_blob_handle_impl0 = (isc_blob_handle_impl)javaGDSImpl0.createIscBlobHandle();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscOpenBlob2(isc_db_handle_impl0, isc_tr_handle_impl0, isc_blob_handle_impl0, blobParameterBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNull(abstractIscTrHandle0);
      
      try { 
        javaGDSImpl0.iscCommitRetaining((IscTrHandle) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = null;
      XdrOutputStream xdrOutputStream0 = new XdrOutputStream();
      assertNotNull(xdrOutputStream0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.sendConnectPacket(xdrOutputStream0, (XdrInputStream) null, "3#EQ!>7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.XdrOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = null;
      javaGDSImpl0.receiveResponse((isc_db_handle_impl) null, 69);
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      
      String string0 = "3";
      String string1 = "^Kl-";
      ServiceRequestBufferImp serviceRequestBufferImp0 = (ServiceRequestBufferImp)javaGDSImpl0.createServiceRequestBuffer(1);
      assertEquals(1, serviceRequestBufferImp0.getTaskIdentifier());
      assertNotNull(serviceRequestBufferImp0);
      
      try { 
        javaGDSImpl0.iscServiceStart((IscSvcHandle) null, serviceRequestBufferImp0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid service handle
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertNotNull(isc_db_handle_impl0);
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      JavaGDSImpl javaGDSImpl2 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl2);
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl1));
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl0));
      
      DatabaseParameterBuffer databaseParameterBuffer0 = javaGDSImpl2.createDatabaseParameterBuffer();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(javaGDSImpl2, javaGDSImpl1);
      assertNotSame(javaGDSImpl2, javaGDSImpl0);
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl1));
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl0));
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      DatabaseParameterBuffer databaseParameterBuffer1 = javaGDSImpl2.createDatabaseParameterBuffer();
      assertNotNull(databaseParameterBuffer1);
      assertNotSame(javaGDSImpl2, javaGDSImpl1);
      assertNotSame(javaGDSImpl2, javaGDSImpl0);
      assertNotSame(databaseParameterBuffer1, databaseParameterBuffer0);
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl1));
      assertFalse(javaGDSImpl2.equals((Object)javaGDSImpl0));
      assertTrue(databaseParameterBuffer1.equals((Object)databaseParameterBuffer0));
      
      org.firebirdsql.gds.impl.jni.TransactionParameterBufferImpl transactionParameterBufferImpl0 = new org.firebirdsql.gds.impl.jni.TransactionParameterBufferImpl();
      assertNotNull(transactionParameterBufferImpl0);
      
      isc_db_handle_impl isc_db_handle_impl1 = (isc_db_handle_impl)javaGDSImpl0.createIscDbHandle();
      assertTrue(isc_db_handle_impl1.isValid());
      assertEquals(0, isc_db_handle_impl1.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl1.getResp_object());
      assertEquals(0, isc_db_handle_impl1.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl1.getProtocol());
      assertEquals(0L, isc_db_handle_impl1.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl1.getDialect());
      assertEquals(0, isc_db_handle_impl1.getResp_data_len());
      assertNotNull(isc_db_handle_impl1);
      assertNotSame(javaGDSImpl0, javaGDSImpl1);
      assertNotSame(javaGDSImpl0, javaGDSImpl2);
      assertNotSame(isc_db_handle_impl1, isc_db_handle_impl0);
      assertFalse(javaGDSImpl0.equals((Object)javaGDSImpl1));
      assertFalse(javaGDSImpl0.equals((Object)javaGDSImpl2));
      assertFalse(isc_db_handle_impl1.equals((Object)isc_db_handle_impl0));
      
      isc_blob_handle_impl isc_blob_handle_impl0 = (isc_blob_handle_impl)javaGDSImpl1.createIscBlobHandle();
      assertFalse(isc_blob_handle_impl0.isEof());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertNotNull(isc_blob_handle_impl0);
      assertNotSame(javaGDSImpl1, javaGDSImpl0);
      assertNotSame(javaGDSImpl1, javaGDSImpl2);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl2));
      
      org.firebirdsql.gds.impl.jni.BlobParameterBufferImp blobParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.BlobParameterBufferImp();
      assertNotNull(blobParameterBufferImp0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl1.iscCreateBlob2(isc_db_handle_impl1, isc_tr_handle_impl0, isc_blob_handle_impl0, blobParameterBufferImp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      EventHandleImp eventHandleImp0 = new EventHandleImp("M*x^?n*l1Y_8sRK");
      assertEquals("M*x^?n*l1Y_8sRK", eventHandleImp0.getEventName());
      assertEquals((-1), eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertNotNull(eventHandleImp0);
      
      eventHandleImp0.calculateCount();
      assertEquals("M*x^?n*l1Y_8sRK", eventHandleImp0.getEventName());
      assertEquals(0, eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals((-1), eventHandleImp0.getLocalId());
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertNotNull(isc_db_handle_impl0);
      
      javaGDSImpl0.iscCancelEvents(isc_db_handle_impl0, eventHandleImp0);
      assertEquals("M*x^?n*l1Y_8sRK", eventHandleImp0.getEventName());
      assertEquals(0, eventHandleImp0.getEventCount());
      assertEquals((-1), eventHandleImp0.getEventId());
      assertEquals((-1), eventHandleImp0.getLocalId());
      assertTrue(isc_db_handle_impl0.isValid());
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = (isc_tr_handle_impl)javaGDSImpl0.createIscTrHandle();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      
      XSQLDA xSQLDA0 = new XSQLDA();
      assertNotNull(xSQLDA0);
      assertEquals(1, xSQLDA0.version);
      assertEquals(0, xSQLDA0.sqln);
      assertEquals(0, xSQLDA0.sqld);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNotNull(isc_stmt_handle_impl0);
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertNull(isc_db_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl1 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl1.getState());
      assertNotNull(isc_tr_handle_impl1);
      assertTrue(isc_tr_handle_impl1.equals((Object)isc_tr_handle_impl0));
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      org.firebirdsql.gds.impl.jni.TransactionParameterBufferImpl transactionParameterBufferImpl0 = new org.firebirdsql.gds.impl.jni.TransactionParameterBufferImpl();
      assertNotNull(transactionParameterBufferImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRblId());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscBlobInfo(isc_blob_handle_impl0, (byte[]) null, 4292);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_blob_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_blob_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      
      BlobParameterBuffer blobParameterBuffer0 = javaGDSImpl0.createBlobParameterBuffer();
      assertNotNull(blobParameterBuffer0);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNotNull(isc_stmt_handle_impl0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      try { 
        javaGDSImpl0.internalAttachDatabase((String) null, (Integer) 3, (String) null, (IscDbHandle) null, databaseParameterBufferImp0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null or empty filename in DbAttachInfo
         //
         verifyException("org.firebirdsql.gds.impl.DbAttachInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      BlobParameterBuffer blobParameterBuffer0 = javaGDSImpl0.createBlobParameterBuffer();
      assertNotNull(blobParameterBuffer0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertNotNull(isc_stmt_handle_impl0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlPrepare((IscTrHandle) isc_tr_handle_impl0, (IscStmtHandle) isc_stmt_handle_impl0, "rSpW{", "Q35,i#pRZ8X.DG,*P", 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl cannot be cast to org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertNotNull(isc_stmt_handle_impl0);
      
      AbstractIscTrHandle abstractIscTrHandle0 = isc_stmt_handle_impl0.getTransaction();
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id_ptr());
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
      assertNull(abstractIscTrHandle0);
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlPrepare((IscTrHandle) null, (IscStmtHandle) isc_stmt_handle_impl0, (String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      byte[] byteArray0 = JavaGDSImpl.parseRawAddress("?\"fq");
      assertNull(byteArray0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      assertEquals(0, isc_tr_handle_impl0.getState());
      assertNotNull(isc_tr_handle_impl0);
      assertEquals(2, AbstractIscTrHandle.TRANSACTIONSTARTED);
      assertEquals(1, AbstractIscTrHandle.TRANSACTIONSTARTING);
      assertEquals(4, AbstractIscTrHandle.TRANSACTIONPREPARED);
      assertEquals(3, AbstractIscTrHandle.TRANSACTIONPREPARING);
      assertEquals(5, AbstractIscTrHandle.TRANSACTIONCOMMITTING);
      assertEquals(0, AbstractIscTrHandle.NOTRANSACTION);
      assertEquals(6, AbstractIscTrHandle.TRANSACTIONROLLINGBACK);
      
      isc_blob_handle_impl isc_blob_handle_impl1 = new isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl1.isEof());
      assertEquals(0, isc_blob_handle_impl1.getRbl_id());
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertEquals(0, isc_blob_handle_impl1.getPosition());
      assertNotNull(isc_blob_handle_impl1);
      assertFalse(isc_blob_handle_impl1.equals((Object)isc_blob_handle_impl0));
      
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl1);
      assertFalse(javaGDSImpl1.equals((Object)javaGDSImpl0));
      
      try { 
        javaGDSImpl1.iscPutSegment(isc_blob_handle_impl1, (byte[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message (getMessage() has thrown an exception)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_svc_handle_impl isc_svc_handle_impl0 = new isc_svc_handle_impl();
      assertTrue(isc_svc_handle_impl0.isNotValid());
      assertFalse(isc_svc_handle_impl0.isValid());
      assertEquals(0, isc_svc_handle_impl0.getResp_object());
      assertEquals(0L, isc_svc_handle_impl0.getResp_blob_id());
      assertNotNull(isc_svc_handle_impl0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-5);
      DbAttachInfo dbAttachInfo0 = new DbAttachInfo("^Kl-");
      assertEquals(3050, dbAttachInfo0.getPort());
      assertEquals("^Kl-", dbAttachInfo0.getFileName());
      assertEquals("localhost", dbAttachInfo0.getServer());
      assertNotNull(dbAttachInfo0);
      
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl0.getResp_object());
      assertEquals(0, isc_db_handle_impl0.getODSMinorVersion());
      assertEquals(0L, isc_db_handle_impl0.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl0.getDialect());
      assertEquals(0, isc_db_handle_impl0.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl0.getResp_data_len());
      assertEquals(0, isc_db_handle_impl0.getProtocol());
      assertTrue(isc_db_handle_impl0.isValid());
      assertNotNull(isc_db_handle_impl0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp1 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp1);
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBufferImp0));
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp1.removeExtensionParams();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp1, databaseParameterBufferImp0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp1);
      assertTrue(databaseParameterBufferImp1.equals((Object)databaseParameterBufferImp0));
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp1));
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      isc_db_handle_impl isc_db_handle_impl1 = new isc_db_handle_impl();
      assertEquals(0, isc_db_handle_impl1.getODSMajorVersion());
      assertEquals(0, isc_db_handle_impl1.getResp_object());
      assertTrue(isc_db_handle_impl1.isValid());
      assertEquals(0, isc_db_handle_impl1.getODSMinorVersion());
      assertEquals(0, isc_db_handle_impl1.getResp_data_len());
      assertEquals(0, isc_db_handle_impl1.getProtocol());
      assertEquals(0L, isc_db_handle_impl1.getResp_blob_id());
      assertEquals(0, isc_db_handle_impl1.getDialect());
      assertNotNull(isc_db_handle_impl1);
      assertFalse(isc_db_handle_impl1.equals((Object)isc_db_handle_impl0));
      
      try { 
        javaGDSImpl0.internalAttachDatabase(dbAttachInfo0, (IscDbHandle) isc_db_handle_impl1, databaseParameterBuffer0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to complete network request to host \"localhost\".
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      assertEquals(0, isc_blob_handle_impl0.getRbl_id());
      assertEquals(0, isc_blob_handle_impl0.getPosition());
      assertEquals(0L, isc_blob_handle_impl0.getBlobId());
      assertFalse(isc_blob_handle_impl0.isEof());
      assertNotNull(isc_blob_handle_impl0);
      
      org.firebirdsql.gds.impl.jni.isc_blob_handle_impl isc_blob_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_blob_handle_impl();
      assertFalse(isc_blob_handle_impl1.isEof());
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertEquals(0, isc_blob_handle_impl1.getRblId());
      assertNotNull(isc_blob_handle_impl1);
      
      org.firebirdsql.gds.impl.jni.isc_tr_handle_impl isc_tr_handle_impl0 = isc_blob_handle_impl1.getTr();
      assertFalse(isc_blob_handle_impl1.isEof());
      assertEquals(0L, isc_blob_handle_impl1.getBlobId());
      assertEquals(0, isc_blob_handle_impl1.getRblId());
      assertNull(isc_tr_handle_impl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertNotNull(isc_stmt_handle_impl0);
      
      try { 
        javaGDSImpl0.iscDsqlPrepare((IscTrHandle) null, (IscStmtHandle) isc_stmt_handle_impl0, "", "rSpW{", 2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // invalid transaction handle (expecting explicit transaction start)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }
}
