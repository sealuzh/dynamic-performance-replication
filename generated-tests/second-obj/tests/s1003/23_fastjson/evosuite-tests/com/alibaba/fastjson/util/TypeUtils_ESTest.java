/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:34:43 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.BigDecimalCodec;
import com.alibaba.fastjson.serializer.CollectionCodec;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.ThaiBuddhistDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Currency;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.SortedMap;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import java.util.function.ToDoubleFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<Integer> class0 = Integer.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class2, hashMap0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TypeUtils.loadClass("D40q(Y?>\"xki_wxLj");
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<IllegalMonitorStateException> class0 = IllegalMonitorStateException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader.getSystemClassLoader();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.clear();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, false, propertyNamingStrategy0);
      Class<?> class1 = TypeUtils.loadClass("com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec", classLoader0, true);
      assertEquals(1, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      TypeUtils.isProxy(class0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<ThrowableDeserializer> class1 = ThrowableDeserializer.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) identityHashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.sql.SQLInvalidAuthorizationSpecException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Float float0 = new Float((-5.91508F));
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.addAccept("?DNeLWyjUs[Y");
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.parser.ParserConfig@95
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      TypeUtils.isNumber("jY");
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(propertyProcessableDeserializer0.type);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class com.alibaba.fastjson.parser.deserializer.PropertyProcessable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TypeUtils.toLocale("MEIUM");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("MEIUM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : MEIUM
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("%<D&@ <nfc;av=v");
      Locale locale1 = Locale.US;
      locale0.getDisplayName(locale1);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("%<D&@ <nfc;av=v");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      TypeUtils.castToDouble(bigInteger0);
      InstantiationError instantiationError0 = new InstantiationError();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(instantiationError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.InstantiationError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "Ljava.awt.Font";
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("Ljava.awt.Rectangle");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : Ljava.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(520L);
      atomicLong0.incrementAndGet();
      TypeUtils.isHibernateInitialized(atomicLong0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(atomicLong0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : 521
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("xH_pIxYB'7{ylbo7");
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.isTransient((Method) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("xH_pIxYB'7{ylbo7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"xH_pIxYB'7{ylbo7\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Rectangle> class0 = Rectangle.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      ThreadGroup threadGroup0 = new ThreadGroup("jY");
      MockThread mockThread0 = new MockThread(threadGroup0, "jY");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "y", (-283L));
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      Class<?> class1 = TypeUtils.loadClass("oracle.sql.TIMESTAMP", classLoader0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Locale locale0 = Locale.US;
      Class<Annotation> class0 = Annotation.class;
      TypeUtils.getParserFeatures(class0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "%<D&@ <nfc;av=v", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TypeUtils.loadClass("<0dXUPFgp?JWWfU9");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("<0dXUPFgp?JWWfU9", "gCI@:h1g57X");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) hashMap0, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("Xd-jrX");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "oracle.sql.DATE");
      MockThread mockThread0 = new MockThread(threadGroup1, "Xd-jrX");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("Xd-jrX", classLoader1);
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(typeUtils0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"c\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TypeUtils.loadClass("");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("Tg(R4{Z$8WS.XR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : Tg(R4{Z$8WS.XR
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedHashMap<OptionalCodec, Exception> linkedHashMap0 = new LinkedHashMap<OptionalCodec, Exception>();
      linkedHashMap0.clear();
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      TypeUtils.castToJavaBean((Object) linkedHashMap0, class0);
      Class<IllegalAccessError> class1 = IllegalAccessError.class;
      TypeUtils.loadClass("");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : class java.lang.IllegalAccessError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      Instant instant0 = MockInstant.ofEpochMilli(3794316665763266033L);
      Instant instant1 = MockInstant.plusMillis(instant0, 3794316665763266033L);
      Timestamp timestamp0 = Timestamp.from(instant1);
      Class<Character> class1 = Character.class;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<MockSimpleDateFormat> class2 = MockSimpleDateFormat.class;
      parserConfig0.getDeserializer((Class<?>) class2, (Type) class2);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) timestamp0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Character
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Float float0 = new Float(453.05685F);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SecurityException> class1 = SecurityException.class;
      parserConfig0.createJavaBeanDeserializer(class1, class0);
      BigDecimalCodec bigDecimalCodec0 = BigDecimalCodec.instance;
      parserConfig0.putDeserializer(class0, bigDecimalCodec0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) float0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTransactionRollbackException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("Ljava.awt.Font");
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      mockThread0.setUncaughtExceptionHandler(threadGroup0);
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "Ljava.awt.Font", 127L);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      TypeUtils.loadClass("Ljava.awt.Rectangle", classLoader0);
      JSONObject jSONObject0 = new JSONObject(false);
      Map<String, Object> map0 = jSONObject0.getInnerMap();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      MockThaiBuddhistDate mockThaiBuddhistDate0 = TypeUtils.castToJavaBean(map0, class0, parserConfig0);
      assertNotNull(mockThaiBuddhistDate0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.fnv1a_64_lower("null");
      Class<AtomicLong> class0 = AtomicLong.class;
      TypeUtils.isProxy(class0);
      BreakIterator.getSentenceInstance();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.isHibernateInitialized((Object) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/Date(", "kotlin.ranges.LongRange");
      TypeUtils.castToFloat((Object) null);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("kotlin.ranges.LongRange");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(mockIllegalStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.lang.MockThrowable: kotlin.ranges.LongRange
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<IllegalStateException> class0 = IllegalStateException.class;
      TypeUtils.isProxy(class0);
      java.util.IdentityHashMap<String, Object> identityHashMap0 = new java.util.IdentityHashMap<String, Object>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Type[] typeArray0 = new Type[5];
      typeArray0[4] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[4], typeArray0[3]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@2674205f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeUtils.isPath(class0);
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)37;
      jSONObject0.getBigDecimal("Ljava.awt.Rectangle");
      Long.getLong("java.utl.OptionalDouble", 21474836479L);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("java.utl.OptionalDouble");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.utl.OptionalDouble\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-111);
      jSONObject0.getBigDecimal("Ljava.awt.Rectangle");
      MockDate mockDate0 = new MockDate((byte) (-111), (-1591), 3089);
      Class<Byte> class0 = Byte.TYPE;
      Type type0 = TypeUtils.unwrapOptional(class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockDate0, type0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : Fri Nov 14 00:00:00 GMT 1664
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TypeUtils.toLocale("MEIUM");
      TypeUtils typeUtils0 = new TypeUtils();
      java.util.IdentityHashMap<SQLIntegrityConstraintViolationException, TimeUnit> identityHashMap0 = new java.util.IdentityHashMap<SQLIntegrityConstraintViolationException, TimeUnit>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("I_i!,");
      locale0.toLanguageTag();
      locale0.getUnicodeLocaleAttributes();
      Locale.getISOLanguages();
      locale0.toLanguageTag();
      locale0.getDisplayName();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : i_I!,
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TypeUtils.decapitalize("Ljava.util.concurrent.ConcurrentSkipListSet");
      TreeSet<MockMinguoDate> treeSet0 = new TreeSet<MockMinguoDate>();
      Class<Integer> class0 = Integer.TYPE;
      ThreadGroup threadGroup0 = new ThreadGroup("ljava.util.concurrent.ConcurrentSkipListSet");
      MockThread mockThread0 = new MockThread((Runnable) null);
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      mockThread0.getStackTrace();
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) treeSet0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Short> class0 = Short.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      String string0 = "Z$+k#T3vXT\\FfG";
      SecurityException securityException0 = new SecurityException("j");
      LinkedHashMap<StringCharacterIterator, RenderingHints> linkedHashMap0 = new LinkedHashMap<StringCharacterIterator, RenderingHints>();
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      Type type1 = null;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) type0, (Type) null, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<InterruptedException> class0 = InterruptedException.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      Class<Integer> class1 = Integer.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class1, (Map<String, String>) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) hashMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertNotNull(jSONObject0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)37;
      Feature[] featureArray0 = new Feature[6];
      BigDecimal bigDecimal0 = jSONObject0.getBigDecimal("Ljava.awt.Rectangle");
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertNull(bigDecimal0);
      
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[5] = feature0;
      boolean boolean1 = jSONObject0.replace("Ljava.awt.Rectangle", (Object) "Ljava.awt.Rectangle", (Object) class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      featureArray0[1] = featureArray0[0];
      Feature feature1 = Feature.DisableASM;
      featureArray0[2] = feature1;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class2, (JSONType) null, (Map<String, String>) weakHashMap0, (Map<String, Field>) null, true, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
      
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("com.alibaba.fastjson.JSONPath$Operator");
      assertEquals("com.alibaba.fastjson.JSONPath$Operator", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "j");
      assertEquals("com.alibaba.fastjson.JSONPath$Operator", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertEquals("com.alibaba.fastjson.JSONPath$Operator", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNotNull(classLoader0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertEquals("com.alibaba.fastjson.JSONPath$Operator", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNotNull(classLoader1);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.JSONException", classLoader1, false);
      assertEquals("com.alibaba.fastjson.JSONPath$Operator", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("class com.alibaba.fastjson.JSONException", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNotNull(class0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Locale locale0 = TypeUtils.toLocale("L");
      assertEquals("l", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("l", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[D");
      assertFalse(boolean0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("Ljava.awt.Font");
      assertEquals("Ljava.awt.Font", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread(threadGroup0, "(B)Ljava/lang/Byte;");
      assertEquals("Ljava.awt.Font", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "(B)Ljava/lang/Byte;", 1944L);
      assertEquals("Ljava.awt.Font", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertEquals("Ljava.awt.Font", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotSame(mockThread0, mockThread1);
      assertNotNull(classLoader0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      
      Class<?> class0 = TypeUtils.loadClass("(B)Ljava/lang/Byte;", classLoader0);
      assertEquals("Ljava.awt.Font", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotSame(mockThread0, mockThread1);
      assertNull(class0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("rect");
      assertNull(class0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("can not cast to int, value : ", "(N*x'DWY6^<c");
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("can not cast to int, value : ", sQLRecoverableException0.getMessage());
      assertEquals("(N*x'DWY6^<c", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: can not cast to int, value : ", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      Class<Double> class1 = Double.TYPE;
      assertEquals("double", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.getClass((Type) class1);
      assertEquals("double", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertFalse(class2.isEnum());
      assertEquals("double", class2.toString());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class2);
      assertEquals("double", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertFalse(class2.isEnum());
      assertEquals("double", class2.toString());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(boolean0);
      
      Timestamp timestamp0 = new Timestamp(419L);
      assertEquals(419000000, timestamp0.getNanos());
      assertEquals("1970-01-01 00:00:00.419", timestamp0.toString());
      assertNotNull(timestamp0);
      
      EnumDeserializer enumDeserializer0 = null;
      try {
        enumDeserializer0 = new EnumDeserializer(class2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.EnumDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      assertNull(class1);
      
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
      
      Class<?> class2 = TypeUtils.loadClass((String) null, (ClassLoader) null);
      assertNull(class2);
      
      boolean boolean1 = TypeUtils.isNumber("can not cast oracle.sql.TIMESTAMP to Date");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass((String) null);
      assertNull(class0);
      
      Date date0 = TypeUtils.castToSqlDate("");
      assertNull(date0);
      
      Class<?> class1 = TypeUtils.loadClass("");
      assertNull(class1);
      
      InstantiationException instantiationException0 = new InstantiationException();
      assertNull(instantiationException0.getMessage());
      assertEquals("java.lang.InstantiationException", instantiationException0.toString());
      assertNotNull(instantiationException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(instantiationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.lang.InstantiationException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<IllegalStateException> class0 = IllegalStateException.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      java.util.IdentityHashMap<String, Object> identityHashMap0 = new java.util.IdentityHashMap<String, Object>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      Hashtable<NoSuchFieldException, BigInteger> hashtable0 = new Hashtable<NoSuchFieldException, BigInteger>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      String string0 = TypeUtils.castToString(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(string0);
      
      java.util.IdentityHashMap<MockJapaneseDate, InternalError> identityHashMap1 = new java.util.IdentityHashMap<MockJapaneseDate, InternalError>();
      assertTrue(identityHashMap1.isEmpty());
      assertEquals(0, identityHashMap1.size());
      assertNotNull(identityHashMap1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(identityHashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<IllegalStateException> class0 = IllegalStateException.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      java.util.IdentityHashMap<String, Object> identityHashMap0 = new java.util.IdentityHashMap<String, Object>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      Class<Currency> class1 = Currency.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) identityHashMap0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.util.Currency
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("LjaQa.awt.Font");
      assertEquals("LjaQa.awt.Font", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread("Ljava.awt.Rectangle");
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      threadGroup0.setMaxPriority(2921);
      assertEquals("LjaQa.awt.Font", threadGroup0.getName());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(classLoader0);
      
      classLoader0.setPackageAssertionStatus("}|", true);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<?> class0 = TypeUtils.loadClass("LjaQa.awt.Font", classLoader0);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNull(class0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long long0 = TypeUtils.fnv1a_64_lower("0^c]0MZ[3wSzA#iIt");
      assertEquals(9181205995625557626L, long0);
      
      Class<BreakIterator> class0 = BreakIterator.class;
      boolean boolean2 = TypeUtils.isProxy(class0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance();
      assertNotNull(breakIterator0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
      
      Class<Character> class1 = Character.TYPE;
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(class1.isPrimitive());
      assertEquals("char", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 7;
      Class<?> class0 = TypeUtils.loadClass("getMetaClass");
      assertNull(class0);
      
      AtomicInteger atomicInteger0 = new AtomicInteger((-74));
      assertEquals((-74), atomicInteger0.get());
      assertEquals((-74.0F), atomicInteger0.floatValue(), 0.01F);
      assertEquals((-74), atomicInteger0.intValue());
      assertEquals((byte) (-74), atomicInteger0.byteValue());
      assertEquals("-74", atomicInteger0.toString());
      assertEquals((-74.0), atomicInteger0.doubleValue(), 0.01);
      assertEquals((-74L), atomicInteger0.longValue());
      assertEquals((short) (-74), atomicInteger0.shortValue());
      assertNotNull(atomicInteger0);
      
      Boolean boolean0 = TypeUtils.castToBoolean(atomicInteger0);
      assertEquals((-74), atomicInteger0.get());
      assertEquals((-74.0F), atomicInteger0.floatValue(), 0.01F);
      assertEquals((-74), atomicInteger0.intValue());
      assertEquals((byte) (-74), atomicInteger0.byteValue());
      assertEquals("-74", atomicInteger0.toString());
      assertEquals((-74.0), atomicInteger0.doubleValue(), 0.01);
      assertEquals((-74L), atomicInteger0.longValue());
      assertEquals((short) (-74), atomicInteger0.shortValue());
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) weakHashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedHashMap<OptionalCodec, Exception> linkedHashMap0 = new LinkedHashMap<OptionalCodec, Exception>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      linkedHashMap0.clear();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      assertEquals(12, optionalCodec0.getFastMatchToken());
      assertNotNull(optionalCodec0);
      
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      SimpleDateFormat simpleDateFormat0 = TypeUtils.castToJavaBean((Object) linkedHashMap0, class0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertNotNull(simpleDateFormat0);
      
      Class<IllegalAccessError> class1 = IllegalAccessError.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<MessageFormat> class2 = MessageFormat.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class2, map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : class java.lang.IllegalAccessError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Rectangle> class0 = Rectangle.class;
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      Class<PropertyProcessable> class1 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class1);
      assertEquals(12, propertyProcessableDeserializer0.getFastMatchToken());
      assertNotNull(propertyProcessableDeserializer0);
      
      Map.Entry<String, Object> map_Entry0 = treeMap0.higherEntry("jY");
      assertEquals(0, treeMap0.size());
      assertNull(map_Entry0);
      
      Class<Point> class2 = Point.class;
      Class class3 = (Class)TypeUtils.unwrapOptional(class0);
      assertEquals("class java.awt.Rectangle", class3.toString());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isArray());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isInterface());
      assertFalse(class3.isPrimitive());
      assertEquals(1, class3.getModifiers());
      assertNotNull(class3);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters(class2, map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      byte[] byteArray0 = TypeUtils.castToBytes("jY");
      assertArrayEquals(new byte[] {(byte) (-115)}, byteArray0);
      assertNotNull(byteArray0);
      
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      assertEquals("java.lang.NoSuchFieldError", noSuchFieldError0.toString());
      assertNull(noSuchFieldError0.getMessage());
      assertNotNull(noSuchFieldError0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Rectangle> class0 = Rectangle.class;
      String string0 = "createInstance";
      SQLTransientException sQLTransientException0 = new SQLTransientException("createInstance");
      assertEquals("java.sql.SQLTransientException: createInstance", sQLTransientException0.toString());
      assertEquals("createInstance", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertNotNull(sQLTransientException0);
      
      Class<PropertyProcessable> class1 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class1);
      assertEquals(12, propertyProcessableDeserializer0.getFastMatchToken());
      assertNotNull(propertyProcessableDeserializer0);
      
      Class class2 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("class java.awt.Rectangle", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertNotNull(class2);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = TypeUtils.castToBytes("createInstance");
      assertArrayEquals(new byte[] {(byte)114, (byte) (-73), (byte) (-102), (byte) (-75), (byte) (-30), (byte)39, (byte) (-78), (byte) (-42), (byte) (-89), (byte)113}, byteArray0);
      assertNotNull(byteArray0);
      
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("createInstance");
      assertEquals('c', stringCharacterIterator0.current());
      assertEquals(0, stringCharacterIterator0.getBeginIndex());
      assertEquals(0, stringCharacterIterator0.getIndex());
      assertEquals(14, stringCharacterIterator0.getEndIndex());
      assertNotNull(stringCharacterIterator0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(stringCharacterIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.text.StringCharacterIterator@5813ddbf
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("2{kKQfwmtY\"GVkHQne-");
      assertFalse(boolean0);
      
      Class<IllegalThreadStateException> class0 = IllegalThreadStateException.class;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      Class<SQLSyntaxErrorException> class2 = SQLSyntaxErrorException.class;
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLSyntaxErrorException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertEquals("byte", class0.toString());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertEquals("byte", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertEquals("class [B", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertNotNull(class1);
      
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      assertNull(illegalMonitorStateException0.getMessage());
      assertEquals("java.lang.IllegalMonitorStateException", illegalMonitorStateException0.toString());
      assertNotNull(illegalMonitorStateException0);
      
      illegalMonitorStateException0.printStackTrace();
      assertNull(illegalMonitorStateException0.getMessage());
      assertEquals("java.lang.IllegalMonitorStateException", illegalMonitorStateException0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(illegalMonitorStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.lang.IllegalMonitorStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("class [Z", class1.toString());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertNotNull(class1);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class [Z
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("2{kKQfwmtY\"GVkHQne-");
      assertFalse(boolean0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<TimeZone> class0 = TimeZone.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("2{kKQfwmtY\"GVkHQne-", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. 2{kKQfwmtY\"GVkHQne-
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      String string0 = "Ljava.awt.Rectangle";
      java.util.IdentityHashMap<String, Object> identityHashMap0 = new java.util.IdentityHashMap<String, Object>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      JSONObject jSONObject0 = new JSONObject(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotNull(jSONObject0);
      
      String string1 = "illegal enum. ";
      ZoneInfo zoneInfo0 = (ZoneInfo)JSON.defaultTimeZone;
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Hashtable<MapDeserializer, MockDateFormat> hashtable0 = new Hashtable<MapDeserializer, MockDateFormat>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("Ljava.awt.Rectangle");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ljava.awt.Rectangle\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<Short> class0 = Short.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertNotNull(class0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      LinkedHashMap<StringCharacterIterator, RenderingHints> linkedHashMap0 = new LinkedHashMap<StringCharacterIterator, RenderingHints>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertSame(parserConfig1, parserConfig0);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig1);
      
      Type type0 = null;
      java.util.IdentityHashMap<MockJapaneseDate, InternalError> identityHashMap0 = new java.util.IdentityHashMap<MockJapaneseDate, InternalError>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("byte", class0.toString());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      assertEquals("java.lang.IllegalMonitorStateException", illegalMonitorStateException0.toString());
      assertNull(illegalMonitorStateException0.getMessage());
      assertNotNull(illegalMonitorStateException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"H", "\"H");
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("\"H", sQLTransientConnectionException0.getSQLState());
      assertEquals("\"H", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: \"H", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      illegalMonitorStateException0.addSuppressed(sQLTransientConnectionException0);
      assertEquals("java.lang.IllegalMonitorStateException", illegalMonitorStateException0.toString());
      assertNull(illegalMonitorStateException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("\"H", sQLTransientConnectionException0.getSQLState());
      assertEquals("\"H", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: \"H", sQLTransientConnectionException0.toString());
      
      illegalMonitorStateException0.printStackTrace();
      assertEquals("java.lang.IllegalMonitorStateException", illegalMonitorStateException0.toString());
      assertNull(illegalMonitorStateException0.getMessage());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class1 = TypeUtils.loadClass("", classLoader0, true);
      assertNull(class1);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<SqlDateDeserializer> class2 = SqlDateDeserializer.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, true);
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(serializeBeanInfo0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : CamelCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long long0 = TypeUtils.fnv1a_64_lower("null");
      assertEquals(6601085983368743140L, long0);
      
      Class<AtomicLong> class0 = AtomicLong.class;
      boolean boolean2 = TypeUtils.isProxy(class0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance();
      assertNotNull(breakIterator0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) breakIterator0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.atomic.AtomicLong
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<InternalError> class0 = InternalError.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      assertEquals("java.lang.IllegalMonitorStateException", illegalMonitorStateException0.toString());
      assertNull(illegalMonitorStateException0.getMessage());
      assertNotNull(illegalMonitorStateException0);
      
      illegalMonitorStateException0.printStackTrace();
      assertEquals("java.lang.IllegalMonitorStateException", illegalMonitorStateException0.toString());
      assertNull(illegalMonitorStateException0.getMessage());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      LinkedHashMap<StringCharacterIterator, RenderingHints> linkedHashMap0 = new LinkedHashMap<StringCharacterIterator, RenderingHints>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) illegalMonitorStateException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.InternalError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
      
      Class<?> class1 = javaBeanSerializer0.getType();
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      Field field0 = ParserConfig.getFieldFromCache("F4h$D[#?AxX#HYvd", weakHashMap0);
      assertNull(field0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(707, true);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      serializeConfig0.setAsmEnable(false);
      assertFalse(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeConfig0);
      assertFalse(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNull(jSONSerializer0.getDateFormatPattern());
      assertEquals(0, jSONSerializer0.getIndentCount());
      assertNotNull(jSONSerializer0);
      
      jSONSerializer0.println();
      assertFalse(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNull(jSONSerializer0.getDateFormatPattern());
      assertEquals(0, jSONSerializer0.getIndentCount());
      
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      assertNotNull(simplePropertyPreFilter0);
      
      serializeConfig0.addFilter(class0, simplePropertyPreFilter0);
      assertFalse(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertNotNull(imageCapabilities0);
      
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      assertNotNull(bufferCapabilities_FlipContents0);
      
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(bufferCapabilities0.isMultiBufferAvailable());
      assertTrue(bufferCapabilities0.isPageFlipping());
      assertFalse(bufferCapabilities0.isFullScreenRequired());
      assertNotNull(bufferCapabilities0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(javaBeanSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.serializer.JavaBeanSerializer@3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      Field field0 = weakHashMap0.put("F4h$D[#?AxX#HYvd", (Field) null);
      assertNull(field0);
      
      Field field1 = ParserConfig.getFieldFromCache("F4h$D[#?AxX#HYvd", weakHashMap0);
      assertNull(field1);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(707, true);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      serializeConfig0.setAsmEnable(false);
      assertFalse(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeConfig0);
      assertFalse(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals(0, jSONSerializer0.getIndentCount());
      assertNull(jSONSerializer0.getDateFormatPattern());
      assertNotNull(jSONSerializer0);
      
      jSONSerializer0.println();
      assertFalse(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals(0, jSONSerializer0.getIndentCount());
      assertNull(jSONSerializer0.getDateFormatPattern());
      
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      assertNotNull(simplePropertyPreFilter0);
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNull(noSuchMethodException0.getMessage());
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNotNull(noSuchMethodException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      Class<String> class1 = String.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Field field0 = ParserConfig.getFieldFromCache("java/lang/Long", hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(field0);
      
      FieldInfo fieldInfo0 = new FieldInfo("2 _", class0, class1, class0, (Field) null, (-1153), (-3201), (-1153));
      assertEquals("2 _", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals((-3201), fieldInfo0.serialzeFeatures);
      assertEquals((-1153), fieldInfo0.parserFeatures);
      assertNotNull(fieldInfo0);
      
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      assertEquals("2 _", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals("2 _", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("", beanContext0.getLabel());
      assertEquals((-3201), beanContext0.getFeatures());
      assertNull(beanContext0.getFormat());
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals((-3201), fieldInfo0.serialzeFeatures);
      assertEquals((-1153), fieldInfo0.parserFeatures);
      assertNotNull(beanContext0);
      
      Field field1 = hashMap0.put("", (Field) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(field1);
      
      Method method0 = beanContext0.getMethod();
      assertEquals("2 _", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals("2 _", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("", beanContext0.getLabel());
      assertEquals((-3201), beanContext0.getFeatures());
      assertNull(beanContext0.getFormat());
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals((-3201), fieldInfo0.serialzeFeatures);
      assertEquals((-1153), fieldInfo0.parserFeatures);
      assertNull(method0);
      
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters(fieldInfo0.fieldClass, (Map<String, String>) concurrentHashMap0);
      assertEquals("2 _", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertTrue(concurrentHashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals((-3201), fieldInfo0.serialzeFeatures);
      assertEquals((-1153), fieldInfo0.parserFeatures);
      assertNotNull(list0);
      
      Class<EnumDeserializer> class2 = EnumDeserializer.class;
      boolean boolean1 = TypeUtils.isKotlin(class2);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertEquals(18, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      MockThread mockThread1 = new MockThread("Ljava.awt.Font");
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      ThreadGroup threadGroup0 = new ThreadGroup("Ljava.awt.Font");
      assertEquals("Ljava.awt.Font", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      Class<Point> class1 = Point.class;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Field field0 = ParserConfig.getFieldFromCache("xtdw/R>ggd+.)_:kR&]", hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNull(field0);
      
      Class<DecimalFormatSymbols> class2 = DecimalFormatSymbols.class;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class<AtomicInteger> class3 = AtomicInteger.class;
      Class<TimeZone> class4 = TimeZone.class;
      FieldInfo fieldInfo0 = new FieldInfo("Ljava/lang/Object;Ljava/lang/Object;)", class4, class4, class2, (Field) null, 91, 91, 95);
      assertEquals("Ljava/lang/Object;Ljava/lang/Object;)", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(91, fieldInfo0.serialzeFeatures);
      assertEquals(95, fieldInfo0.parserFeatures);
      assertNotNull(fieldInfo0);
      
      BeanContext beanContext0 = new BeanContext(class3, fieldInfo0);
      assertFalse(beanContext0.isJsonDirect());
      assertEquals(91, beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertNull(beanContext0.getFormat());
      assertEquals("Ljava/lang/Object;Ljava/lang/Object;)", beanContext0.getName());
      assertEquals("Ljava/lang/Object;Ljava/lang/Object;)", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(91, fieldInfo0.serialzeFeatures);
      assertEquals(95, fieldInfo0.parserFeatures);
      assertNotNull(beanContext0);
      
      Field field1 = beanContext0.getField();
      assertFalse(beanContext0.isJsonDirect());
      assertEquals(91, beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertNull(beanContext0.getFormat());
      assertEquals("Ljava/lang/Object;Ljava/lang/Object;)", beanContext0.getName());
      assertEquals("Ljava/lang/Object;Ljava/lang/Object;)", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(91, fieldInfo0.serialzeFeatures);
      assertEquals(95, fieldInfo0.parserFeatures);
      assertNull(field1);
      
      FieldInfo fieldInfo1 = new FieldInfo("Ljava/lang/Object;Ljava/lang/Object;)", class1, class2, parameterizedTypeImpl0, (Field) null, 95, 95, 1762);
      assertNull(fieldInfo1.getFormat());
      assertEquals("Ljava/lang/Object;Ljava/lang/Object;)", fieldInfo1.toString());
      assertEquals(95, fieldInfo1.serialzeFeatures);
      assertFalse(fieldInfo1.fieldAccess);
      assertEquals(1762, fieldInfo1.parserFeatures);
      assertFalse(fieldInfo1.isEnum);
      assertFalse(fieldInfo1.unwrapped);
      assertFalse(fieldInfo1.jsonDirect);
      assertFalse(fieldInfo1.fieldTransient);
      assertFalse(fieldInfo1.getOnly);
      assertNotNull(fieldInfo1);
      assertFalse(fieldInfo1.equals((Object)fieldInfo0));
      
      BeanContext beanContext1 = new BeanContext(class0, fieldInfo0);
      assertEquals(91, beanContext1.getFeatures());
      assertNull(beanContext1.getFormat());
      assertFalse(beanContext1.isJsonDirect());
      assertEquals("", beanContext1.getLabel());
      assertEquals("Ljava/lang/Object;Ljava/lang/Object;)", beanContext1.getName());
      assertEquals("Ljava/lang/Object;Ljava/lang/Object;)", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(91, fieldInfo0.serialzeFeatures);
      assertEquals(95, fieldInfo0.parserFeatures);
      assertNotNull(beanContext1);
      assertFalse(beanContext1.equals((Object)beanContext0));
      assertFalse(fieldInfo0.equals((Object)fieldInfo1));
      
      Method method0 = beanContext1.getMethod();
      assertEquals(91, beanContext1.getFeatures());
      assertNull(beanContext1.getFormat());
      assertFalse(beanContext1.isJsonDirect());
      assertEquals("", beanContext1.getLabel());
      assertEquals("Ljava/lang/Object;Ljava/lang/Object;)", beanContext1.getName());
      assertEquals("Ljava/lang/Object;Ljava/lang/Object;)", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertNotSame(beanContext1, beanContext0);
      assertNotSame(fieldInfo0, fieldInfo1);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(91, fieldInfo0.serialzeFeatures);
      assertEquals(95, fieldInfo0.parserFeatures);
      assertNull(method0);
      assertFalse(beanContext1.equals((Object)beanContext0));
      assertFalse(fieldInfo0.equals((Object)fieldInfo1));
      
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      parserConfig0.setAutoTypeSupport(true);
      assertTrue(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
      
      Class<MapDeserializer> class0 = MapDeserializer.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class com.alibaba.fastjson.parser.deserializer.MapDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass((String) null);
      assertNull(class0);
      
      Date date0 = TypeUtils.castToSqlDate("");
      assertNull(date0);
      
      long long0 = TypeUtils.fnv1a_64_lower("gG&?8gLe`9#~QLzt");
      assertEquals(420087773621546063L, long0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized("can not cast to byte, value : ");
      assertTrue(boolean0);
      
      Class<NumberDeserializer> class1 = NumberDeserializer.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class1, map0, propertyNamingStrategy0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(serializeBeanInfo0);
      
      long long1 = TypeUtils.fnv1a_64("can not cast to byte, value : ");
      assertEquals(299482029855945827L, long1);
      assertFalse(long1 == long0);
      
      Class<?> class2 = TypeUtils.getCollectionItemClass((Type) null);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertNotNull(class2);
      
      boolean boolean1 = TypeUtils.isNumber("gG&?8gLe`9#~QLzt");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = TypeUtils.isGenericParamType(class2);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Timestamp timestamp0 = new Timestamp(420087773621546063L);
      assertEquals("13314021-08-10 12:12:26.063", timestamp0.toString());
      assertEquals(63000000, timestamp0.getNanos());
      assertNotNull(timestamp0);
      
      Collection collection0 = TypeUtils.createCollection(class2);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertNotNull(collection0);
      
      Locale locale0 = TypeUtils.toLocale("zX,T!UcH");
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zx,t!uch", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zx,t!uch", locale0.toString());
      assertNotNull(locale0);
      
      Class class3 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isArray());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isAnnotation());
      assertNotNull(class3);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("LjaQa.awt.Font");
      assertEquals("LjaQa.awt.Font", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      long long0 = TypeUtils.fnv1a_64_lower("0^c]0MZ[3wSzA#iIt");
      assertEquals(9181205995625557626L, long0);
      
      Class<NegativeArraySizeException> class0 = NegativeArraySizeException.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance();
      assertNotNull(breakIterator0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      parserConfig0.addAccept("Ljava.awt.Rectangle");
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "Ljava.awt.Rectangle", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NegativeArraySizeException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertNotNull(class1);
      
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotNull(jSONObject0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-111);
      BigDecimal bigDecimal0 = jSONObject0.getBigDecimal("Ljava.awt.Rectangle");
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNull(bigDecimal0);
      
      boolean boolean1 = jSONObject0.replace("Ljava.awt.Rectangle", (Object) "Ljava.awt.Rectangle", (Object) class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      LinkedHashMap<StringCharacterIterator, RenderingHints> linkedHashMap0 = new LinkedHashMap<StringCharacterIterator, RenderingHints>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      String string0 = TypeUtils.cast((Object) null, (Type) null, parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNull(string0);
      
      java.util.IdentityHashMap<MockJapaneseDate, InternalError> identityHashMap0 = new java.util.IdentityHashMap<MockJapaneseDate, InternalError>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 7;
      DataTruncation dataTruncation0 = new DataTruncation((-2453), false, false, 7, 7);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertNotNull(dataTruncation0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("getMetaClass", intArray0, dataTruncation0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("java.sql.BatchUpdateException: getMetaClass", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("getMetaClass", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {7}, intArray0);
      assertNotNull(batchUpdateException0);
      
      SQLException sQLException0 = batchUpdateException0.getNextException();
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("java.sql.BatchUpdateException: getMetaClass", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("getMetaClass", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {7}, intArray0);
      assertNull(sQLException0);
      
      DataTruncation dataTruncation1 = new DataTruncation(7, false, true, 7, 7, (Throwable) null);
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertNotNull(dataTruncation1);
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      
      SQLWarning sQLWarning0 = dataTruncation1.getNextWarning();
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertNotSame(dataTruncation1, dataTruncation0);
      assertNull(sQLWarning0);
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      MockJapaneseDate mockJapaneseDate0 = TypeUtils.castToJavaBean((Object) null, class0);
      assertNull(mockJapaneseDate0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(batchUpdateException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("xH_pIxYB'7{ylbo7");
      assertEquals((-8128060647140691504L), long0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<PageAttributes>[] classArray0 = (Class<PageAttributes>[]) Array.newInstance(Class.class, 0);
      parserConfig0.initJavaBeanDeserializers(classArray0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      Class<TypeNotPresentException> class0 = TypeNotPresentException.class;
      TypeNotPresentException typeNotPresentException0 = TypeUtils.castToJavaBean((Object) null, class0);
      assertNull(typeNotPresentException0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Class<Properties> class0 = Properties.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, map0, (Map<String, Field>) hashMap0, true, propertyNamingStrategy0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
      
      Class<?> class1 = javaBeanSerializer0.getType();
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      Field field0 = ParserConfig.getFieldFromCache("F4h$D[#?AxX#HYvd", weakHashMap0);
      assertNull(field0);
      
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      serializeConfig0.setAsmEnable(false);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(serializeConfig0.isAsmEnable());
      
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(serializeConfig0.isAsmEnable());
      assertEquals(0, jSONSerializer0.getIndentCount());
      assertNull(jSONSerializer0.getDateFormatPattern());
      assertNotNull(jSONSerializer0);
      
      jSONSerializer0.println();
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(serializeConfig0.isAsmEnable());
      assertEquals(0, jSONSerializer0.getIndentCount());
      assertNull(jSONSerializer0.getDateFormatPattern());
      
      String[] stringArray0 = new String[5];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      assertNotNull(simplePropertyPreFilter0);
      
      serializeConfig0.addFilter(class0, simplePropertyPreFilter0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(serializeConfig0.isAsmEnable());
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNull(noSuchMethodException0.getMessage());
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNotNull(noSuchMethodException0);
      
      boolean boolean0 = javaBeanSerializer0.apply(jSONSerializer0, noSuchMethodException0, "F4h$D[#?AxX#HYvd", class1);
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertFalse(serializeConfig0.isAsmEnable());
      assertEquals(0, jSONSerializer0.getIndentCount());
      assertNull(jSONSerializer0.getDateFormatPattern());
      assertNull(noSuchMethodException0.getMessage());
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      java.util.IdentityHashMap<String, Object> identityHashMap0 = new java.util.IdentityHashMap<String, Object>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("[T@c8DQC");
      assertNotNull(threadGroup0);
      
      String string0 = "get";
      MockThread mockThread0 = new MockThread(threadGroup0, "get");
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNotNull(classLoader0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[T@c8DQC", classLoader0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
      
      Class<Object> class0 = Object.class;
      Object object0 = TypeUtils.castToJavaBean((Object) null, class0);
      assertNull(object0);
      
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
      
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
      
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedHashMap<OptionalCodec, Exception> linkedHashMap0 = new LinkedHashMap<OptionalCodec, Exception>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      linkedHashMap0.clear();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("gethashCode");
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "gethashCode");
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      MockThread mockThread0 = new MockThread(threadGroup1, (Runnable) null);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      MockThread mockThread1 = new MockThread(mockThread0, "oXeZ$cWt_7gnm.d~0e+");
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertNotNull(mockThread1);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1, "oXeZ$cWt_7gnm.d~0e+", 127L);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotNull(mockThread2);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      
      threadGroup1.setMaxPriority((-2882));
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertNotNull(classLoader0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      
      Class<?> class0 = TypeUtils.loadClass("@", classLoader0);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertNull(class0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Class<Short> class0 = Short.TYPE;
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertNotNull(class0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertNotNull(class1);
      
      WeakHashMap<RenderingHints.Key, TimeDeserializer> weakHashMap0 = new WeakHashMap<RenderingHints.Key, TimeDeserializer>();
      assertNotNull(weakHashMap0);
      
      RenderingHints renderingHints0 = new RenderingHints(weakHashMap0);
      assertTrue(renderingHints0.isEmpty());
      assertEquals(0, renderingHints0.size());
      assertNotNull(renderingHints0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(renderingHints0);
      assertTrue(renderingHints0.isEmpty());
      assertEquals(0, renderingHints0.size());
      assertTrue(boolean0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      long long0 = TypeUtils.fnv1a_64("Z$+k#T3vXTFfG");
      assertEquals((-7711178085285016792L), long0);
      
      Class<String> class2 = String.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(jSONType0).builder();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<?> class3 = JavaBeanInfo.getBuilderClass(class1, jSONType0);
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertEquals(17, class3.getModifiers());
      assertEquals("class java.lang.String", class3.toString());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isEnum());
      assertNotNull(class3);
      
      Class<?> class4 = TypeUtils.getCollectionItemClass(class3);
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertEquals(17, class3.getModifiers());
      assertEquals("class java.lang.String", class3.toString());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isEnum());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertEquals("class java.lang.Object", class4.toString());
      assertEquals(1, class4.getModifiers());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isPrimitive());
      assertNotSame(class3, class4);
      assertNotSame(class4, class3);
      assertNotNull(class4);
      assertFalse(class4.equals((Object)class3));
      
      boolean boolean1 = TypeUtils.isGenericParamType(class1);
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      
      WeakHashMap<String, Object> weakHashMap1 = new WeakHashMap<String, Object>();
      assertNotNull(weakHashMap1);
      
      Class<SQLTimeoutException> class5 = SQLTimeoutException.class;
      SQLTimeoutException sQLTimeoutException0 = TypeUtils.castToJavaBean((Map<String, Object>) weakHashMap1, class5, parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotSame(parserConfig0, parserConfig1);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(sQLTimeoutException0);
      assertFalse(parserConfig0.equals((Object)parserConfig1));
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class<Double> class6 = Double.TYPE;
      assertFalse(class6.isAnnotation());
      assertFalse(class6.isInterface());
      assertFalse(class6.isArray());
      assertFalse(class6.isEnum());
      assertFalse(class6.isSynthetic());
      assertEquals(1041, class6.getModifiers());
      assertEquals("double", class6.toString());
      assertTrue(class6.isPrimitive());
      assertNotNull(class6);
      
      Type[] typeArray0 = new Type[17];
      typeArray0[0] = (Type) class4;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class6;
      typeArray0[3] = (Type) class5;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class1;
      typeArray0[6] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[4], typeArray0[3]);
      assertNotNull(parameterizedTypeImpl1);
      
      String string0 = parameterizedTypeImpl1.getTypeName();
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) typeArray0[5], (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertNotNull(class2);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class2);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(boolean0);
      
      Long long0 = new Long(140758963191807L);
      assertEquals(140758963191807L, (long)long0);
      assertNotNull(long0);
      
      long long1 = TypeUtils.fnv1a_64_lower("com.alibaba.fastjson.TypeReference");
      assertEquals((-6968219372502139639L), long1);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      boolean boolean1 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONField jSONField0 = TypeUtils.getSuperMethodAnnotation(class1, (Method) null);
      assertNull(jSONField0);
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      Field field0 = ParserConfig.getFieldFromCache("com.alibaba.fastjson.TypeReference", treeMap0);
      assertEquals(0, treeMap0.size());
      assertNull(field0);
      
      Class<MessageFormat> class3 = MessageFormat.class;
      FieldInfo fieldInfo0 = null;
      try {
        fieldInfo0 = new FieldInfo("getLocalizedMessage", (Method) null, (Field) null, class3, class2, 1432, 1432, 1432, (JSONField) null, (JSONField) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.FieldInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("LjaQa.awt.Font");
      assertEquals("LjaQa.awt.Font", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread((ThreadGroup) null, "}|");
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread("Ljava.awt.Rectangle");
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotSame(mockThread0, mockThread1);
      assertNotNull(classLoader0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotSame(mockThread0, mockThread1);
      assertNotNull(classLoader1);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<?> class0 = TypeUtils.loadClass("fastjson.parser.autoTypeAccept", classLoader1, true);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotSame(mockThread0, mockThread1);
      assertNull(class0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      String string0 = TypeUtils.cast((Object) null, (Type) null, parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNull(string0);
      
      java.util.IdentityHashMap<MockJapaneseDate, InternalError> identityHashMap0 = new java.util.IdentityHashMap<MockJapaneseDate, InternalError>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("2{kKQfwmtY\"GVkHQne-");
      assertFalse(boolean0);
      
      Class<IllegalThreadStateException> class0 = IllegalThreadStateException.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : class java.lang.IllegalThreadStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("9");
      assertNull(class0);
      
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
      
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      String string0 = "@UhY?T3fBdj";
      Long long1 = new Long((-1L));
      assertEquals((-1L), (long)long1);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      
      HashMap<VerifyError, SQLFeatureNotSupportedException> hashMap0 = new HashMap<VerifyError, SQLFeatureNotSupportedException>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotNull(jSONObject0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-111);
      Feature[] featureArray0 = new Feature[6];
      BigDecimal bigDecimal0 = jSONObject0.getBigDecimal("Ljava.awt.Rectangle");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNull(bigDecimal0);
      
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[3] = feature0;
      boolean boolean1 = jSONObject0.replace("", (Object) "", (Object) class1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      featureArray0[1] = featureArray0[0];
      Feature feature1 = Feature.DisableASM;
      featureArray0[2] = feature1;
      Hashtable<MapDeserializer, MockDateFormat> hashtable0 = new Hashtable<MapDeserializer, MockDateFormat>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      assertEquals(12, mapDeserializer0.getFastMatchToken());
      assertNotNull(mapDeserializer0);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      MockDateFormat mockDateFormat1 = hashtable0.put(mapDeserializer0, mockDateFormat0);
      assertEquals(12, mapDeserializer0.getFastMatchToken());
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertNull(mockDateFormat1);
      
      Short short0 = TypeUtils.castToShort("");
      assertNull(short0);
      
      String string0 = TypeUtils.decapitalize("yyyy-MM-dd HH:mm:ss");
      assertEquals("yyyy-MM-dd HH:mm:ss", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(mockDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.text.MockDateFormat@1f8e4352
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      TypeUtils.clearClassMapping();
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
      
      Time time0 = new Time((-1L));
      assertEquals("23:59:59", time0.toString());
      assertNotNull(time0);
      
      java.util.Date date0 = TypeUtils.castToDate(time0);
      assertEquals("23:59:59", time0.toString());
      assertEquals("23:59:59", date0.toString());
      assertSame(time0, date0);
      assertSame(date0, time0);
      assertNotNull(date0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("xH_pIxYB'7{ylbo7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"xH_pIxYB'7{ylbo7\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(31, false, false, 114, (-1917));
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertNotNull(dataTruncation0);
      
      SQLWarning sQLWarning0 = dataTruncation0.getNextWarning();
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertNull(sQLWarning0);
      
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      assertNotNull(jdk8DateCodec0);
      
      boolean boolean0 = TypeUtils.isNumber("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("Ljava.util.concurrent.ConcurrentSkipListMap");
      assertEquals((-4437036994051610544L), long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      parserConfig0.setAutoTypeSupport(true);
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
      
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
      
      Class<TimeUnit> class1 = TimeUnit.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) treeMap0, true, (PropertyNamingStrategy) null);
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(0, treeMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("I_i!,");
      assertEquals("i_I!,", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("I!,", locale0.getCountry());
      assertEquals("i", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = locale0.toLanguageTag();
      assertEquals("i_I!,", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("I!,", locale0.getCountry());
      assertEquals("i", locale0.getLanguage());
      assertEquals("und", string0);
      assertNotNull(string0);
      
      Locale locale1 = Locale.UK;
      assertEquals("GB", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en_GB", locale1.toString());
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      assertEquals("GB", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en_GB", locale1.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotSame(locale1, locale0);
      assertNotNull(set0);
      assertFalse(locale1.equals((Object)locale0));
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      
      String string1 = locale0.toLanguageTag();
      assertEquals("i_I!,", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("I!,", locale0.getCountry());
      assertEquals("i", locale0.getLanguage());
      assertNotSame(locale0, locale1);
      assertEquals("und", string1);
      assertNotNull(string1);
      assertFalse(locale0.equals((Object)locale1));
      
      String string2 = locale0.getDisplayName();
      assertEquals("i_I!,", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("I!,", locale0.getCountry());
      assertEquals("i", locale0.getLanguage());
      assertNotSame(locale0, locale1);
      assertEquals("i (I!,)", string2);
      assertNotNull(string2);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
      
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<String, Field> hashMap0 = new LinkedHashMap<String, Field>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<HttpCookie> class0 = HttpCookie.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("byte", class0.toString());
      assertNotNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("byte", class0.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("class [B", class1.toString());
      assertFalse(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      assertNull(illegalMonitorStateException0.getMessage());
      assertEquals("java.lang.IllegalMonitorStateException", illegalMonitorStateException0.toString());
      assertNotNull(illegalMonitorStateException0);
      
      illegalMonitorStateException0.printStackTrace();
      assertNull(illegalMonitorStateException0.getMessage());
      assertEquals("java.lang.IllegalMonitorStateException", illegalMonitorStateException0.toString());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType1).getGenericComponentType();
      Class class2 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType1);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("byte", class0.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class [B", class2.toString());
      assertTrue(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertSame(class2, class1);
      assertNotNull(class2);
      
      LinkedHashMap<StringCharacterIterator, RenderingHints> linkedHashMap0 = new LinkedHashMap<StringCharacterIterator, RenderingHints>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.ParserConfig@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Class<Method> class0 = Method.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotNull(jSONObject0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)37;
      BigDecimal bigDecimal0 = jSONObject0.getBigDecimal("Ljava.awt.Rectangle");
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNull(bigDecimal0);
      
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      Class<Timestamp> class2 = Timestamp.class;
      FieldInfo fieldInfo0 = new FieldInfo("?.a", class1, class2, class1, (Field) null, 3089, (-5520), 0);
      assertNull(fieldInfo0.getFormat());
      assertEquals("?.a", fieldInfo0.toString());
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(0, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.isEnum);
      assertEquals((-5520), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.getOnly);
      assertNotNull(fieldInfo0);
      
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      assertNull(fieldInfo0.getFormat());
      assertEquals("?.a", fieldInfo0.toString());
      assertEquals("", beanContext0.getLabel());
      assertEquals((-5520), beanContext0.getFeatures());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("?.a", beanContext0.getName());
      assertNull(beanContext0.getFormat());
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(0, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.isEnum);
      assertEquals((-5520), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.getOnly);
      assertNotNull(beanContext0);
      
      Field field0 = beanContext0.getField();
      assertNull(fieldInfo0.getFormat());
      assertEquals("?.a", fieldInfo0.toString());
      assertEquals("", beanContext0.getLabel());
      assertEquals((-5520), beanContext0.getFeatures());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("?.a", beanContext0.getName());
      assertNull(beanContext0.getFormat());
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(0, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.isEnum);
      assertEquals((-5520), fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.getOnly);
      assertNull(field0);
      
      Boolean boolean1 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "Ljava.awt.Rectangle";
      ThreadGroup threadGroup0 = new ThreadGroup("LjaQa.awt.Font");
      assertEquals("LjaQa.awt.Font", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread(threadGroup0, "Ljava.awt.Rectangle");
      assertEquals("LjaQa.awt.Font", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      assertEquals("LjaQa.awt.Font", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      MockThread mockThread2 = new MockThread(mockThread1, "LjaQa.awt.Font");
      assertEquals("LjaQa.awt.Font", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotNull(mockThread2);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      assertEquals("LjaQa.awt.Font", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertNotNull(classLoader0);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertEquals("LjaQa.awt.Font", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertNotNull(classLoader1);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<?> class0 = TypeUtils.loadClass("u<-,r1", classLoader1, true);
      assertEquals("LjaQa.awt.Font", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertNull(class0);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      LinkedHashMap<StringCharacterIterator, RenderingHints> linkedHashMap0 = new LinkedHashMap<StringCharacterIterator, RenderingHints>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      classLoader0.setClassAssertionStatus("si", false);
      assertEquals("LjaQa.awt.Font", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "Ljava.awt.Rectangle", (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      Class<Integer> class0 = Integer.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      Class class2 = (Class)TypeUtils.unwrapOptional(class1);
      assertTrue(class2.isInterface());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("interface java.lang.annotation.Annotation", class2.toString());
      assertFalse(class2.isAnnotation());
      assertEquals(1537, class2.getModifiers());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertNotNull(class2);
      
      Class class3 = (Class)TypeUtils.getCollectionItemType(class2);
      assertTrue(class2.isInterface());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("interface java.lang.annotation.Annotation", class2.toString());
      assertFalse(class2.isAnnotation());
      assertEquals(1537, class2.getModifiers());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isPrimitive());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertNotSame(class2, class3);
      assertNotSame(class3, class2);
      assertNotNull(class3);
      assertFalse(class3.equals((Object)class2));
      
      java.util.IdentityHashMap<String, Object> identityHashMap0 = new java.util.IdentityHashMap<String, Object>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      JSONObject jSONObject0 = new JSONObject(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotNull(jSONObject0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)JSON.defaultTimeZone;
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      assertEquals(12, stackTraceElementDeserializer0.getFastMatchToken());
      assertNotNull(stackTraceElementDeserializer0);
      
      Object object0 = identityHashMap0.put("SUPPRESSED_SENTINEL", stackTraceElementDeserializer0);
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(12, stackTraceElementDeserializer0.getFastMatchToken());
      assertNull(object0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertNotNull(decimalFormat0);
      
      Object object1 = jSONObject0.put((String) null, (Object) null);
      assertEquals(2, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(2, jSONObject0.size());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNull(object1);
      
      Class<Integer> class4 = Integer.class;
      JSON.DEFAULT_TYPE_KEY = "8<W7u?aGl'g*:`@";
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class4);
      assertSame(class4, class0);
      assertNull(stringArray0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Hashtable<MapDeserializer, MockDateFormat> hashtable0 = new Hashtable<MapDeserializer, MockDateFormat>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : {\"SUPPRESSED_SENTINEL\":{\"fastMatchToken\":12}}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotNull(jSONObject0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)37;
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      boolean boolean1 = jSONObject0.replace("Ljava.awt.Rectangle", (Object) "Ljava.awt.Rectangle", (Object) class1);
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Feature feature1 = Feature.UseBigDecimal;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableASM;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.IgnoreNotMatch;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.SupportNonPublicField;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.DisableSpecialKeyDetect;
      featureArray0[5] = feature5;
      Object object0 = JSON.parse(byteArray0, featureArray0);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)37}, byteArray0);
      assertNull(object0);
      
      Timestamp timestamp0 = new Timestamp((-2306L));
      assertEquals(694000000, timestamp0.getNanos());
      assertEquals("1969-12-31 23:59:57.694", timestamp0.toString());
      assertNotNull(timestamp0);
      
      Class<Double> class2 = Double.TYPE;
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("double", class2.toString());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      // Undeclared exception!
      try { 
        TypeUtils.toLocale("_");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(18, false, true, 18, 1736);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertNotNull(dataTruncation0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      WeakHashMap<ParameterizedTypeImpl, Double> weakHashMap0 = new WeakHashMap<ParameterizedTypeImpl, Double>();
      assertNotNull(weakHashMap0);
      
      boolean boolean0 = identityHashMap0.remove((Object) weakHashMap0, (Object) weakHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertFalse(boolean0);
      
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("float", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertNotNull(class1);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class1);
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("float", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(boolean0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isAnnotation());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertNotSame(class2, class1);
      assertNotNull(class2);
      assertFalse(class2.equals((Object)class1));
      
      boolean boolean2 = TypeUtils.isGenericParamType(class2);
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isAnnotation());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertNotSame(class2, class1);
      assertFalse(boolean2);
      assertFalse(class2.equals((Object)class1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      ThreadGroup threadGroup0 = new ThreadGroup("(II)V");
      assertEquals("(II)V", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "|8742)`'}SxIbYS&e4x");
      assertEquals("(II)V", threadGroup0.getName());
      assertEquals("|8742)`'}SxIbYS&e4x", threadGroup1.getName());
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance();
      assertNotNull(breakIterator0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      boolean boolean4 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      assertEquals(PropertyNamingStrategy.SnakeCase, propertyNamingStrategy0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) propertyNamingStrategy0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but string, pos 11, json : \"SnakeCase\"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertNotNull(jSONObject0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-111);
      Timestamp timestamp0 = jSONObject0.getTimestamp(" 'jy+t?p");
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertNull(timestamp0);
      
      BigDecimal bigDecimal0 = jSONObject0.getBigDecimal("Ljava.awt.Rectangle");
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertNull(bigDecimal0);
      
      Long long0 = Long.getLong("8<W7u?aGl'g*:`@", 21474836479L);
      assertEquals(21474836479L, (long)long0);
      assertNotNull(long0);
      
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, true);
      assertEquals(0, treeMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("1.2.46");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1.2.46\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      Locale locale0 = TypeUtils.toLocale("lr9");
      assertEquals("lr9", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("lr9", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("lr9", locale0.toString());
      assertNotNull(locale0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      Constructor<AtomicLong>[] constructorArray0 = (Constructor<AtomicLong>[]) Array.newInstance(Constructor.class, 5);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor(constructorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedHashMap<OptionalCodec, Exception> linkedHashMap0 = new LinkedHashMap<OptionalCodec, Exception>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      linkedHashMap0.clear();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertEquals(18, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      AtomicLong atomicLong0 = new AtomicLong((-1L));
      assertEquals((byte) (-1), atomicLong0.byteValue());
      assertEquals((-1), atomicLong0.intValue());
      assertEquals((short) (-1), atomicLong0.shortValue());
      assertEquals((-1L), atomicLong0.longValue());
      assertEquals((-1.0F), atomicLong0.floatValue(), 0.01F);
      assertEquals("-1", atomicLong0.toString());
      assertEquals((-1.0), atomicLong0.doubleValue(), 0.01);
      assertEquals((-1L), atomicLong0.get());
      assertNotNull(atomicLong0);
      
      Class<MockCalendar> class1 = MockCalendar.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      Field field0 = treeMap0.put("ha", (Field) null);
      assertEquals(1, treeMap0.size());
      assertNull(field0);
      
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>((SortedMap<String, ? extends Field>) treeMap0);
      assertEquals(1, treeMap0.size());
      assertEquals(1, treeMap1.size());
      assertNotNull(treeMap1);
      assertTrue(treeMap1.equals((Object)treeMap0));
      
      Field[] fieldArray0 = new Field[0];
      Field field1 = TypeUtils.getField(class1, "ha", fieldArray0);
      assertNull(field1);
      
      Class<Short> class2 = Short.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<Double> class3 = Double.class;
      ThrowableDeserializer throwableDeserializer0 = null;
      try {
        throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Double
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("iw+/wvv_a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : iw+/wvv_a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)10;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((short)2560, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte) (-29), (byte)10, (byte)0}, byteArray0);
      assertNotNull(bigInteger0);
      
      int int0 = Byte.compare((byte)43, (byte)46);
      assertEquals((-3), int0);
      
      String string0 = Character.getName((byte)0);
      assertEquals("NULL", string0);
      assertNotNull(string0);
      
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      assertNotNull(thaiBuddhistDate0);
      
      Short short0 = new Short((byte)10);
      assertEquals((short)10, (short)short0);
      assertNotNull(short0);
      
      long long0 = TypeUtils.fnv1a_64("(C)Ljava/lang/Character;");
      assertEquals((-3872260429911639469L), long0);
      
      java.util.Date date0 = TypeUtils.castToDate(bigInteger0);
      assertEquals((short)2560, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals("Wed Dec 31 23:28:22 GMT 1969", date0.toString());
      assertArrayEquals(new byte[] {(byte) (-29), (byte)10, (byte)0}, byteArray0);
      assertNotNull(date0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = TypeUtils.castToString(object0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      long long1 = TypeUtils.fnv1a_64("(C)Ljava/lang/Character;");
      assertEquals((-3872260429911639469L), long1);
      assertTrue(long1 == long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, false);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      long long0 = TypeUtils.fnv1a_64_lower("null");
      assertEquals(6601085983368743140L, long0);
      
      Class<AtomicLong> class0 = AtomicLong.class;
      boolean boolean1 = TypeUtils.isProxy(class0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      Type[] typeArray0 = new Type[0];
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long long0 = TypeUtils.fnv1a_64_lower("0^c]0MZ[3wSzA#iIt");
      assertEquals(9181205995625557626L, long0);
      
      Class<BreakIterator> class0 = BreakIterator.class;
      boolean boolean2 = TypeUtils.isProxy(class0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance();
      assertNotNull(breakIterator0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      Long long1 = new Long(0L);
      assertEquals(0L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(long1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : 0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<Short> class0 = Short.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertNotNull(class0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      SecurityException securityException0 = new SecurityException("j");
      assertEquals("java.lang.SecurityException: j", securityException0.toString());
      assertEquals("j", securityException0.getMessage());
      assertNotNull(securityException0);
      
      LinkedHashMap<StringCharacterIterator, RenderingHints> linkedHashMap0 = new LinkedHashMap<StringCharacterIterator, RenderingHints>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, map0, (Map<String, Field>) weakHashMap0, false, (PropertyNamingStrategy) null);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("fastjson.parser.autoTypeAccept");
      assertEquals("fastjson.parser.autoTypeAccept", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      Type type0 = TypeUtils.getGenericParamType(class1);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNull(type0);
      
      Class<Character> class2 = Character.TYPE;
      assertFalse(class2.isAnnotation());
      assertEquals(1041, class2.getModifiers());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("char", class2.toString());
      assertNotNull(class2);
      
      Class<?> class3 = TypeUtils.getRawClass(class2);
      assertFalse(class2.isAnnotation());
      assertEquals(1041, class2.getModifiers());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("char", class2.toString());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertEquals("char", class3.toString());
      assertFalse(class3.isAnnotation());
      assertTrue(class3.isPrimitive());
      assertNotNull(class3);
      
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class2;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class3;
      typeArray0[4] = (Type) class3;
      typeArray0[5] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, class3);
      assertFalse(class2.isAnnotation());
      assertEquals(1041, class2.getModifiers());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("char", class2.toString());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertEquals("char", class3.toString());
      assertFalse(class3.isAnnotation());
      assertTrue(class3.isPrimitive());
      assertNotNull(parameterizedTypeImpl0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) typeArray0[4], (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Class<Short> class0 = Short.TYPE;
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("short", class0.toString());
      assertNotNull(class0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("short", class0.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertNotNull(class1);
      
      WeakHashMap<RenderingHints.Key, TimeDeserializer> weakHashMap0 = new WeakHashMap<RenderingHints.Key, TimeDeserializer>();
      assertNotNull(weakHashMap0);
      
      RenderingHints renderingHints0 = new RenderingHints(weakHashMap0);
      assertTrue(renderingHints0.isEmpty());
      assertEquals(0, renderingHints0.size());
      assertNotNull(renderingHints0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(renderingHints0);
      assertTrue(renderingHints0.isEmpty());
      assertEquals(0, renderingHints0.size());
      assertTrue(boolean0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      long long0 = TypeUtils.fnv1a_64("Z$+k#T3vXTFfG");
      assertEquals((-7711178085285016792L), long0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class1, jSONType0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("short", class0.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertNotNull(class2);
      
      Class<?> class3 = TypeUtils.getCollectionItemClass(class2);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("short", class0.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isEnum());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isSynthetic());
      assertSame(class2, class3);
      assertSame(class3, class2);
      assertNotNull(class3);
      
      boolean boolean1 = TypeUtils.isGenericParamType(class1);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("short", class0.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      
      WeakHashMap<String, Object> weakHashMap1 = new WeakHashMap<String, Object>();
      assertNotNull(weakHashMap1);
      
      Class<SQLTimeoutException> class4 = SQLTimeoutException.class;
      SQLTimeoutException sQLTimeoutException0 = TypeUtils.castToJavaBean((Map<String, Object>) weakHashMap1, class4, parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertNotSame(parserConfig0, parserConfig1);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(sQLTimeoutException0);
      assertFalse(parserConfig0.equals((Object)parserConfig1));
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class<Double> class5 = Double.TYPE;
      assertFalse(class5.isAnnotation());
      assertEquals("double", class5.toString());
      assertFalse(class5.isInterface());
      assertFalse(class5.isArray());
      assertTrue(class5.isPrimitive());
      assertEquals(1041, class5.getModifiers());
      assertFalse(class5.isEnum());
      assertFalse(class5.isSynthetic());
      assertNotNull(class5);
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, class1);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("short", class0.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertNotNull(parameterizedTypeImpl1);
      
      String string0 = parameterizedTypeImpl1.getTypeName();
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("short", class0.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertNotNull(string0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      assertNotNull(type0);
      
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      assertEquals(1537, class0.getModifiers());
      assertTrue(class0.isInterface());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("interface java.util.List", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertSame(parameterizedTypeImpl0, type0);
      assertNotNull(class0);
      
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertEquals(1537, class0.getModifiers());
      assertTrue(class0.isInterface());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("interface java.util.List", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("interface java.util.List", class1.toString());
      assertFalse(class1.isPrimitive());
      assertTrue(class1.isInterface());
      assertEquals(1537, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotNull(class1);
      
      Class<TimeZone> class2 = TimeZone.class;
      Class<Annotation> class3 = Annotation.class;
      Class<Annotation> class4 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class3, class4);
      assertSame(class3, class4);
      assertSame(class4, class3);
      assertNull(annotation0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      Field field0 = ParserConfig.getFieldFromCache("java.util.concurrent.atomic.AtomicLong", linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNull(field0);
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      assertNull(noClassDefFoundError0.getMessage());
      assertEquals("java.lang.NoClassDefFoundError", noClassDefFoundError0.toString());
      assertNotNull(noClassDefFoundError0);
      
      Field field1 = identityHashMap0.getOrDefault(noClassDefFoundError0, (Field) null);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNull(noClassDefFoundError0.getMessage());
      assertEquals("java.lang.NoClassDefFoundError", noClassDefFoundError0.toString());
      assertNull(field1);
      
      Field field2 = ParserConfig.getFieldFromCache("[J", identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNull(field2);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : class java.util.TimeZone
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertNotNull(locale0);
      
      Class<Annotation> class0 = Annotation.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      String string0 = hashMap0.compute("booq^@Z", biFunction0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      VerifyError verifyError0 = new VerifyError();
      assertNull(verifyError0.getMessage());
      assertEquals("java.lang.VerifyError", verifyError0.toString());
      assertNotNull(verifyError0);
      
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Integer integer0 = TypeUtils.castToInt(long0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Class<SQLException> class1 = SQLException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class1, hashMap0, false, propertyNamingStrategy0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<IllegalMonitorStateException> class0 = IllegalMonitorStateException.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<?> class1 = TypeUtils.loadClass("([L)q:D", classLoader0, false);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNull(class1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, false);
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(serializeBeanInfo0);
      
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
      
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.CamelCase;
      Class<NoClassDefFoundError> class2 = NoClassDefFoundError.class;
      List<FieldInfo> list1 = TypeUtils.computeGettersWithFieldBase(class2, map0, false, propertyNamingStrategy1);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotSame(list1, list0);
      assertSame(propertyNamingStrategy1, propertyNamingStrategy0);
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("LjaQa.awt.Font");
      assertEquals("LjaQa.awt.Font", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread(threadGroup0, "Ljava.awt.Rectangle");
      assertEquals("LjaQa.awt.Font", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      assertEquals("LjaQa.awt.Font", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      MockThread mockThread2 = new MockThread(mockThread1, "LjaQa.awt.Font");
      assertEquals("LjaQa.awt.Font", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotNull(mockThread2);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      assertEquals("LjaQa.awt.Font", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertNotNull(classLoader0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertEquals("LjaQa.awt.Font", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertNotNull(classLoader1);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<?> class0 = TypeUtils.loadClass("u<-,r1", classLoader1, true);
      assertEquals("LjaQa.awt.Font", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertNull(class0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      LinkedHashMap<StringCharacterIterator, RenderingHints> linkedHashMap0 = new LinkedHashMap<StringCharacterIterator, RenderingHints>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      MockThread.reset();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      boolean boolean0 = false;
      classLoader0.setClassAssertionStatus("si", false);
      assertEquals("LjaQa.awt.Font", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      boolean boolean1 = TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "Ljava.awt.Rectangle", (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(bigInteger0);
      
      int int0 = Opcodes.FCONST_0;
      assertEquals(11, int0);
      
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      assertNotNull(thaiBuddhistDate0);
      
      Short short0 = new Short((byte)20);
      assertEquals((short)20, (short)short0);
      assertNotNull(short0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      String string0 = TypeUtils.castToString(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(string0);
      
      long long0 = TypeUtils.fnv1a_64("lE,\"j-");
      assertEquals((-5512383762850589767L), long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = aSMDeserializerFactory0.classLoader.getParent();
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      Class<?> class0 = TypeUtils.loadClass("[C", (ClassLoader) aSMDeserializerFactory0.classLoader);
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("class [C", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertSame(classLoader0, classLoader1);
      assertNotNull(class0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "LjaQa.awt.Font";
      String string1 = "Z]:0DX35y&PL&J`";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Z]:0DX35y&PL&J`", "LjaQa.awt.Font");
      assertEquals("LjaQa.awt.Font", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: Z]:0DX35y&PL&J`", sQLRecoverableException0.toString());
      assertEquals("Z]:0DX35y&PL&J`", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      assertEquals("LjaQa.awt.Font", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: Z]:0DX35y&PL&J`", sQLRecoverableException0.toString());
      assertEquals("Z]:0DX35y&PL&J`", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException1.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLRecoverableException: Z]:0DX35y&PL&J`", sQLRecoverableException1.toString());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: Z]:0DX35y&PL&J`", sQLRecoverableException1.getMessage());
      assertNotNull(sQLRecoverableException1);
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      Class<Integer> class0 = Integer.class;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertNotNull(decimalFormat0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) decimalFormat0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.text.DecimalFormat@674dc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<?> class0 = TypeUtils.getClassFromMapping("Wn[$kc");
      assertNull(class0);
      
      boolean boolean0 = TypeUtils.isNumber("*2Gk~k9AB");
      assertFalse(boolean0);
      
      Insets insets0 = new Insets(35, (-3616), (-3616), (-3616));
      assertEquals((-3616), insets0.left);
      assertEquals((-3616), insets0.right);
      assertEquals((-3616), insets0.bottom);
      assertEquals(35, insets0.top);
      assertNotNull(insets0);
      
      insets0.right = (-3616);
      JSONObject jSONObject0 = new JSONObject((Map<String, Object>) null);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotNull(jSONObject0);
      
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportArrayToBean;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.SupportNonPublicField;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.SupportAutoType;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.IgnoreNotMatch;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.OrderedField;
      featureArray0[5] = feature5;
      // Undeclared exception!
      try { 
        JSON.parseObject("*2Gk~k9AB", (Type) null, 1110, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : *2Gk~k9AB
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ConcurrentHashMap<BreakIterator, Integer> concurrentHashMap0 = new ConcurrentHashMap<BreakIterator, Integer>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertNotNull(imageCapabilities0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|'y^H$WAlYixLbW&S");
      assertFalse(boolean0);
      
      ImageCapabilities imageCapabilities1 = (ImageCapabilities)imageCapabilities0.clone();
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(imageCapabilities1.isTrueVolatile());
      assertFalse(imageCapabilities1.isAccelerated());
      assertNotSame(imageCapabilities0, imageCapabilities1);
      assertNotSame(imageCapabilities1, imageCapabilities0);
      assertNotNull(imageCapabilities1);
      assertFalse(imageCapabilities1.equals((Object)imageCapabilities0));
      
      ImageCapabilities imageCapabilities2 = (ImageCapabilities)imageCapabilities0.clone();
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(imageCapabilities2.isAccelerated());
      assertFalse(imageCapabilities2.isTrueVolatile());
      assertNotSame(imageCapabilities0, imageCapabilities1);
      assertNotSame(imageCapabilities0, imageCapabilities2);
      assertNotSame(imageCapabilities2, imageCapabilities0);
      assertNotSame(imageCapabilities2, imageCapabilities1);
      assertNotNull(imageCapabilities2);
      assertFalse(imageCapabilities0.equals((Object)imageCapabilities1));
      assertFalse(imageCapabilities2.equals((Object)imageCapabilities0));
      assertFalse(imageCapabilities2.equals((Object)imageCapabilities1));
      
      boolean boolean1 = concurrentHashMap0.contains(imageCapabilities0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertNotSame(imageCapabilities0, imageCapabilities1);
      assertNotSame(imageCapabilities0, imageCapabilities2);
      assertFalse(boolean1);
      assertFalse(imageCapabilities0.equals((Object)imageCapabilities1));
      assertFalse(imageCapabilities0.equals((Object)imageCapabilities2));
      assertTrue(boolean1 == boolean0);
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertNull(bigDecimal0);
      
      System.setCurrentTimeMillis(1099511628211L);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      Dimension dimension0 = new Dimension(965, 965);
      assertEquals(965.0, dimension0.getHeight(), 0.01);
      assertEquals(965.0, dimension0.getWidth(), 0.01);
      assertEquals(965, dimension0.width);
      assertEquals(965, dimension0.height);
      assertNotNull(dimension0);
      
      Dimension dimension1 = new Dimension(dimension0);
      assertEquals(965.0, dimension0.getHeight(), 0.01);
      assertEquals(965.0, dimension0.getWidth(), 0.01);
      assertEquals(965.0, dimension1.getHeight(), 0.01);
      assertEquals(965.0, dimension1.getWidth(), 0.01);
      assertEquals(965, dimension0.width);
      assertEquals(965, dimension0.height);
      assertEquals(965, dimension1.width);
      assertEquals(965, dimension1.height);
      assertNotNull(dimension1);
      assertTrue(dimension1.equals((Object)dimension0));
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(dimension1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.awt.Dimension[width=965,height=965]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ConcurrentHashMap<BreakIterator, Integer> concurrentHashMap0 = new ConcurrentHashMap<BreakIterator, Integer>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(imageCapabilities0.isAccelerated());
      assertNotNull(imageCapabilities0);
      
      ImageCapabilities imageCapabilities1 = (ImageCapabilities)imageCapabilities0.clone();
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities1.isTrueVolatile());
      assertFalse(imageCapabilities1.isAccelerated());
      assertNotSame(imageCapabilities0, imageCapabilities1);
      assertNotSame(imageCapabilities1, imageCapabilities0);
      assertNotNull(imageCapabilities1);
      assertFalse(imageCapabilities1.equals((Object)imageCapabilities0));
      
      ImageCapabilities imageCapabilities2 = (ImageCapabilities)imageCapabilities0.clone();
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities2.isTrueVolatile());
      assertFalse(imageCapabilities2.isAccelerated());
      assertNotSame(imageCapabilities0, imageCapabilities1);
      assertNotSame(imageCapabilities0, imageCapabilities2);
      assertNotSame(imageCapabilities2, imageCapabilities0);
      assertNotSame(imageCapabilities2, imageCapabilities1);
      assertNotNull(imageCapabilities2);
      assertFalse(imageCapabilities0.equals((Object)imageCapabilities1));
      assertFalse(imageCapabilities2.equals((Object)imageCapabilities0));
      assertFalse(imageCapabilities2.equals((Object)imageCapabilities1));
      
      boolean boolean0 = concurrentHashMap0.contains(imageCapabilities0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(imageCapabilities0.isAccelerated());
      assertNotSame(imageCapabilities0, imageCapabilities1);
      assertNotSame(imageCapabilities0, imageCapabilities2);
      assertFalse(boolean0);
      assertFalse(imageCapabilities0.equals((Object)imageCapabilities1));
      assertFalse(imageCapabilities0.equals((Object)imageCapabilities2));
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertNull(bigDecimal0);
      
      Class<Float> class0 = Float.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertEquals("float", class1.toString());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.getRawClass(class1);
      assertFalse(class0.isAnnotation());
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertEquals("float", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("float", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertSame(class1, class2);
      assertSame(class2, class1);
      assertNotNull(class2);
      
      Class<TimeZone> class3 = TimeZone.class;
      Class<Annotation> class4 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class3, class4);
      assertNull(annotation0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      Field field0 = ParserConfig.getFieldFromCache("y_a_vkK9=uEH_~DkN", linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNull(field0);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      Field field1 = ParserConfig.getFieldFromCache("[J", weakHashMap0);
      assertNull(field1);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)26;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((short)13594, bigInteger0.shortValue());
      assertEquals((byte)26, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)20, (byte) (-66), (byte) (-48), (byte)90, (byte)53, (byte)26}, byteArray0);
      assertNotNull(bigInteger0);
      
      Short short0 = TypeUtils.castToShort(bigInteger0);
      assertEquals((short)13594, bigInteger0.shortValue());
      assertEquals((byte)26, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)20, (byte) (-66), (byte) (-48), (byte)90, (byte)53, (byte)26}, byteArray0);
      assertEquals((short)13594, (short)short0);
      assertNotNull(short0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertNotNull(locale0);
      
      DataTruncation dataTruncation0 = new DataTruncation(1736, true, false, (-1810403827), 1736);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(dataTruncation0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      WeakHashMap<ParameterizedTypeImpl, Double> weakHashMap0 = new WeakHashMap<ParameterizedTypeImpl, Double>();
      assertNotNull(weakHashMap0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("%<D&@ <nfc;av=v", "gzip,base64", (-1810403827), dataTruncation0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals((-1810403827), sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: %<D&@ <nfc;av=v", sQLRecoverableException0.toString());
      assertEquals("gzip,base64", sQLRecoverableException0.getSQLState());
      assertEquals("%<D&@ <nfc;av=v", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      boolean boolean0 = identityHashMap0.remove((Object) null, (Object) sQLRecoverableException0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertEquals((-1810403827), sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: %<D&@ <nfc;av=v", sQLRecoverableException0.toString());
      assertEquals("gzip,base64", sQLRecoverableException0.getSQLState());
      assertEquals("%<D&@ <nfc;av=v", sQLRecoverableException0.getMessage());
      assertFalse(boolean0);
      
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Short short0 = new Short((short) (-25434));
      assertEquals((short) (-25434), (short)short0);
      assertNotNull(short0);
      
      Long long0 = TypeUtils.castToLong(short0);
      assertEquals((-25434L), (long)long0);
      assertNotNull(long0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      assertNotNull(aSMDeserializerFactory1);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory1.classLoader;
      assertSame(aSMClassLoader1, aSMClassLoader0);
      assertNotNull(aSMClassLoader1);
      
      ClassLoader classLoader2 = aSMDeserializerFactory0.classLoader.getParent();
      assertSame(classLoader2, classLoader0);
      assertSame(classLoader2, classLoader1);
      assertSame(classLoader1, classLoader2);
      assertSame(classLoader1, classLoader0);
      assertNotSame(aSMDeserializerFactory0, aSMDeserializerFactory1);
      assertNotNull(classLoader2);
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      
      Class<?> class0 = TypeUtils.loadClass((String) null, (ClassLoader) aSMClassLoader1);
      assertSame(classLoader1, classLoader2);
      assertSame(classLoader1, classLoader0);
      assertNotSame(aSMDeserializerFactory0, aSMDeserializerFactory1);
      assertSame(aSMClassLoader0, aSMClassLoader1);
      assertNotSame(aSMDeserializerFactory1, aSMDeserializerFactory0);
      assertSame(aSMClassLoader1, aSMClassLoader0);
      assertNull(class0);
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ConcurrentHashMap<BreakIterator, Integer> concurrentHashMap0 = new ConcurrentHashMap<BreakIterator, Integer>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      LinkedHashMap<StringCharacterIterator, RenderingHints> linkedHashMap0 = new LinkedHashMap<StringCharacterIterator, RenderingHints>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      Class<Properties> class0 = Properties.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ThreadGroup threadGroup0 = new ThreadGroup("rC3a]eL");
      assertEquals("rC3a]eL", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNotNull(type0);
      
      Class<Character> class1 = Character.TYPE;
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("char", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.getRawClass(class0);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.util.Properties", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertNotNull(class2);
      
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class1;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class2;
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class class3 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isPrimitive());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isAnnotation());
      assertNotNull(class3);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class1.isInterface());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("float", class1.toString());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class1);
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class1.isInterface());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("float", class1.toString());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(boolean0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class2.isPrimitive());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertNotSame(class2, class1);
      assertNotNull(class2);
      assertFalse(class2.equals((Object)class1));
      
      boolean boolean2 = TypeUtils.isGenericParamType(class2);
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class2.isPrimitive());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertNotSame(class2, class1);
      assertFalse(boolean2);
      assertFalse(class2.equals((Object)class1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      ThreadGroup threadGroup0 = new ThreadGroup("getErrorCode");
      assertEquals("getErrorCode", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "/Date(");
      assertEquals("getErrorCode", threadGroup0.getName());
      assertEquals("/Date(", threadGroup1.getName());
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance();
      assertNotNull(breakIterator0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : com.alibaba.fastjson.parser.ParserConfig@95
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isArray());
      assertNotNull(class2);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class2);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(boolean0);
      
      Long long0 = new Long(140758963191807L);
      assertEquals(140758963191807L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = Long.getLong("istoString", 140758963191807L);
      assertEquals(140758963191807L, (long)long1);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      
      Byte byte0 = TypeUtils.castToByte(long0);
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      assertTrue(long0.equals((Object)long1));
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Boolean boolean1 = TypeUtils.castToBoolean(byte0);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertTrue(long0.equals((Object)long1));
      assertTrue(boolean1.equals((Object)boolean0));
      
      java.util.IdentityHashMap<MockJapaneseDate, InternalError> identityHashMap0 = new java.util.IdentityHashMap<MockJapaneseDate, InternalError>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      assertNotNull(weakHashMap0);
      
      Class<SQLTimeoutException> class3 = SQLTimeoutException.class;
      SQLTimeoutException sQLTimeoutException0 = TypeUtils.castToJavaBean((Map<String, Object>) weakHashMap0, class3, (ParserConfig) null);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class<Double> class4 = Double.TYPE;
      assertEquals("double", class4.toString());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertEquals(1041, class4.getModifiers());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isEnum());
      assertTrue(class4.isPrimitive());
      assertFalse(class4.isAnnotation());
      assertNotNull(class4);
      
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) parameterizedTypeImpl0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class2;
      typeArray0[4] = (Type) parameterizedTypeImpl0;
      typeArray0[5] = (Type) parameterizedTypeImpl0;
      typeArray0[6] = (Type) class3;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[3]);
      assertNotNull(parameterizedTypeImpl1);
      
      String string0 = parameterizedTypeImpl1.getTypeName();
      assertNotNull(string0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("can not cast to : ", "istoString", 886, sQLTimeoutException0);
      assertEquals("java.sql.SQLTransientConnectionException: can not cast to : ", sQLTransientConnectionException0.toString());
      assertEquals(886, sQLTransientConnectionException0.getErrorCode());
      assertEquals("can not cast to : ", sQLTransientConnectionException0.getMessage());
      assertEquals("istoString", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
  }
}
