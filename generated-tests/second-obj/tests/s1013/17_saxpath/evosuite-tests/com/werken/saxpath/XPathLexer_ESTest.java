/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:51:18 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("RdpJ");
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.dollar();
      String string0 = token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.literal();
      xPathLexer0.dots();
      String string1 = xPathLexer0.getXPath();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.number();
      xPathLexer0.leftParen();
      xPathLexer0.comma();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.dollar();
      xPathLexer0.and();
      xPathLexer0.isIdentifierChar('-');
      xPathLexer0.and();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.colon();
      boolean boolean0 = xPathLexer0.isIdentifierChar('.');
      assertTrue(boolean0);
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      xPathLexer0.leftParen();
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      
      xPathLexer0.identifier();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.setXPath("*vlp^rcThf");
      Token token5 = xPathLexer0.star();
      assertEquals("*", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("vlp", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(2, token0.getTokenType());
      assertEquals(")", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("hM^iIuMb");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("hM", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals("^", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      
      xPathLexer0.identifier();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.setXPath("Lug1#QBAV!$c<c;qAX");
      Token token5 = xPathLexer0.star();
      assertEquals("L", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("ug1", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.leftParen();
      assertEquals("#", token7.getTokenText());
      assertEquals(1, token7.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      assertEquals(11, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("l*{e5SNh");
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.dollar();
      assertEquals("l", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals("", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals("*", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      xPathLexer0.setXPath("l*{e5SNh");
      Token token3 = xPathLexer0.star();
      assertEquals("l", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(20, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("DRBd!<'?/d!W287u");
      String string0 = ".#OX";
      xPathLexer0.doubleColon();
      xPathLexer0.equals();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("RdpJ");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("R", token0.getTokenText());
      
      xPathLexer0.mod();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("dpJ", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mg");
      XPathLexer xPathLexer1 = new XPathLexer("mg");
      Token token0 = xPathLexer1.nextToken();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.notEquals();
      assertEquals("mg", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      String string0 = token0.toString();
      assertEquals(15, token0.getTokenType());
      assertEquals("[ (15) (mg)", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.number();
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = ".OYRZz-P_QeTO-qxw";
      XPathLexer xPathLexer0 = new XPathLexer(".OYRZz-P_QeTO-qxw");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("9M$=]");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      assertEquals("9", token0.getTokenText());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.or();
      xPathLexer0.consume((-574));
      String string0 = "e:Yd{m\"Eh]\\ K";
      XPathLexer xPathLexer1 = new XPathLexer("e:Yd{m\"Eh] K");
      xPathLexer1.star();
      xPathLexer1.and();
      xPathLexer1.nextToken();
      xPathLexer0.colon();
      // Undeclared exception!
      try { 
        xPathLexer0.div();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("V>?");
      xPathLexer0.nextToken();
      xPathLexer0.identifier();
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("hM^iIuMb");
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.slashes();
      assertEquals("M", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals("i", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("I", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      xPathLexer0.setXPath("hM^iIuMb");
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      assertEquals("h", token5.getTokenText());
      
      Token token6 = xPathLexer0.star();
      assertEquals("M", token6.getTokenText());
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
      assertEquals("^iIuMb", token7.getTokenText());
      
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      assertEquals("^i", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "*|T7rn1hmHYn`}T";
      XPathLexer xPathLexer0 = new XPathLexer("*|T7rn1hmHYn`}T");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.plus();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.identifier();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer1.setXPath("U5]H");
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNull(token3);
      
      Token token4 = xPathLexer1.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("U", token4.getTokenText());
      
      Token token5 = xPathLexer1.rightParen();
      assertEquals("5", token5.getTokenText());
      assertEquals(2, token5.getTokenType());
      
      xPathLexer1.operatorName();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer2 = new XPathLexer("U5]H");
      Token token6 = xPathLexer1.nextToken();
      assertEquals("]", token6.getTokenText());
      assertEquals(4, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mg");
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.leftParen();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tD/M");
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("D", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      assertEquals("/", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("M", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tD/M");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.rightParen();
      assertEquals("t", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("D", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(11, token2.getTokenType());
      assertEquals("/", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.not();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("(=$iGu");
      XPathLexer xPathLexer2 = new XPathLexer("(=$iGu");
      xPathLexer2.or();
      xPathLexer1.nextToken();
      xPathLexer1.nextToken();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.getPreviousToken();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".1YRZz-P_QeTO-Zqxw");
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*lTF");
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token0 = xPathLexer1.star();
      assertEquals(20, token0.getTokenType());
      
      xPathLexer1.and();
      Token token1 = xPathLexer1.notEquals();
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer1.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.plus();
      assertEquals("*", token3.getTokenText());
      assertEquals(5, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("lTF", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") +(");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals(")", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("+", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.colon();
      assertEquals("(", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("yS}");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer1.whitespace();
      xPathLexer1.nextToken();
      xPathLexer1.relationalOperator();
      xPathLexer0.notEquals();
      xPathLexer0.getXPath();
      xPathLexer1.consume();
      assertFalse(xPathLexer1.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6( 3yFiO6v[VGy:");
      Token token0 = xPathLexer0.at();
      assertEquals("6", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals(" ", token2.getTokenText());
      
      xPathLexer0.rightBracket();
      token1.toString();
      token1.toString();
      char char0 = xPathLexer0.LA(124);
      assertEquals('\uFFFF', char0);
      
      String string0 = token1.toString();
      assertEquals("[ (2) (()", string0);
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("y", token3.getTokenText());
      
      xPathLexer0.setPreviousToken(token1);
      Token token4 = xPathLexer0.not();
      assertEquals("F", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      assertEquals("iO6v[VGy:", token5.getTokenText());
      
      Token token6 = xPathLexer0.minus();
      assertEquals("i", token6.getTokenText());
      assertEquals(6, token6.getTokenType());
      
      Token token7 = xPathLexer0.comma();
      assertEquals(32, token7.getTokenType());
      assertEquals("O", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("l*{e5SNh");
      Token token0 = xPathLexer0.slashes();
      assertEquals("l", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals("*", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("{", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.number();
      assertEquals(30, token3.getTokenType());
      
      xPathLexer1.mod();
      XPathLexer xPathLexer2 = new XPathLexer("l*{e5SNh");
      XPathLexer xPathLexer3 = new XPathLexer("l*{e5SNh");
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("e5SNh", token4.getTokenText());
      
      Token token5 = xPathLexer1.comma();
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      xPathLexer3.div();
      XPathLexer xPathLexer4 = new XPathLexer("2%y'YS|");
      Token token7 = xPathLexer3.star();
      assertEquals(20, token7.getTokenType());
      assertEquals("l", token7.getTokenText());
      
      xPathLexer4.setPreviousToken((Token) null);
      Token token8 = xPathLexer0.nextToken();
      assertEquals((-1), token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Q-$$sZwQT");
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.dots();
      xPathLexer0.equals();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("Zs}A'|s&e&d ");
      Token token1 = xPathLexer1.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("Z", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer1.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("s", token2.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("`t6RI");
      xPathLexer0.and();
      Token token3 = xPathLexer3.nextToken();
      assertEquals("`t6RI", token3.getTokenText());
      
      xPathLexer0.or();
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('@');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("FCdpJ");
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("FCdpJ");
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.setXPath("xkE,<");
      xPathLexer0.rightParen();
      xPathLexer1.rightBracket();
      xPathLexer0.leftBracket();
      xPathLexer1.nextToken();
      xPathLexer0.slashes();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.consume();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token0 = xPathLexer2.getPreviousToken();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("PoB/[}i");
      Token token0 = xPathLexer1.dots();
      assertEquals("P", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer1.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      xPathLexer1.setXPath("PoB/[}i");
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("PoB", token4.getTokenText());
      
      Token token5 = xPathLexer1.number();
      assertEquals("", token5.getTokenText());
      assertEquals(30, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.at();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer("Zs}A'|s&e&d ");
      xPathLexer1.whitespace();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.not();
      xPathLexer2.and();
      xPathLexer1.nextToken();
      xPathLexer2.div();
      xPathLexer2.consume(60);
      assertFalse(xPathLexer2.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("wtmAKm");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("w", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("t", token1.getTokenText());
      
      char char0 = xPathLexer0.LA(22);
      assertEquals('\uFFFF', char0);
      
      Token token2 = xPathLexer0.colon();
      assertEquals("m", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("AKm", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("FCdpJ");
      xPathLexer0.div();
      Token token0 = xPathLexer0.minus();
      token0.toString();
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.rightBracket();
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("[ (6) (F)");
      assertFalse(xPathLexer3.equals((Object)xPathLexer1));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8G.5");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.slashes();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6( 3yFiO6v[VGy:");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("6", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      Token token2 = xPathLexer0.dots();
      assertEquals(" ", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("3", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      token1.toString();
      char char0 = xPathLexer0.LA(124);
      assertEquals('\uFFFF', char0);
      
      String string0 = token1.toString();
      assertEquals("[ (2) (()", string0);
      
      xPathLexer0.div();
      xPathLexer0.setPreviousToken(token1);
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("y", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("FiO6v[VGy:", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(",V");
      xPathLexer0.relationalOperator();
      xPathLexer0.doubleColon();
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      xPathLexer0.leftParen();
      xPathLexer0.at();
      xPathLexer0.dollar();
      xPathLexer0.equals();
      xPathLexer0.number();
      xPathLexer0.setXPath("ro{[i^hjv{]:1\"^vC(");
      XPathLexer xPathLexer1 = new XPathLexer(",V");
      xPathLexer1.whitespace();
      xPathLexer1.doubleColon();
      xPathLexer1.not();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.consume((-789));
      assertEquals("ro{[i^hjv{]:1\"^vC(", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("pW'q?ly$F@@-`/D67]");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("pW", token0.getTokenText());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("q", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals("", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer("MO,j$cJe><&,@#;VyK=");
      Token token0 = xPathLexer2.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("M", token0.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("MO,j$cJe><&,@#;VyK=");
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token1 = xPathLexer3.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("M", token1.getTokenText());
      
      xPathLexer0.minus();
      xPathLexer3.nextToken();
      xPathLexer2.and();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("[ (");
      xPathLexer2.getXPath();
      Token token2 = xPathLexer3.getPreviousToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("O", token2.getTokenText());
      
      Token token3 = xPathLexer1.minus();
      assertEquals(6, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "8G.5";
      XPathLexer xPathLexer0 = new XPathLexer("8G.5");
      xPathLexer0.star();
      xPathLexer0.slashes();
      xPathLexer0.plus();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dqlLQi,>wq%Mkc");
      xPathLexer0.comma();
      xPathLexer0.rightBracket();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.getPreviousToken();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.not();
      xPathLexer0.pipe();
      xPathLexer0.slashes();
      xPathLexer0.leftParen();
      xPathLexer0.at();
      xPathLexer0.dollar();
      xPathLexer0.identifier();
      xPathLexer0.number();
      xPathLexer0.comma();
      xPathLexer0.setXPath("T{F\"\"@lQ?)8En");
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.consume((-2019));
      assertEquals("T{F\"\"@lQ?)8En", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">7kj<:");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("PoB/[}i");
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("+$LXgzd~CR9");
      Token token1 = xPathLexer1.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("P", token1.getTokenText());
      
      Token token2 = xPathLexer1.operatorName();
      assertNull(token2);
      
      xPathLexer3.or();
      Token token3 = xPathLexer0.not();
      assertEquals("7", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("V>V");
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(">", token1.getTokenText());
      assertEquals(9, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer(";\"-`J%6mzGm!mIdy#");
      Token token1 = xPathLexer1.nextToken();
      assertEquals(";\"-`J%6mzGm!mIdy#", token1.getTokenText());
      
      xPathLexer1.setPreviousToken(token0);
      assertEquals(20, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "8G.5";
      XPathLexer xPathLexer0 = new XPathLexer("8G.5");
      xPathLexer0.star();
      xPathLexer0.dots();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.comma();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftParen();
      xPathLexer0.consume();
      xPathLexer0.rightParen();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "aj?\"";
      XPathLexer xPathLexer0 = new XPathLexer("aj?\"");
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("aj?\"");
      xPathLexer1.nextToken();
      xPathLexer0.setPreviousToken((Token) null);
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("%0#[s\\@A");
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals("%0#[s\\@A", token1.getTokenText());
      
      Token token2 = xPathLexer2.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      String string0 = "[ (";
      XPathLexer xPathLexer2 = new XPathLexer("[ (");
      Token token0 = xPathLexer1.colon();
      xPathLexer2.nextToken();
      xPathLexer2.whitespace();
      char char0 = 'R';
      xPathLexer1.notEquals();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer0.setXPath("kx");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("U5]H");
      Token token1 = xPathLexer2.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("U5", token1.getTokenText());
      
      Token token2 = xPathLexer0.equals();
      assertEquals("x", token2.getTokenText());
      assertEquals(21, token2.getTokenType());
      
      xPathLexer2.consume();
      Token token3 = xPathLexer2.nextToken();
      assertEquals("H", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.plus();
      Token token0 = xPathLexer0.minus();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.slashes();
      char char0 = '3';
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer("K4)le");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.relationalOperator();
      xPathLexer1.whitespace();
      xPathLexer3.div();
      xPathLexer0.whitespace();
      xPathLexer2.nextToken();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.consume();
      assertFalse(xPathLexer0.equals((Object)xPathLexer1));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath(")nO34o");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals(")", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("nO34o", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("hM^iIuMb");
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.slashes();
      assertEquals("M", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.at();
      assertEquals("i", token2.getTokenText());
      
      xPathLexer0.mod();
      Token token3 = xPathLexer0.pipe();
      assertEquals("I", token3.getTokenText());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      assertEquals("u", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("hM^iIuMb");
      Token token6 = xPathLexer1.leftParen();
      assertEquals("h", token6.getTokenText());
      
      xPathLexer1.setXPath("2B(WGdYe?7w%,U(F$6");
      Token token7 = xPathLexer0.star();
      assertEquals("M", token7.getTokenText());
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals(15, token8.getTokenType());
      assertEquals("b", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.pipe();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.mod();
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("`t6RI");
      Token token4 = xPathLexer1.doubleColon();
      assertEquals("`t", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("`t6RI");
      xPathLexer3.setPreviousToken((Token) null);
      Token token6 = xPathLexer1.nextToken();
      assertEquals(30, token6.getTokenType());
      assertEquals("6", token6.getTokenText());
      
      Token token7 = xPathLexer1.rightParen();
      assertEquals(2, token7.getTokenType());
      assertEquals("R", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1l.tJ=n6% #6y(S.&");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      assertEquals("1", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("l", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals(".", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("tJ", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("F dpU");
      xPathLexer0.rightParen();
      xPathLexer0.at();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer0.operatorName();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("DRBd(!<'?/d!W287u");
      String string0 = ".#OX";
      xPathLexer0.setXPath(".#OX");
      xPathLexer0.doubleColon();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("F dpU");
      xPathLexer0.div();
      xPathLexer0.setXPath("F dpU");
      xPathLexer0.setXPath("F dpU");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.rightParen();
      token0.toString();
      xPathLexer0.rightBracket();
      xPathLexer0.relationalOperator();
      xPathLexer0.at();
      xPathLexer0.isIdentifierStartChar('O');
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8G.5");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("8", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("G.5", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D6ww44");
      xPathLexer0.or();
      xPathLexer0.div();
      xPathLexer0.isIdentifierChar(')');
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("D", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals("6", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("ww44", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals("", token4.getTokenText());
      assertEquals((-2), token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("0#ZM{s0");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("0", token0.getTokenText());
      
      xPathLexer0.mod();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("#ZM{s0", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals("#", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('>');
      assertFalse(boolean0);
      
      XPathLexer xPathLexer2 = new XPathLexer("<KWq1)^x");
      XPathLexer xPathLexer3 = new XPathLexer("F dpU");
      XPathLexer xPathLexer4 = new XPathLexer("(");
      Token token0 = xPathLexer2.relationalOperator();
      assertNotNull(token0);
      assertEquals("<", token0.getTokenText());
      assertEquals(7, token0.getTokenType());
      
      xPathLexer0.getXPath();
      Token token1 = xPathLexer1.dollar();
      assertEquals(26, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      
      xPathLexer0.at();
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      xPathLexer0.identifier();
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      xPathLexer0.setXPath("QqM8<=Fy}D:D");
      Token token8 = xPathLexer0.star();
      assertEquals("Q", token8.getTokenText());
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals(15, token9.getTokenType());
      assertEquals("qM8", token9.getTokenText());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals("<=", token10.getTokenText());
      assertEquals(8, token10.getTokenType());
      
      Token token11 = xPathLexer0.notEquals();
      assertEquals("Fy", token11.getTokenText());
      assertEquals(22, token11.getTokenType());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.plus();
      xPathLexer0.at();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("I=gJ%M51HS(2coixmc");
      xPathLexer1.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("7");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer1.whitespace();
      xPathLexer1.nextToken();
      xPathLexer1.relationalOperator();
      xPathLexer0.notEquals();
      xPathLexer0.getXPath();
      xPathLexer1.consume();
      assertNull(xPathLexer1.getXPath());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = "[ (";
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.colon();
      xPathLexer1.whitespace();
      char char0 = 'R';
      xPathLexer0.notEquals();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      xPathLexer0.div();
      xPathLexer0.rightBracket();
      xPathLexer0.div();
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.setXPath(":/.mLUA(Mv{R|V");
      xPathLexer0.consume(0);
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(":", token4.getTokenText());
      
      xPathLexer0.setPreviousToken(token2);
      assertEquals(11, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("f]!G_Q'zc_F7q>+\fce");
      Token token5 = xPathLexer1.star();
      assertEquals(20, token5.getTokenType());
      assertEquals("f", token5.getTokenText());
      
      xPathLexer1.nextToken();
      Token token6 = xPathLexer1.dots();
      assertEquals("!", token6.getTokenText());
      assertEquals(13, token6.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('p');
      assertTrue(boolean0);
      
      Token token7 = xPathLexer1.plus();
      assertEquals("G", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      xPathLexer1.operatorName();
      xPathLexer1.or();
      Token token8 = xPathLexer1.nextToken();
      assertEquals("_Q'zc_F7q>+\fce", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("9");
      xPathLexer0.star();
      xPathLexer0.dollar();
      xPathLexer0.div();
      xPathLexer0.not();
      xPathLexer0.and();
      xPathLexer0.colon();
      xPathLexer0.isIdentifierStartChar('_');
      xPathLexer0.isIdentifierChar('_');
      xPathLexer0.relationalOperator();
      xPathLexer0.literal();
      xPathLexer0.colon();
      xPathLexer0.consume();
      assertEquals("9", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("pW'q?ly$F@@-`/D67]");
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.number();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer("mg");
      xPathLexer1.dollar();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.setPreviousToken(token0);
      xPathLexer2.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("PoB/[}i");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.consume((-544));
      Token token0 = xPathLexer1.rightBracket();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8G.5");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.slashes();
      xPathLexer1.setPreviousToken(token0);
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.nextToken();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.at();
      xPathLexer0.star();
      xPathLexer1.pipe();
      xPathLexer2.leftParen();
      xPathLexer2.and();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.consume(128);
      assertFalse(xPathLexer3.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(",S);/!5#r'N[%#:/?_3");
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      xPathLexer0.slashes();
      xPathLexer0.div();
      xPathLexer0.setXPath("");
      xPathLexer0.div();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("sSH!C");
      XPathLexer xPathLexer1 = new XPathLexer("sSH!C");
      Token token0 = xPathLexer1.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("s", token0.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer2.whitespace();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("s", token2.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token3 = xPathLexer0.star();
      assertEquals("S", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      xPathLexer2.setPreviousToken(token1);
      assertEquals((-2), token1.getTokenType());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("SH", token4.getTokenText());
      
      xPathLexer3.isIdentifierChar('?');
      Token token5 = xPathLexer1.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("!", token5.getTokenText());
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals("H", token6.getTokenText());
      assertEquals(4, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("FCdpJ");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("F", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("C", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("dp", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("FCdpJ");
      XPathLexer xPathLexer2 = new XPathLexer("%0#[s\\@A");
      Token token3 = xPathLexer1.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer2.minus();
      assertEquals("%", token4.getTokenText());
      assertEquals(6, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("J", token5.getTokenText());
      
      Token token6 = xPathLexer2.rightBracket();
      assertEquals(4, token6.getTokenType());
      assertEquals("0", token6.getTokenText());
      
      Token token7 = xPathLexer1.plus();
      assertEquals("C", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "DRBd(!<'?/d!W287u";
      XPathLexer xPathLexer0 = new XPathLexer("DRBd(!<'?/d!W287u");
      xPathLexer0.notEquals();
      Token token0 = xPathLexer0.not();
      xPathLexer0.setPreviousToken(token0);
      token0.toString();
      xPathLexer0.identifierOrOperatorName();
      token0.toString();
      xPathLexer0.getPreviousToken();
      String string1 = "";
      String string2 = null;
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.not();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.doubleColon();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      xPathLexer0.leftParen();
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("x_|nMo6j;V9/Q/Q");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.notEquals();
      Token token4 = xPathLexer2.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer2.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer2.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer1.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("x_", token7.getTokenText());
      
      Token token8 = xPathLexer1.notEquals();
      assertEquals("|n", token8.getTokenText());
      assertEquals(22, token8.getTokenType());
      
      xPathLexer2.relationalOperator();
      int int0 = xPathLexer2.currentPosition();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tD/M");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.rightParen();
      assertEquals("t", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("D", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("UO1NXho.A^Vt.^");
      Token token0 = xPathLexer0.not();
      assertEquals("U", token0.getTokenText());
      
      xPathLexer0.pipe();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("1", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("NXho.A", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      assertEquals("^", token3.getTokenText());
      
      xPathLexer0.div();
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("V", token4.getTokenText());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">7kj<:");
      XPathLexer xPathLexer1 = new XPathLexer("PoB/[}i");
      Token token0 = xPathLexer1.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(">", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("7", token2.getTokenText());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals("oB", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'6#");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("", token0.getTokenText());
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("'6#");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.setXPath("'6#");
      xPathLexer2.operatorName();
      xPathLexer3.identifierOrOperatorName();
      Token token2 = xPathLexer3.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token3 = xPathLexer1.at();
      assertEquals(16, token3.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token4 = xPathLexer1.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token5 = xPathLexer1.notEquals();
      assertEquals(22, token5.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer6.consume();
      xPathLexer2.and();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer2.identifier();
      Token token6 = xPathLexer3.slashes();
      assertEquals(11, token6.getTokenType());
      
      xPathLexer4.div();
      Token token7 = xPathLexer3.dots();
      assertEquals(13, token7.getTokenType());
      
      Token token8 = xPathLexer2.identifier();
      assertEquals(15, token8.getTokenType());
      
      xPathLexer4.consume();
      Token token9 = xPathLexer4.dollar();
      assertEquals(26, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s[8+m#V0[|f");
      Token token0 = xPathLexer0.dollar();
      token0.toString();
      token0.toString();
      xPathLexer0.star();
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("8", token1.getTokenText());
      
      String string0 = token0.toString();
      assertEquals("[ (26) (s)", string0);
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("+", token2.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.dollar();
      xPathLexer0.and();
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      xPathLexer0.currentPosition();
      char char0 = xPathLexer0.LA(7);
      assertEquals('\uFFFF', char0);
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      assertEquals("V0", token5.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('\uFFFF');
      xPathLexer0.operatorName();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("[", token6.getTokenText());
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("|", token7.getTokenText());
      assertEquals(17, token7.getTokenType());
      
      boolean boolean1 = xPathLexer0.isIdentifierChar('H');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("aj?\"");
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.identifierOrOperatorName();
      assertNotNull(token0);
      assertEquals(15, token0.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("a", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("j", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      assertEquals("?\"", token3.getTokenText());
      
      xPathLexer1.isIdentifierChar('=');
      Token token4 = xPathLexer1.star();
      assertEquals(20, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z!IS)");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("Z", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.not();
      assertEquals("!", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".1YRZz-P_QeTO-Zqxw");
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("DRBd(!<'?/d!W287u");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("DR", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      xPathLexer0.equals();
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("d", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("(", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertNotNull(token3);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume((-903));
      Token token4 = xPathLexer1.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('y');
      assertTrue(boolean0);
      
      Token token5 = xPathLexer1.minus();
      assertEquals(6, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      xPathLexer0.consume();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.div();
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.comma();
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      
      char char0 = xPathLexer0.LA(115);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.operatorName();
      Token token8 = xPathLexer0.minus();
      assertEquals(6, token8.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('\uFFFF');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("aj?\"");
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      String string0 = null;
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "DRBd(!<'?/d!W287u";
      XPathLexer xPathLexer0 = new XPathLexer("DRBd(!<'?/d!W287u");
      xPathLexer0.notEquals();
      Token token0 = xPathLexer0.equals();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      token0.toString();
      xPathLexer0.getPreviousToken();
      String string1 = "";
      String string2 = null;
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("[z");
      Token token1 = xPathLexer1.not();
      assertEquals("[", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("z", token2.getTokenText());
      
      xPathLexer0.endPosition();
      xPathLexer1.or();
      Token token3 = xPathLexer1.dots();
      assertEquals(13, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("(=$iGu");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      Token token0 = xPathLexer1.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("(=", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("$", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer2.plus();
      assertEquals(5, token3.getTokenType());
      
      xPathLexer0.div();
      XPathLexer xPathLexer3 = new XPathLexer("].FuZiz7b");
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('_');
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("].FuZiz7b");
      XPathLexer xPathLexer6 = new XPathLexer("(=$iGu");
      boolean boolean1 = xPathLexer2.isIdentifierStartChar('~');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("FCdpJ");
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("FCdpJ");
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.setXPath("xkE,<");
      xPathLexer0.rightParen();
      xPathLexer1.rightBracket();
      xPathLexer1.whitespace();
      xPathLexer1.nextToken();
      xPathLexer0.slashes();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.rightBracket();
      xPathLexer2.consume();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.getPreviousToken();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.star();
      xPathLexer0.rightParen();
      xPathLexer0.dots();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftParen();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("FCdpJ");
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.slashes();
      token0.toString();
      xPathLexer0.div();
      xPathLexer0.setXPath("FCdpJ");
      Token token1 = xPathLexer0.rightBracket();
      token1.toString();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer1 = new XPathLexer("[ (4) (F)");
      xPathLexer0.number();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.whitespace();
      xPathLexer1.star();
      xPathLexer1.consume();
      assertFalse(xPathLexer1.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("4Xi4Y_Z_N\"ZE%l&g].");
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("4Xi4Y_Z_N\"ZE%l&g].");
      xPathLexer1.div();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.leftParen();
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer5.isIdentifierChar('F');
      String string0 = xPathLexer2.getXPath();
      assertEquals("4Xi4Y_Z_N\"ZE%l&g].", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.identifier();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.whitespace();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer1.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (15) ()", string0);
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token3 = xPathLexer1.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer("<.HO)'gcdM5l");
      Token token4 = xPathLexer4.nextToken();
      assertEquals(7, token4.getTokenType());
      assertEquals("<", token4.getTokenText());
      
      Token token5 = xPathLexer4.identifierOrOperatorName();
      assertEquals(".HO", token5.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token6 = xPathLexer2.rightParen();
      assertEquals(2, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer("DRBd(!<'?/d!W287u");
      xPathLexer0.setXPath("DRBd(!<'?/d!W287u");
      xPathLexer1.consume((-1));
      Token token1 = xPathLexer0.rightBracket();
      token1.toString();
      token1.toString();
      XPathLexer xPathLexer2 = new XPathLexer("\"f.o(U;\"u/");
      xPathLexer2.setPreviousToken(token0);
      xPathLexer2.identifierOrOperatorName();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer("mg");
      xPathLexer1.operatorName();
      xPathLexer0.relationalOperator();
      xPathLexer1.leftParen();
      XPathLexer xPathLexer2 = new XPathLexer("&Q%x1F)}%-T=7Tx_xz");
      xPathLexer2.identifierOrOperatorName();
      xPathLexer2.relationalOperator();
      String string0 = ".1YRZz-P_QeTO-qxw";
      XPathLexer xPathLexer3 = new XPathLexer("&Q%x1F)}%-T=7Tx_xz");
      xPathLexer2.colon();
      xPathLexer0.whitespace();
      xPathLexer3.nextToken();
      xPathLexer1.notEquals();
      xPathLexer3.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.getPreviousToken();
      xPathLexer4.identifierOrOperatorName();
      xPathLexer0.and();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = null;
      try {
        xPathLexer6 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*A::>?4jTY|l(");
      xPathLexer0.star();
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(19, token0.getTokenType());
      assertEquals("::", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(">", token1.getTokenText());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals("?", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      assertEquals("4", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.plus();
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer1.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.relationalOperator();
      xPathLexer0.getXPath();
      Token token8 = xPathLexer0.rightBracket();
      assertEquals("T", token8.getTokenText());
      assertEquals(4, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("l+ 'D-k86N1$");
      Token token9 = xPathLexer3.minus();
      assertEquals("l", token9.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer3.star();
      Token token10 = xPathLexer3.comma();
      assertEquals(32, token10.getTokenType());
      assertEquals(" ", token10.getTokenText());
      
      xPathLexer2.mod();
      Token token11 = xPathLexer1.minus();
      assertEquals(6, token11.getTokenType());
      
      Token token12 = xPathLexer3.whitespace();
      assertEquals((-2), token12.getTokenType());
      
      Token token13 = xPathLexer2.at();
      assertEquals(16, token13.getTokenType());
      
      Token token14 = xPathLexer3.star();
      assertEquals("D", token14.getTokenText());
      assertEquals(20, token14.getTokenType());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("DRBd(!<'?/d!W287u");
      xPathLexer0.star();
      xPathLexer0.and();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.notEquals();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer("DRBd(!<'?/d!W287u");
      xPathLexer0.equals();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.or();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.relationalOperator();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.relationalOperator();
      xPathLexer3.identifierOrOperatorName();
      XPathLexer xPathLexer5 = new XPathLexer("DRBd(!<'?/d!W287u");
      xPathLexer3.number();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer2.minus();
      xPathLexer5.rightBracket();
      xPathLexer6.nextToken();
      XPathLexer xPathLexer7 = new XPathLexer("DRBd(!<'?/d!W287u");
      xPathLexer3.number();
      xPathLexer7.at();
      Token token1 = xPathLexer3.div();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "SNZG.}";
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.plus();
      xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8G.5");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.and();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.getPreviousToken();
      xPathLexer1.whitespace();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("G", token1.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("Z.3G'");
      xPathLexer1.or();
      Token token2 = xPathLexer3.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      xPathLexer2.div();
      Token token3 = xPathLexer4.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer4.nextToken();
      assertEquals(31, token4.getTokenType());
      assertEquals(".3", token4.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer1.relationalOperator();
      xPathLexer2.getXPath();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("");
      Token token5 = xPathLexer7.dollar();
      assertEquals(26, token5.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" /aa@]B");
      Token token0 = xPathLexer0.slashes();
      assertEquals(12, token0.getTokenType());
      assertEquals(" /", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("a", token1.getTokenText());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("a@", token2.getTokenText());
  }
}
