/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 21:17:24 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Item;
import wheel.asm.MethodWriter;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1424);
      classWriter0.newUTF8("4&}RcDIxyUur`6Lje");
      // Undeclared exception!
      try { 
        classWriter0.newConst((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(27);
      Long long0 = new Long(27);
      Long.compare((-398L), 4294967295L);
      Long.sum(1, 1);
      classWriter0.newConst(long0);
      String string0 = "Hj>d&GC'Y'@ZH-X";
      classWriter0.newUTF8("Hj>d&GC'Y'@ZH-X");
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("wheel.asm.ClassWriter", "k[`4LX<b=F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: k[`4LX<b=F
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 1399;
      ClassWriter classWriter0 = new ClassWriter(1399);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "SourceDebugExtension";
      stringArray0[1] = "SourceDebugExtension";
      stringArray0[2] = "SourceDebugExtension";
      stringArray0[3] = "SourceDebugExtension";
      stringArray0[4] = "SourceDebugExtension";
      stringArray0[5] = "SourceDebugExtension";
      stringArray0[6] = "SourceDebugExtension";
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(1399, "SourceDebugExtension", "SourceDebugExtension", "SourceDebugExtension", stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3709));
      Item item0 = classWriter0.newFloat((-3709));
      classWriter0.toByteArray();
      Item item1 = classWriter0.newFloat((-3709));
      assertSame(item1, item0);
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.toByteArray();
      Type type0 = Type.getReturnType("By fDI*$5OA=&");
      int int0 = classWriter0.newConst(type0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitField(0, "System", "System", "System", "System");
      Item item0 = classWriter0.newFieldItem("System", "XNuZ9ujXJ6v|xdG$3=", "System");
      classWriter0.newLong(0);
      Item item1 = classWriter0.newConstItem("System");
      assertNotSame(item1, item0);
      
      classWriter0.newFieldItem("System", "d", "XNuZ9ujXJ6v|xdG$3=");
      int int0 = classWriter0.newMethod("kfQ6|aORg(G Tc!", "XNuZ9ujXJ6v|xdG$3=", "XNuZ9ujXJ6v|xdG$3=", false);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newMethodItem("SourceFile", "SourceFile", "SourceFile", false);
      classWriter0.visitSource((String) null, "SourceFile");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1424);
      classWriter0.index = (-562);
      int int0 = classWriter0.newConst("4&}RcDIxyUur`6Lje");
      assertEquals((-561), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3709));
      // Undeclared exception!
      try { 
        classWriter0.newMethod("", (String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3709));
      classWriter0.visitSource("?|8ta", "J1iKgTl]Fc)");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String string0 = "c+$l[&(";
      Item item0 = classWriter0.newLong(0);
      String string1 = "The wildcard array must not be null";
      String string2 = "Yokg:";
      classWriter0.visitSource("The wildcard array must not be null", "Yokg:");
      classWriter0.addUninitializedType("c+$l[&(", 0);
      classWriter0.visitEnd();
      String string3 = "java/lang/Object";
      classWriter0.addType("java/lang/Object");
      classWriter0.addUninitializedType("java/lang/Object", 1);
      Item item1 = new Item();
      item0.next = item1;
      item0.intVal = 1;
      classWriter0.newMethodItem("uSo?4Es;Mwjp0", "java/lang/Object", "Yokg:", true);
      String string4 = "";
      String string5 = "-\"8YkenC";
      // Undeclared exception!
      try { 
        classWriter0.visitField(101, "", "-\"8YkenC", "", item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.Item@6
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(76);
      classWriter0.toByteArray();
      classWriter0.firstMethod = null;
      Item item0 = classWriter0.newFloat(76);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(76);
      String string0 = null;
      classWriter0.toByteArray();
      String string1 = "The FilenameFilter must not be null";
      String string2 = "I8L!\"d<<mvt{,URu]=";
      // Undeclared exception!
      try { 
        classWriter0.newMethodItem((String) null, (String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1858));
      classWriter0.visitOuterClass("J.+{b|uTm|3", (String) null, (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      int int0 = Type.INT;
      classWriter0.toByteArray();
      classWriter0.visit((-1), (-1), "The filter must not be null", (String) null, (String) null, (String[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3375);
      classWriter0.newLong((-1L));
      ClassWriter classWriter1 = new ClassWriter(0);
      MethodWriter methodWriter0 = classWriter1.lastMethod;
      classWriter0.firstMethod = null;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.io.filefilter.EmptyFileFilter";
      stringArray0[1] = "org.apache.commons.io.filefilter.EmptyFileFilter";
      classWriter0.visit((-2551), (-65), ")=]6rDB>=!", ")=]6rDB>=!", "org.apache.commons.io.filefilter.EmptyFileFilter", stringArray0);
      classWriter0.visitOuterClass("$J", "$J", "$J");
      classWriter0.visitOuterClass("$J", "$J", "$J");
      // Undeclared exception!
      try { 
        classWriter0.visit(3375, (-1), (String) null, "org.apache.commons.io.filefilter.EmptyFileFilter", "", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1345));
      classWriter0.visitOuterClass("b]M(K", "short", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-440));
      classWriter0.newInteger((-131));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "The array of prefixes must not be null";
      classWriter0.visit((-440), (-440), "The array of prefixes must not be null", (String) null, (String) null, stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(76);
      Item item0 = classWriter0.newInteger(9);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.newConst(item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.Item@6
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(27);
      classWriter0.threshold = 27;
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("2+&1vD)y3A", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 0;
      ClassWriter classWriter0 = new ClassWriter(0);
      String string0 = null;
      int int1 = 10;
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      String string1 = "";
      classWriter0.visitOuterClass("", "rlcE#b)", (String) null);
      classWriter0.version = 10;
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(10, "rlcE#b)", (String) null, (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("k8^eN", true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "k8^eN";
      stringArray0[1] = "v";
      classWriter0.visit(54, (-1377), "v", "v", "", stringArray0);
      AnnotationVisitor annotationVisitor1 = classWriter0.visitAnnotation("Synthetic", false);
      assertNotSame(annotationVisitor1, annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1034);
      Item[] itemArray0 = new Item[8];
      Item item0 = classWriter0.newMethodItem("", "", "d^ slGRG>X_", false);
      itemArray0[0] = item0;
      Item item1 = classWriter0.newFloat(0);
      itemArray0[1] = item1;
      Item item2 = classWriter0.newInteger(0);
      itemArray0[2] = item2;
      Item item3 = classWriter0.newLong(2158L);
      itemArray0[3] = item3;
      Item item4 = classWriter0.newLong(0L);
      itemArray0[4] = item4;
      Item item5 = classWriter0.newDouble(0.0);
      itemArray0[5] = item5;
      Item item6 = new Item(2, item2);
      itemArray0[6] = item6;
      Item item7 = new Item();
      itemArray0[7] = item7;
      classWriter0.typeTable = itemArray0;
      String[] stringArray0 = new String[0];
      classWriter0.visit((-2088), 0, "", "P!", "", stringArray0);
      classWriter0.newLong(0);
      item5.index = (-2088);
      int int0 = classWriter0.addUninitializedType("jCX2mJEk.'X`l", (-1408));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3004));
      String[] stringArray0 = new String[5];
      stringArray0[1] = "H]rRfzF9'0f]";
      stringArray0[2] = "H]rRfzF9'0f]";
      stringArray0[3] = "";
      stringArray0[4] = "H]rRfzF9'0f]";
      classWriter0.visitInnerClass("H]rRfzF9'0f]", "", "", 0);
      classWriter0.visitInnerClass("Signature", "H]rRfzF9'0f]", "LineNumberTable", 12);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(44);
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, (-42));
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(44, 1178);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1421);
      classWriter0.newField("}RgIp(b", "n|!LljXn!fzz", "The prefix must not be null");
      classWriter0.newNameType("p_bO.h;A65F..<+", "}RgIp(b");
      classWriter0.visitOuterClass(")+u9P,", "p_bO.h;A65F..<+", "}RgIp(b");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3709));
      classWriter0.newFloat(1.0F);
      String string0 = "";
      classWriter0.visitSource((String) null, "fvXyo^#a;W'");
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 12, "O?=7lSA&", (String) null, "Signature", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(33554449);
      classWriter0.newFloat(76);
      Attribute attribute0 = new Attribute("yLSGCZ0");
      classWriter0.visitAttribute(attribute0);
      assertTrue(attribute0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(76);
      classWriter0.toByteArray();
      classWriter0.visit(76, 76, "", "The array of prefixes must not be null", "6K#", (String[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1639));
      classWriter0.newUTF8("");
      classWriter0.newMethodItem("", "", "$zQ3<Zz~$s", false);
      Type type0 = Type.CHAR_TYPE;
      int int0 = classWriter0.newConst(type0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 1424;
      ClassWriter classWriter0 = new ClassWriter(1424);
      classWriter0.visitOuterClass("Wx*FZgAFq +zlpryoey", (String) null, (String) null);
      classWriter0.newFloat(1424);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(10, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 6);
      int int0 = classWriter0.newUTF8("org.apache.commons.io.filefilter.DirectoryFileFilter");
      assertEquals(35, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String string0 = "c+$l[&(";
      Item item0 = classWriter0.newLong(0);
      String string1 = "The wildcard array must not be null";
      String string2 = "Yokg:";
      classWriter0.visitSource("The wildcard array must not be null", "Yokg:");
      classWriter0.threshold = (-560);
      classWriter0.addUninitializedType("c+$l[&(", 0);
      classWriter0.visitEnd();
      String string3 = "java/lang/Object";
      classWriter0.addUninitializedType("java/lang/Object", 1);
      Item item1 = new Item();
      item0.next = item1;
      item0.intVal = 1;
      classWriter0.newMethodItem("uSo?4Es;Mwjp0", "java/lang/Object", "Yokg:", true);
      String string4 = "";
      String string5 = "-\"8YkenC";
      // Undeclared exception!
      try { 
        classWriter0.visitField(101, "", "-\"8YkenC", "", item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.Item@6
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(97);
      classWriter0.addType("");
      classWriter0.threshold = 97;
      classWriter0.toByteArray();
      Item item0 = classWriter0.newFloat(1);
      assertNotNull(item0);
      
      int int0 = classWriter0.addType("");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5954);
      classWriter0.toByteArray();
      Boolean boolean0 = Boolean.TRUE;
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(11);
      String string0 = "Class not found";
      Attribute attribute0 = new Attribute("Class not found");
      classWriter0.visitAttribute(attribute0);
      classWriter0.newConst("Class not found");
      Boolean boolean0 = Boolean.valueOf("The FilenameFilter must not be null");
      classWriter0.newConstItem(boolean0);
      String string1 = "hj.";
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1424);
      Item item0 = classWriter0.newDouble(1424);
      classWriter0.visitSource("&<~u ZxI4}-g%", "&<~u ZxI4}-g%");
      classWriter0.newInteger(1424);
      classWriter0.newInteger(1424);
      Item item1 = classWriter0.newFloat(1424);
      assertNotSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      classWriter0.newMethodItem("SourceFile", "SourceFile", "SourceFile", false);
      byte[] byteArray1 = ClassWriter.TYPE;
      classWriter0.newMethodItem("SourceFile", "SourceFile", "SourceFile", false);
      String[] stringArray0 = new String[0];
      classWriter0.visit((byte) (-1), (-4706), "SourceFile", "SourceFile", "SourceFile", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65535);
      classWriter0.visitSource("&<~u ZxI4}-g%", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.addUninitializedType("@qQarW^)m^CvGU*:I", 0);
      int int0 = classWriter0.addType("m%N,RvF&MF6|<L :");
      assertEquals(2, int0);
      
      classWriter0.toByteArray();
      int int1 = classWriter0.addUninitializedType("@qQarW^)m^CvGU*:I", 0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1372));
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.TrueFileFilter", "org.apache.commons.io.filefilter.TrueFileFilter");
      assertEquals("org.apache.commons.io.filefilter.TrueFileFilter", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.index = 130;
      Item item0 = classWriter0.newFieldItem("", "", "");
      Item item1 = classWriter0.newFieldItem("", "", "");
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(38);
      classWriter0.newField("5`2D", "float", "float");
      classWriter0.newDouble(5);
      classWriter0.toByteArray();
      classWriter0.visitSource("L", "");
      Item item0 = classWriter0.newDouble(5);
      classWriter0.newField("org.apache.commons.io.filefilter.TrueFileFilter", "RuntimeInvisibleParameterAnnotations", "The suffix must not be null");
      Item item1 = classWriter0.newDouble(0);
      assertNotSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = ClassReader.WRITER;
      ClassWriter classWriter0 = new ClassWriter((-1406));
      classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.EmptyFileFilter", "org.apache.commons.io.filefilter.FalseFileFilter");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1406));
      classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.TrueFileFilter", "org.apache.commons.io.filefilter.FalseFileFilter");
      classWriter0.visit((-1406), (-1406), "java/lang/Object", "", "org.apache.commons.io.filefilter.TrueFileFilter", (String[]) null);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((-411), (-853));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1406));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "y-P2g(osB";
      stringArray0[1] = "InnerClasses";
      classWriter0.visit((-1406), (-1406), "InnerClasses", "InnerClasses", "LYrs(J!836%3ZI6q", stringArray0);
      classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.TrueFileFilter", "org.apache.commons.io.filefilter.FalseFileFilter");
      Item item0 = classWriter0.key2;
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }
}
