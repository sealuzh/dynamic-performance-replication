/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:15:25 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.Currency;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.inversion.MatrixInverter;
import org.la4j.iterator.MatrixIterator;
import org.la4j.iterator.RowMajorMatrixIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.VectorMatrixOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = (-133);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int int1 = (-1118);
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(0, (-1118), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-1118
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(10, 10);
      basic1DMatrix0.iterator();
      // Undeclared exception!
      try { 
        basic1DMatrix0.setColumn(2432, (double) 2432);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2432' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(0, 0, doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      denseMatrix0.eachInRow(0, vectorProcedure0);
      MatrixFactory<ColumnMajorSparseMatrix> matrixFactory0 = (MatrixFactory<ColumnMajorSparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        denseMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(0, 0, doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      denseMatrix0.setColumn(2289, 0.0);
      MatrixFactory<ColumnMajorSparseMatrix> matrixFactory0 = (MatrixFactory<ColumnMajorSparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) null, 0, 37);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(0, 0, doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      denseMatrix0.eachInRow(0, vectorProcedure0);
      MockRandom mockRandom0 = new MockRandom(2124L);
      mockRandom0.longs();
      Matrix matrix0 = Matrix.random(0, 1042, mockRandom0);
      denseMatrix0.columnMajorIterator();
      assertEquals(0, denseMatrix0.columns());
      
      double double0 = matrix0.diagonalProduct();
      assertEquals(1.0, double0, 0.01);
      assertEquals(0, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 10);
      Matrix matrix0 = rowMajorSparseMatrix0.removeColumn(7);
      matrix0.columnMajorIterator();
      rowMajorSparseMatrix0.setColumn(10, (double) 0);
      NumberFormat.getPercentInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("TAKEN_FROM_THOSE");
      decimalFormat0.toPattern();
      int int0 = (-1201);
      int int1 = 38;
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) rowMajorSparseMatrix0, (-1201), 38, 10, (-2082));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 10x-2082
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 6;
      int int1 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(6, 0, 0);
      // Undeclared exception!
      try { 
        denseMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new OoPlaceMatricesSubtraction();
      int int0 = 4377;
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      int int1 = 1220;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(4377);
      basic2DMatrix0.iteratorOfColumn((-166));
      DenseVector denseVector0 = DenseVector.constant(0, 2699.93);
      ooPlaceMatrixByVectorMultiplication0.apply(rowMajorSparseMatrix0, denseVector0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertRow(4377, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..4376
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1728.9864987734975;
      doubleArray1[1] = (-1424.6502433);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1728.9864987734975;
      doubleArray2[1] = 1728.9864987734975;
      doubleArray2[2] = (-1424.6502433);
      doubleArray0[1] = doubleArray2;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(2, matrix0.columns());
      assertEquals(2, matrix0.rows());
      assertNotNull(matrix0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.randomSymmetric(Integer.MAX_VALUE, 2.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 17;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(17, 17, 17);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(17, sparseMatrix0.columns());
      assertEquals(17, sparseMatrix0.rows());
      assertNotNull(sparseMatrix0);
      
      DenseMatrix denseMatrix0 = sparseMatrix0.toDenseMatrix();
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(17, sparseMatrix0.columns());
      assertEquals(17, sparseMatrix0.rows());
      assertEquals(17, denseMatrix0.columns());
      assertEquals(17, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      MatrixInverter matrixInverter0 = sparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(17, sparseMatrix0.columns());
      assertEquals(17, sparseMatrix0.rows());
      assertNotNull(matrixInverter0);
      
      int int1 = (-492);
      // Undeclared exception!
      try { 
        sparseMatrix0.isZeroAt((-489), 17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -489
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      assertNotNull(inPlaceCopyMatrixToMatrix0);
      
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(225, 225);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(225, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(225, rowMajorSparseMatrix0.rows());
      assertNotNull(rowMajorSparseMatrix0);
      
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert((Matrix) rowMajorSparseMatrix0, 225, 0, 127, 225);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 127 rows and 225 cols at 225, 0 in a 225x225 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertNotNull(rowMajorSparseMatrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) rowMajorSparseMatrix0, 0, 870, (-1), 127);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -1x127
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("Given matrices should have the same shape: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(0);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.set((-12), (-2585), 1230.8865);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-12' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1228, 1228, 1228);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1228, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(1228, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      
      Object object0 = null;
      // Undeclared exception!
      try { 
        cCSMatrix0.set(1228, 1228, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1228' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      assertNotNull(inPlaceCopyMatrixToMatrix0);
      
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(225, 0.0, (Random) mockRandom0);
      assertEquals(225, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(225, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertNotNull(rowMajorSparseMatrix0);
      
      double double0 = rowMajorSparseMatrix0.norm();
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, double0, 0.01);
      
      SparseMatrix sparseMatrix0 = rowMajorSparseMatrix0.toSparseMatrix();
      assertSame(rowMajorSparseMatrix0, sparseMatrix0);
      assertSame(sparseMatrix0, rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertNotNull(sparseMatrix0);
      
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert((Matrix) columnMajorSparseMatrix0, 225, 0, 225, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 225, 0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, 3264.26429652);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.transform(matrixFunction0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      
      int int1 = 1239;
      int int2 = (-1640);
      double[] doubleArray0 = new double[5];
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.hadamardProduct(columnMajorSparseMatrix0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix1);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, columnMajorSparseMatrix0);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertNotNull(cCSMatrix1);
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertTrue(cCSMatrix1.equals((Object)columnMajorSparseMatrix0));
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      
      // Undeclared exception!
      try { 
        cCSMatrix1.removeColumn(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      Basic1DMatrix basic1DMatrix0 = (Basic1DMatrix)Matrix.from1DArray(0, 0, doubleArray0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(basic1DMatrix0);
      
      double double0 = basic1DMatrix0.product();
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(1.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 10;
      Basic1DMatrix basic1DMatrix1 = (Basic1DMatrix)basic1DMatrix0.multiply(1.0);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix1.rows());
      assertEquals(0, basic1DMatrix1.columns());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(basic1DMatrix1);
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      
      int int1 = (-2899);
      // Undeclared exception!
      try { 
        basic1DMatrix0.ensureIndexesAreInBounds(667, (-2899));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '667' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(0, 3264.55970021155);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.transform(matrixFunction0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertNotNull(cCSMatrix1);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      
      double[] doubleArray0 = new double[5];
      CCSMatrix cCSMatrix2 = (CCSMatrix)cCSMatrix1.hadamardProduct(cCSMatrix0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix2);
      assertNotSame(cCSMatrix1, cCSMatrix2);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertNotSame(cCSMatrix2, cCSMatrix1);
      assertNotSame(cCSMatrix2, cCSMatrix0);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0, cCSMatrix2.columns());
      assertEquals(0.0, cCSMatrix2.max(), 0.01);
      assertEquals(0.0, cCSMatrix2.min(), 0.01);
      assertEquals(0, cCSMatrix2.cardinality());
      assertEquals(Double.NaN, cCSMatrix2.density(), 0.01);
      assertEquals(0, cCSMatrix2.rows());
      assertFalse(cCSMatrix2.isRowMajor());
      assertNotNull(cCSMatrix2);
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix1));
      
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1239, 0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1239, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      Basic1DMatrix basic1DMatrix0 = (Basic1DMatrix)Matrix.from1DArray(1239, 1239, doubleArray0);
      assertEquals(1239, basic1DMatrix0.columns());
      assertEquals(1239, basic1DMatrix0.rows());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(basic1DMatrix0);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic1DMatrix0.each(matrixProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 46;
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.random(46, 46, mockRandom0);
      assertEquals(46, denseMatrix0.rows());
      assertEquals(46, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte) (-108);
      byteArray0[7] = (byte)25;
      byteArray0[8] = (byte)32;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)68, (byte)8, (byte)0, (byte)0, (byte)69, (byte)8, (byte)0, (byte)0, (byte)70}, byteArray0);
      
      // Undeclared exception!
      try { 
        denseMatrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 1337;
      doubleArray0[2] = (double) 1337;
      doubleArray0[3] = (double) 1337;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1337, 1337, doubleArray0);
      assertEquals(1337, denseMatrix0.rows());
      assertEquals(1337, denseMatrix0.columns());
      assertArrayEquals(new double[] {1.0, 1337.0, 1337.0, 1337.0}, doubleArray0, 0.01);
      assertNotNull(denseMatrix0);
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = denseMatrix0.rowMajorIterator();
      assertEquals(1337, denseMatrix0.rows());
      assertEquals(1337, denseMatrix0.columns());
      assertArrayEquals(new double[] {1.0, 1337.0, 1337.0, 1337.0}, doubleArray0, 0.01);
      assertNotNull(rowMajorMatrixIterator0);
      
      // Undeclared exception!
      try { 
        denseMatrix0.determinant();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<Integer> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      assertNotNull(ooPlaceMatrixByVectorMultiplication0);
      
      MockRandom mockRandom0 = new MockRandom((-828L));
      assertNotNull(mockRandom0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(0);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertNotNull(columnMajorSparseMatrix0);
      
      double double0 = columnMajorSparseMatrix0.trace();
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, double0, 0.01);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = columnMajorSparseMatrix0.non(matrixPredicate0);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertTrue(boolean0);
      
      double double1 = columnMajorSparseMatrix0.trace();
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      int int0 = 3;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3, 3);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      int int1 = 7;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(7, (-3476.371108531642));
      assertEquals(7, columnMajorSparseMatrix0.cardinality());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.14285714285714285, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(7, columnMajorSparseMatrix0.rows());
      assertEquals(7, columnMajorSparseMatrix0.columns());
      assertEquals((-3476.371108531642), columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.transform(matrixFunction0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertEquals(7, columnMajorSparseMatrix0.cardinality());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.14285714285714285, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(7, columnMajorSparseMatrix0.rows());
      assertEquals(7, columnMajorSparseMatrix0.columns());
      assertEquals((-3476.371108531642), columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(7, cCSMatrix0.rows());
      assertNotNull(cCSMatrix0);
      assertFalse(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.hadamardProduct(columnMajorSparseMatrix0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix1);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, columnMajorSparseMatrix0);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertEquals(7, columnMajorSparseMatrix0.cardinality());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.14285714285714285, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(7, columnMajorSparseMatrix0.rows());
      assertEquals(7, columnMajorSparseMatrix0.columns());
      assertEquals((-3476.371108531642), columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(7, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(7, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(7, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertNotNull(cCSMatrix1);
      assertFalse(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertFalse(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertFalse(cCSMatrix1.equals((Object)columnMajorSparseMatrix0));
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      
      int int2 = 528;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.removeColumn(528);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..6
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[9];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2992.463958);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-2992.463958);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-2992.463958);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (-2992.463958);
      doubleArray5[1] = (-2992.463958);
      doubleArray5[2] = (-2992.463958);
      doubleArray5[3] = 1.0;
      doubleArray5[5] = (-2992.463958);
      doubleArray5[6] = (-2992.463958);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = Double.NEGATIVE_INFINITY;
      doubleArray6[2] = 1.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray7[0] = Double.NEGATIVE_INFINITY;
      doubleArray7[1] = 1999.39244;
      doubleArray0[6] = doubleArray7;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(7, matrix0.rows());
      assertEquals(9, matrix0.columns());
      assertNotNull(matrix0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertNotNull(decimalFormat0);
      
      // Undeclared exception!
      try { 
        matrix0.toCSV((NumberFormat) decimalFormat0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1228);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(1228, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1228, cCSMatrix0.columns());
      assertEquals(1228, cCSMatrix0.rows());
      assertEquals(8.143322475570033E-4, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1228;
      doubleArray1[1] = (double) 1228;
      doubleArray1[2] = (double) 1228;
      doubleArray1[3] = (double) 1228;
      doubleArray1[4] = (double) 1228;
      doubleArray1[5] = (double) 1228;
      doubleArray1[6] = (double) 1228;
      doubleArray1[7] = (double) 1228;
      doubleArray1[8] = (double) 1228;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertNotNull(decimalFormat0);
      
      DecimalFormat decimalFormat1 = (DecimalFormat)NumberFormat.getIntegerInstance(locale0);
      assertNotSame(decimalFormat1, decimalFormat0);
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertEquals("#,##0", decimalFormat1.toPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertEquals(0, decimalFormat1.getMaximumFractionDigits());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertTrue(decimalFormat1.isParseIntegerOnly());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertEquals("#,##0", decimalFormat1.toLocalizedPattern());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(decimalFormat1);
      assertTrue(decimalFormat1.equals((Object)decimalFormat0));
      
      String string0 = cRSMatrix0.mkString((NumberFormat) decimalFormat0);
      assertNotSame(decimalFormat0, decimalFormat1);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(decimalFormat0.equals((Object)decimalFormat1));
      
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) cRSMatrix0, 2, (-1730), 2169, 1878);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 2, -1730
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3, 3);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertNotNull(rowMajorSparseMatrix0);
      
      int int0 = 37;
      String string0 = rowMajorSparseMatrix0.toString();
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals("0.000 0.000 0.000\n0.000 0.000 0.000\n0.000 0.000 0.000\n", string0);
      assertNotNull(string0);
      
      int int1 = rowMajorSparseMatrix0.columns();
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      assertNotNull(ooPlaceMatrixByVectorMultiplication0);
      
      DenseVector denseVector0 = DenseVector.constant(1220, 100.0);
      assertEquals(1220, denseVector0.length());
      assertNotNull(denseVector0);
      
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insertRow(0, denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 1220. Should be: 3.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.constant(0, 0, (-1.1492090171855787));
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      double double0 = denseMatrix0.maxInRow(0);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      double double1 = denseMatrix0.trace();
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(16, 16);
      assertEquals(16, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(16, columnMajorSparseMatrix0.cardinality());
      assertEquals(16.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(16, columnMajorSparseMatrix0.columns());
      assertEquals(0.0625, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertNotNull(columnMajorSparseMatrix0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(16, 16, 16);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(16, rowMajorSparseMatrix0.rows());
      assertEquals(16, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)columnMajorSparseMatrix0.rotate();
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(16, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(16, columnMajorSparseMatrix0.cardinality());
      assertEquals(16.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(16, columnMajorSparseMatrix0.columns());
      assertEquals(0.0625, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0625, cRSMatrix0.density(), 0.01);
      assertEquals(16, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(16, cRSMatrix0.columns());
      assertEquals(16.0, cRSMatrix0.max(), 0.01);
      assertEquals(16, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.toColumnVector();
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(16, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(16, columnMajorSparseMatrix0.cardinality());
      assertEquals(16.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(16, columnMajorSparseMatrix0.columns());
      assertEquals(0.0625, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0625, cRSMatrix0.density(), 0.01);
      assertEquals(16, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(16, cRSMatrix0.columns());
      assertEquals(16.0, cRSMatrix0.max(), 0.01);
      assertEquals(16, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0625, compressedVector0.density(), 0.01);
      assertEquals(16, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertNotNull(rowMajorSparseMatrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      
      double double0 = cRSMatrix0.trace();
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, double0, 0.01);
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompressedVector compressedVector0 = (CompressedVector)SparseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      MatrixOperation<ColumnMajorSparseMatrix> matrixOperation0 = (MatrixOperation<ColumnMajorSparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      VectorMatrixOperation<ColumnMajorSparseMatrix> vectorMatrixOperation0 = (VectorMatrixOperation<ColumnMajorSparseMatrix>) mock(VectorMatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(matrixOperation0).when(vectorMatrixOperation0).partiallyApply(any(org.la4j.vector.SparseVector.class));
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = compressedVector0.apply(vectorMatrixOperation0, (Matrix) cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertNull(columnMajorSparseMatrix0);
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      
      rowMajorSparseMatrix0.setRow((-190), (Vector) compressedVector0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      
      MockRandom mockRandom0 = new MockRandom(3313L);
      assertNotNull(mockRandom0);
      
      BasicVector basicVector0 = (BasicVector)DenseVector.zero(10);
      assertEquals(10, basicVector0.length());
      assertNotNull(basicVector0);
      
      BasicVector basicVector1 = (BasicVector)basicVector0.copyOfLength(48);
      assertNotSame(basicVector0, basicVector1);
      assertNotSame(basicVector1, basicVector0);
      assertEquals(10, basicVector0.length());
      assertEquals(48, basicVector1.length());
      assertNotNull(basicVector1);
      assertFalse(basicVector1.equals((Object)basicVector0));
      
      double double1 = cRSMatrix0.trace();
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, double1, 0.01);
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.setRow((-766), (double) 2032);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -766
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[6] = (double) 0;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(0, 0, doubleArray0);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(denseMatrix0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.shuffle();
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(matrix0);
      assertTrue(matrix0.equals((Object)denseMatrix0));
      
      denseMatrix0.setRow(0, (-726.35608183257));
      assertNotSame(denseMatrix0, matrix0);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(denseMatrix0.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      int int0 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction1);
      assertFalse(ooPlaceMatricesSubtraction1.equals((Object)ooPlaceMatricesSubtraction0));
      
      int int1 = 4377;
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.zero(4377, 4377);
      assertNotSame(rowMajorSparseMatrix1, rowMajorSparseMatrix0);
      assertTrue(rowMajorSparseMatrix1.isRowMajor());
      assertEquals(4377, rowMajorSparseMatrix1.rows());
      assertEquals(0.0, rowMajorSparseMatrix1.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix1.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix1.cardinality());
      assertEquals(4377, rowMajorSparseMatrix1.columns());
      assertEquals(0.0, rowMajorSparseMatrix1.density(), 0.01);
      assertNotNull(rowMajorSparseMatrix1);
      assertFalse(rowMajorSparseMatrix1.equals((Object)rowMajorSparseMatrix0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 17;
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertNotNull(decimalFormat0);
      
      String string0 = rowMajorSparseMatrix0.mkString((NumberFormat) decimalFormat0);
      assertNotSame(rowMajorSparseMatrix0, rowMajorSparseMatrix1);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(rowMajorSparseMatrix0.equals((Object)rowMajorSparseMatrix1));
      
      doubleArray0[1] = (double) 0;
      doubleArray0[0] = (double) 225;
      doubleArray0[3] = (double) 4377;
      doubleArray0[1] = (double) 225;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix1.insert((Matrix) rowMajorSparseMatrix0, 127, 4, 0, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 0 rows and 4 cols at 0, 0 from a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertNotNull(rowMajorSparseMatrix0);
      
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction1);
      assertFalse(ooPlaceMatricesSubtraction1.equals((Object)ooPlaceMatricesSubtraction0));
      
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.zero(4377, 4377);
      assertNotSame(rowMajorSparseMatrix1, rowMajorSparseMatrix0);
      assertTrue(rowMajorSparseMatrix1.isRowMajor());
      assertEquals(4377, rowMajorSparseMatrix1.rows());
      assertEquals(0.0, rowMajorSparseMatrix1.density(), 0.01);
      assertEquals(4377, rowMajorSparseMatrix1.columns());
      assertEquals(0.0, rowMajorSparseMatrix1.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix1.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix1.cardinality());
      assertNotNull(rowMajorSparseMatrix1);
      assertFalse(rowMajorSparseMatrix1.equals((Object)rowMajorSparseMatrix0));
      
      double[] doubleArray0 = new double[7];
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertNotNull(decimalFormat0);
      
      doubleArray0[1] = (double) 0;
      doubleArray0[0] = (double) 209;
      doubleArray0[3] = (double) 4377;
      doubleArray0[1] = (double) 209;
      rowMajorSparseMatrix1.insert((Matrix) rowMajorSparseMatrix1, 127, 4, 0, 4);
      rowMajorSparseMatrix1.nonZeroIterator();
      rowMajorSparseMatrix1.insert((Matrix) rowMajorSparseMatrix0, 4, 0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction1);
      assertFalse(ooPlaceMatricesSubtraction1.equals((Object)ooPlaceMatricesSubtraction0));
      
      int int0 = 4;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(4, 4);
      assertEquals(4, rowMajorSparseMatrix0.columns());
      assertEquals(4, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      assertNotSame(ooPlaceMatricesSubtraction0, ooPlaceMatricesSubtraction1);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(4, rowMajorSparseMatrix0.columns());
      assertEquals(4, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(4, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      assertFalse(ooPlaceMatricesSubtraction0.equals((Object)ooPlaceMatricesSubtraction1));
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = rowMajorSparseMatrix0.foldRows(vectorAccumulator0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertEquals(4, rowMajorSparseMatrix0.columns());
      assertEquals(4, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(10, 4);
      assertEquals(10, basic1DMatrix0.rows());
      assertEquals(4, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      MatrixIterator matrixIterator0 = basic1DMatrix0.iterator();
      assertEquals(10, basic1DMatrix0.rows());
      assertEquals(4, basic1DMatrix0.columns());
      assertNotNull(matrixIterator0);
      
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.setColumn((-2876), Double.POSITIVE_INFINITY);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-2876' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      int int0 = 24;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(24, 24, (-1.1492090171855787));
      assertEquals(24, denseMatrix0.columns());
      assertEquals(24, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      // Undeclared exception!
      try { 
        denseMatrix0.maxInRow(24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(44, 44);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(44, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(44, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(44, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(44, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(44, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(44, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert((Matrix) cRSMatrix0, (-207), 127, 13, 64);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -207, 127
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.diagonal(19, 388.282506273821);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.05263157894736842, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(19, cRSMatrix0.cardinality());
      assertEquals(19, cRSMatrix0.rows());
      assertEquals(388.282506273821, cRSMatrix0.max(), 0.01);
      assertEquals(19, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.setRow(19, (-2355.642506955501));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 3;
      MockRandom mockRandom0 = new MockRandom(3);
      assertNotNull(mockRandom0);
      
      DenseVector denseVector0 = DenseVector.random(3, mockRandom0);
      assertEquals(3, denseVector0.length());
      assertNotNull(denseVector0);
      
      Vector vector0 = denseVector0.sliceLeft(3);
      assertNotSame(denseVector0, vector0);
      assertNotSame(vector0, denseVector0);
      assertEquals(3, denseVector0.length());
      assertEquals(3, vector0.length());
      assertNotNull(vector0);
      assertTrue(vector0.equals((Object)denseVector0));
      
      Matrix matrix0 = denseVector0.toRowMatrix();
      assertNotSame(denseVector0, vector0);
      assertEquals(3, denseVector0.length());
      assertEquals(3, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertNotNull(matrix0);
      assertTrue(denseVector0.equals((Object)vector0));
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = matrix0.foldColumns(vectorAccumulator0);
      assertNotSame(denseVector0, vector0);
      assertEquals(3, denseVector0.length());
      assertEquals(3, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertTrue(denseVector0.equals((Object)vector0));
      
      // Undeclared exception!
      try { 
        matrix0.setRow(10, (double) 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotNull(rowMajorSparseMatrix0);
      
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction1);
      assertFalse(ooPlaceMatricesSubtraction1.equals((Object)ooPlaceMatricesSubtraction0));
      
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.zero(4377, 4377);
      assertNotSame(rowMajorSparseMatrix1, rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix1.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix1.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix1.max(), 0.01);
      assertTrue(rowMajorSparseMatrix1.isRowMajor());
      assertEquals(4377, rowMajorSparseMatrix1.rows());
      assertEquals(4377, rowMajorSparseMatrix1.columns());
      assertEquals(0.0, rowMajorSparseMatrix1.density(), 0.01);
      assertNotNull(rowMajorSparseMatrix1);
      assertFalse(rowMajorSparseMatrix1.equals((Object)rowMajorSparseMatrix0));
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesSubtraction1.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix0, rowMajorSparseMatrix1);
      assertNotSame(ooPlaceMatricesSubtraction1, ooPlaceMatricesSubtraction0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix1);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      assertFalse(rowMajorSparseMatrix0.equals((Object)rowMajorSparseMatrix1));
      assertFalse(ooPlaceMatricesSubtraction1.equals((Object)ooPlaceMatricesSubtraction0));
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix1));
      
      int int0 = 17;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 17;
      doubleArray0[1] = (double) 0;
      doubleArray0[0] = (double) 225;
      doubleArray0[3] = (double) 4377;
      doubleArray0[4] = (double) 4377;
      doubleArray0[5] = (double) 225;
      doubleArray0[6] = (double) 4377;
      CRSMatrix cRSMatrix1 = (CRSMatrix)SparseMatrix.from1DArray(0, 17, doubleArray0);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix1);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(17, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertArrayEquals(new double[] {225.0, 0.0, 0.0, 4377.0, 4377.0, 225.0, 4377.0}, doubleArray0, 0.01);
      assertNotNull(cRSMatrix1);
      assertFalse(cRSMatrix1.equals((Object)rowMajorSparseMatrix1));
      assertFalse(cRSMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)rowMajorSparseMatrix1.insert((Matrix) cRSMatrix1, 127, 4, 0, 4);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.transformColumn(0, vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1457.0), Double.POSITIVE_INFINITY, 225.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      cRSMatrix2.transformColumn(17, vectorFunction1);
      int int1 = 45;
      cRSMatrix2.swapRows(int1, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3, 3);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotNull(rowMajorSparseMatrix0);
      
      Matrix matrix0 = Matrix.zero(3, 3);
      assertEquals(3, matrix0.columns());
      assertEquals(3, matrix0.rows());
      assertNotNull(matrix0);
      
      int int0 = 37;
      int int1 = rowMajorSparseMatrix0.columns();
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      assertNotNull(ooPlaceMatrixByVectorMultiplication0);
      
      DenseVector denseVector0 = DenseVector.constant(1220, 100.0);
      assertEquals(1220, denseVector0.length());
      assertNotNull(denseVector0);
      
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(rowMajorSparseMatrix0, denseVector0);
      assertNotSame(denseVector0, vector0);
      assertNotSame(vector0, denseVector0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(1220, denseVector0.length());
      assertEquals(3, vector0.length());
      assertNotNull(vector0);
      assertFalse(vector0.equals((Object)denseVector0));
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.insertRow(0, vector0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(denseVector0, vector0);
      assertNotSame(vector0, denseVector0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(1220, denseVector0.length());
      assertEquals(3, vector0.length());
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      assertFalse(denseVector0.equals((Object)vector0));
      assertFalse(vector0.equals((Object)denseVector0));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      
      String string0 = matrix0.toMatrixMarket();
      assertEquals(3, matrix0.columns());
      assertEquals(3, matrix0.rows());
      assertEquals("%%MatrixMarket matrix array real general\n3 3\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n", string0);
      assertNotNull(string0);
      
      CompressedVector compressedVector0 = (CompressedVector)rowMajorSparseMatrix0.getColumn(37);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)matrix0.shuffle();
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertEquals(3, matrix0.columns());
      assertEquals(3, matrix0.rows());
      assertEquals(3, basic2DMatrix0.columns());
      assertEquals(3, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)Matrix.identity(3);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix0);
      assertEquals(3, cRSMatrix1.columns());
      assertEquals(3, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(3, cRSMatrix1.rows());
      assertEquals(0.3333333333333333, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertNotNull(cRSMatrix1);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix1.equals((Object)rowMajorSparseMatrix0));
      
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.setRow(37, (-1268.71));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 37
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction1);
      assertFalse(ooPlaceMatricesSubtraction1.equals((Object)ooPlaceMatricesSubtraction0));
      
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.zero(32, 8);
      assertNotSame(rowMajorSparseMatrix1, rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix1.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix1.min(), 0.01);
      assertEquals(32, rowMajorSparseMatrix1.rows());
      assertEquals(8, rowMajorSparseMatrix1.columns());
      assertEquals(0, rowMajorSparseMatrix1.cardinality());
      assertTrue(rowMajorSparseMatrix1.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix1.max(), 0.01);
      assertNotNull(rowMajorSparseMatrix1);
      assertFalse(rowMajorSparseMatrix1.equals((Object)rowMajorSparseMatrix0));
      
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction2 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction2);
      assertFalse(ooPlaceMatricesSubtraction2.equals((Object)ooPlaceMatricesSubtraction0));
      assertFalse(ooPlaceMatricesSubtraction2.equals((Object)ooPlaceMatricesSubtraction1));
      
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 8);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(8, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix1));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)ooPlaceMatricesSubtraction2.applySimple((SparseMatrix) rowMajorSparseMatrix1, (SparseMatrix) cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix1, rowMajorSparseMatrix0);
      assertNotSame(rowMajorSparseMatrix1, cRSMatrix1);
      assertNotSame(rowMajorSparseMatrix1, cRSMatrix0);
      assertNotSame(ooPlaceMatricesSubtraction2, ooPlaceMatricesSubtraction0);
      assertNotSame(ooPlaceMatricesSubtraction2, ooPlaceMatricesSubtraction1);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix1);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix1);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix1.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix1.min(), 0.01);
      assertEquals(32, rowMajorSparseMatrix1.rows());
      assertEquals(8, rowMajorSparseMatrix1.columns());
      assertEquals(0, rowMajorSparseMatrix1.cardinality());
      assertTrue(rowMajorSparseMatrix1.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(8, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(8, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(32, cRSMatrix1.rows());
      assertNotNull(cRSMatrix1);
      assertFalse(rowMajorSparseMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertFalse(rowMajorSparseMatrix1.equals((Object)cRSMatrix0));
      assertFalse(ooPlaceMatricesSubtraction2.equals((Object)ooPlaceMatricesSubtraction0));
      assertFalse(ooPlaceMatricesSubtraction2.equals((Object)ooPlaceMatricesSubtraction1));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix1));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.equals((Object)rowMajorSparseMatrix1));
      assertFalse(cRSMatrix1.equals((Object)rowMajorSparseMatrix0));
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.transformColumn((-1088), vectorFunction0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix1);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix2, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, rowMajorSparseMatrix1);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(8, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(8, cRSMatrix2.columns());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertNotNull(cRSMatrix2);
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix1));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)rowMajorSparseMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)rowMajorSparseMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.swapRows(7, 17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3, 3);
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      assertNotNull(ooPlaceMatrixHadamardProduct0);
      
      Matrix matrix0 = Matrix.zero(3, 18);
      assertEquals(18, matrix0.columns());
      assertEquals(3, matrix0.rows());
      assertNotNull(matrix0);
      
      int int0 = (-2770);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(3);
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.cardinality());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.3333333333333333, columnMajorSparseMatrix0.density(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.minInRow(37);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '37' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3, 3);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertNotNull(rowMajorSparseMatrix0);
      
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.zero(3, 3);
      assertNotSame(rowMajorSparseMatrix1, rowMajorSparseMatrix0);
      assertEquals(3, rowMajorSparseMatrix1.columns());
      assertEquals(0.0, rowMajorSparseMatrix1.density(), 0.01);
      assertEquals(3, rowMajorSparseMatrix1.rows());
      assertTrue(rowMajorSparseMatrix1.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix1.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix1.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix1.cardinality());
      assertNotNull(rowMajorSparseMatrix1);
      assertTrue(rowMajorSparseMatrix1.equals((Object)rowMajorSparseMatrix0));
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix0, rowMajorSparseMatrix1);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix1);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      assertTrue(rowMajorSparseMatrix0.equals((Object)rowMajorSparseMatrix1));
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix1));
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      
      double double0 = rowMajorSparseMatrix1.sum();
      assertNotSame(rowMajorSparseMatrix1, rowMajorSparseMatrix0);
      assertNotSame(rowMajorSparseMatrix1, cRSMatrix0);
      assertEquals(3, rowMajorSparseMatrix1.columns());
      assertEquals(0.0, rowMajorSparseMatrix1.density(), 0.01);
      assertEquals(3, rowMajorSparseMatrix1.rows());
      assertTrue(rowMajorSparseMatrix1.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix1.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix1.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix1.cardinality());
      assertEquals(0.0, double0, 0.01);
      assertTrue(rowMajorSparseMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertTrue(rowMajorSparseMatrix1.equals((Object)cRSMatrix0));
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = rowMajorSparseMatrix1.foldRows(vectorAccumulator0);
      assertNotSame(rowMajorSparseMatrix1, rowMajorSparseMatrix0);
      assertNotSame(rowMajorSparseMatrix1, cRSMatrix0);
      assertEquals(3, rowMajorSparseMatrix1.columns());
      assertEquals(0.0, rowMajorSparseMatrix1.density(), 0.01);
      assertEquals(3, rowMajorSparseMatrix1.rows());
      assertTrue(rowMajorSparseMatrix1.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix1.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix1.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix1.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertTrue(rowMajorSparseMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertTrue(rowMajorSparseMatrix1.equals((Object)cRSMatrix0));
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(10, 32);
      assertEquals(10, basic1DMatrix0.rows());
      assertEquals(32, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      MatrixIterator matrixIterator0 = rowMajorSparseMatrix0.iterator();
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix0, rowMajorSparseMatrix1);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertNotNull(matrixIterator0);
      assertTrue(rowMajorSparseMatrix0.equals((Object)rowMajorSparseMatrix1));
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      
      int int0 = 2432;
      // Undeclared exception!
      try { 
        cRSMatrix0.setColumn(32, (-2154.46278));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '32' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.constant(0, 0, (-1.1492090171855787));
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      double double0 = denseMatrix0.maxInRow(0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      double double1 = denseMatrix0.trace();
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      Matrix matrix0 = denseMatrix0.divide(0.0);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
      assertTrue(matrix0.equals((Object)denseMatrix0));
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = denseMatrix0.foldRows(vectorAccumulator0);
      assertNotSame(denseMatrix0, matrix0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertTrue(denseMatrix0.equals((Object)matrix0));
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(0);
      assertNotSame(basic2DMatrix0, denseMatrix0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertTrue(basic2DMatrix0.equals((Object)denseMatrix0));
      
      int int0 = 1940;
      // Undeclared exception!
      try { 
        Matrix.zero(1940, (-1593));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("0.000");
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfRows(1091);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1091, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(1, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertNotNull(cRSMatrix1);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow(10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 26;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(26, 26);
      int int1 = 0;
      rowMajorSparseMatrix0.toRowMajorSparseMatrix();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Basic1DMatrix.randomSymmetric((-41), mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -41x-41
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3, 3);
      Matrix matrix0 = Matrix.zero(3, 3);
      rowMajorSparseMatrix0.toString();
      rowMajorSparseMatrix0.columns();
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("0.000 0.000 0.000\n0.000 0.000 0.000\n0.000 0.000 0.000\n");
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        cRSMatrix0.insert(matrix0, 708, 1239, 3, 1000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 708, 1239
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 4;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(4, 4, 4);
      int int1 = 24;
      ColumnMajorSparseMatrix.diagonal(24, (-966.0));
      int int2 = 8;
      // Undeclared exception!
      try { 
        cCSMatrix0.sliceBottomRight(8, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [8..4][4..4].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 26;
      int int1 = 26;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(26, 26);
      int int2 = 8;
      Matrix matrix0 = Matrix.zero(8, 26);
      rowMajorSparseMatrix0.columns();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      int int3 = 1220;
      rowMajorSparseMatrix0.toMatrixMarket();
      rowMajorSparseMatrix0.equals(matrix0, Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.sliceTopLeft(26, (-343));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..26][0..-343].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1228, 1228, 1228);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(1228);
      Matrix matrix0 = basic2DMatrix0.sliceTopLeft(1228, 2);
      int int0 = 127;
      MatrixFactory<RowMajorSparseMatrix> matrixFactory0 = (MatrixFactory<RowMajorSparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      basic2DMatrix0.to(matrixFactory0);
      cCSMatrix0.iterator();
      long long0 = (-1L);
      MockRandom mockRandom0 = new MockRandom(long0);
      int int1 = 9;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(int1, mockRandom0);
      basic1DMatrix0.toDenseMatrix();
      basic2DMatrix0.equals((Object) matrix0);
      MatrixOperation<String> matrixOperation0 = null;
      String string0 = "mBgxi\"[";
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.fromCSV(string0);
      basic2DMatrix1.apply(matrixOperation0);
      byte[] byteArray0 = new byte[0];
      CRSMatrix cRSMatrix0 = CRSMatrix.fromBinary(byteArray0);
      cRSMatrix0.copyOfColumns(int0);
      MatrixProcedure matrixProcedure0 = null;
      cCSMatrix0.each(matrixProcedure0);
      double double0 = 1.0;
      basic2DMatrix1.setAll(double0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(3, 3);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      int int0 = 1220;
      DenseVector.constant(1220, 100.0);
      matrix0.toMatrixMarket();
      matrix0.shuffle();
      Matrix.identity(3);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = matrix0.toRowMajorSparseMatrix();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.minInColumn(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new OoPlaceMatricesSubtraction();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[0] = (double) 225;
      doubleArray0[3] = (double) 4377;
      doubleArray0[4] = (double) 4377;
      doubleArray0[5] = (double) 225;
      doubleArray0[6] = (double) 4377;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(0, 0, doubleArray0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert((Matrix) sparseMatrix0, 4377, (-2701), 1368, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 4377, -2701
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 201;
      int int1 = 17;
      Matrix matrix0 = Matrix.zero(201, 17);
      Matrix matrix1 = null;
      Matrix matrix2 = matrix0.insert((Matrix) null);
      matrix2.iterator();
      Matrix matrix3 = Matrix.identity(int0);
      matrix3.rowMajorIterator();
      matrix3.transpose();
      matrix2.manhattanNorm();
      matrix3.kroneckerProduct(matrix1);
      int int2 = 62;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int2;
      Matrix.from1DArray(int2, int1, doubleArray0);
      double double0 = matrix0.min();
      matrix0.hashCode();
      matrix0.setAll(double0);
      MatrixOperation<Double> matrixOperation0 = (MatrixOperation<Double>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      matrix2.apply(matrixOperation0);
      int int3 = 848;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix2.updateColumn(int3, vectorFunction0);
      Matrix.identity(int1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix2.foldRows(vectorAccumulator0);
      SparseVector sparseVector0 = SparseVector.zero(int0);
      matrix3.setColumn(int1, (Vector) sparseVector0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.fold(matrixAccumulator0);
      Matrix.identity(int3);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix3.updateColumn(int3, vectorFunction1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(4377, 4377);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 17;
      doubleArray0[0] = (double) 225;
      doubleArray0[3] = (double) 4377;
      doubleArray0[4] = (double) 4377;
      doubleArray0[5] = (double) 225;
      doubleArray0[6] = (double) 4377;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(0, 17, doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.transformColumn(0, vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.transformColumn((-1005), vectorFunction1);
      rowMajorSparseMatrix0.swapRows(3330, 3330);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      int int1 = 225;
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new OoPlaceMatricesSubtraction();
      int int2 = 4377;
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.zero(4377, 4377);
      int int3 = 0;
      int int4 = 17;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 225;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      rowMajorSparseMatrix0.mkString(numberFormat0);
      doubleArray0[1] = (double) 0;
      doubleArray0[0] = (double) 225;
      doubleArray0[3] = (double) 4377;
      doubleArray0[1] = (double) 225;
      doubleArray0[6] = (double) 4377;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(0, 17, doubleArray0);
      int int5 = 4;
      rowMajorSparseMatrix1.insert((Matrix) sparseMatrix0, 127, 4, 0, 4);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      cRSMatrix0.toString();
      sparseMatrix0.toRowVector();
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.determinant();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(int0);
      basic2DMatrix0.updateRow(int5, vectorFunction0);
      basic2DMatrix0.sliceTopLeft(int3, int0);
      int int6 = 8;
      Basic2DMatrix.constant(int2, int4, doubleArray0[1]);
      cRSMatrix0.insert((Matrix) rowMajorSparseMatrix0, int1, int5, int6, int0);
      int int7 = 0;
      sparseMatrix0.maxInRow(int7);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3565;
      doubleArray0[1] = (double) 3565;
      doubleArray0[2] = (double) 633;
      doubleArray0[3] = (double) 633;
      doubleArray0[4] = (double) 633;
      doubleArray0[5] = (double) 633;
      doubleArray0[6] = (double) 3565;
      doubleArray0[7] = (double) 633;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1374, 1374);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      rowMajorSparseMatrix0.insert(matrix0, 0, 1374, 3565, (-393));
      rowMajorSparseMatrix0.max();
      int int0 = 8;
      matrix0.copyOfRows(int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      int int0 = 0;
      Matrix matrix0 = basic1DMatrix0.blankOfColumns(0);
      int int1 = 650;
      Matrix.diagonal(650, 1284.4584);
      matrix0.max();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 132.0;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 1284.4584;
      Vector vector0 = Vector.fromArray(doubleArray0);
      SparseVector sparseVector0 = vector0.toSparseVector();
      Vector vector1 = ooPlaceMatrixByVectorMultiplication0.apply((DenseMatrix) basic1DMatrix0, sparseVector0);
      Vector vector2 = vector1.add(vector0);
      matrix0.insertColumn(int1, vector2);
      Matrix.constant(int1, int0, int0);
      double double0 = matrix0.trace();
      matrix0.add(double0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1132L);
      Matrix matrix0 = Matrix.randomSymmetric(3, mockRandom0);
      // Undeclared exception!
      try { 
        matrix0.toMatrixMarket((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 0;
      int int1 = 13;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(13, 10, 13);
      Matrix matrix0 = Matrix.zero(0, 13);
      int int2 = 37;
      rowMajorSparseMatrix0.toString();
      rowMajorSparseMatrix0.columns();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      int int3 = 1220;
      DenseVector denseVector0 = DenseVector.constant(13, 0.0);
      ooPlaceMatrixByVectorMultiplication0.apply(rowMajorSparseMatrix0, denseVector0);
      int int4 = (-509);
      // Undeclared exception!
      try { 
        matrix0.insertRow((-509), denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      int int0 = 225;
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new OoPlaceMatricesSubtraction();
      int int1 = 4377;
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.zero(4377, 4377);
      int int2 = 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 17;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      rowMajorSparseMatrix0.mkString(numberFormat0);
      doubleArray0[1] = (double) 0;
      doubleArray0[0] = (double) 225;
      doubleArray0[3] = (double) 4377;
      doubleArray0[4] = (double) 4377;
      int int3 = 4;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix1.insert((Matrix) rowMajorSparseMatrix0, 0, 4, 225, 4377);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 225 rows and 4377 cols at 0, 4 in a 4377x4377 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(21, 26);
      NumberFormat.getPercentInstance();
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(21, 127);
      cRSMatrix0.toMatrixMarket();
      rowMajorSparseMatrix0.equals((Matrix) cRSMatrix0, (double) 21);
      int int0 = 3;
      // Undeclared exception!
      try { 
        SparseMatrix.from1DArray((-22583480), 26, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -22583480x26
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 10;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 10);
      Matrix matrix0 = rowMajorSparseMatrix0.removeColumn(4);
      matrix0.columnMajorIterator();
      rowMajorSparseMatrix0.setColumn(10, (double) 0);
      CRSMatrix cRSMatrix0 = new CRSMatrix(4, 0);
      matrix0.trace();
      Vector vector0 = matrix0.toColumnVector();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(4, 0.0);
      matrix0.iteratorOfRow(0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)4, (double)10, 0.0, (-4322.9)).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = denseMatrix0.foldRows(vectorAccumulator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector.fromCollection(linkedList0);
      int int1 = 1222;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(1222, 4, doubleArray0);
      int int2 = 13;
      // Undeclared exception!
      try { 
        basic1DMatrix0.setRow(1242, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 4.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(0, 0, (-1.0));
      denseMatrix0.maxInRow(0);
      int int0 = 3482;
      double double0 = new Integer(0);
      Matrix matrix0 = denseMatrix0.divide(0.0);
      denseMatrix0.iteratorOfRow(0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      denseMatrix0.foldRows(vectorAccumulator0);
      denseMatrix0.multiply(matrix0);
      denseMatrix0.insert(matrix0, 0, 0, 0, 0);
      MockRandom mockRandom0 = new MockRandom(1545L);
      // Undeclared exception!
      try { 
        Basic1DMatrix.random(2734, (-1179), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      // Undeclared exception!
      try { 
        basic1DMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 2;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2, 10);
      int int1 = 7;
      Matrix matrix0 = rowMajorSparseMatrix0.removeColumn(7);
      matrix0.columnMajorIterator();
      matrix0.transpose();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.setColumn(10, (double) 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 212;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(212, 0);
      Matrix matrix0 = denseMatrix0.transpose();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      denseMatrix0.transformRow(212, vectorFunction0);
      // Undeclared exception!
      try { 
        matrix0.slice(212, 2, 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [212..1][2..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(26, 26);
      DenseVector.constant(17, 17);
      rowMajorSparseMatrix0.toMatrixMarket();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general row-major\n26 26 0\n");
      Matrix.identity(220);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.transformRow(220, vectorFunction0);
      int int0 = 851;
      int int1 = (-957);
      basic2DMatrix0.iteratorOfColumn(int1);
      int int2 = 2369;
      DenseVector denseVector0 = DenseVector.constant(int0, int2);
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      int int3 = 4;
      Basic2DMatrix.unit(int0, int3);
      int int4 = 631;
      Matrix matrix0 = denseVector0.toColumnMatrix();
      int int5 = (-1792188097);
      basic1DMatrix0.insert(matrix0, int5, int4);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.zero(4377, 4377);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 17;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      rowMajorSparseMatrix0.mkString(numberFormat0);
      doubleArray0[1] = (double) 0;
      doubleArray0[0] = (double) 209;
      doubleArray0[3] = (double) 4377;
      doubleArray0[1] = (double) 209;
      doubleArray0[6] = (double) 4377;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(0, 17, doubleArray0);
      rowMajorSparseMatrix1.insert((Matrix) sparseMatrix0, 127, 4, 0, 4);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.determinant();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(0);
      basic2DMatrix0.updateRow(4, vectorFunction0);
      Matrix matrix0 = basic2DMatrix0.sliceTopLeft(0, 0);
      cRSMatrix0.subtract(Double.NEGATIVE_INFINITY);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix0.non(advancedMatrixPredicate0);
      sparseMatrix0.maxInRow(0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3, 3);
      Matrix matrix0 = Matrix.zero(3, 3);
      rowMajorSparseMatrix0.toString();
      rowMajorSparseMatrix0.columns();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseVector denseVector0 = DenseVector.constant(1220, 100.0);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(rowMajorSparseMatrix0, denseVector0);
      rowMajorSparseMatrix0.insertRow(0, vector0);
      matrix0.toMatrixMarket();
      rowMajorSparseMatrix0.getColumn(37);
      matrix0.shuffle();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(37);
      basic1DMatrix0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 26;
      CRSMatrix cRSMatrix0 = new CRSMatrix(26, 26, 26);
      NumberFormat.getPercentInstance();
      Matrix matrix0 = Matrix.constant(26, 26, 1674.0);
      int int1 = 2172;
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(2172, 354.6935);
      cRSMatrix0.toMatrixMarket();
      cRSMatrix0.equals((Matrix) cRSMatrix1, 354.6935);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int2 = (-793);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) cRSMatrix0, 26, 26, (-793), 26);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -793x26
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3, 3);
      Matrix matrix0 = Matrix.zero(3, 3);
      int int0 = 37;
      rowMajorSparseMatrix0.columns();
      int int1 = 0;
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseVector.constant(1220, 100.0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) rowMajorSparseMatrix0, 0, 37, 37, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 0, 37
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      matrix0.multiplyByItsTranspose();
      matrix0.setAll((-1408.257615028));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(225, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.transpose();
      matrix0.toMatrixMarket();
      Matrix.identity(37);
      int int0 = (-1763);
      denseMatrix0.add(0.0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(37, 2239, (double) 2239, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(0, 0);
      basic1DMatrix0.copyOfColumns(0);
      int int0 = 17;
      int int1 = 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(0, 0, doubleArray0);
      int int2 = (-677);
      int int3 = 17;
      // Undeclared exception!
      try { 
        basic1DMatrix0.insert((Matrix) sparseMatrix0, (-677), 10, 17, 17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -677, 10
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(0, 0, doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      denseMatrix0.eachInRow(0, vectorProcedure0);
      ((Basic1DMatrix) denseMatrix0).blankOfShape(3, 6);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(3);
      columnMajorSparseMatrix0.trace();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.non((MatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector.fromCollection(linkedList0);
      MockRandom mockRandom0 = new MockRandom(5850L);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(32, 236, mockRandom0);
      basic1DMatrix0.columnMajorIterator();
      basic1DMatrix0.diagonalProduct();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.zero(4377, 4377);
      Matrix matrix0 = ooPlaceMatricesSubtraction1.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      matrix0.rotate();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 17;
      doubleArray0[1] = (double) 0;
      doubleArray0[0] = (double) 225;
      doubleArray0[3] = (double) 4377;
      doubleArray0[4] = (double) 4377;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(0, 17, doubleArray0);
      rowMajorSparseMatrix1.insert((Matrix) sparseMatrix0, 127, 4, 0, 4);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.columnMajorIterator();
      matrix0.diagonalProduct();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix1.eachInRow(1049, vectorProcedure0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      rowMajorSparseMatrix1.non(matrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(0, 0, doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      denseMatrix0.eachInRow(0, vectorProcedure0);
      int int1 = 6;
      ((Basic1DMatrix) denseMatrix0).blankOfShape(3, 6);
      int int2 = 5027;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(0, 5027, doubleArray0);
      // Undeclared exception!
      try { 
        sparseMatrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix.identity(0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new OoPlaceMatricesSubtraction();
      int int0 = 4377;
      int int1 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero(209, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new OoPlaceMatricesSubtraction();
      int int0 = 4377;
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.zero(4377, 4377);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 17;
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      Currency currency0 = decimalFormatSymbols0.getCurrency();
      decimalFormat0.setCurrency(currency0);
      decimalFormat0.toPattern();
      rowMajorSparseMatrix0.mkString("#,##0%", "#,##0%");
      ((CRSMatrix) rowMajorSparseMatrix1).toBinary();
      doubleArray0[1] = (double) 0;
      doubleArray0[0] = (double) 0;
      doubleArray0[3] = (double) 4377;
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix1.insert((Matrix) rowMajorSparseMatrix0, 127, 0, 0, 0);
      int int1 = 25;
      int int2 = 151;
      int int3 = 22;
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CRSMatrix cRSMatrix1 = (CRSMatrix)inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) cRSMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      Matrix.block(rowMajorSparseMatrix0, cRSMatrix0, (Matrix) null, cRSMatrix1);
      rowMajorSparseMatrix0.slice(int1, int2, int3, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.zero(4377, 4377);
      rowMajorSparseMatrix1.columns();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.zero(4377, 4377);
      int int1 = (-22);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 17;
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      decimalFormat0.toPattern();
      rowMajorSparseMatrix0.mkString("#,##0%", "#,##0%");
      doubleArray0[1] = (double) 0;
      doubleArray0[0] = (double) 225;
      doubleArray0[3] = (double) 4377;
      doubleArray0[4] = (double) 17;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix1.insert((Matrix) rowMajorSparseMatrix0, 127, 4, 0, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 0 rows and 4 cols at 0, 0 from a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix.zero(4377, 4377);
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 17;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      rowMajorSparseMatrix0.mkString(numberFormat0);
      doubleArray0[1] = (double) 0;
      doubleArray0[0] = (double) 0;
      doubleArray0[3] = (double) 4377;
      doubleArray0[1] = (double) 0;
      doubleArray0[6] = (double) 4377;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(0, 17, doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.eachInColumn((-4068), vectorProcedure0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.foldRows(vectorAccumulator0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.updateAt(3, 32, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 22;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(22, 22, 22);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(22);
      String string0 = cRSMatrix0.toString();
      cRSMatrix0.columns();
      int int1 = 1239;
      int int2 = 1904;
      CRSMatrix cRSMatrix1 = CRSMatrix.fromCSV(string0);
      MockRandom mockRandom0 = new MockRandom();
      int int3 = 661;
      // Undeclared exception!
      try { 
        cRSMatrix1.insert((Matrix) basic2DMatrix0, 661, 1239, 22, 1904);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 661, 1239
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.zero(4377, 4377);
      Matrix matrix0 = ooPlaceMatricesSubtraction1.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      matrix0.rotate();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 17;
      doubleArray0[1] = (double) 0;
      doubleArray0[0] = (double) 225;
      doubleArray0[3] = (double) 4377;
      doubleArray0[4] = (double) 4377;
      doubleArray0[5] = (double) 225;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(0, 17, doubleArray0);
      rowMajorSparseMatrix1.insert((Matrix) sparseMatrix0, 127, 4, 0, 4);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.transformColumn(0, vectorFunction0);
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix.randomSymmetric(0, (double) 225, (Random) mockRandom0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.columnMajorIterator();
      matrix0.diagonalProduct();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.non(matrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(4377, 4377);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 17;
      NumberFormat.getPercentInstance();
      doubleArray0[0] = (double) 225;
      doubleArray0[3] = (double) 4377;
      doubleArray0[4] = (double) 4377;
      doubleArray0[1] = (double) 225;
      doubleArray0[6] = (double) 4377;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.toColumnMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(0, 0, (-1.1492090171855787));
      denseMatrix0.maxInRow(0);
      double double0 = new Integer(0);
      Matrix matrix0 = denseMatrix0.divide(0.0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(17);
      linkedList0.add((Integer) null);
      Integer integer1 = new Integer(0);
      linkedList0.add(integer1);
      CRSMatrix.identity(1120);
      matrix0.power(0);
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 372;
      // Undeclared exception!
      Basic1DMatrix.randomSymmetric(372, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new OoPlaceMatricesSubtraction();
      int int0 = 4377;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(4377, 4377);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 17;
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      Currency currency0 = decimalFormatSymbols0.getCurrency();
      decimalFormat0.setCurrency(currency0);
      decimalFormat0.toPattern();
      String string0 = cRSMatrix0.mkString("#,##0%", "#,##0%");
      ((CRSMatrix) rowMajorSparseMatrix0).toBinary();
      doubleArray0[1] = (double) 0;
      doubleArray0[0] = (double) 0;
      doubleArray0[0] = (double) 4377;
      CRSMatrix cRSMatrix1 = (CRSMatrix)rowMajorSparseMatrix0.insert((Matrix) cRSMatrix0, 127, 0, 0, 0);
      int int1 = 25;
      cRSMatrix1.add((Matrix) cRSMatrix0);
      int int2 = 151;
      int int3 = 22;
      RowMajorSparseMatrix.fromCSV(string0);
      Matrix matrix0 = null;
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CRSMatrix cRSMatrix2 = (CRSMatrix)inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) cRSMatrix1, (SparseMatrix) cRSMatrix0);
      Matrix.block(cRSMatrix0, cRSMatrix1, matrix0, cRSMatrix2);
      cRSMatrix0.slice(int1, int2, int3, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(225, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)denseMatrix0.transpose();
      basic2DMatrix0.toMatrixMarket();
      Basic2DMatrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n0 0\n");
      int int0 = 37;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BasicVector basicVector0 = (BasicVector)DenseVector.fromCollection(linkedList0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      BasicVector basicVector1 = (BasicVector)ooPlaceVectorByMatrixMultiplication0.apply((DenseVector) basicVector0, (DenseMatrix) basic2DMatrix0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      BasicVector basicVector2 = (BasicVector)basicVector1.transform(vectorFunction0);
      MockRandom mockRandom0 = new MockRandom();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(8, mockRandom0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.multiply((Vector) basicVector2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 0 does not equal to 8.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      int int1 = 225;
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix.zero(4377, 4377);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 17;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      rowMajorSparseMatrix0.manhattanNorm();
      rowMajorSparseMatrix0.mkString(numberFormat0);
      doubleArray0[1] = (double) 0;
      doubleArray0[0] = (double) 225;
      doubleArray0[3] = (double) 4377;
      doubleArray0[1] = (double) 225;
      doubleArray0[6] = (double) 4377;
      MockRandom mockRandom0 = new MockRandom((-2235));
      Basic1DMatrix.random(4, 225, mockRandom0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.randomSymmetric(3023, (double) 225, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 9138529.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 3;
      RowMajorSparseMatrix.zero(3, 3, 3);
      double double0 = Double.NEGATIVE_INFINITY;
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 3;
      doubleArray2[1] = (-2992.463958);
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = 1999.39244;
      doubleArray2[4] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (-3749.080175689754);
      doubleArray3[1] = 1.0;
      doubleArray3[2] = (double) 3;
      doubleArray3[3] = (double) 3;
      doubleArray3[4] = (double) 3;
      doubleArray3[5] = Double.NEGATIVE_INFINITY;
      doubleArray3[6] = (-3749.080175689754);
      doubleArray0[2] = doubleArray3;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SEIDEL;
      // Undeclared exception!
      try { 
        matrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 26;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(16, 26);
      int int1 = 0;
      int int2 = 127;
      int int3 = 17;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      Locale locale0 = Locale.FRENCH;
      NumberFormat.getCurrencyInstance(locale0);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(16, 127);
      cRSMatrix0.mkString(numberFormat0);
      int int4 = 1227;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert((Matrix) cRSMatrix0, 17, 26, 0, 17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 17, 26
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 3;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3, 3);
      Matrix matrix0 = Matrix.zero(3, 3);
      int int1 = Double.MIN_EXPONENT;
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      int int2 = (-5050);
      matrix0.toMatrixMarket();
      rowMajorSparseMatrix0.equals(matrix0, 0.0);
      int int3 = (-2235);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.sliceTopLeft((-2235), 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-2235][0..3].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      int int0 = 209;
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.zero(4377, 4377);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 17;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      rowMajorSparseMatrix0.mkString(numberFormat0);
      doubleArray0[1] = (double) 0;
      doubleArray0[0] = (double) 209;
      doubleArray0[3] = (double) 4377;
      doubleArray0[1] = (double) 209;
      doubleArray0[6] = (double) 4377;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(0, 17, doubleArray0);
      int int1 = 4;
      rowMajorSparseMatrix1.insert((Matrix) sparseMatrix0, 127, 4, 0, 4);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.determinant();
      cRSMatrix0.rank();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(0);
      basic2DMatrix0.updateRow(4, vectorFunction0);
      MockRandom mockRandom0 = new MockRandom(11);
      DenseVector denseVector0 = DenseVector.random((-61), mockRandom0);
      int int2 = 1454;
      Vector vector0 = denseVector0.copyOfLength(int2);
      vector0.toString();
      denseVector0.hadamardProduct(vector0);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(int1, int0);
      basic1DMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.zero(4377, 4377);
      int int1 = (-22);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 17;
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_QR;
      rowMajorSparseMatrix1.withDecompositor(linearAlgebra_DecompositorFactory0);
      decimalFormat0.toPattern();
      rowMajorSparseMatrix0.mkString("#,##0%", "#,##0%");
      doubleArray0[1] = (double) 0;
      doubleArray0[0] = (double) 185;
      doubleArray0[3] = (double) 4377;
      doubleArray0[4] = (double) 17;
      rowMajorSparseMatrix0.updateColumn(0, (VectorFunction) null);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix1.insert((Matrix) rowMajorSparseMatrix0, 127, 10, 0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 0 rows and 10 cols at 0, 0 from a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 26;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(26, 26);
      int int1 = 127;
      int int2 = 17;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.updateColumn(26, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '26' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CCSMatrix.zero(1228, 1228, 1228);
      MockRandom mockRandom0 = new MockRandom(1228);
      int int0 = 1188;
      DenseVector.zero(1228);
      CRSMatrix cRSMatrix0 = new CRSMatrix(1781, 1781);
      // Undeclared exception!
      try { 
        cRSMatrix0.subtract((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3, 3);
      Matrix matrix0 = Matrix.zero(3, 3);
      rowMajorSparseMatrix0.toString();
      rowMajorSparseMatrix0.columns();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      matrix0.iteratorOfColumn(3);
      matrix0.toMatrixMarket();
      rowMajorSparseMatrix0.getColumn(37);
      Basic2DMatrix.identity(0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2096.5102658042);
      doubleArray0[1] = (double) 37;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 1127;
      doubleArray0[4] = (double) 3;
      rowMajorSparseMatrix0.subtract(matrix0);
      Matrix.zero(3, 0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(225, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      denseMatrix0.transpose();
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(26);
      Matrix matrix0 = basic1DMatrix0.removeLastRow();
      MockRandom mockRandom0 = new MockRandom(1000L);
      mockRandom0.doubles(228L);
      DenseVector.random(2033, mockRandom0);
      int int0 = 1188;
      DenseVector.zero(1188);
      matrix0.toColumnVector();
      // Undeclared exception!
      try { 
        matrix0.maxInColumn(1201);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1201' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix.zero(4377, 4377);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 17;
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      decimalFormat0.toPattern();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(0, 0, 225);
      basic2DMatrix0.power(10);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.update(matrixFunction0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      NumberFormat.getIntegerInstance();
      basic2DMatrix0.copyOfRows(15);
      rowMajorSparseMatrix0.toString();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SEIDEL;
      basic2DMatrix0.withSolver(linearAlgebra_SolverFactory0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.zero(4377, 4377);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 17;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      rowMajorSparseMatrix0.mkString(numberFormat0);
      doubleArray0[1] = (double) 0;
      doubleArray0[0] = (double) 209;
      doubleArray0[3] = (double) 4377;
      doubleArray0[1] = (double) 209;
      doubleArray0[6] = (double) 4377;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(0, 17, doubleArray0);
      rowMajorSparseMatrix1.insert((Matrix) sparseMatrix0, 127, 4, 0, 4);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.determinant();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(0);
      basic2DMatrix0.updateRow(4, vectorFunction0);
      Matrix matrix0 = basic2DMatrix0.sliceTopLeft(0, 0);
      int int0 = 8;
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.zero(8, 4377);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix0.non(advancedMatrixPredicate0);
      sparseMatrix0.maxInRow(0);
      int int1 = 17;
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(int1, mockRandom0);
      basic2DMatrix1.insertRow(int0, denseVector0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1228, 1228, 1228);
      cCSMatrix0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3, 3);
      CRSMatrix.identity(0);
      double double0 = new Integer(3);
      rowMajorSparseMatrix0.rank();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(3432);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) rowMajorSparseMatrix0, 3, 631);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 3 rows and 631 cols at 0, 0 from a 3x3 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(225, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.transpose();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 225;
      doubleArray0[1] = (double) 225;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 3838;
      DenseMatrix.from1DArray(0, 3838, doubleArray0);
      matrix0.toCSV();
      matrix0.toMatrixMarket();
      Basic2DMatrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n0 0\n");
      CRSMatrix cRSMatrix0 = new CRSMatrix(225, 0);
      denseMatrix0.add(0.0);
      denseMatrix0.norm();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.minInColumn((-478));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-478' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3, 3);
      Matrix matrix0 = Matrix.zero(3, 3);
      rowMajorSparseMatrix0.toString();
      rowMajorSparseMatrix0.columns();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseVector.constant(1220, 100.0);
      int int0 = (-2897);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.updateRow(17, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(26, 26, 26);
      cRSMatrix0.removeFirstRow();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Matrix matrix0 = Matrix.constant(26, 26, 1674.0);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(26, 127);
      cRSMatrix1.toMatrixMarket();
      cRSMatrix0.equals((Matrix) cRSMatrix1, (double) 26);
      int int0 = 3;
      SparseMatrix.zero(26, 26, 127);
      CRSMatrix cRSMatrix2 = (CRSMatrix)Matrix.diagonal(127, Double.POSITIVE_INFINITY);
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Basic2DMatrix.unit((-1258), (-22583494));
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      ooPlaceMatrixByVectorMultiplication0.partiallyApply((RowMajorSparseMatrix) cRSMatrix2);
      String string0 = "column-major";
      SparseVector sparseVector0 = SparseVector.fromMatrixMarket(string0);
      SparseVector sparseVector1 = sparseVector0.toSparseVector();
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix2, sparseVector1);
      Matrix matrix1 = vector0.toColumnMatrix();
      Matrix matrix2 = basic1DMatrix0.hadamardProduct(matrix1);
      vector0.max();
      int int1 = 840;
      matrix2.insert((Matrix) basic1DMatrix0, int1, int0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CCSMatrix.zero(1228, 1228, 1228);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(1228, 1228);
      basic2DMatrix0.setRow(17, (double) 1228);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      basic2DMatrix0.transformRow(5, vectorFunction0);
      basic2DMatrix0.iteratorOfColumn(828);
      DenseVector.constant(2369, 2369);
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      CRSMatrix.diagonal((-3786), 1658.975186249);
      int int0 = 16;
      basic2DMatrix0.getColumn(int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(225, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.transpose();
      matrix0.setRow(17, 1881.66);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.transformRow(0, vectorFunction0);
      int int0 = 8;
      matrix0.iteratorOfColumn(673);
      DenseVector denseVector0 = DenseVector.constant(673, (-782.0709242868872));
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      int int1 = 1189;
      // Undeclared exception!
      try { 
        denseMatrix0.insertRow(8, denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 673. Should be: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(3, 3);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      int int0 = 1220;
      matrix0.toMatrixMarket();
      Basic2DMatrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n3 3\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n0.000\n");
      Matrix.identity(3);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = matrix0.toRowMajorSparseMatrix();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.minInColumn(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 0;
      int int1 = 10;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 10);
      Matrix matrix0 = rowMajorSparseMatrix0.removeColumn(7);
      matrix0.columnMajorIterator();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(7, 7);
      Vector vector0 = basic1DMatrix0.toColumnVector();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.setColumn(9, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 7. Should be: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      cRSMatrix0.determinant();
      rowMajorSparseMatrix0.rank();
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(4, (-2186.0));
      Matrix matrix0 = cRSMatrix0.blank();
      cRSMatrix1.determinant();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert(matrix0, 2995, 1, 0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 2995, 1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(26, 26);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(26, 127);
      cRSMatrix0.toMatrixMarket();
      rowMajorSparseMatrix0.equals((Matrix) cRSMatrix0, (double) 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 26;
      doubleArray0[2] = (double) 19;
      doubleArray0[3] = (double) 26;
      // Undeclared exception!
      try { 
        SparseMatrix.from1DArray(3, 1771, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 26;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(26, 26);
      int int1 = 0;
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      decimalFormat0.getPositivePrefix();
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.insert((Matrix) rowMajorSparseMatrix0, 0, 26, 0, 0);
      cRSMatrix0.insert((Matrix) rowMajorSparseMatrix0, 6, 26);
      rowMajorSparseMatrix0.iteratorOfColumn(0);
      DenseMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.minInColumn((-1249));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-1249' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 225;
      int int1 = 17;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(17);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = basic2DMatrix0.transpose();
      matrix0.equals((Object) basic2DMatrix0);
      String string0 = matrix0.toMatrixMarket();
      Basic2DMatrix.fromMatrixMarket(string0);
      CRSMatrix.zero(17, 37, 37);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(37, (-1763), (double) 37, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1228);
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1228;
      doubleArray1[1] = (double) 1228;
      doubleArray1[2] = (double) 1228;
      doubleArray1[3] = (double) 1228;
      doubleArray1[4] = (double) 1228;
      doubleArray1[5] = (double) 1228;
      doubleArray1[6] = (double) 1228;
      doubleArray1[7] = (double) 1228;
      doubleArray1[8] = (double) 1228;
      doubleArray0[0] = doubleArray1;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      Object object0 = new Object();
      cCSMatrix0.equals(object0);
      // Undeclared exception!
      try { 
        matrix0.multiply(1228.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 3;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3, 3);
      rowMajorSparseMatrix0.determinant();
      rowMajorSparseMatrix0.rank();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(3432);
      rowMajorSparseMatrix0.hashCode();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      basic2DMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      RowMajorSparseMatrix.zero(26, 26);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(26, 127);
      cRSMatrix0.mkString(numberFormat0);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(0, 17);
      cCSMatrix0.equals((Object) cRSMatrix0);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      int int0 = Double.SIZE;
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 0;
      RowMajorSparseMatrix.identity(0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix.zero(4377, 4377);
      int int1 = 127;
      double[] doubleArray0 = new double[7];
      NumberFormat.getPercentInstance();
      doubleArray0[0] = (double) 209;
      doubleArray0[3] = (double) 4377;
      doubleArray0[1] = (double) 209;
      int int2 = 4;
      // Undeclared exception!
      try { 
        Matrix.unit((-1544), 282);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 23;
      RowMajorSparseMatrix.zero(26, 26);
      int int1 = 0;
      NumberFormat.getPercentInstance();
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(26, 127);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        cRSMatrix0.insertColumn((-1457), denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..25
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      RowMajorSparseMatrix.zero(26, 26);
      int int0 = 127;
      NumberFormat.getPercentInstance();
      CRSMatrix.diagonal(26, 127);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(17, 12);
      // Undeclared exception!
      try { 
        basic2DMatrix0.power(9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 17 does not equal to 12.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 453;
      CRSMatrix cRSMatrix0 = new CRSMatrix(3, 3);
      CRSMatrix cRSMatrix1 = new CRSMatrix(3, 7);
      // Undeclared exception!
      try { 
        cRSMatrix1.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(225, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.transpose();
      matrix0.toMatrixMarket();
      Basic2DMatrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n0 0\n");
      CRSMatrix cRSMatrix0 = new CRSMatrix(225, 0);
      denseMatrix0.add(0.0);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(2, (-1763));
      Matrix matrix1 = cRSMatrix1.blank();
      matrix1.determinant();
      int int1 = 21;
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      // Undeclared exception!
      try { 
        ooPlaceMatricesSubtraction0.apply((RowMajorSparseMatrix) cRSMatrix0, (ColumnMajorSparseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(6, 6, 6);
      CRSMatrix cRSMatrix0 = new CRSMatrix(6, 6, 0);
      rowMajorSparseMatrix0.determinant();
      Basic2DMatrix.identity(0);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(6);
      cRSMatrix0.determinant();
      cRSMatrix1.rank();
      CRSMatrix cRSMatrix2 = CRSMatrix.diagonal(6, (-1212.34373));
      cRSMatrix1.blank();
      cRSMatrix1.determinant();
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) cRSMatrix2, 4, 4, 8, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 8 rows and 4 cols at 4, 4 in a 6x6 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 225;
      int int1 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(225, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.transpose();
      matrix0.toMatrixMarket();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n0 0\n");
      CRSMatrix cRSMatrix0 = new CRSMatrix(225, 0);
      matrix0.add((double) 225);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(1, 2186.0);
      Matrix matrix1 = cRSMatrix1.blank();
      matrix1.determinant();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      ooPlaceMatricesSubtraction0.partiallyApply((DenseMatrix) basic2DMatrix0);
      // Undeclared exception!
      try { 
        ooPlaceMatricesSubtraction0.apply((RowMajorSparseMatrix) cRSMatrix1, (ColumnMajorSparseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }
}
