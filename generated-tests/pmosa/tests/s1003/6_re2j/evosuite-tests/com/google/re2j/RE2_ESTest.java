/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 23:06:31 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.MachineInput;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RE2 rE2_0 = RE2.compile(",u1+L25vG|O!&");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-37);
      byteArray0[7] = (byte)108;
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      rE2_0.prefix = "[:alnum:]";
      int[] intArray0 = rE2_0.findSubmatchIndex("");
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("z<utwHj>d&GC'Y'@ZH");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte)1;
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-97);
      rE2_0.findUTF8Submatch(byteArray0);
      Machine machine0 = new Machine(rE2_0);
      MachineInput machineInput0 = MachineInput.fromUTF16("", 1, (byte)2);
      machineInput0.endPos();
      machine0.init((byte)0);
      MachineInput.fromUTF16("");
      machine0.init(128);
      machine0.match(machineInput0, 21, 3);
      rE2_0.put(machine0);
      RE2 rE2_1 = RE2.compileImpl("", (byte)93, false);
      rE2_1.prefixUTF8 = byteArray0;
      rE2_1.prefixComplete = false;
      rE2_1.findIndex("");
      rE2_1.findUTF8Index(byteArray0);
      rE2_0.toString();
      rE2_1.findAllSubmatchIndex("", 7);
      RE2.quoteMeta("ALT_MATCH");
      rE2_1.find("");
      RE2.compilePOSIX("");
      RE2.quoteMeta("");
      boolean boolean0 = RE2.match("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      List<String[]> list0 = rE2_0.findAllSubmatch("", (-387));
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RE2.quoteMeta("o");
      RE2 rE2_0 = RE2.compile("");
      rE2_0.reset();
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      String string0 = rE2_0.find("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = RE2.match("HT ", "HT ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("}9=H!u4CS~fiu'");
      int[] intArray0 = new int[7];
      boolean boolean0 = rE2_0.match("}9=H!u4CS~fiu'", (-3546), (-3546), 4239, intArray0, 4239);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      String string0 = rE2_0.replaceFirst("", "'CCTIAlI|[y1K;eqm");
      assertEquals("'CCTIAlI|[y1K;eqm", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[0];
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, (-1));
      RE2 rE2_1 = RE2.compilePOSIX("can't happen");
      rE2_0.findUTF8Submatch(byteArray0);
      rE2_0.get();
      byte[] byteArray1 = new byte[0];
      rE2_1.findIndex("NNh@6cF\"@z4, aXF2");
      rE2_0.findAllUTF8Submatch(byteArray1, 2900);
      rE2_0.get();
      rE2_0.findAllUTF8Submatch(byteArray0, 2900);
      rE2_0.findAll("V6s93J)Jcs?8Z", 2900);
      rE2_0.findUTF8Submatch(byteArray1);
      RE2 rE2_2 = RE2.compilePOSIX("");
      rE2_2.match("");
      rE2_2.find("");
      rE2_2.findSubmatchIndex("");
      byte[] byteArray2 = rE2_0.findUTF8(byteArray0);
      rE2_0.findUTF8(byteArray2);
      rE2_0.findAllUTF8Submatch(byteArray2, 2900);
      rE2_2.findAllIndex("", 17);
      rE2_2.findUTF8SubmatchIndex(byteArray0);
      rE2_1.reset();
      assertFalse(rE2_1.equals((Object)rE2_0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 375);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("Glagolitic");
      List<String> list0 = rE2_0.findAll("com.google.re2j.PatternSyntaxException", 2953);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("[:ascii:]", 9703, true);
      List<int[]> list0 = rE2_0.findAllIndex("mp", 9703);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = RE2.quoteMeta("com.google.re2j.PatternSyntaxException");
      assertEquals("com\\.google\\.re2j\\.PatternSyntaxException", string0);
      
      RE2 rE2_0 = new RE2("com.google.re2j.PatternSyntaxException");
      RE2.match("com.google.re2j.PatternSyntaxException", "com.google.re2j.PatternSyntaxException");
      List<String[]> list0 = rE2_0.findAllSubmatch("W:I,ei1nlU<9p+6", 0);
      assertNull(list0);
      
      String string1 = rE2_0.replaceFirst("can't happen", "5Ar78]P5IBBwB~,");
      assertEquals("can't happen", string1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = new RE2("z7jFw.IzgF*O!Q57&7");
      rE2_0.findAllSubmatch("x@ +h=j^lgm", (-25));
      // Undeclared exception!
      try { 
        rE2_0.match((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("wu{p0&p#!3adn|");
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 24);
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("B~Mg", 0, true);
      byte[] byteArray0 = new byte[5];
      Machine machine0 = new Machine(rE2_0);
      rE2_0.put(machine0);
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      rE2_0.longest = true;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte) (-54));
      RE2 rE2_1 = RE2.compilePOSIX("cap ");
      Machine machine1 = rE2_1.get();
      MachineInput machineInput0 = MachineInput.fromUTF8(byteArray0);
      machineInput0.context((byte)0);
      machine1.init(0);
      machine1.match(machineInput0, (byte)0, 0);
      rE2_1.put(machine1);
      rE2_1.get();
      rE2_1.findAllUTF8Index(byteArray0, 13);
      RE2.match("B~Mg", "cap ");
      rE2_0.match("B~Mg");
      int[] intArray0 = rE2_1.findIndex("cap ");
      assertArrayEquals(new int[] {0, 4}, intArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RE2 rE2_0 = new RE2(">dh;");
      rE2_0.numberOfCapturingGroups();
      rE2_0.toString();
      RE2.match(">dh;", ">dh;");
      String string0 = "unhandled case in Inst.toString";
      StringBuilder stringBuilder0 = new StringBuilder(3746);
      StringBuilder stringBuilder1 = stringBuilder0.append(3746);
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      // Undeclared exception!
      try { 
        stringBuilder2.insert(3746, (Object) ">dh;");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3746
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("can't happen");
      byte[] byteArray0 = new byte[7];
      rE2_0.match("can't happen");
      byteArray0[0] = (byte) (-117);
      rE2_0.prefixUTF8 = byteArray0;
      byteArray0[1] = (byte)0;
      rE2_0.findUTF8SubmatchIndex(byteArray0);
      byteArray0[2] = (byte) (-24);
      rE2_0.prefixUTF8 = byteArray0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-115);
      rE2_0.findAllUTF8Submatch(byteArray0, (byte)0);
      RE2.quoteMeta("can't happen");
      rE2_0.replaceAll("Em", "");
      rE2_0.findSubmatchIndex("_/EG+8<4\"+zJ[");
      RE2 rE2_1 = RE2.compileImpl("can't happen", (byte) (-115), true);
      rE2_1.findUTF8(byteArray0);
      rE2_1.get();
      rE2_1.findIndex("");
      Machine machine0 = rE2_0.get();
      rE2_0.put(machine0);
      RE2.compileImpl("", 13, true);
      rE2_1.findIndex("can't happen");
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (byte) (-117));
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("n");
      rE2_0.findSubmatch("HT ");
      boolean boolean0 = rE2_0.prefixComplete;
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      String[] stringArray0 = rE2_0.findSubmatch("<6G$Zp7!i");
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("end is greater than length: ", 2214, false);
      rE2_0.match("end is greater than length: ");
      rE2_0.findAllSubmatch("", (-560));
      rE2_0.findAllSubmatch("end is greater than length: ", (-560));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte)92;
      rE2_0.findUTF8Index(byteArray0);
      rE2_0.numberOfCapturingGroups();
      rE2_0.replaceFirst("", "|0  akVjYDfe(U5{)");
      try { 
        RE2.compilePOSIX("(?:)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "'JFd/q@OsJ;J ";
      RE2 rE2_0 = RE2.compile("'JFd/q@OsJ;J ");
      byte[] byteArray0 = new byte[3];
      rE2_0.replaceAll("'JFd/q@OsJ;J ", "'JFd/q@OsJ;J ");
      rE2_0.findUTF8SubmatchIndex(byteArray0);
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)109;
      rE2_0.findUTF8SubmatchIndex(byteArray0);
      byteArray0[2] = (byte) (-50);
      RE2.match("'JFd/q@OsJ;J ", "'JFd/q@OsJ;J ");
      rE2_0.findUTF8(byteArray0);
      // Undeclared exception!
      try { 
        rE2_0.match("'JFd/q@OsJ;J ", (byte) (-50), 1526, 1526, (int[]) null, (byte)109);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2.compile("");
      RE2 rE2_0 = RE2.compile("");
      rE2_0.replaceFirst("64RgXvJt#R{g<N]d", "");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-2);
      rE2_0.findAllUTF8(byteArray0, (-1184));
      RE2.quoteMeta("");
      boolean boolean0 = rE2_0.match("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[0];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 7);
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("^x00-x{10FFFF}");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)24;
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-87);
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (byte) (-87));
      assertNotNull(list0);
      assertEquals(6, list0.size());
      
      RE2.match("", "");
      boolean boolean0 = rE2_0.match("");
      assertTrue(boolean0);
      
      int[] intArray0 = rE2_0.findIndex("");
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("V", 1143, false);
      rE2_0.findAllIndex("V", 1143);
      rE2_0.findAllSubmatchIndex("D", 92);
      RE2.quoteMeta("");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)51;
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = RE2.compilePOSIX("");
      rE2_0.findAllIndex("", 8653);
      rE2_0.replaceAll("b\"ZQ<[F.}}S(q9.zw7", "");
      rE2_0.findAllUTF8(byteArray0, (-1563));
      rE2_0.reset();
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[0];
      RE2 rE2_1 = RE2.compilePOSIX("|C");
      List<String[]> list0 = rE2_1.findAllSubmatch("|C", (-74));
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)12;
      byteArray1[1] = (byte)73;
      byteArray1[2] = (byte)39;
      byteArray1[3] = (byte)54;
      byteArray1[4] = (byte)8;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)127;
      rE2_0.findUTF8Submatch(byteArray1);
      List<byte[][]> list1 = rE2_0.findAllUTF8Submatch(byteArray0, 9);
      assertNotNull(list1);
      assertEquals(1, list1.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("|R'I6Tw");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)11;
      String string0 = rE2_0.replaceAll("|R'I6Tw", "|R'I6Tw");
      assertEquals("|R'I6Tw||R'I6Tw", string0);
      
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-27);
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte)82;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-44);
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte) (-44);
      byte[] byteArray2 = rE2_0.findUTF8(byteArray1);
      assertNotNull(byteArray2);
      
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, 3286);
      assertEquals(5, list0.size());
      assertNotNull(list0);
      
      String string1 = rE2_0.toString();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      int[] intArray0 = new int[3];
      rE2_0.match("", (-939), (-939), 0, intArray0, 0);
      List<String[]> list0 = rE2_0.findAllSubmatch("", 0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compilePOSIX("");
      rE2_0.findSubmatch("");
      int[] intArray0 = new int[7];
      intArray0[0] = 2395;
      intArray0[1] = (-876);
      intArray0[2] = 847;
      intArray0[3] = 6;
      intArray0[4] = (-876);
      intArray0[5] = (-2545);
      intArray0[6] = 6;
      // Undeclared exception!
      try { 
        rE2_0.match("", 0, 0, 2395, intArray0, 1478);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      boolean boolean0 = rE2_0.match("", 0, 0, (-1593), (int[]) null, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      RE2 rE2_0 = RE2.compilePOSIX(".I1(Amzt)bi|\"Cu");
      rE2_0.findSubmatch(".I1(Amzt)bi|\"Cu");
      rE2_0.findAllUTF8Submatch(byteArray0, (byte)121);
      boolean boolean0 = rE2_0.longest;
      rE2_0.findAllSubmatch("can't happen", (byte)121);
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      RE2 rE2_0 = RE2.compilePOSIX(".xI1(Amzt)bi|\"Cu");
      rE2_0.findSubmatch(".xI1(Amzt)bi|\"Cu");
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte)121);
      assertNull(list0);
      
      boolean boolean0 = rE2_0.longest;
      assertTrue(boolean0);
      
      List<String[]> list1 = rE2_0.findAllSubmatch(".xI1(Amzt)bi|\"Cu", (byte)121);
      assertEquals(1, list1.size());
      assertNotNull(list1);
  }
}
