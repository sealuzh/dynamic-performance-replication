/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 22:31:26 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(4.968944099346118E-4);
      assertEquals(2, rationalNumber0.numerator);
      assertEquals(4.968944099378882E-4, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(27L, (-398L));
      String string0 = rationalNumber0.toString();
      assertEquals("27/-398 (-0.068)", string0);
      
      rationalNumber0.floatValue();
      long long0 = rationalNumber0.longValue();
      assertEquals(0L, long0);
      
      rationalNumber0.floatValue();
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod((-398L), 0L);
      rationalNumber1.toString();
      rationalNumber1.negate();
      RationalNumber rationalNumber2 = RationalNumber.valueOf((-0.0678392F));
      assertEquals((-0.0678392F), rationalNumber2.floatValue(), 0.01F);
      
      String string1 = rationalNumber1.toString();
      assertEquals("Invalid rational (1/0)", string1);
      
      RationalNumber rationalNumber3 = RationalNumber.valueOf(0.0);
      assertEquals(1, rationalNumber3.divisor);
      assertEquals(0L, rationalNumber3.longValue());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(5103.5);
      String string0 = rationalNumber0.toString();
      assertEquals("10207/2 (5,103.5)", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1.0));
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      rationalNumber1.negate();
      RationalNumber.factoryMethod((-1), (-2147483648L));
      RationalNumber.valueOf(1);
      RationalNumber rationalNumber2 = RationalNumber.valueOf((-2075.409799180339));
      String string0 = rationalNumber2.toString();
      assertEquals("-24906993/12001 (-2,075.41)", string0);
      
      RationalNumber rationalNumber3 = RationalNumber.valueOf(783.58172758528);
      float float0 = rationalNumber3.floatValue();
      assertEquals(783.5817F, float0, 0.01F);
      
      String string1 = rationalNumber3.toDisplayString();
      assertEquals("783.582", string1);
      
      rationalNumber0.negate();
      RationalNumber.valueOf(1132.0);
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod(0L, 1);
      rationalNumber2.toString();
      rationalNumber4.negate();
      rationalNumber1.toDisplayString();
      int int0 = rationalNumber2.intValue();
      assertEquals((-2075), int0);
      
      String string2 = rationalNumber1.toDisplayString();
      assertEquals("1", string2);
      
      double double0 = rationalNumber3.doubleValue();
      assertEquals(783.5817275946936, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-700L), 755L);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      String string0 = rationalNumber1.toDisplayString();
      assertEquals("0.927", string0);
      
      RationalNumber rationalNumber2 = RationalNumber.valueOf(3151.934374963);
      assertEquals(3151.9343F, rationalNumber2.floatValue(), 0.01F);
      
      rationalNumber0.floatValue();
      assertEquals(151, rationalNumber0.divisor);
      
      RationalNumber.factoryMethod(1008619, (-140));
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(755L, 7L);
      String string1 = rationalNumber3.toDisplayString();
      assertEquals("107.857", string1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod((-2147483650L), 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: -2147483650, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483662L, 2147483662L);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1, 2147483662L);
      RationalNumber.factoryMethod((-2147483648L), 1);
      RationalNumber rationalNumber2 = RationalNumber.valueOf(7.315293260035105E-8);
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod((-2147483634), 1);
      RationalNumber rationalNumber4 = rationalNumber2.negate();
      assertEquals((-7.315293E-8F), rationalNumber4.floatValue(), 0.01F);
      
      rationalNumber3.toString();
      rationalNumber0.toDisplayString();
      rationalNumber3.toString();
      String string0 = rationalNumber1.toString();
      assertEquals("1/-2147483634 (-0)", string0);
      
      rationalNumber3.floatValue();
      rationalNumber0.doubleValue();
      rationalNumber2.toDisplayString();
      String string1 = rationalNumber1.toDisplayString();
      assertEquals("-0", string1);
      
      rationalNumber3.floatValue();
      rationalNumber0.toDisplayString();
      RationalNumber rationalNumber5 = RationalNumber.valueOf(1);
      assertEquals(1, rationalNumber5.numerator);
      
      String string2 = rationalNumber3.toString();
      assertEquals("-2,147,483,634", string2);
      
      int int0 = rationalNumber1.intValue();
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals(0, int0);
      
      RationalNumber.factoryMethod(59L, 1);
      rationalNumber3.floatValue();
      assertEquals((-2147483634L), rationalNumber3.longValue());
      assertEquals((-2147483634), rationalNumber3.intValue());
      
      String string3 = rationalNumber0.toDisplayString();
      assertEquals("1", string3);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483650L), 979L);
      String string0 = rationalNumber0.toString();
      assertEquals("-1073741825/489 (-2,195,791.053)", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-1L), 979L);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertEquals((-1), rationalNumber1.numerator);
      assertEquals((-979), rationalNumber1.divisor);
      
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod((-2147483650L), 2312L);
      double double0 = rationalNumber2.doubleValue();
      assertEquals((-928842.4091695502), double0, 0.01);
      
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod((-2147483650L), (-1L));
      assertEquals((-2.147483646E9), rationalNumber3.doubleValue(), 0.01);
  }
}
