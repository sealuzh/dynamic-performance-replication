/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:29:07 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import java.util.zip.Inflater;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.BufferedSink;
import okio.InflaterSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit((IOException) null);
      asyncTimeout0.newTimeoutException((IOException) null);
      asyncTimeout0.enter();
      asyncTimeout0.timedOut();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      inflaterSource0.refill();
      BufferedSink bufferedSink0 = buffer0.write((Source) inflaterSource0, (-4431L));
      asyncTimeout0.sink(bufferedSink0);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.throwIfReached();
      AsyncTimeout.head = asyncTimeout0;
      asyncTimeout0.source((Source) null);
      asyncTimeout0.enter();
      MockIOException mockIOException0 = new MockIOException();
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.throwIfReached();
      AsyncTimeout.head = asyncTimeout0;
      long long0 = 3349L;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      AsyncTimeout.head.deadline(166L, timeUnit0);
      AsyncTimeout.head.enter();
      System.setCurrentTimeMillis(265L);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.throwIfReached();
      AsyncTimeout.head = asyncTimeout0;
      boolean boolean0 = true;
      asyncTimeout0.deadlineNanoTime(0L);
      asyncTimeout0.enter();
      AsyncTimeout.awaitTimeout();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      asyncTimeout0.deadline(3349L, timeUnit0);
      asyncTimeout0.enter();
      System.setCurrentTimeMillis(844L);
      asyncTimeout0.exit(true);
      System.setCurrentTimeMillis(874L);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.throwIfReached();
      AsyncTimeout.head = asyncTimeout0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l4 nNA#.q2#l>");
      AsyncTimeout.head.clearTimeout();
      asyncTimeout0.enter();
      asyncTimeout0.deadlineNanoTime(1235L);
      asyncTimeout0.source((Source) null);
      asyncTimeout0.enter();
      // Undeclared exception!
      try { 
        AsyncTimeout.head.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unbalanced enter/exit
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.throwIfReached();
      AsyncTimeout.head = asyncTimeout0;
      asyncTimeout0.source((Source) null);
      asyncTimeout0.exit(true);
      asyncTimeout0.deadlineNanoTime(0L);
      asyncTimeout0.enter();
      AsyncTimeout.awaitTimeout();
      AsyncTimeout.head.exit(false);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      asyncTimeout0.enter();
      Buffer buffer0 = new Buffer();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)AsyncTimeout.head.deadlineNanoTime(0L);
      asyncTimeout0.enter();
      MockIOException mockIOException0 = new MockIOException();
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      asyncTimeout1.exit((IOException) mockIOException1);
      AsyncTimeout asyncTimeout2 = AsyncTimeout.head;
      AsyncTimeout asyncTimeout3 = new AsyncTimeout();
      asyncTimeout0.exit(false);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }
}
