/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:31:00 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.lang.reflect.Method;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Edge;
import wheel.asm.Frame;
import wheel.asm.Label;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ByteVector byteVector0 = new ByteVector();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      classReader0.getSuperName();
      ClassWriter classWriter0 = new ClassWriter(4);
      classWriter0.cr = classReader0;
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classAdapter0, 8);
      classReader0.getInterfaces();
      classReader0.readLong(2);
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = 'Z';
      charArray0[3] = '[';
      charArray0[4] = '[';
      // Undeclared exception!
      try { 
        classReader0.readUTF8(4, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(140);
      FileSystemHandling.shouldAllThrowIOExceptions();
      classReader0.getInterfaces();
      Attribute attribute0 = new Attribute("wheel.asm.Edge");
      ByteVector byteVector0 = new ByteVector(2);
      ByteVector byteVector1 = byteVector0.putUTF8("wheel.asm.Edge");
      byteVector1.putLong(1);
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 2, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18724
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(140);
      classReader0.accept((ClassVisitor) classWriter0, 109);
      Attribute attribute0 = new Attribute("wheel.asm.Edge");
      classWriter0.visit(129, 0, "wheel.asm.Edge", "wheel.asm.Edge", "wheel.asm.Edge", (String[]) null);
      Attribute attribute1 = attribute0.next;
      Attribute attribute2 = new Attribute("wheel.asm.Edge");
      ByteVector byteVector0 = new ByteVector(366);
      ByteVector byteVector1 = byteVector0.putInt(1);
      byteVector1.put11(128, 8);
      classReader0.getSuperName();
      byteVector0.putUTF8("wheel.asm.Edge");
      ClassReader classReader1 = new ClassReader(classReader0.b, 3, 1);
      classReader1.getItem(1);
      classReader0.readInt(2);
      ClassWriter classWriter1 = null;
      try {
        classWriter1 = new ClassWriter(classReader1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5895
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(140);
      classReader0.accept((ClassVisitor) classWriter0, 132);
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.putByte(8);
      ByteVector byteVector2 = byteVector0.putByte(271);
      assertSame(byteVector2, byteVector1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "wheel.asm.Edge";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ByteVector byteVector0 = new ByteVector();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ClassReader classReader1 = new ClassReader(classReader0.b, 271, 271);
      // Undeclared exception!
      try { 
        classReader1.getSuperName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(140);
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 140, 2685);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 425
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanWriteFileFilter");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[2];
      classReader0.getSuperName();
      charArray0[0] = 'S';
      charArray0[1] = '^';
      classReader0.getClassName();
      classReader0.getInterfaces();
      classReader0.getClassName();
      classReader0.getAccess();
      classReader0.getSuperName();
      classReader0.readShort(9);
      classReader0.getClassName();
      // Undeclared exception!
      try { 
        classReader0.getItem(3572);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3572
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(13);
      classWriter0.newClass("f3F'^l e JeeNxou");
      Attribute attribute0 = new Attribute("wheel.asm.Edge");
      classWriter0.newClass("wheel.asm.Edge");
      Attribute attribute1 = attribute0.next;
      Attribute attribute2 = new Attribute("wheel.asm.Edge");
      ByteVector byteVector0 = new ByteVector(128);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = classReader0.getSuperName();
      assertNotNull(string0);
      assertEquals("java/lang/Object", string0);
      
      int int0 = classReader0.readByte(64);
      assertEquals(73, int0);
      assertEquals(271, classReader0.header);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteVector byteVector0 = new ByteVector();
      char[] charArray0 = new char[5];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      Type.getInternalName(class0);
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      classReader0.getSuperName();
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte)24;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteVector byteVector0 = new ByteVector(346);
      byteVector0.putByte(128);
      Attribute attribute0 = new Attribute("boolean");
      classReader0.getSuperName();
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      ClassWriter classWriter0 = new ClassWriter(classReader1, 4725);
      ClassReader classReader2 = null;
      try {
        classReader2 = new ClassReader("pl[U##U-oXY}EA");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader0);
      assertEquals(32, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(140);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Attribute attribute0 = new Attribute("wheel.asm.Edge");
      assertNotNull(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      Attribute attribute1 = attribute0.next;
      assertNull(attribute1);
      
      Attribute attribute2 = attribute0.next;
      assertNull(attribute2);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'H';
      charArray0[1] = ';';
      charArray0[2] = '3';
      charArray0[3] = '(';
      charArray0[4] = 'H';
      charArray0[5] = ';';
      charArray0[6] = '$';
      String string0 = classReader0.getClassName();
      assertEquals("wheel/asm/Edge", string0);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(string0);
      assertEquals(32, classReader0.getAccess());
      
      short short0 = classReader0.readShort(1);
      assertEquals((short) (-326), short0);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(32, classReader0.getAccess());
      
      String string1 = classWriter0.getCommonSuperClass("wheel/asm/Edge", "wheel.asm.Edge");
      assertTrue(string1.equals((Object)string0));
      assertEquals("wheel/asm/Edge", string1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        classReader0.readConst(1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteVector byteVector0 = new ByteVector(132);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = new ByteVector();
      assertFalse(byteVector1.equals((Object)byteVector0));
      assertNotNull(byteVector1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ':';
      charArray0[2] = 'T';
      charArray0[4] = ',';
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      String string0 = Type.getInternalName(class0);
      assertEquals("org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate", string0);
      assertNotNull(string0);
      
      ClassReader classReader0 = new ClassReader("org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate");
      assertEquals(1197, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      
      ClassAdapter classAdapter0 = new ClassAdapter((ClassVisitor) null);
      assertNotNull(classAdapter0);
      
      // Undeclared exception!
      try { 
        classReader0.accept((ClassVisitor) classAdapter0, (-2612));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      char[] charArray0 = new char[19];
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      charArray0[1] = ';';
      charArray0[2] = ';';
      charArray0[4] = ';';
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      String string0 = Type.getInternalName(class0);
      assertEquals("org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate", string0);
      assertNotNull(string0);
      
      ClassReader classReader0 = new ClassReader("org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate");
      assertEquals(1197, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      int int0 = 197;
      ClassWriter classWriter0 = new ClassWriter(197);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classAdapter0);
      
      int int1 = (-3646);
      classReader0.accept((ClassVisitor) classWriter0, (-3646));
      assertEquals(1197, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(33, classReader0.getAccess());
      
      int int2 = 184;
      long long0 = classReader0.readLong(184);
      assertEquals(888582932529160L, long0);
      assertEquals(1197, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(33, classReader0.getAccess());
      
      // Undeclared exception!
      try { 
        classReader0.readUTF8(1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65210
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertNotNull(classReader0);
      assertEquals(32, classReader0.getAccess());
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      String string0 = Type.getInternalName(class0);
      assertEquals("org/evosuite/runtime/mock/java/time/chrono/MockThaiBuddhistDate", string0);
      assertNotNull(string0);
      
      String string1 = classReader0.getSuperName();
      assertFalse(string1.equals((Object)string0));
      assertEquals("java/lang/Object", string1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertNotNull(string1);
      assertEquals(32, classReader0.getAccess());
      
      int int0 = classReader0.readUnsignedShort(220);
      assertEquals(2373, int0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(32, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("org/evosuite/runtime/mock/java/time/chrono/MockThaiBuddhistDate");
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(1103, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader1);
      assertEquals(33, classReader1.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(4);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classAdapter0);
      
      classReader1.accept((ClassVisitor) classAdapter0, 220);
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertNotSame(classReader1, classReader0);
      assertNotSame(classWriter1, classWriter0);
      assertEquals(1103, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(33, classReader1.getAccess());
      
      long long0 = classReader1.readLong(8);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(17452549131956839L, long0);
      assertNotSame(classReader1, classReader0);
      assertEquals(1103, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(33, classReader1.getAccess());
      
      ClassReader classReader2 = null;
      try {
        classReader2 = new ClassReader("getTypeParameters");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(271, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader0);
      assertEquals(32, classReader0.getAccess());
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      String string0 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string0);
      assertEquals(271, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(string0);
      assertEquals(32, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(927, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader1);
      assertEquals(33, classReader1.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(4);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      classWriter0.cr = classReader1;
      assertEquals(33, classReader1.getAccess());
      assertEquals(33, classWriter0.cr.getAccess());
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classAdapter0);
      
      classAdapter0.visitSource("java/lang/Object", "java/lang/Object");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classReader1.accept((ClassVisitor) classAdapter0, 8);
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotSame(classReader1, classReader0);
      assertEquals(927, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(33, classReader1.getAccess());
      
      String[] stringArray0 = classReader1.getInterfaces();
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotSame(classReader1, classReader0);
      assertEquals(927, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(stringArray0);
      assertEquals(33, classReader1.getAccess());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = 'Z';
      charArray0[3] = '[';
      charArray0[4] = '[';
      // Undeclared exception!
      try { 
        classReader0.readUTF8(4, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertNotNull(classReader0);
      assertEquals(32, classReader0.getAccess());
      
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      String string0 = Type.getInternalName(class0);
      assertEquals("org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate", string0);
      assertNotNull(string0);
      
      String string1 = classReader0.getSuperName();
      assertFalse(string1.equals((Object)string0));
      assertEquals("java/lang/Object", string1);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertNotNull(string1);
      assertEquals(32, classReader0.getAccess());
      
      int int0 = classReader0.readUnsignedShort(132);
      assertEquals(17764, int0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(32, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("wheel.asm.Edge");
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(271, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader1);
      assertEquals(32, classReader1.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(2);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      
      ClassAdapter classAdapter0 = new ClassAdapter((ClassVisitor) null);
      assertNotNull(classAdapter0);
      
      classReader0.accept((ClassVisitor) classWriter0, 1);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertNotSame(classReader0, classReader1);
      assertNotSame(classWriter0, classWriter1);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(32, classReader0.getAccess());
      
      long long0 = classReader1.readLong(132);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(5000235170767372294L, long0);
      assertNotSame(classReader1, classReader0);
      assertEquals(271, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(32, classReader1.getAccess());
      
      int int1 = Edge.EXCEPTION;
      assertFalse(int1 == int0);
      assertEquals(Integer.MAX_VALUE, int1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      charArray0[1] = 'T';
      charArray0[3] = '[';
      // Undeclared exception!
      try { 
        classReader1.readConst(8, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader0);
      assertEquals(32, classReader0.getAccess());
      
      ByteVector byteVector0 = new ByteVector(346);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putByteArray(classReader0.b, 128, 8);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(byteVector1);
      assertEquals(32, classReader0.getAccess());
      
      String string0 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string0);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(string0);
      assertEquals(32, classReader0.getAccess());
      
      ByteVector byteVector2 = byteVector0.putByteArray(classReader0.b, 132, 271);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector0);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(byteVector2);
      assertEquals(32, classReader0.getAccess());
      
      ByteVector byteVector3 = byteVector0.put11(128, 8);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector3, byteVector2);
      assertSame(byteVector3, byteVector1);
      assertSame(byteVector3, byteVector0);
      assertNotNull(byteVector3);
      
      char char0 = 'T';
      int int0 = classReader0.readUnsignedShort(144);
      assertEquals(29758, int0);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(32, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader1);
      assertEquals(33, classReader1.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classAdapter0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      
      int int1 = classWriter1.newMethod("LineNumberTable", "java/lang/Object", "java/lang/Object", true);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      assertNotSame(classWriter1, classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classReader1.accept((ClassVisitor) classAdapter0, (-3987));
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertNotSame(classReader1, classReader0);
      assertNotSame(classWriter0, classWriter1);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(33, classReader1.getAccess());
      
      // Undeclared exception!
      try { 
        classReader0.readLong(927);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 927
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      char[] charArray0 = new char[19];
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      charArray0[1] = ';';
      charArray0[2] = ';';
      charArray0[4] = ';';
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      String string0 = Type.getInternalName(class0);
      assertEquals("org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate", string0);
      assertNotNull(string0);
      
      ClassReader classReader0 = new ClassReader("org/evosuite/runtime/mock/java/time/chrono/MockJapaneseDate");
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1197, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      
      long long0 = classReader0.readLong(184);
      assertEquals(888582932529160L, long0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1197, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(33, classReader0.getAccess());
      
      String string1 = classReader0.getSuperName();
      assertFalse(string1.equals((Object)string0));
      assertEquals("java/lang/Object", string1);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1197, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(string1);
      assertEquals(33, classReader0.getAccess());
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1197, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(stringArray0);
      assertEquals(33, classReader0.getAccess());
      
      String string2 = classReader0.getSuperName();
      assertFalse(string2.equals((Object)string0));
      assertEquals("java/lang/Object", string2);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1197, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(string2);
      assertEquals(33, classReader0.getAccess());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader0);
      assertEquals(32, classReader0.getAccess());
      
      ByteVector byteVector0 = new ByteVector(346);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putByteArray(classReader0.b, 128, 8);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(byteVector1);
      assertEquals(32, classReader0.getAccess());
      
      String string0 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string0);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(string0);
      assertEquals(32, classReader0.getAccess());
      
      ByteVector byteVector2 = byteVector0.putByteArray(classReader0.b, 132, 271);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(byteVector2);
      assertEquals(32, classReader0.getAccess());
      
      ByteVector byteVector3 = byteVector0.put11(128, 8);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector3, byteVector2);
      assertSame(byteVector3, byteVector0);
      assertSame(byteVector3, byteVector1);
      assertNotNull(byteVector3);
      
      Attribute attribute0 = new Attribute("wheel.asm.Edge");
      assertNotNull(attribute0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      
      String string1 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string1);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(string1);
      assertEquals(32, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader1.header);
      assertNotNull(classReader1);
      assertEquals(33, classReader1.getAccess());
      
      Attribute attribute1 = new Attribute("NFvFpsJ@%[d,?$");
      assertFalse(attribute1.equals((Object)attribute0));
      assertNotNull(attribute1);
      assertTrue(attribute1.isUnknown());
      assertFalse(attribute1.isCodeAttribute());
      
      ClassWriter classWriter0 = new ClassWriter(16777219);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classAdapter0);
      
      Attribute[] attributeArray0 = new Attribute[6];
      attributeArray0[0] = attribute1;
      attributeArray0[1] = attribute1;
      attributeArray0[2] = attribute0;
      attributeArray0[3] = attribute0;
      attributeArray0[4] = attribute1;
      attributeArray0[5] = attribute0;
      classReader1.accept((ClassVisitor) classAdapter0, attributeArray0, 1216);
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotSame(classReader1, classReader0);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader1.header);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(33, classReader1.getAccess());
      
      char[] charArray0 = new char[3];
      charArray0[0] = ':';
      // Undeclared exception!
      try { 
        classReader0.readConst(53, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 53
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader0);
      assertEquals(32, classReader0.getAccess());
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      char char0 = '[';
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      String string0 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(string0);
      assertEquals(32, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(927, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader1);
      assertEquals(33, classReader1.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(4);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classAdapter0);
      
      classReader1.accept((ClassVisitor) classAdapter0, 8);
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotSame(classReader1, classReader0);
      assertEquals(927, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(33, classReader1.getAccess());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      // Undeclared exception!
      try { 
        classReader0.readConst(4986, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4986
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertNotNull(classReader0);
      assertEquals(32, classReader0.getAccess());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-15);
      byteArray0[7] = (byte)24;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte) (-98), (byte) (-128), (byte) (-60), (byte) (-128), (byte)47, (byte) (-15), (byte)24}, byteArray0);
      
      String string0 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertNotNull(string0);
      assertEquals(32, classReader0.getAccess());
      
      Attribute attribute0 = new Attribute("wheel.asm.Edge");
      assertNotNull(attribute0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      
      String string1 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertNotNull(string1);
      assertEquals(32, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader1);
      assertEquals(33, classReader1.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      classReader1.accept((ClassVisitor) classWriter0, (-2209));
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotSame(classReader1, classReader0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(33, classReader1.getAccess());
      
      ClassReader classReader2 = new ClassReader(classReader1.b);
      assertFalse(classReader2.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader2.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader2);
      assertEquals(33, classReader2.getAccess());
      assertEquals(33, classReader1.getAccess());
      
      Attribute[] attributeArray0 = new Attribute[5];
      Attribute attribute1 = new Attribute("wheel.asm.Edge");
      assertFalse(attribute1.equals((Object)attribute0));
      assertNotNull(attribute1);
      assertTrue(attribute1.isUnknown());
      assertFalse(attribute1.isCodeAttribute());
      
      int int0 = classReader0.readUnsignedShort(2);
      assertFalse(classReader0.equals((Object)classReader2));
      assertFalse(classReader0.equals((Object)classReader1));
      assertEquals(47806, int0);
      assertNotSame(classReader0, classReader2);
      assertNotSame(classReader0, classReader1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(32, classReader0.getAccess());
      
      attributeArray0[0] = attribute1;
      attributeArray0[1] = attribute0;
      attributeArray0[3] = attribute0;
      attributeArray0[4] = attribute0;
      classReader2.accept((ClassVisitor) classWriter0, attributeArray0, 1130);
      assertFalse(classReader2.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader1.equals((Object)classReader2));
      assertNotSame(classReader2, classReader0);
      assertNotSame(classReader2, classReader1);
      assertNotSame(classReader1, classReader0);
      assertNotSame(classReader1, classReader2);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader2.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(33, classReader2.getAccess());
      assertEquals(33, classReader1.getAccess());
      
      classReader2.copyPool(classWriter0);
      assertFalse(classReader2.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader1.equals((Object)classReader2));
      assertNotSame(classReader2, classReader0);
      assertNotSame(classReader2, classReader1);
      assertNotSame(classReader1, classReader0);
      assertNotSame(classReader1, classReader2);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader2.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(33, classReader2.getAccess());
      assertEquals(33, classReader1.getAccess());
      
      int int1 = Type.LONG;
      assertFalse(int1 == int0);
      assertEquals(7, int1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader0);
      assertEquals(32, classReader0.getAccess());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte)82;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)82}, byteArray0);
      
      ByteVector byteVector0 = new ByteVector(346);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putByte(122);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotNull(byteVector1);
      
      String string0 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(string0);
      assertEquals(32, classReader0.getAccess());
      
      byteVector0.data = byteArray0;
      ByteVector byteVector2 = new ByteVector();
      assertFalse(byteVector2.equals((Object)byteVector1));
      assertFalse(byteVector2.equals((Object)byteVector0));
      assertNotNull(byteVector2);
      
      ByteVector byteVector3 = byteVector0.put11(122, 8);
      assertFalse(byteVector0.equals((Object)byteVector2));
      assertFalse(byteVector3.equals((Object)byteVector2));
      assertNotSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector3);
      assertNotSame(byteVector3, byteVector2);
      assertSame(byteVector3, byteVector0);
      assertSame(byteVector3, byteVector1);
      assertNotNull(byteVector3);
      
      String string1 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(string1);
      assertEquals(32, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(classReader1);
      assertEquals(33, classReader1.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(classReader1, (byte)122);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      assertEquals(33, classReader1.getAccess());
      
      classReader1.accept((ClassVisitor) classWriter0, (-2209));
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotSame(classReader1, classReader0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(33, classReader1.getAccess());
      
      ClassReader classReader2 = new ClassReader(classReader1.b);
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(927, classReader2.header);
      assertNotNull(classReader2);
      assertEquals(33, classReader1.getAccess());
      assertEquals(33, classReader2.getAccess());
      
      classReader1.copyPool(classWriter0);
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader1.equals((Object)classReader2));
      assertNotSame(classReader1, classReader0);
      assertNotSame(classReader1, classReader2);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(33, classReader1.getAccess());
      
      Attribute[] attributeArray0 = new Attribute[5];
      int int0 = Frame.NULL;
      assertEquals(16777221, int0);
      
      ClassWriter classWriter1 = new ClassWriter(4);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      
      classReader1.accept((ClassVisitor) classWriter1, attributeArray0, 4);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader1.equals((Object)classReader2));
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classReader1, classReader0);
      assertNotSame(classReader1, classReader2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(33, classReader1.getAccess());
      
      classReader0.copyPool(classWriter0);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader0.equals((Object)classReader2));
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader1.equals((Object)classReader2));
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader0, classReader2);
      assertNotSame(classReader1, classReader0);
      assertNotSame(classReader1, classReader2);
      assertNotSame(classWriter0, classWriter1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(32, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      
      // Undeclared exception!
      try { 
        classReader1.getItem(798);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 798
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = ClassReader.SIGNATURES;
      assertTrue(boolean0);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Method> class0 = Method.class;
      String string0 = Type.getInternalName(class0);
      assertEquals("java/lang/reflect/Method", string0);
      assertNotNull(string0);
      
      ClassReader classReader0 = new ClassReader("java/lang/reflect/Method");
      assertEquals(5839, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader0);
      assertEquals(49, classReader0.getAccess());
      
      String string1 = classReader0.getSuperName();
      assertFalse(string1.equals((Object)string0));
      assertEquals("java/lang/reflect/Executable", string1);
      assertEquals(5839, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(string1);
      assertEquals(49, classReader0.getAccess());
      
      int int0 = classReader0.readUnsignedShort(68);
      assertEquals(209, int0);
      assertEquals(5839, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(49, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("java/lang/reflect/Method");
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(5839, classReader1.header);
      assertNotNull(classReader1);
      assertEquals(49, classReader1.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(68);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      int int1 = classWriter0.newMethod("Ljava/lang/Synthetic;", "java/lang/reflect/Method", "org.apache.commons.io.filefilter.CanReadFileFilter", true);
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassReader classReader2 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      assertFalse(classReader2.equals((Object)classReader1));
      assertFalse(classReader2.equals((Object)classReader0));
      assertEquals(883, classReader2.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader2);
      assertEquals(33, classReader2.getAccess());
      
      ClassWriter classWriter1 = new ClassWriter(129);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      
      ClassWriter classWriter2 = new ClassWriter(5839);
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter2);
      
      ClassWriter classWriter3 = new ClassWriter(classReader1, 15);
      assertFalse(classReader1.equals((Object)classReader2));
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classWriter3.equals((Object)classWriter0));
      assertFalse(classWriter3.equals((Object)classWriter1));
      assertFalse(classWriter3.equals((Object)classWriter2));
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(5839, classReader1.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter3);
      assertEquals(49, classReader1.getAccess());
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter3);
      assertFalse(classReader1.equals((Object)classReader2));
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classWriter3.equals((Object)classWriter0));
      assertFalse(classWriter3.equals((Object)classWriter1));
      assertFalse(classWriter3.equals((Object)classWriter2));
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(5839, classReader1.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classAdapter0);
      assertEquals(49, classReader1.getAccess());
      
      // Undeclared exception!
      try { 
        classReader0.getItem(5839);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5839
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
          assertNotNull(fileSystemHandling0);
          
          boolean boolean0 = ClassReader.SIGNATURES;
          assertTrue(boolean0);
          
          ByteVector byteVector0 = new ByteVector();
          assertNotNull(byteVector0);
          
          char[] charArray0 = new char[5];
          boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
          assertFalse(boolean1 == boolean0);
          assertFalse(boolean1);
          
          Class<Method> class0 = Method.class;
          String string0 = Type.getInternalName(class0);
          assertEquals("java/lang/reflect/Method", string0);
          assertNotNull(string0);
          
          ClassReader classReader0 = new ClassReader("java/lang/reflect/Method");
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(5839, classReader0.header);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertNotNull(classReader0);
          assertEquals(49, classReader0.getAccess());
          
          ClassWriter classWriter0 = new ClassWriter(8);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertNotNull(classWriter0);
          
          ClassWriter classWriter1 = new ClassWriter(1);
          assertFalse(classWriter1.equals((Object)classWriter0));
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertNotNull(classWriter1);
          
          ClassAdapter classAdapter0 = new ClassAdapter(classWriter1);
          assertFalse(classWriter1.equals((Object)classWriter0));
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertNotNull(classAdapter0);
          
          classReader0.accept((ClassVisitor) classWriter0, 21);
          assertFalse(classWriter0.equals((Object)classWriter1));
          assertNotSame(classWriter0, classWriter1);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(5839, classReader0.header);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertEquals(49, classReader0.getAccess());
          
          long long0 = classReader0.readLong(2719);
          assertEquals(10458732229774442L, long0);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(5839, classReader0.header);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(49, classReader0.getAccess());
          
          String string1 = "getTypeParameters";
          ClassReader classReader1 = null;
          try {
            classReader1 = new ClassReader("getTypeParameters");
            fail("Expecting exception: IOException");
          
          } catch(Throwable e) {
             //
             // Class not found
             //
             verifyException("wheel.asm.ClassReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = ClassReader.SIGNATURES;
      assertTrue(boolean0);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      Class<Method> class0 = Method.class;
      String string0 = Type.getInternalName(class0);
      assertEquals("java/lang/reflect/Method", string0);
      assertNotNull(string0);
      
      ClassReader classReader0 = new ClassReader("java/lang/reflect/Method");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(5839, classReader0.header);
      assertNotNull(classReader0);
      assertEquals(49, classReader0.getAccess());
      
      String string1 = classReader0.getSuperName();
      assertFalse(string1.equals((Object)string0));
      assertEquals("java/lang/reflect/Executable", string1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(5839, classReader0.header);
      assertNotNull(string1);
      assertEquals(49, classReader0.getAccess());
      
      int int0 = 68;
      int int1 = classReader0.readUnsignedShort(68);
      assertFalse(int1 == int0);
      assertEquals(209, int1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(5839, classReader0.header);
      assertEquals(49, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(68);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classAdapter0);
      
      ClassReader classReader1 = new ClassReader(classReader0.b);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(5839, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(5839, classReader1.header);
      assertNotNull(classReader1);
      assertEquals(49, classReader0.getAccess());
      assertEquals(49, classReader1.getAccess());
      
      classReader1.accept((ClassVisitor) classWriter0, 1850);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      classWriter1.newConst(mockJapaneseDate0);
      int int2 = 717;
      classReader0.readLong(int2);
      String string2 = "getTypeParameters";
      ClassReader classReader2 = new ClassReader(string2);
      classReader1.accept((ClassVisitor) classWriter0, classReader2.header);
      String string3 = null;
      Attribute attribute0 = new Attribute(string3);
      classReader1.accept((ClassVisitor) classWriter1, int0);
      classReader0.readLong(int2);
      String string4 = "}YK}]:O$y:e,Ax<\\S%o";
      ClassReader classReader3 = new ClassReader(string4);
      ClassWriter classWriter2 = new ClassWriter(classReader3.EXPAND_FRAMES);
      classReader1.accept((ClassVisitor) classWriter0, classWriter1.COMPUTE_FRAMES);
      classReader3.accept((ClassVisitor) classAdapter0, classReader2.SKIP_CODE);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = ClassReader.SIGNATURES;
      assertTrue(boolean0);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Method> class0 = Method.class;
      String string0 = Type.getInternalName(class0);
      assertEquals("java/lang/reflect/Method", string0);
      assertNotNull(string0);
      
      ClassReader classReader0 = new ClassReader("java/lang/reflect/Method");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(5839, classReader0.header);
      assertNotNull(classReader0);
      assertEquals(49, classReader0.getAccess());
      
      String string1 = classReader0.getSuperName();
      assertFalse(string1.equals((Object)string0));
      assertEquals("java/lang/reflect/Executable", string1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(5839, classReader0.header);
      assertNotNull(string1);
      assertEquals(49, classReader0.getAccess());
      
      int int0 = classReader0.readUnsignedShort(68);
      assertEquals(209, int0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(5839, classReader0.header);
      assertEquals(49, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(68);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      int int1 = classWriter0.newMethod("java/lang/reflect/Method", "java/lang/reflect/Method", "org.apache.commons.io.filefilter.CanReadFileFilter", true);
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ClassReader classReader1 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader1);
      assertEquals(33, classReader1.getAccess());
      
      int int2 = 129;
      ClassWriter classWriter1 = new ClassWriter(59);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classAdapter0);
      
      classReader1.accept((ClassVisitor) classAdapter0, 544);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotSame(classWriter0, classWriter1);
      assertNotSame(classReader1, classReader0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(883, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(33, classReader1.getAccess());
      
      ClassReader classReader2 = null;
      try {
        classReader2 = new ClassReader("");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = ClassReader.SIGNATURES;
      assertTrue(boolean0);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Method> class0 = Method.class;
      String string0 = Type.getInternalName(class0);
      assertEquals("java/lang/reflect/Method", string0);
      assertNotNull(string0);
      
      ClassReader classReader0 = new ClassReader("java/lang/reflect/Method");
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(5839, classReader0.header);
      assertNotNull(classReader0);
      assertEquals(49, classReader0.getAccess());
      
      String string1 = classReader0.getSuperName();
      assertFalse(string1.equals((Object)string0));
      assertEquals("java/lang/reflect/Executable", string1);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(5839, classReader0.header);
      assertNotNull(string1);
      assertEquals(49, classReader0.getAccess());
      
      int int0 = classReader0.readUnsignedShort(68);
      assertEquals(209, int0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(5839, classReader0.header);
      assertEquals(49, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(68);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      int int1 = classWriter0.newMethod("java/lang/reflect/Method", "java/lang/reflect/Method", "org.apache.commons.io.filefilter.CanReadFileFilter", true);
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ClassReader classReader1 = new ClassReader("java/lang/reflect/Method");
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(5839, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader1);
      assertEquals(49, classReader1.getAccess());
      
      int int2 = 129;
      ClassWriter classWriter1 = new ClassWriter(59);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classAdapter0);
      
      AnnotationVisitor annotationVisitor0 = classAdapter0.visitAnnotation("java/lang/reflect/Executable", true);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertNotSame(classWriter0, classWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      classReader1.accept((ClassVisitor) classAdapter0, 544);
      ClassReader classReader2 = new ClassReader("");
      classReader2.readLong(int2);
      int int3 = 1071;
      ClassReader classReader3 = new ClassReader(string1);
      ClassWriter classWriter2 = new ClassWriter(classReader3.SKIP_DEBUG);
      classReader2.accept((ClassVisitor) classWriter1, int3);
      char[] charArray0 = new char[1];
      char char0 = 'Y';
      charArray0[0] = char0;
      classReader2.readClass(classWriter1.COMPUTE_MAXS, charArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = ClassReader.SIGNATURES;
      ByteVector byteVector0 = new ByteVector();
      char[] charArray0 = new char[5];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<Method> class0 = Method.class;
      Type.getInternalName(class0);
      ClassReader classReader0 = new ClassReader("java/lang/reflect/Method");
      classReader0.getSuperName();
      classReader0.readUnsignedShort(68);
      ClassWriter classWriter0 = new ClassWriter(68);
      ClassReader classReader1 = new ClassReader("java/lang/reflect/Executable");
      ClassWriter classWriter1 = new ClassWriter(5839);
      classReader0.copyPool(classWriter0);
      ClassWriter classWriter2 = new ClassWriter(classReader1, 1);
      classReader1.accept((ClassVisitor) classWriter0, (-1416));
      classReader0.readLong(1);
      classReader0.readUTF8(858, charArray0);
      classReader0.readUTF8(classWriter0.COMPUTE_FRAMES, charArray0);
      classReader0.getInterfaces();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = ClassReader.SIGNATURES;
      ByteVector byteVector0 = new ByteVector();
      char[] charArray0 = new char[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Method> class0 = Method.class;
      Type.getInternalName(class0);
      ClassReader classReader0 = new ClassReader("java/lang/reflect/Method");
      classReader0.getSuperName();
      ClassWriter classWriter0 = new ClassWriter(22);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassReader classReader1 = new ClassReader("java/lang/reflect/Executable");
      ClassWriter classWriter1 = new ClassWriter(classReader1, 6572);
      classReader1.accept((ClassVisitor) classWriter1, 1);
      classReader1.getInterfaces();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = ClassReader.SIGNATURES;
      ByteVector byteVector0 = new ByteVector();
      char[] charArray0 = new char[5];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<Method> class0 = Method.class;
      Type.getInternalName(class0);
      ClassReader classReader0 = new ClassReader("java/lang/reflect/Method");
      classReader0.getSuperName();
      classReader0.readUnsignedShort(68);
      ClassWriter classWriter0 = new ClassWriter(68);
      ClassReader classReader1 = new ClassReader("java/lang/reflect/Executable");
      // Undeclared exception!
      try { 
        classReader1.readUTF8(4, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }
}
