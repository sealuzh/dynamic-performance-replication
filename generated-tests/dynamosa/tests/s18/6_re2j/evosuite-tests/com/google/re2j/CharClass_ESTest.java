/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 06:14:14 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      int[][] intArray1 = new int[0][1];
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      CharClass charClass3 = charClass2.appendFoldedRange(1, 1);
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      CharClass charClass4 = charClass2.appendFoldedRange(66640, 2126);
      assertNotNull(charClass4);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      CharClass charClass5 = charClass3.appendNegatedTable(intArray1);
      assertNotNull(charClass5);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      CharClass charClass6 = charClass2.cleanClass();
      assertNotNull(charClass6);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(66640, 0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass2 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass2.appendFoldedRange(0, (-1929));
      assertNotNull(charClass3);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass4 = charClass2.appendLiteral((-1518198), 0);
      assertNotNull(charClass4);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 3330;
      int int1 = 43520;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      CharClass charClass1 = charClass0.appendLiteral((-1768), (-521));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass3 = charClass2.appendFoldedRange(66640, 7631);
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass4 = charClass1.cleanClass();
      assertNotNull(charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      
      CharClass charClass5 = charClass1.appendClassWithSign(intArray0, 539);
      assertNotNull(charClass5);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass6 = charClass2.appendClass(intArray0);
      assertNotNull(charClass6);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      String string0 = CharClass.charClassToString(intArray0, (-3629));
      assertNotNull(string0);
      assertEquals(8, intArray0.length);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass7 = charClass6.appendClass(intArray0);
      assertNotNull(charClass7);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass6);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass8 = charClass7.appendRange((-3152), (-1768));
      assertNotNull(charClass8);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass6);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass3);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      int[] intArray1 = charClass6.toArray();
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass6);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1768), (-1768), 0, 0, 66640, 7631, (-3152), (-1768)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = null;
      int int0 = 93;
      // Undeclared exception!
      try { 
        CharClass.charClassToString((int[]) null, 93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-520);
      intArray0[1] = (-3584);
      intArray0[2] = 177984;
      intArray0[3] = 1234;
      intArray0[4] = 46;
      intArray0[5] = 93;
      intArray0[6] = 262;
      CharClass charClass1 = charClass0.appendLiteral(1099, (-2314));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {(-520), (-3584), 177984, 1234, 46, 93, 262, 0}, intArray0);
      
      CharClass charClass3 = charClass2.appendFoldedRange(177984, 262);
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {(-520), (-3584), 177984, 1234, 46, 93, 262, 0}, intArray0);
      
      CharClass charClass4 = charClass3.cleanClass();
      assertNotNull(charClass4);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {(-520), (-3584), 177984, 1234, 46, 93, 262, 0}, intArray0);
      
      CharClass charClass5 = charClass0.appendClassWithSign(intArray0, 177984);
      assertNotNull(charClass5);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertArrayEquals(new int[] {(-520), (-3584), 177984, 1234, 46, 93, 262, 0}, intArray0);
      
      CharClass charClass6 = charClass5.appendClass(intArray0);
      assertNotNull(charClass6);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertArrayEquals(new int[] {(-520), (-3584), 177984, 1234, 46, 93, 262, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 46);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[9][0];
      int[] intArray1 = new int[7];
      intArray1[0] = (-2647);
      intArray1[1] = (-1);
      intArray1[2] = 510;
      intArray1[3] = (-513);
      intArray1[4] = 2335;
      intArray1[5] = 128591;
      intArray1[6] = 1349;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 2335;
      intArray2[1] = (-513);
      intArray2[2] = 510;
      intArray2[3] = 2335;
      intArray2[4] = 0;
      intArray2[5] = (-2647);
      intArray2[6] = (-513);
      intArray2[7] = (-1);
      intArray2[8] = 1349;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 510;
      intArray3[1] = 128591;
      intArray3[2] = 1349;
      intArray3[3] = (-513);
      intArray3[4] = (-2647);
      intArray3[5] = (-513);
      intArray3[6] = 2335;
      intArray3[7] = (-1);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[0];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray0[3] = intArray4;
      int[] intArray5 = new int[9];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = 2335;
      intArray5[1] = 510;
      intArray5[2] = 510;
      intArray5[3] = 128591;
      intArray5[4] = 1349;
      intArray5[5] = (-2647);
      intArray5[6] = (-2647);
      intArray5[7] = (-1);
      intArray5[8] = 510;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[7];
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray1));
      
      intArray6[0] = 4789;
      intArray6[1] = 510;
      intArray6[2] = (-513);
      intArray6[3] = 510;
      intArray6[4] = 128591;
      intArray6[5] = (-1907);
      intArray6[6] = 510;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[8];
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray3));
      
      intArray7[0] = 0;
      intArray7[1] = 2507;
      intArray7[2] = 4789;
      intArray7[3] = (-2647);
      intArray7[4] = 510;
      intArray7[5] = 0;
      intArray7[6] = 128591;
      intArray7[7] = (-1907);
      intArray0[6] = intArray7;
      int[] intArray8 = new int[1];
      assertFalse(intArray8.equals((Object)intArray6));
      assertFalse(intArray8.equals((Object)intArray2));
      assertFalse(intArray8.equals((Object)intArray7));
      assertFalse(intArray8.equals((Object)intArray4));
      assertFalse(intArray8.equals((Object)intArray5));
      assertFalse(intArray8.equals((Object)intArray3));
      assertFalse(intArray8.equals((Object)intArray1));
      
      intArray8[0] = 0;
      intArray0[7] = intArray8;
      int[] intArray9 = new int[1];
      assertFalse(intArray9.equals((Object)intArray8));
      assertFalse(intArray9.equals((Object)intArray7));
      assertFalse(intArray9.equals((Object)intArray1));
      assertFalse(intArray9.equals((Object)intArray5));
      assertFalse(intArray9.equals((Object)intArray4));
      assertFalse(intArray9.equals((Object)intArray6));
      assertFalse(intArray9.equals((Object)intArray2));
      assertFalse(intArray9.equals((Object)intArray3));
      
      intArray9[0] = 2507;
      intArray0[8] = intArray9;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1187;
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-1988));
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass1.appendRange((-1988), 783);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[0][6];
      CharClass charClass3 = charClass2.appendTableWithSign(intArray1, 0);
      assertNotNull(charClass3);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass4 = charClass3.appendLiteral(783, 0);
      assertNotNull(charClass4);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      charClass4.appendFoldedRange((-1988), 4918);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 3332;
      int int0 = 43520;
      intArray0[1] = 43520;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {3332, 43520}, intArray0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass3 = charClass2.appendLiteral(1114111, 8336);
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {1114111, 1114111}, intArray0);
      
      CharClass charClass4 = new CharClass();
      assertNotNull(charClass4);
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass0));
      
      int int1 = 1700;
      int int2 = 1114111;
      CharClass charClass5 = charClass0.appendLiteral((-2989), 1114111);
      assertNotNull(charClass5);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass5.equals((Object)charClass4));
      assertArrayEquals(new int[] {1114111, 1114111}, intArray0);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass4.appendTableWithSign((int[][]) null, 1700);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3866;
      intArray0[1] = 1472;
      intArray0[2] = (-1550);
      intArray0[3] = (-1377);
      intArray0[4] = 3248;
      intArray0[5] = 11680;
      intArray0[6] = 93;
      intArray0[7] = 64318;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {3866, 1472, (-1550), (-1377), 3248, 11680, 93, 64318}, intArray0);
      
      int[][] intArray1 = new int[3][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      assertEquals(3, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {3866, 1472, (-1550), (-1377), 3248, 11680, 93, 64318}, intArray0);
      
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-1377);
      intArray2[1] = 93;
      intArray2[2] = 0;
      intArray2[3] = (-1550);
      intArray2[4] = 3248;
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1616);
      intArray0[1] = 739;
      intArray0[2] = 2083;
      intArray0[3] = (-306);
      intArray0[4] = 0;
      intArray0[5] = 91;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-1616), 739, 2083, (-306), 0, 91}, intArray0);
      
      int[][] intArray1 = new int[5][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 2083;
      intArray2[1] = 91;
      intArray1[4] = intArray2;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      int int0 = (-521);
      CharClass charClass1 = charClass0.appendLiteral((-521), 8336);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass3 = charClass0.cleanClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, 8336);
      assertNotNull(charClass4);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass5 = charClass2.appendClassWithSign(intArray0, 32);
      assertNotNull(charClass5);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass6 = charClass4.appendFoldedClass(intArray0);
      assertNotNull(charClass6);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3926;
      intArray0[1] = 1041;
      intArray0[2] = 4048;
      intArray0[3] = 12335;
      intArray0[4] = 65;
      intArray0[5] = (-963);
      intArray0[6] = 2;
      intArray0[7] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {3926, 1041, 4048, 12335, 65, (-963), 2, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {3926, 1041, 4048, 12335, 65, (-963), (-962), 1114111}, intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedRange(2352, 0);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {3926, 1041, 4048, 12335, 65, (-963), (-962), 1114111}, intArray0);
      
      // Undeclared exception!
      charClass2.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[8];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      int[][] intArray1 = new int[0][4];
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3425);
      int int0 = 67640;
      intArray0[1] = 67640;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-3425), 67640, 0, 0}, intArray0);
      
      String string0 = CharClass.charClassToString(intArray0, (-34236301));
      assertNotNull(string0);
      assertEquals(4, intArray0.length);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {(-3425), 67640, 0, 0}, intArray0);
      
      String string1 = charClass0.toString();
      assertNotNull(string1);
      assertEquals(4, intArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[0xfffff29f-0x10838 0x0]", string1);
      assertArrayEquals(new int[] {(-3425), 67640, 0, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-3425), 67640, (-3425), 67640}, intArray0);
      
      String string2 = charClass0.toString();
      assertNotNull(string2);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("[0xfffff29f-0x10838 0xfffff29f-0x10838]", string2);
      assertArrayEquals(new int[] {(-3425), 67640, (-3425), 67640}, intArray0);
      
      CharClass charClass2 = charClass0.appendLiteral((-520), (-956));
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {(-3425), 67640, (-3425), 67640}, intArray0);
      
      CharClass charClass3 = charClass1.appendClass(intArray0);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {(-3425), 67640, (-3425), 67640}, intArray0);
      
      CharClass charClass4 = charClass3.appendFoldedRange((-2222), (-2151));
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {(-3425), 67640, (-3425), 67640}, intArray0);
      
      CharClass charClass5 = charClass4.cleanClass();
      assertNotNull(charClass5);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertArrayEquals(new int[] {(-3425), 67640, (-3425), 67640}, intArray0);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1099;
      // Undeclared exception!
      try { 
        charClass5.appendClassWithSign(intArray1, (-3425));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-733);
      intArray0[2] = (-370);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-733), 0, (-370)}, intArray0);
      
      CharClass charClass1 = charClass0.appendRange((-733), 9827);
      assertNotNull(charClass1);
      assertEquals(3, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-733), (-733), 9827}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 4;
      intArray0[2] = 65;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 4, 65}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 3330;
      intArray0[1] = 43520;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {3330, 43520}, intArray0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass3 = charClass0.appendLiteral(0, 43520);
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      CharClass charClass4 = charClass1.negateClass();
      assertNotNull(charClass4);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {1, 1114111}, intArray0);
      
      String string0 = CharClass.charClassToString(intArray0, (-1463));
      assertNotNull(string0);
      assertEquals(2, intArray0.length);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {1, 1114111}, intArray0);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 43520;
      intArray1[1] = 8336;
      intArray1[2] = (-958);
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 3330;
      intArray0[0] = 3330;
      intArray0[1] = 43520;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {3330, 43520}, intArray0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass3 = charClass2.appendLiteral(1114111, 8336);
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {1114111, 1114111}, intArray0);
      
      CharClass charClass4 = charClass0.negateClass();
      assertNotNull(charClass4);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {0, 1114110}, intArray0);
      
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertNotNull(string0);
      assertEquals(2, intArray0.length);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {0, 1114110}, intArray0);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      charClass2.appendFoldedRange(711, 43520);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(47, (-3153));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      CharClass charClass3 = charClass0.appendClassWithSign(intArray0, 0);
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 3330;
      intArray0[0] = 3330;
      intArray0[1] = 43520;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {3330, 43520}, intArray0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      int[][] intArray1 = new int[2][2];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 3330;
      intArray1[1] = intArray2;
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass3 = charClass1.appendLiteral(66464, 66464);
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass3.appendTableWithSign(intArray1, 267);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 3330;
      intArray0[1] = 43520;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {3330, 43520}, intArray0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      int[][] intArray1 = new int[0][6];
      CharClass charClass3 = charClass1.appendNegatedTable(intArray1);
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3425);
      intArray0[1] = 67603;
      intArray0[2] = 1699;
      intArray0[3] = 0;
      String string0 = CharClass.charClassToString(intArray0, (-1958));
      assertNotNull(string0);
      assertEquals(4, intArray0.length);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {(-3425), 67603, 1699, 0}, intArray0);
      
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[2][8];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.appendFoldedRange((-3425), 0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {(-3425), 67603, 1699, 0}, intArray0);
      
      CharClass charClass3 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {(-3425), 67603, 1699, 0}, intArray0);
      
      int[] intArray2 = charClass0.toArray();
      assertNotNull(intArray2);
      assertEquals(2, intArray2.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-3425), 1114111}, intArray2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[8][4];
      int[] intArray1 = new int[4];
      intArray1[0] = (-2407);
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = (-2407);
      intArray2[3] = (-2407);
      intArray2[4] = (-2490);
      intArray2[5] = 0;
      intArray2[6] = 0;
      intArray2[7] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[9];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = (-2490);
      intArray3[1] = (-2490);
      intArray3[2] = (-1499);
      intArray3[3] = 93;
      intArray3[4] = 0;
      intArray3[5] = 1306;
      intArray3[6] = 0;
      intArray3[7] = 0;
      intArray3[8] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[4];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = (-1499);
      intArray4[1] = (-2407);
      intArray4[2] = 1306;
      intArray4[3] = 93;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[3];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = 0;
      intArray5[1] = 0;
      intArray5[2] = (-2490);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[0];
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray3));
      
      intArray0[5] = intArray6;
      int[] intArray7 = new int[8];
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray6));
      
      intArray7[0] = (-2407);
      intArray7[1] = (-2490);
      intArray7[2] = 0;
      intArray7[3] = (-251);
      intArray7[4] = (-2407);
      intArray7[5] = 274;
      intArray7[6] = 0;
      intArray7[7] = 0;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[9];
      assertFalse(intArray8.equals((Object)intArray2));
      assertFalse(intArray8.equals((Object)intArray6));
      assertFalse(intArray8.equals((Object)intArray5));
      assertFalse(intArray8.equals((Object)intArray3));
      assertFalse(intArray8.equals((Object)intArray7));
      assertFalse(intArray8.equals((Object)intArray4));
      assertFalse(intArray8.equals((Object)intArray1));
      
      intArray8[0] = 0;
      intArray8[1] = (-2407);
      intArray8[2] = 93;
      intArray8[3] = 93;
      intArray8[4] = 0;
      intArray8[5] = 0;
      intArray8[6] = 274;
      intArray8[7] = 0;
      intArray8[8] = 0;
      intArray0[7] = intArray8;
      // Undeclared exception!
      charClass0.appendTableWithSign(intArray0, (-2901));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass3 = charClass1.appendClass(intArray0);
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass4 = charClass0.negateClass();
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      
      CharClass charClass5 = charClass1.cleanClass();
      assertNotNull(charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      
      CharClass charClass6 = charClass2.appendClassWithSign(intArray0, 552);
      assertNotNull(charClass6);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass7 = charClass2.appendClass(intArray0);
      assertNotNull(charClass7);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      String string0 = CharClass.charClassToString(intArray0, (-3624));
      assertNotNull(string0);
      assertEquals(8, intArray0.length);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass8 = charClass7.appendClass(intArray0);
      assertNotNull(charClass8);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass8);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass6);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass9 = charClass8.negateClass();
      assertNotNull(charClass9);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass8);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass6);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass5);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      int[] intArray1 = charClass7.toArray();
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass8);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      int int0 = (-520);
      intArray0[0] = (-520);
      intArray0[1] = (-3584);
      intArray0[2] = 177984;
      intArray0[3] = 1234;
      intArray0[4] = 46;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-520), (-3584), 177984, 1234, 46, 0, 0, 0}, intArray0);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass1.appendClassWithSign(intArray0, (-3584));
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {(-520), (-3584), 177984, 1234, 46, 0, 0, 0}, intArray0);
      
      CharGroup charGroup0 = null;
      CharClass charClass4 = charClass1.appendFoldedClass(intArray0);
      assertNotNull(charClass4);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {(-520), (-3584), 177984, 1234, 46, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass3.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3425);
      intArray0[1] = 67603;
      int int0 = 1699;
      intArray0[2] = 1699;
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-3425), 67603, 1699, 0}, intArray0);
      
      // Undeclared exception!
      charClass0.appendFoldedRange(258, 67603);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 3330;
      intArray0[1] = 43520;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {3330, 43520}, intArray0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass3 = charClass2.appendLiteral(1114111, 8336);
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {1114111, 1114111}, intArray0);
      
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      assertNotNull(charClass4);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass5 = new CharClass(intArray0);
      assertNotNull(charClass5);
      assertEquals(2, intArray0.length);
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass4));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass0));
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      int[][] intArray1 = new int[3][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      // Undeclared exception!
      try { 
        charClass5.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3425);
      intArray0[1] = 67640;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-3425), 67640, 0, 0}, intArray0);
      
      String string0 = CharClass.charClassToString(intArray0, (-34236301));
      assertNotNull(string0);
      assertEquals(4, intArray0.length);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {(-3425), 67640, 0, 0}, intArray0);
      
      String string1 = charClass0.toString();
      assertNotNull(string1);
      assertEquals(4, intArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[0xfffff29f-0x10838 0x0]", string1);
      assertArrayEquals(new int[] {(-3425), 67640, 0, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-3425), 67640, (-3425), 67640}, intArray0);
      
      String string2 = charClass0.toString();
      assertNotNull(string2);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("[0xfffff29f-0x10838 0xfffff29f-0x10838]", string2);
      assertArrayEquals(new int[] {(-3425), 67640, (-3425), 67640}, intArray0);
      
      CharClass charClass2 = charClass0.negateClass();
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {67641, 1114111, (-3425), 67640}, intArray0);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {0, 1114111, (-3425), 67640}, intArray0);
      
      CharClass charClass4 = charClass1.cleanClass();
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {0, 1114111, (-3425), 67640}, intArray0);
      
      CharClass charClass5 = charClass1.appendClassWithSign(intArray0, (-2));
      assertNotNull(charClass5);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertArrayEquals(new int[] {0, 1114111, (-3425), 67640}, intArray0);
      
      CharClass charClass6 = charClass2.appendFoldedClass(intArray0);
      assertNotNull(charClass6);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertArrayEquals(new int[] {(-3425), 1114111, (-3425), 67640}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass4.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 3330;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {3330, 0}, intArray0);
      
      CharClass charClass2 = charClass0.appendClassWithSign(intArray0, 3330);
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {3330, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 463;
      intArray0[2] = 2493;
      int[][] intArray1 = new int[2][7];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 2493;
      intArray2[1] = (-152);
      intArray2[2] = 0;
      intArray2[3] = 463;
      intArray2[4] = 0;
      intArray1[1] = intArray2;
      CharClass charClass2 = charClass0.appendNegatedTable(intArray1);
      assertNotNull(charClass2);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      intArray0[3] = (-152);
      intArray0[4] = (-815);
      intArray0[5] = 0;
      intArray0[6] = 10;
      intArray0[7] = 0;
      CharClass charClass3 = charClass1.appendNegatedClass(intArray0);
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {0, 463, 2493, (-152), (-815), 0, 10, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-520);
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-520), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      int[][] intArray1 = new int[0][3];
      CharClass charClass2 = charClass0.appendTableWithSign(intArray1, (-1734));
      assertNotNull(charClass2);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass1.appendLiteral((-1734), (-520));
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {(-520), 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 3330;
      intArray0[1] = 43520;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {3330, 43520}, intArray0);
      
      int int0 = (-2338);
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 32;
      int int1 = 2129;
      int int2 = 1;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      int[][] intArray1 = new int[0][1];
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[3];
      int int0 = (-3153);
      CharClass charClass1 = charClass0.appendFoldedRange((-3153), (-3153));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1176);
      intArray0[1] = (-1);
      intArray0[2] = (-1116);
      intArray0[3] = 521;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1176), (-1), (-1116), 521}, intArray0);
      
      int[][] intArray1 = new int[2][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      charClass0.appendTableWithSign(intArray1, (-1176));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3425);
      intArray0[1] = 67640;
      intArray0[2] = 1699;
      intArray0[3] = (-145);
      String string0 = CharClass.charClassToString(intArray0, (-1963));
      assertNotNull(string0);
      assertEquals(4, intArray0.length);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {(-3425), 67640, 1699, (-145)}, intArray0);
      
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[2][8];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.appendLiteral((-1963), 1700);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      intArray1[1] = intArray0;
      CharClass charClass2 = charClass0.appendTableWithSign(intArray1, (-3425));
      assertNotNull(charClass2);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendLiteral((-3425), 306);
      assertNotNull(charClass3);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass3.appendNegatedTable(intArray1);
      assertNotNull(charClass4);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      
      CharClass charClass5 = charClass3.appendRange((-1105), (-3425));
      assertNotNull(charClass5);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      
      CharClass charClass6 = charClass4.negateClass();
      assertNotNull(charClass6);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      
      CharClass charClass7 = charClass4.appendFoldedRange(252, (-2039));
      assertNotNull(charClass7);
      assertEquals(2, intArray1.length);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      
      CharClass charClass8 = charClass7.appendNegatedClass(intArray0);
      assertNotNull(charClass8);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {(-3425), 67640, 1699, (-145)}, intArray0);
      
      CharClass charClass9 = charClass8.appendTableWithSign(intArray1, (-2039));
      assertNotNull(charClass9);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass1);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {(-3425), 67640, 1699, (-145)}, intArray0);
      
      CharClass charClass10 = charClass9.appendNegatedClass(intArray0);
      assertNotNull(charClass10);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass10);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass10);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass10);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass0);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {(-3425), 67640, 1699, (-145)}, intArray0);
      
      CharClass charClass11 = charClass8.appendLiteral(67640, 1699);
      assertNotNull(charClass11);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass11);
      assertSame(charClass7, charClass10);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass11);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass10);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass10);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass11);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {(-3425), 67640, 1699, (-145)}, intArray0);
      
      CharClass charClass12 = charClass3.appendTableWithSign(intArray1, (-1901));
      assertNotNull(charClass12);
      assertEquals(2, intArray1.length);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass9);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass12);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-145);
      // Undeclared exception!
      try { 
        charClass11.appendFoldedClass(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-3063), (-1529));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendFoldedRange(0, 0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(856, 0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[][] intArray0 = new int[9][2];
      int[] intArray1 = new int[6];
      intArray1[0] = 856;
      intArray1[1] = 856;
      intArray1[2] = 856;
      intArray1[3] = 0;
      intArray1[4] = 856;
      intArray1[5] = 856;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 7394;
      intArray2[1] = 0;
      intArray2[2] = 856;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[0];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray0[2] = intArray3;
      int[] intArray4 = new int[0];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray0[3] = intArray4;
      int[] intArray5 = new int[3];
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray3));
      
      intArray5[0] = 856;
      intArray5[1] = 0;
      intArray5[2] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[1];
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray2));
      
      intArray6[0] = 0;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[6];
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray3));
      
      intArray7[0] = 0;
      intArray7[1] = 856;
      intArray7[2] = 0;
      intArray7[3] = 7394;
      intArray7[4] = 856;
      intArray7[5] = 7394;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[1];
      assertFalse(intArray8.equals((Object)intArray4));
      assertFalse(intArray8.equals((Object)intArray2));
      assertFalse(intArray8.equals((Object)intArray6));
      assertFalse(intArray8.equals((Object)intArray3));
      assertFalse(intArray8.equals((Object)intArray1));
      assertFalse(intArray8.equals((Object)intArray7));
      assertFalse(intArray8.equals((Object)intArray5));
      
      intArray8[0] = 0;
      intArray0[7] = intArray8;
      int[] intArray9 = new int[9];
      assertFalse(intArray9.equals((Object)intArray6));
      assertFalse(intArray9.equals((Object)intArray8));
      assertFalse(intArray9.equals((Object)intArray1));
      assertFalse(intArray9.equals((Object)intArray7));
      assertFalse(intArray9.equals((Object)intArray3));
      assertFalse(intArray9.equals((Object)intArray4));
      assertFalse(intArray9.equals((Object)intArray2));
      assertFalse(intArray9.equals((Object)intArray5));
      
      intArray9[0] = 0;
      intArray9[1] = 0;
      intArray9[2] = 856;
      intArray9[3] = 856;
      intArray9[4] = 7394;
      intArray9[5] = 0;
      intArray9[6] = 0;
      intArray9[7] = 0;
      intArray9[8] = 7394;
      intArray0[8] = intArray9;
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign(intArray0, 856);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 807;
      intArray0[1] = 2066;
      intArray0[2] = 66640;
      intArray0[3] = 4347;
      intArray0[4] = 0;
      intArray0[5] = 70;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {807, 2066, 66640, 4347, 0, 70}, intArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 67603;
      intArray0[2] = 1699;
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {2, 67603, 1699, 0}, intArray0);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(47, (-3153));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[8][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 1693;
      CharClass charClass1 = charClass0.appendFoldedRange(1693, 1693);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1693;
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int[] intArray0 = new int[22];
      intArray0[0] = (-3425);
      intArray0[1] = 67640;
      intArray0[2] = 1699;
      intArray0[3] = (-145);
      String string0 = CharClass.charClassToString(intArray0, (-1963));
      assertNotNull(string0);
      assertEquals(22, intArray0.length);
      assertEquals("[]", string0);
      
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[2][8];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.appendLiteral((-1963), 1700);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      intArray1[1] = intArray0;
      CharClass charClass2 = charClass0.appendTableWithSign(intArray1, (-3425));
      assertNotNull(charClass2);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendLiteral((-3425), 306);
      assertNotNull(charClass3);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass3.appendNegatedTable(intArray1);
      assertNotNull(charClass4);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      
      CharClass charClass5 = charClass3.appendRange((-1105), (-3425));
      assertNotNull(charClass5);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      
      CharClass charClass6 = charClass4.negateClass();
      assertNotNull(charClass6);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      
      CharClass charClass7 = charClass4.appendFoldedRange(252, (-2039));
      assertNotNull(charClass7);
      assertEquals(2, intArray1.length);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      
      CharClass charClass8 = charClass7.appendNegatedClass(intArray0);
      assertNotNull(charClass8);
      assertEquals(22, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass8);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      
      CharClass charClass9 = charClass8.appendTableWithSign(intArray1, (-2039));
      assertNotNull(charClass9);
      assertEquals(22, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass9);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass9);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      
      CharClass charClass10 = charClass9.appendNegatedClass(intArray0);
      assertNotNull(charClass10);
      assertEquals(22, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass10);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass9);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass10);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass9);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass10);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass8);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      
      CharClass charClass11 = charClass8.appendLiteral(67640, 1699);
      assertNotNull(charClass11);
      assertEquals(22, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass10);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass11);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass9);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass10);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass11);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass9);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass5);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass11);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass11);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      
      CharClass charClass12 = charClass3.appendTableWithSign(intArray1, (-1901));
      assertNotNull(charClass12);
      assertEquals(2, intArray1.length);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass10);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass12);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      
      CharClass charClass13 = charClass6.appendNegatedTable(intArray1);
      assertNotNull(charClass13);
      assertEquals(2, intArray1.length);
      assertSame(charClass13, charClass4);
      assertSame(charClass13, charClass2);
      assertSame(charClass13, charClass8);
      assertSame(charClass13, charClass12);
      assertSame(charClass13, charClass10);
      assertSame(charClass13, charClass11);
      assertSame(charClass13, charClass9);
      assertSame(charClass13, charClass5);
      assertSame(charClass13, charClass7);
      assertSame(charClass13, charClass6);
      assertSame(charClass13, charClass1);
      assertSame(charClass13, charClass0);
      assertSame(charClass13, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass11);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass13);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass12);
      assertSame(charClass3, charClass13);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass11);
      assertSame(charClass4, charClass12);
      assertSame(charClass4, charClass13);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass10);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass12);
      assertSame(charClass6, charClass13);
      assertSame(charClass6, charClass11);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass1);
      
      CharClass charClass14 = charClass13.cleanClass();
      assertNotNull(charClass14);
      assertEquals(2, intArray1.length);
      assertSame(charClass13, charClass4);
      assertSame(charClass13, charClass2);
      assertSame(charClass13, charClass8);
      assertSame(charClass13, charClass12);
      assertSame(charClass13, charClass10);
      assertSame(charClass13, charClass11);
      assertSame(charClass13, charClass9);
      assertSame(charClass13, charClass5);
      assertSame(charClass13, charClass7);
      assertSame(charClass13, charClass6);
      assertSame(charClass13, charClass1);
      assertSame(charClass13, charClass14);
      assertSame(charClass13, charClass0);
      assertSame(charClass13, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass11);
      assertSame(charClass14, charClass2);
      assertSame(charClass14, charClass8);
      assertSame(charClass14, charClass12);
      assertSame(charClass14, charClass13);
      assertSame(charClass14, charClass3);
      assertSame(charClass14, charClass6);
      assertSame(charClass14, charClass9);
      assertSame(charClass14, charClass7);
      assertSame(charClass14, charClass5);
      assertSame(charClass14, charClass1);
      assertSame(charClass14, charClass11);
      assertSame(charClass14, charClass0);
      assertSame(charClass14, charClass10);
      assertSame(charClass14, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass13);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass14);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass14);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass12);
      assertSame(charClass3, charClass13);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass14);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass11);
      assertSame(charClass4, charClass12);
      assertSame(charClass4, charClass13);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass14);
      assertSame(charClass6, charClass10);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass12);
      assertSame(charClass6, charClass13);
      assertSame(charClass6, charClass11);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass1);
      
      CharClass charClass15 = charClass14.appendFoldedClass(intArray0);
      assertNotNull(charClass15);
      assertEquals(22, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass13, charClass4);
      assertSame(charClass13, charClass2);
      assertSame(charClass13, charClass8);
      assertSame(charClass13, charClass12);
      assertSame(charClass13, charClass10);
      assertSame(charClass13, charClass15);
      assertSame(charClass13, charClass11);
      assertSame(charClass13, charClass9);
      assertSame(charClass13, charClass5);
      assertSame(charClass13, charClass7);
      assertSame(charClass13, charClass6);
      assertSame(charClass13, charClass1);
      assertSame(charClass13, charClass14);
      assertSame(charClass13, charClass0);
      assertSame(charClass13, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass15);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass11);
      assertSame(charClass14, charClass2);
      assertSame(charClass14, charClass15);
      assertSame(charClass14, charClass8);
      assertSame(charClass14, charClass12);
      assertSame(charClass14, charClass13);
      assertSame(charClass14, charClass3);
      assertSame(charClass14, charClass6);
      assertSame(charClass14, charClass9);
      assertSame(charClass14, charClass7);
      assertSame(charClass14, charClass5);
      assertSame(charClass14, charClass1);
      assertSame(charClass14, charClass11);
      assertSame(charClass14, charClass0);
      assertSame(charClass14, charClass10);
      assertSame(charClass14, charClass4);
      assertSame(charClass15, charClass11);
      assertSame(charClass15, charClass12);
      assertSame(charClass15, charClass13);
      assertSame(charClass15, charClass8);
      assertSame(charClass15, charClass1);
      assertSame(charClass15, charClass10);
      assertSame(charClass15, charClass0);
      assertSame(charClass15, charClass4);
      assertSame(charClass15, charClass6);
      assertSame(charClass15, charClass7);
      assertSame(charClass15, charClass5);
      assertSame(charClass15, charClass9);
      assertSame(charClass15, charClass3);
      assertSame(charClass15, charClass14);
      assertSame(charClass15, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass13);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass14);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass15);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass14);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass15);
      assertSame(charClass3, charClass12);
      assertSame(charClass3, charClass13);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass14);
      assertSame(charClass4, charClass15);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass11);
      assertSame(charClass4, charClass12);
      assertSame(charClass4, charClass13);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass14);
      assertSame(charClass6, charClass10);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass15);
      assertSame(charClass6, charClass12);
      assertSame(charClass6, charClass13);
      assertSame(charClass6, charClass11);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3425);
      intArray0[1] = 67640;
      intArray0[2] = 1699;
      intArray0[3] = (-145);
      String string0 = CharClass.charClassToString(intArray0, (-1963));
      assertNotNull(string0);
      assertEquals(4, intArray0.length);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {(-3425), 67640, 1699, (-145)}, intArray0);
      
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[2][8];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.appendLiteral((-1963), 1700);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      intArray1[1] = intArray0;
      CharClass charClass2 = charClass0.appendTableWithSign(intArray1, (-3425));
      assertNotNull(charClass2);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendLiteral((-3425), 306);
      assertNotNull(charClass3);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass2.appendFoldedClass(intArray0);
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {(-3425), 67640, 1699, (-145)}, intArray0);
      
      CharClass charClass5 = charClass2.appendLiteral(1700, 67640);
      assertNotNull(charClass5);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      
      CharClass charClass6 = charClass4.appendTable(intArray1);
      assertNotNull(charClass6);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertArrayEquals(new int[] {(-3425), 67640, 1699, (-145)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-1988));
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass1.appendRange((-1988), 783);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[0][6];
      CharClass charClass3 = charClass2.appendTableWithSign(intArray1, 0);
      assertNotNull(charClass3);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass4 = charClass3.appendLiteral(783, 0);
      assertNotNull(charClass4);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass5 = charClass2.appendFoldedClass(intArray0);
      assertNotNull(charClass5);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      charClass5.appendFoldedRange((-1988), 783);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 2380;
      CharClass charClass1 = charClass0.appendFoldedRange(2380, 2380);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray0 = new int[0][5];
      CharClass charClass2 = charClass1.appendNegatedTable(intArray0);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int int1 = 1897;
      CharClass charClass3 = charClass1.appendRange(1897, 2380);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass2.appendNegatedTable(intArray0);
      assertNotNull(charClass4);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      
      CharClass charClass5 = charClass2.appendLiteral(2380, 2380);
      assertNotNull(charClass5);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      
      int[] intArray1 = new int[3];
      intArray1[0] = 1192;
      intArray1[1] = 2380;
      intArray1[2] = 2380;
      // Undeclared exception!
      charClass5.appendFoldedClass(intArray1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 3330;
      intArray0[1] = 43520;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {3330, 43520}, intArray0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass3 = charClass2.appendLiteral(1114111, 8336);
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {1114111, 1114111}, intArray0);
      
      CharClass charClass4 = charClass0.negateClass();
      assertNotNull(charClass4);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertArrayEquals(new int[] {0, 1114110}, intArray0);
      
      CharClass charClass5 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass5);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertArrayEquals(new int[] {0, 1114110}, intArray0);
      
      CharClass charClass6 = charClass5.appendLiteral((-2152), 385);
      assertNotNull(charClass6);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertArrayEquals(new int[] {0, 1114110}, intArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 3709;
      intArray0[2] = 23;
      intArray0[3] = (-2784);
      intArray0[4] = 1635;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 3709, 23, (-2784), 1635}, intArray0);
      
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertNotNull(string0);
      assertEquals(5, intArray0.length);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {0, 3709, 23, (-2784), 1635}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 3330;
      intArray0[1] = 43520;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {3330, 43520}, intArray0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass3 = charClass2.appendLiteral(1114111, 8336);
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {1114111, 1114111}, intArray0);
      
      CharClass charClass4 = charClass0.negateClass();
      assertNotNull(charClass4);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {0, 1114110}, intArray0);
      
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertEquals("[0x0-0x10fffe]", string0);
      assertArrayEquals(new int[] {0, 1114110}, intArray0);
      
      String string1 = CharClass.charClassToString(intArray0, 0);
      assertNotNull(string1);
      assertEquals(2, intArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[]", string1);
      assertArrayEquals(new int[] {0, 1114110}, intArray0);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass5 = charClass2.appendRange(3330, 3330);
      assertNotNull(charClass5);
      assertEquals(2, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 1114110}, intArray0);
      
      CharClass charClass6 = charClass5.negateClass();
      assertNotNull(charClass6);
      assertEquals(2, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {1114111, 1114111}, intArray0);
      
      int int0 = (-2039);
      CharClass charClass7 = charClass0.appendFoldedRange((-2039), 322);
      assertNotNull(charClass7);
      assertEquals(2, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {1114111, 1114111}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[4][4];
      int[] intArray1 = new int[9];
      intArray1[0] = (-2944);
      intArray1[1] = (-1464);
      intArray1[2] = 3701;
      intArray1[3] = 64;
      intArray1[4] = 91;
      intArray1[5] = 0;
      intArray1[6] = 32;
      intArray1[7] = (-2338);
      intArray1[8] = 2126;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = (-2338);
      intArray2[2] = 1;
      intArray2[3] = 2126;
      intArray2[4] = (-2944);
      intArray2[5] = (-2338);
      intArray2[6] = (-2338);
      intArray2[7] = 0;
      intArray2[8] = 3701;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[1];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[1] = 0;
      intArray4[2] = 1;
      intArray0[3] = intArray4;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      int[][] intArray1 = new int[0][1];
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      CharClass charClass3 = charClass2.appendFoldedRange(1, 1);
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      CharClass charClass4 = charClass3.appendNegatedTable(intArray1);
      assertNotNull(charClass4);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      CharClass charClass5 = charClass3.appendLiteral(2126, 32);
      assertNotNull(charClass5);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      String string0 = charClass2.toString();
      assertNotNull(string0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertEquals("[0x0-0x10ffff]", string0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 66640;
      int int1 = 0;
      CharClass charClass1 = charClass0.appendFoldedRange(66640, 0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[] intArray0 = new int[2];
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass3 = charClass0.appendFoldedClass(intArray1);
      assertNotNull(charClass3);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      
      int[][] intArray2 = new int[8][3];
      intArray2[0] = intArray0;
      intArray2[1] = intArray1;
      intArray2[2] = intArray1;
      intArray2[3] = intArray1;
      intArray2[4] = intArray0;
      intArray2[5] = intArray0;
      intArray2[6] = intArray0;
      intArray2[7] = intArray1;
      // Undeclared exception!
      try { 
        charClass3.appendTable(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(47, 711);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      CharClass charClass4 = charClass0.appendFoldedRange(1532, 711);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      
      CharClass charClass5 = charClass1.negateClass();
      assertNotNull(charClass5);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-733);
      String string0 = CharClass.charClassToString(intArray0, (-370));
      assertNotNull(string0);
      assertEquals(1, intArray0.length);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {(-733)}, intArray0);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-733);
      intArray1[1] = (-370);
      intArray1[2] = (-370);
      CharClass charClass0 = new CharClass(intArray1);
      assertNotNull(charClass0);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-733), (-370), (-370)}, intArray1);
      
      CharClass charClass1 = charClass0.appendRange((-733), 9827);
      assertNotNull(charClass1);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-733), (-733), 9827}, intArray1);
      
      int int0 = 1061;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 2780;
      intArray0[0] = 2780;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2780}, intArray0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertEquals(1, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {2780}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass1.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(1693, 1693);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1693;
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 3330;
      intArray0[1] = 43520;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {3330, 43520}, intArray0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass3 = charClass2.appendLiteral(1114111, 8336);
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {1114111, 1114111}, intArray0);
      
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      assertNotNull(charClass4);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass5 = charClass3.cleanClass();
      assertNotNull(charClass5);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass6 = charClass0.appendClassWithSign(intArray0, (-994));
      assertNotNull(charClass6);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass7 = charClass6.appendClassWithSign(intArray0, (-1464));
      assertNotNull(charClass7);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass7);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass8 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass8);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass6);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass5.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3425);
      intArray0[1] = (-3425);
      intArray0[2] = 1699;
      intArray0[3] = (-145);
      String string0 = CharClass.charClassToString(intArray0, (-1963));
      assertNotNull(string0);
      assertEquals(4, intArray0.length);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {(-3425), (-3425), 1699, (-145)}, intArray0);
      
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[2][8];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.appendLiteral((-1963), 1700);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      intArray1[1] = intArray0;
      CharClass charClass2 = charClass0.appendTableWithSign(intArray1, (-3425));
      assertNotNull(charClass2);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendLiteral((-3425), 306);
      assertNotNull(charClass3);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass3.appendNegatedTable(intArray1);
      assertNotNull(charClass4);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      
      CharClass charClass5 = charClass3.appendRange((-1105), (-3425));
      assertNotNull(charClass5);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      
      CharClass charClass6 = charClass4.appendFoldedRange(252, (-2039));
      assertNotNull(charClass6);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      
      CharClass charClass7 = charClass6.appendNegatedClass(intArray0);
      assertNotNull(charClass7);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertArrayEquals(new int[] {(-3425), (-3425), 1699, (-145)}, intArray0);
      
      CharClass charClass8 = charClass7.appendTableWithSign(intArray1, (-2039));
      assertNotNull(charClass8);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass5);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass8);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass3);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertArrayEquals(new int[] {(-3425), (-3425), 1699, (-145)}, intArray0);
      
      CharClass charClass9 = charClass8.appendNegatedClass(intArray0);
      assertNotNull(charClass9);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass5);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass9);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass8);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass9);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertArrayEquals(new int[] {(-3425), (-3425), 1699, (-145)}, intArray0);
      
      CharClass charClass10 = charClass7.appendLiteral((-3425), 1699);
      assertNotNull(charClass10);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass10);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass5);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass10);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass10);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass8);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass10);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass10);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertArrayEquals(new int[] {(-3425), (-3425), 1699, (-145)}, intArray0);
      
      CharClass charClass11 = charClass5.appendTable(intArray1);
      assertNotNull(charClass11);
      assertEquals(2, intArray1.length);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass10);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass10);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass8);
      assertSame(charClass5, charClass10);
      assertSame(charClass5, charClass11);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass9);
      
      CharClass charClass12 = charClass0.appendNegatedTable(intArray1);
      assertNotNull(charClass12);
      assertEquals(2, intArray1.length);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass1);
      
      CharClass charClass13 = charClass5.cleanClass();
      assertNotNull(charClass13);
      assertEquals(2, intArray1.length);
      assertSame(charClass13, charClass10);
      assertSame(charClass13, charClass9);
      assertSame(charClass13, charClass4);
      assertSame(charClass13, charClass7);
      assertSame(charClass13, charClass1);
      assertSame(charClass13, charClass5);
      assertSame(charClass13, charClass3);
      assertSame(charClass13, charClass12);
      assertSame(charClass13, charClass6);
      assertSame(charClass13, charClass0);
      assertSame(charClass13, charClass2);
      assertSame(charClass13, charClass11);
      assertSame(charClass13, charClass8);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass13);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass11);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass13);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass12);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass8);
      assertSame(charClass5, charClass11);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass10);
      assertSame(charClass5, charClass12);
      assertSame(charClass5, charClass13);
      
      CharClass charClass14 = charClass12.appendFoldedClass(intArray0);
      assertNotNull(charClass14);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass14);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass13);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass8);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass1);
      assertSame(charClass14, charClass0);
      assertSame(charClass14, charClass2);
      assertSame(charClass14, charClass6);
      assertSame(charClass14, charClass11);
      assertSame(charClass14, charClass8);
      assertSame(charClass14, charClass12);
      assertSame(charClass14, charClass13);
      assertSame(charClass14, charClass3);
      assertSame(charClass14, charClass5);
      assertSame(charClass14, charClass10);
      assertSame(charClass14, charClass1);
      assertSame(charClass14, charClass4);
      assertSame(charClass14, charClass7);
      assertSame(charClass14, charClass9);
      assertArrayEquals(new int[] {(-3425), (-3425), 1699, (-145)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int[] intArray0 = null;
      CharClass charClass0 = null;
      try {
        charClass0 = new CharClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass0.appendLiteral(1234, 93);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 952;
      intArray0[1] = 32;
      intArray0[2] = 403;
      intArray0[3] = 2048;
      intArray0[4] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendRange(909, 952);
      CharClass charClass2 = charClass1.negateClass();
      int[][] intArray1 = new int[8][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray2 = new int[5];
      intArray2[0] = 2048;
      intArray2[1] = 909;
      intArray2[2] = 93;
      intArray2[3] = 32;
      intArray2[4] = 32;
      intArray1[4] = intArray2;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      CharClass charClass3 = charClass2.appendTable(intArray1);
      CharClass charClass4 = charClass3.appendNegatedTable(intArray1);
      CharClass charClass5 = charClass4.cleanClass();
      // Undeclared exception!
      charClass5.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange(1187, (-2682));
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[8];
      int[][] intArray1 = new int[3][0];
      charClass0.appendClassWithSign(intArray0, (-2));
      intArray1[0] = intArray0;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3425);
      intArray0[1] = 67603;
      intArray0[2] = 1699;
      intArray0[3] = 0;
      CharClass.charClassToString(intArray0, (-1958));
      CharClass charClass0 = new CharClass();
      int[][] intArray1 = new int[3][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      int int0 = (-1988);
      charClass0.appendClassWithSign(intArray0, (-1988));
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[8];
      intArray0[0] = (-520);
      intArray0[1] = (-3584);
      intArray0[2] = 177984;
      intArray0[3] = 1234;
      intArray0[4] = 46;
      intArray0[5] = 93;
      intArray0[6] = 262;
      intArray0[7] = (-2152);
      charClass0.appendFoldedClass(intArray0);
      CharClass charClass1 = charClass0.appendLiteral(1249, 42739);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int int0 = 0;
      charClass0.appendFoldedRange(0, 0);
      int[] intArray0 = new int[7];
      int int1 = (-1583);
      intArray0[0] = (-1583);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int int2 = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      CharClass.charClassToString(intArray0, 0);
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        charClass0.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[8];
      int[][] intArray1 = new int[2][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-733);
      CharClass.charClassToString(intArray0, (-351));
      int[] intArray1 = new int[3];
      intArray1[0] = (-733);
      intArray1[1] = (-351);
      intArray1[2] = (-351);
      CharClass charClass0 = new CharClass(intArray1);
      // Undeclared exception!
      try { 
        charClass0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 3868;
      intArray0[1] = 0;
      int int0 = 378;
      intArray0[2] = 378;
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[4][4];
      int[] intArray1 = new int[9];
      intArray1[0] = (-2944);
      intArray1[1] = (-1464);
      intArray1[2] = 3701;
      intArray1[3] = 64;
      intArray1[4] = 91;
      intArray1[5] = 0;
      intArray1[6] = 32;
      intArray1[7] = (-2338);
      intArray1[8] = 2126;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      int int0 = 0;
      intArray2[0] = 0;
      intArray2[1] = (-2338);
      intArray2[2] = 1;
      intArray2[3] = 2126;
      intArray2[4] = (-2944);
      intArray2[5] = (-2338);
      intArray2[6] = (-2338);
      intArray2[7] = 0;
      intArray2[8] = 3701;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[1];
      intArray3[0] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      intArray4[0] = (-1464);
      intArray4[1] = 0;
      intArray4[2] = 1;
      intArray0[3] = intArray4;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[4];
      intArray0[0] = (-637);
      intArray0[1] = (-994);
      intArray0[2] = (-2006);
      intArray0[3] = 0;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      int[][] intArray1 = new int[2][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      CharClass charClass3 = charClass2.appendClass(intArray0);
      CharClass charClass4 = charClass3.appendLiteral((-2006), (-637));
      assertSame(charClass4, charClass2);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange((-1514), (-3584));
      charClass1.cleanClass();
      int[] intArray0 = new int[7];
      intArray0[0] = (-3584);
      intArray0[2] = (-520);
      intArray0[3] = 46;
      intArray0[4] = (-520);
      intArray0[6] = (-3584);
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign(intArray0, 68405);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[0] = 463;
      intArray0[2] = 2497;
      int[][] intArray1 = new int[2][7];
      intArray1[0] = intArray0;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 65;
      intArray0[0] = 65;
      intArray0[1] = 68416;
      CharClass.charClassToString(intArray0, 0);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.negateClass();
      int[][] intArray1 = new int[9][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      int[] intArray2 = new int[6];
      intArray2[0] = 65;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 65;
      intArray2[5] = 65;
      intArray1[7] = intArray2;
      int[] intArray3 = new int[1];
      intArray3[0] = 507;
      intArray1[8] = intArray3;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendFoldedRange(66640, 0);
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendFoldedRange(0, (-1929));
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(501, 65);
      CharClass charClass2 = charClass1.cleanClass();
      int[] intArray0 = new int[2];
      intArray0[0] = 539;
      intArray0[1] = 65;
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, 501);
      charClass3.appendClass(intArray0);
      CharClass.charClassToString(intArray0, (-3629));
      charClass0.appendLiteral((-1), 65375);
      CharClass charClass4 = charClass3.appendClass(intArray0);
      assertSame(charClass1, charClass4);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][0];
      CharClass charClass1 = charClass0.appendRange(177984, 177984);
      CharClass charClass2 = charClass1.appendNegatedTable(intArray0);
      assertSame(charClass1, charClass2);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1678);
      intArray0[1] = 4715;
      intArray0[2] = 4158;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1138);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
