/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 20:35:20 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.setAll(0.0);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt(0, vectorFunction0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-42);
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte) (-28);
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3, vectorFunction0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.setAll(123.079419449051);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      int int0 = 1000;
      int int1 = 0;
      CompressedVector.zero(1000, 0);
      double[] doubleArray0 = new double[1];
      compressedVector0.toSparseVector();
      doubleArray0[0] = (double) 1000;
      Vector.fromArray(doubleArray0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long(1000);
      Long.max(1000, 0);
      linkedList0.addFirst(long0);
      CompressedVector.fromCollection(linkedList0);
      int int2 = (-1);
      // Undeclared exception!
      try { 
        CompressedVector.zero(0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -1.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.euclideanNorm();
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertNull(compressedVector1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      CompressedVector compressedVector0 = new CompressedVector();
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(1000);
      assertEquals(1000, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(1, (double) 1, (Random) mockRandom0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1, vectorFunction0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1);
      double[] doubleArray0 = new double[9];
      compressedVector0.euclideanNorm();
      doubleArray0[0] = 848.5283205969;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-305), vectorFunction0);
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (-1415.337);
      SparseVector.fromArray(doubleArray0);
      compressedVector0.toDenseVector();
      // Undeclared exception!
      try { 
        compressedVector0.set(1, 2552.1794403);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.toCSV();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "5%}?dJ`\"o-l4C3)`";
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("5%}?dJ`\"o-l4C3)`");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 16);
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-523));
      Float float0 = new Float((float) 16);
      hashMap0.putIfAbsent(integer0, float0);
      compressedVector0.forEach(consumer0);
      compressedVector0.iterator();
      boolean boolean0 = compressedVector0.nonZeroAt(37);
      assertFalse(boolean0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(16, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      boolean boolean0 = compressedVector0.nonZeroAt(1554);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(0, (double) 0, (Random) mockRandom0);
      compressedVector0.add((double) 0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      compressedVector0.mkString(numberFormat0);
      compressedVector0.nonZeroAt(776);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(776, vectorFunction0);
      // Undeclared exception!
      try { 
        compressedVector0.set(0, (-1101.769143647));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '0' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 0;
      CompressedVector compressedVector0 = new CompressedVector(0);
      compressedVector0.blank();
      compressedVector0.spliterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.sliceRight(0);
      compressedVector0.updateAt(0, vectorFunction0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.swapElements(5, 5);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(928, 4391);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2, 0);
      compressedVector0.multiply((double) 0);
      compressedVector0.copy();
      MockRandom mockRandom0 = new MockRandom((-1L));
      mockRandom0.nextLong();
      CompressedVector.random(0, 0.0, (Random) mockRandom0);
      CompressedVector.zero(3013);
      compressedVector0.toBinary();
      compressedVector0.swapElements((-1036), 3013);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket(".u0u!X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1);
      double[] doubleArray0 = new double[9];
      compressedVector0.euclideanNorm();
      doubleArray0[0] = 848.5283205969;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-305)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-305), vectorFunction0);
      doubleArray0[6] = (double) 1;
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Integer integer0 = new Integer(1);
      Float float0 = new Float(104.0);
      hashMap0.putIfAbsent(integer0, float0);
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compressedVector0.forEach(consumer0);
      compressedVector0.iterator();
      compressedVector0.nonZeroAt(13);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1612.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compressedVector0.forEach(consumer0);
      compressedVector0.setAll((-1612.0));
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = Long.valueOf((-3335L));
      linkedList0.add(long0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-3335L);
      doubleArray0[1] = (double) (-3335L);
      doubleArray0[2] = (double) (-3335L);
      doubleArray0[3] = (double) (-3335L);
      doubleArray0[4] = (double) (-3335L);
      doubleArray0[5] = (double) (-3335L);
      doubleArray0[6] = (double) (-3335L);
      doubleArray0[7] = (double) (-3335L);
      doubleArray0[8] = (double) (-3335L);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.isZeroAt((-2130));
      compressedVector0.swapElements((-10), (-10));
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random((-10), (-3335.0), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 1;
      CompressedVector compressedVector0 = new CompressedVector(0, 1, doubleArray0, intArray0);
      boolean boolean0 = compressedVector0.nonZeroAt(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-651.6654259011)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(3, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 16);
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-523));
      Float float0 = new Float((float) 16);
      hashMap0.putIfAbsent(integer0, float0);
      compressedVector0.forEach(consumer0);
      compressedVector0.iterator();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(16, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(581);
      compressedVector0.copy();
      compressedVector0.set(263, 581);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-2705)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-2705), vectorFunction0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(592, 8);
      compressedVector0.set(8, 8);
      assertEquals(1, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(8, vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Integer integer0 = new Integer((byte) (-68));
      HashMap<Integer, Byte> hashMap1 = new HashMap<Integer, Byte>();
      hashMap0.putAll(hashMap1);
      Byte byte0 = new Byte((byte) (-24));
      hashMap0.put(integer0, byte0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (byte) (-68));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(725);
      hashMap0.put(integer0, integer0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-1199));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Byte byte0 = new Byte((byte)3);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Integer integer0 = new Integer((byte)3);
      Byte byte1 = new Byte((byte) (-123));
      hashMap0.put(integer0, byte1);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 702);
      compressedVector0.nonZeroIterator();
      assertEquals(0.0014245014245014246, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2, 0);
      Vector vector0 = compressedVector0.multiply((double) 0);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copy();
      Long.valueOf((long) 0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      byte[] byteArray0 = compressedVector1.toBinary();
      compressedVector0.swapElements((-751), (-751));
      CompressedVector compressedVector2 = CompressedVector.fromBinary(byteArray0);
      assertEquals(0, compressedVector1.cardinality());
      assertTrue(compressedVector0.equals((Object)vector0));
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)2, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0.0, compressedVector2.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(0);
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(16, 16);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      compressedVector0.mkString(numberFormat0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(30, vectorFunction0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        CompressedVector.fromCollection((Collection<? extends Number>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1515.4308110685954;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long((-3327L));
      linkedList0.add(long0);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.swapElements((-249), (-1036));
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.setAll((-4196.96652857546));
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-1), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.setAll(1.0);
      compressedVector0.swapElements(1178, (-13));
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 9;
      doubleArray0[2] = (double) 9;
      doubleArray0[3] = (double) 9;
      doubleArray0[4] = (double) 9;
      int[] intArray0 = new int[9];
      intArray0[0] = 9;
      intArray0[1] = (-1);
      intArray0[2] = 9;
      intArray0[3] = 571;
      intArray0[4] = 9;
      intArray0[5] = 9;
      intArray0[6] = 9;
      intArray0[7] = 9;
      intArray0[8] = 9;
      CompressedVector compressedVector0 = new CompressedVector(9, 9, doubleArray0, intArray0);
      boolean boolean0 = compressedVector0.nonZeroAt(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-459.6668086);
      doubleArray0[2] = (-1240.45477827);
      doubleArray0[3] = (-381.327683032);
      doubleArray0[3] = 1195.89167;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)1346);
      linkedList0.add(short0);
      linkedList0.removeFirstOccurrence(doubleArray0);
      SparseVector.fromCollection(linkedList0);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.blankOfLength(0);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      double double0 = compressedVector0.manhattanNorm();
      assertEquals(2896.01325687, double0, 0.01);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.to(vectorFactory0);
      assertEquals(0.6, compressedVector2.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Byte byte0 = new Byte((byte)16);
      Byte.toUnsignedLong((byte)16);
      hashMap0.getOrDefault((Object) null, byte0);
      HashMap<Integer, Byte> hashMap1 = new HashMap<Integer, Byte>();
      hashMap0.putAll(hashMap1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (-1569.0460850340176);
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = 746.5177074393132;
      doubleArray0[4] = 2890.4849;
      doubleArray0[5] = 585.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = 1.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.toString();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector1 = CompressedVector.fromCollection(linkedList0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.setAll((-4197.976));
      compressedVector0.swapElements((-1450), (-1450));
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2, 2);
      double[] doubleArray0 = new double[3];
      compressedVector0.toCSV();
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2;
      compressedVector0.blankOfLength(0);
      int[] intArray0 = new int[0];
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.multiply(2.0);
      compressedVector0.copy();
      Long.valueOf((-2291L));
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long((-2291L));
      Long long1 = new Long(1000);
      linkedList0.add(long1);
      CompressedVector compressedVector1 = CompressedVector.fromCollection(linkedList0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector1.each(vectorProcedure0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.setAll(5078.042353963449);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-3431), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (-1240.45477827);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements((-2145967424), 3);
      org.evosuite.runtime.Random.setNextRandom((-2145967424));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.setAll((-806.2));
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(1080, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      byte byte0 = (byte)16;
      Byte byte1 = new Byte((byte)16);
      Byte.compare((byte)16, (byte) (-81));
      Byte.toUnsignedLong((byte)16);
      hashMap0.getOrDefault((Object) null, byte1);
      HashMap<Integer, Byte> hashMap1 = new HashMap<Integer, Byte>();
      Integer integer0 = new Integer(0);
      hashMap1.put(integer0, (Byte) null);
      hashMap0.putAll(hashMap1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      int int0 = (-249);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements((-249), 0);
      // Undeclared exception!
      try { 
        CompressedVector.zero(2, (int) (byte)16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 16.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.setAll(283.07961977585546);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.setAll((-806.2));
      compressedVector0.infinityNorm();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.nonZeroAt((-2820));
      compressedVector0.swapElements((-2820), 0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Long.valueOf((long) 4142);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 4142;
      doubleArray0[1] = (double) 4142;
      doubleArray0[2] = (double) 4142;
      doubleArray0[3] = (double) 4142;
      doubleArray0[4] = (double) 4142;
      doubleArray0[5] = (double) 4142;
      doubleArray0[6] = (double) 4142;
      doubleArray0[7] = (double) 4142;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.toCSV();
      compressedVector0.blankOfLength(4142);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.multiply(4142.0);
      // Undeclared exception!
      try { 
        CompressedVector.zero(4142, (-116));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -116.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (-2855.630609926);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements(3, 20);
      assertEquals(0.25, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (-345.3877541593008);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.set(3, (-345.3877541593008));
      double double0 = compressedVector0.getOrElse(3, 3);
      assertEquals((-345.3877541593008), double0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(4209, 4209);
      double double0 = compressedVector0.getOrElse(599, (-772.94));
      assertEquals((-772.94), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Long.valueOf((long) 4142);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 4142;
      doubleArray0[1] = (double) 4142;
      doubleArray0[2] = (double) 4142;
      doubleArray0[3] = (double) 4142;
      doubleArray0[4] = (double) 4142;
      doubleArray0[5] = (double) 4142;
      doubleArray0[6] = (double) 4142;
      doubleArray0[7] = (double) 4142;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.toCSV();
      compressedVector0.blankOfLength(4142);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)4142, (double)4142, 4142.0, 4142.0, (-835.44)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.multiply(4142.0);
      // Undeclared exception!
      try { 
        CompressedVector.zero(4142, (-116));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -116.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long(0L);
      linkedList0.add(long0);
      Long long1 = new Long(3850L);
      Long.sum(184L, 3850L);
      linkedList0.add(long1);
      CompressedVector compressedVector1 = CompressedVector.fromCollection(linkedList0);
      compressedVector1.min();
      compressedVector0.min();
      // Undeclared exception!
      try { 
        compressedVector1.each((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-461.14890447904);
      doubleArray0[2] = (-1240.45477827);
      doubleArray0[3] = (-381.327683032);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(3, compressedVector0.cardinality());
      
      compressedVector0.setAll((-381.327683032));
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      compressedVector0.getOrElse(2, 2);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(2);
      assertEquals(2, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long((-3327L));
      linkedList0.add(long0);
      Integer integer0 = new Integer(4);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      int int0 = (-2146124481);
      Integer integer1 = new Integer((-2146124481));
      hashMap0.put(integer1, (Byte) null);
      HashMap<Integer, Byte> hashMap1 = new HashMap<Integer, Byte>();
      hashMap0.putAll(hashMap1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-270);
      doubleArray0[1] = 2.0;
      doubleArray0[2] = (double) (-3327L);
      doubleArray0[3] = (double) (-270);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(3, 1577);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = (-1240.45477827);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long(0L);
      linkedList0.add(long0);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.swapElements(0, (-249));
      double double0 = compressedVector0.getOrElse(0, 0L);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-461.14890447904);
      doubleArray0[2] = (-1240.45477827);
      doubleArray0[3] = (-381.327683032);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      CompressedVector.zero(2837);
      CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements((-2145967424), 3);
      // Undeclared exception!
      try { 
        CompressedVector.zero((-2145967424), 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2145967424
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-461.14890447904);
      doubleArray0[3] = (-381.327683032);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)1346);
      compressedVector0.getOrElse(2, 2);
      compressedVector0.iterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-1519), vectorFunction0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long((-3327L));
      linkedList0.add(long0);
      CompressedVector.fromCollection(linkedList0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-3327L);
      doubleArray0[1] = (double) (-3327L);
      doubleArray0[2] = (double) (-3327L);
      doubleArray0[3] = (double) (-3327L);
      doubleArray0[4] = 7.8678931934233445;
      doubleArray0[5] = (double) (-3327L);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      int int0 = 3;
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(3, (-2145967424));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.setAll((-4197.976));
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, (-13));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = (-1240.45477827);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      CompressedVector compressedVector1 = new CompressedVector(13);
      compressedVector0.swapElements(3, (-1));
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      Vector vector0 = compressedVector1.to(vectorFactory0);
      assertNull(vector0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = (-1240.45477827);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      compressedVector0.swapElements(3, 2837);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 3);
      compressedVector1.updateAt(3, vectorFunction0);
      assertEquals(1, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 869;
      doubleArray0[1] = (double) 869;
      int[] intArray0 = new int[0];
      CompressedVector compressedVector0 = new CompressedVector(869, 869, doubleArray0, intArray0);
      SparseVector sparseVector0 = SparseVector.zero(869, 869);
      // Undeclared exception!
      try { 
        compressedVector0.add((Vector) sparseVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = (-1240.45477827);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      compressedVector1.add((Vector) compressedVector0);
      // Undeclared exception!
      try { 
        Vector.fromMatrixMarket("?#*M+~?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = (-381.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      DenseVector denseVector0 = compressedVector0.toDenseVector();
      Vector vector0 = compressedVector0.add((Vector) denseVector0);
      assertFalse(vector0.equals((Object)denseVector0));
      
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 3165);
      compressedVector0.set(0, 0);
      assertEquals(0.2, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt(3165, vectorFunction0);
      assertEquals(0, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (-345.3877541593008);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      compressedVector0.min();
      Vector vector0 = compressedVector0.to(vectorFactory0);
      vector0.norm();
      vector0.equals(vector0, 0.0);
      compressedVector0.swapElements((-1073741824), (-1073741824));
      compressedVector0.swapElements((-1073741824), (-1073741824));
      compressedVector0.set(3, 0.0);
      compressedVector0.swapElements((-1073741824), 3);
      CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector0.set(3370, (-345.3877541593008));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '3370' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }
}
