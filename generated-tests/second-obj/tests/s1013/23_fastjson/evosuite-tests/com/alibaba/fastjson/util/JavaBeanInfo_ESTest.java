/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:33:33 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.TypeUtils;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.LinkedList;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaBeanInfo_ESTest extends JavaBeanInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<Annotation> class0 = Annotation.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      assertEquals(0, javaBeanInfo0.parserFeatures);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Method> class0 = Method.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.reflect.Method
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      assertEquals(0, javaBeanInfo0.parserFeatures);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<String> class0 = String.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<String> class0 = String.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, true, true);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<Annotation> class0 = Annotation.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build(class0, (Type) null, propertyNamingStrategy0, true, false);
      assertEquals(0, javaBeanInfo0.parserFeatures);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<Void> class0 = Void.TYPE;
      Class<Void> class1 = Void.TYPE;
      Class<Void> class2 = Void.TYPE;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class2, propertyNamingStrategy0);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Method> class0 = Method.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, true, true);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Class<Method> class1 = Method.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      Constructor<Object>[] constructorArray0 = (Constructor<Object>[]) Array.newInstance(Constructor.class, 8);
      constructorArray0[0] = (Constructor<Object>) constructorArray0;
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Constructor<FieldInfo>[] constructorArray0 = (Constructor<FieldInfo>[]) Array.newInstance(Constructor.class, 0);
      JavaBeanInfo.getCreatorConstructor(constructorArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "getSuppressed";
      stringArray0[1] = "vA^j2|(dq{]\"";
      stringArray0[2] = "getSuppressed";
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(jSONType0).orders();
      doReturn("getSuppressed").when(jSONType0).typeKey();
      doReturn("getSuppressed").when(jSONType0).typeName();
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      Class<AtomicLong> class1 = AtomicLong.class;
      LinkedList<FieldInfo> linkedList1 = new LinkedList<FieldInfo>();
      JavaBeanInfo javaBeanInfo0 = new JavaBeanInfo(class0, class1, (Constructor<?>) null, (Constructor<?>) null, (Method) null, (Method) null, jSONType0, linkedList1);
      Class<Method> class2 = Method.class;
      Class<AtomicBoolean> class3 = AtomicBoolean.class;
      FieldInfo fieldInfo0 = new FieldInfo("I1!", class3, class2, class3, (Field) null, 0, 0, 27);
      boolean boolean0 = JavaBeanInfo.add(linkedList1, fieldInfo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constructor<FieldInfo>[] constructorArray0 = (Constructor<FieldInfo>[]) Array.newInstance(Constructor.class, 0);
      JavaBeanInfo.getCreatorConstructor(constructorArray0);
      Class<Integer> class0 = Integer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      Class<Integer> class2 = Integer.class;
      Class<FieldInfo> class3 = FieldInfo.class;
      String[] stringArray0 = new String[0];
      JSONType jSONType1 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(jSONType1).orders();
      doReturn("I1!").when(jSONType1).typeKey();
      doReturn("I1!").when(jSONType1).typeName();
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      JavaBeanInfo javaBeanInfo0 = new JavaBeanInfo(class2, class3, (Constructor<?>) null, (Constructor<?>) null, (Method) null, (Method) null, jSONType1, linkedList0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        JavaBeanInfo.build(class1, (Type) class1, propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constructor<FieldInfo>[] constructorArray0 = (Constructor<FieldInfo>[]) Array.newInstance(Constructor.class, 0);
      JavaBeanInfo.getCreatorConstructor(constructorArray0);
      Class<FieldInfo> class0 = FieldInfo.class;
      String[] stringArray0 = new String[15];
      stringArray0[0] = "vN%";
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      Class<AtomicLong> class1 = AtomicLong.class;
      Class<Method> class2 = Method.class;
      FieldInfo fieldInfo0 = new FieldInfo("0x]k#]vc2Wh.As", class1, class2, class0, (Field) null, 1204, 3151, 58);
      Class<Integer> class3 = Integer.class;
      Class<Method> class4 = Method.class;
      FieldInfo.getFieldType(class4, class1, class3);
      LinkedList<FieldInfo> linkedList1 = new LinkedList<FieldInfo>();
      linkedList0.add(fieldInfo0);
      linkedList0.add(fieldInfo0);
      JavaBeanInfo.add(linkedList0, fieldInfo0);
      Constructor<?> constructor0 = JavaBeanInfo.getCreatorConstructor(constructorArray0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constructor<FieldInfo>[] constructorArray0 = (Constructor<FieldInfo>[]) Array.newInstance(Constructor.class, 0);
      JavaBeanInfo.getCreatorConstructor(constructorArray0);
      Class<Integer> class0 = Integer.class;
      Class<FieldInfo> class1 = FieldInfo.class;
      Class<AtomicLong> class2 = AtomicLong.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      JSONType jSONType1 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[17];
      stringArray0[10] = "a* feT| cPPX)eD'\rc";
      stringArray0[3] = "";
      stringArray0[4] = "&";
      JSONType jSONType2 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(jSONType2).orders();
      doReturn("a* feT| cPPX)eD'\rc").when(jSONType2).typeKey();
      doReturn("").when(jSONType2).typeName();
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      JavaBeanInfo javaBeanInfo0 = new JavaBeanInfo(class0, class1, (Constructor<?>) null, (Constructor<?>) null, (Method) null, (Method) null, jSONType2, linkedList0);
      Class<AtomicLong> class3 = AtomicLong.class;
      linkedList0.spliterator();
      JSONType jSONType3 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(jSONType3).orders();
      doReturn("").when(jSONType3).typeKey();
      doReturn("has").when(jSONType3).typeName();
      Class<AtomicLong> class4 = AtomicLong.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo.build((Class<?>) class4, (Type) javaBeanInfo0.clazz, propertyNamingStrategy0);
      JavaBeanInfo javaBeanInfo1 = null;
      try {
        javaBeanInfo1 = new JavaBeanInfo(javaBeanInfo0.builderClass, class3, (Constructor<?>) null, (Constructor<?>) null, (Method) null, (Method) null, jSONType3, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constructor<FieldInfo>[] constructorArray0 = (Constructor<FieldInfo>[]) Array.newInstance(Constructor.class, 0);
      JavaBeanInfo.getCreatorConstructor(constructorArray0);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "get0uppress}d";
      stringArray0[1] = "get0uppress}d";
      stringArray0[2] = "get0uppress}d";
      Class<AtomicLong> class0 = AtomicLong.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      doReturn(stringArray0).when(jSONType0).orders();
      doReturn("get0uppress}d").when(jSONType0).typeKey();
      doReturn("get0uppress}d").when(jSONType0).typeName();
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      Class<AtomicLong> class1 = AtomicLong.class;
      LinkedList<FieldInfo> linkedList1 = new LinkedList<FieldInfo>();
      Class<Annotation> class2 = Annotation.class;
      Class<FieldInfo> class3 = FieldInfo.class;
      Class<Integer> class4 = Integer.class;
      FieldInfo fieldInfo0 = new FieldInfo("get0uppress}d", class4, class1, class3, (Field) null, (-1387), (-3750), (-3750));
      FieldInfo.getFieldType(fieldInfo0.fieldClass, class1, fieldInfo0.fieldType);
      linkedList0.add(fieldInfo0);
      JavaBeanInfo javaBeanInfo0 = new JavaBeanInfo(class2, class3, (Constructor<?>) null, (Constructor<?>) null, (Method) null, (Method) null, jSONType0, linkedList0);
      JavaBeanInfo.getBuilderClass(javaBeanInfo0.jsonType);
      Class<Object> class5 = Object.class;
      Class<Object> class6 = Object.class;
      FieldInfo fieldInfo1 = new FieldInfo("get0uppress}d", class5, class6, javaBeanInfo0.clazz, (Field) null, 0, 0, (-66));
      JavaBeanInfo.add(linkedList0, fieldInfo1);
      Class<Method> class7 = Method.class;
      JavaBeanInfo.getDefaultConstructor(class7, constructorArray0);
      Class<Annotation> class8 = Annotation.class;
      Constructor<?> constructor0 = JavaBeanInfo.getDefaultConstructor(class8, constructorArray0);
      assertNull(constructor0);
  }
}
