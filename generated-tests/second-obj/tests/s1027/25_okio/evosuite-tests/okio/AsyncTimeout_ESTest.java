/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:38:34 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.Pipe;
import okio.Sink;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.clearTimeout();
      asyncTimeout0.timedOut();
      assertEquals(0L, asyncTimeout0.timeoutNanos());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout asyncTimeout1 = AsyncTimeout.head;
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = pipe0.buffer;
      Sink sink0 = AsyncTimeout.head.sink(buffer0);
      assertNotNull(sink0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      asyncTimeout0.newTimeoutException((IOException) null);
      asyncTimeout0.exit(true);
      asyncTimeout0.exit(true);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      Buffer buffer0 = new Buffer();
      asyncTimeout0.source(buffer0);
      asyncTimeout0.enter();
      assertFalse(asyncTimeout0.hasDeadline());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      Timeout timeout0 = AsyncTimeout.head.deadlineNanoTime(1275L);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      timeout0.timeout(1275L, timeUnit0);
      asyncTimeout0.enter();
      // Undeclared exception!
      try { 
        asyncTimeout0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unbalanced enter/exit
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      asyncTimeout0.deadline(1000000000000L, timeUnit0);
      asyncTimeout0.enter();
      MockThrowable.getDefaultStackTrace();
      AsyncTimeout.head.exit(false);
      AsyncTimeout asyncTimeout1 = AsyncTimeout.head;
      assertNotNull(asyncTimeout1);
      assertTrue(asyncTimeout1.hasDeadline());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<");
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      asyncTimeout0.deadline(1026L, timeUnit0);
      asyncTimeout0.enter();
      MockThrowable.getDefaultStackTrace();
      asyncTimeout0.exit(false);
      AsyncTimeout asyncTimeout1 = AsyncTimeout.head;
      assertNotSame(asyncTimeout1, timeout0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      asyncTimeout0.timeout(1275L, timeUnit0);
      asyncTimeout0.enter();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(1275L);
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.getMessage();
      MockIOException mockIOException1 = new MockIOException();
      mockIOException0.getMessage();
      mockIOException0.addSuppressed(mockIOException1);
      asyncTimeout1.enter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      asyncTimeout0.exit((IOException) mockIOException0);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(1164L);
      MockIOException mockIOException1 = new MockIOException();
      mockIOException0.getMessage();
      asyncTimeout1.enter();
      AsyncTimeout.awaitTimeout();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      MockIOException mockIOException0 = new MockIOException();
      AsyncTimeout.head.deadlineNanoTime((-2261L));
      MockIOException mockIOException1 = new MockIOException();
      mockIOException0.getMessage();
      AsyncTimeout.head.newTimeoutException(mockIOException1);
      AsyncTimeout.head.enter();
      AsyncTimeout.head.exit(true);
      AsyncTimeout asyncTimeout1 = AsyncTimeout.head;
      MockIOException mockIOException2 = new MockIOException((String) null);
      asyncTimeout1.exit((IOException) mockIOException2);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(1180L);
      MockIOException mockIOException0 = new MockIOException();
      MockIOException mockIOException1 = (MockIOException)asyncTimeout0.exit((IOException) mockIOException0);
      asyncTimeout1.newTimeoutException(mockIOException1);
      asyncTimeout0.enter();
      AsyncTimeout asyncTimeout2 = AsyncTimeout.awaitTimeout();
      asyncTimeout2.exit(false);
      AsyncTimeout asyncTimeout3 = AsyncTimeout.head;
      asyncTimeout3.exit((IOException) mockIOException0);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }
}
