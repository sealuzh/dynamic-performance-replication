/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 13:45:54 GMT 2018
 */

package okhttp3.internal.tls;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import javax.security.auth.Subject;
import javax.security.auth.x500.X500Principal;
import okhttp3.internal.tls.DistinguishedNameParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DistinguishedNameParser_ESTest extends DistinguishedNameParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      X500Principal x500Principal0 = new X500Principal("");
      DistinguishedNameParser distinguishedNameParser0 = new DistinguishedNameParser(x500Principal0);
      String string0 = distinguishedNameParser0.findMostSpecific("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      X500Principal x500Principal0 = new X500Principal("");
      x500Principal0.getEncoded();
      DistinguishedNameParser distinguishedNameParser0 = new DistinguishedNameParser(x500Principal0);
      Object object0 = new Object();
      x500Principal0.equals(object0);
      Subject subject0 = new Subject();
      x500Principal0.implies(subject0);
      x500Principal0.getEncoded();
      x500Principal0.getName();
      distinguishedNameParser0.findMostSpecific(":");
      distinguishedNameParser0.findMostSpecific("");
      distinguishedNameParser0.findMostSpecific("[2$~z_C");
      distinguishedNameParser0.findMostSpecific("0gxQe-_mZ");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        x500Principal0.getName((String) null, (Map<String, String>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid format specified
         //
         verifyException("javax.security.auth.x500.X500Principal", e);
      }
  }
}
