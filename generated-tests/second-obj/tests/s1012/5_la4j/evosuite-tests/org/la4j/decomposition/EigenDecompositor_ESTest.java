/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:32:42 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.EigenDecompositor;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.vector.SparseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositor_ESTest extends EigenDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(3);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      EigenDecompositor eigenDecompositor0 = null;
      try {
        eigenDecompositor0 = new EigenDecompositor(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(32);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(2, mockRandom0);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(32);
      Matrix matrix0 = Matrix.randomSymmetric(27, mockRandom0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(26, 39, 0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs(0L);
      Matrix matrix0 = Matrix.randomSymmetric(39, mockRandom0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      eigenDecompositor0.matrix = (Matrix) sparseMatrix0;
      // Undeclared exception!
      try { 
        eigenDecompositor0.decompose();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't decompose rectangle matrix
         //
         verifyException("org.la4j.decomposition.EigenDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      Matrix matrix0 = Matrix.randomSymmetric(19, mockRandom0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-52.0), 0.6, (double)19, 3.268521002604782E15, (double)(-26)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      eigenDecompositor0.matrix.update(matrixFunction0);
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int int0 = 19;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      Matrix matrix0 = Matrix.randomSymmetric(19, mockRandom0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-52.0), (-52.0), (double)19, 3.268521002604782E15, (double)19).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      eigenDecompositor0.matrix.update(matrixFunction0);
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      Matrix matrix0 = Matrix.randomSymmetric(13, mockRandom0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      eigenDecompositor0.applicableTo(matrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-52.0), 0.6, (double)13, 3.268521002604782E15, (double)(-26)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
      mockRandom0.nextInt((-4204));
      eigenDecompositor0.decompose();
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.6, (-1736.04), (-1736.04), (-52.0), 4.9E-324).when(matrixFunction1).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction1);
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(4, mockRandom0);
      mockRandom0.doubles((long) 4);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      eigenDecompositor0.applicableTo(matrix0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[8] = (byte)17;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-28);
      byteArray0[7] = (byte) (-28);
      byteArray0[8] = (byte)3;
      mockRandom0.nextBytes(byteArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)0, (double)4, (double)0, (double)0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      eigenDecompositor0.matrix.update(matrixFunction0);
      Random.setNextRandom(0);
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(byte)0, (double)(byte) (-28), (-24.44), Double.POSITIVE_INFINITY, 193.8002276872894).when(matrixFunction1).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction1);
      eigenDecompositor0.decompose();
      eigenDecompositor0.applicableTo(matrix0);
      eigenDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(4, mockRandom0);
      mockRandom0.doubles((long) 4);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      eigenDecompositor0.applicableTo(matrix0);
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[8] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-28);
      byteArray0[7] = (byte) (-28);
      byteArray0[8] = (byte)6;
      mockRandom0.nextBytes(byteArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)0, (double)4, (double)0, (double)0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      eigenDecompositor0.matrix.update(matrixFunction0);
      Random.setNextRandom(0);
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(byte)0, (double)(byte) (-28), (-24.44), Double.POSITIVE_INFINITY, (double)(byte)11).when(matrixFunction1).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction1);
      eigenDecompositor0.decompose();
      eigenDecompositor0.applicableTo(matrix0);
      eigenDecompositor0.decompose();
      eigenDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(4, mockRandom0);
      mockRandom0.doubles();
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      eigenDecompositor0.applicableTo(matrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)0, (double)4, (double)0, (double)0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      eigenDecompositor0.matrix.update(matrixFunction0);
      eigenDecompositor0.decompose();
      eigenDecompositor0.decompose();
      eigenDecompositor0.matrix = matrix0;
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.964, 0.964, (-1921.196521), 0.964, (double)4).when(matrixFunction1).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction1);
      Random.setNextRandom(490);
      EigenDecompositor eigenDecompositor1 = new EigenDecompositor(eigenDecompositor0.matrix);
      eigenDecompositor1.applicableTo(eigenDecompositor0.matrix);
      eigenDecompositor0.decompose();
      eigenDecompositor1.decompose();
      MatrixFunction matrixFunction2 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-115.47954092252512), 207.7154112155632, (-2673.0), 891.36973657, (double)4).when(matrixFunction2).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction2);
      eigenDecompositor0.decompose();
      eigenDecompositor0.applicableTo(matrix0);
      Random.setNextRandom((-1));
      Random.setNextRandom((-1729638846));
      eigenDecompositor0.decompose();
      eigenDecompositor0.decompose();
      eigenDecompositor1.decompose();
  }
}
