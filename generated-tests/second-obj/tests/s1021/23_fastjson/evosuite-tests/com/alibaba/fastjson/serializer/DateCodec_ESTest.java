/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:02:34 GMT 2018
 */

package com.alibaba.fastjson.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.AppendableSerializer;
import com.alibaba.fastjson.serializer.ContextValueFilter;
import com.alibaba.fastjson.serializer.DateCodec;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.util.Calendar;
import java.util.IdentityHashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateCodec_ESTest extends DateCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      Short short0 = new Short((short)1716);
      Class<Short> class0 = Short.TYPE;
      dateCodec0.write(jSONSerializer0, short0, "oracle.sql.", class0, (short)1716);
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0000-00-00T00:00:00.000");
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) parserConfig0, (Object) "0000-00-00T00:00:00.000");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0000-00-00T00:00:00.000\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONSerializer jSONSerializer0 = new JSONSerializer((SerializeWriter) null, serializeConfig0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        dateCodec0.write(jSONSerializer0, (Object) null, mockThaiBuddhistDate0, (Type) null, (-277309946));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Integer> class0 = Integer.TYPE;
      Object object0 = new Object();
      dateCodec0.cast((DefaultJSONParser) null, (Type) class0, object0, (Object) null);
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      MockDate mockDate0 = new MockDate((-1674L));
      dateCodec0.write(jSONSerializer0, mockDate0, (Object) null, class0, 840);
      assertTrue(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      Object object0 = new Object();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0001-01-01T00:00:00+08:00", parserConfig0);
      System.setCurrentTimeMillis(1005L);
      MockDate mockDate0 = new MockDate(1, 1963, 1963, (-947), 1963);
      Object object1 = dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) null, (Object) mockDate0);
      assertEquals("Wed Nov 06 21:43:00 GMT 2069", object1.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("ECv^1`k0onIjAl${KDv", parserConfig0);
      ClassLoader.getSystemClassLoader();
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) parserConfig0, (Object) "ECv^1`k0onIjAl${KDv");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ECv^1`k0onIjAl${KDv\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DateCodec dateCodec0 = new DateCodec();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("rv");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JSON.DEFAULT_TYPE_KEY = "fastjson.parser.deny";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(dateCodec0, jSONReaderScanner0, parserConfig0);
      Class<Integer> class0 = Integer.TYPE;
      jSONReaderScanner0.subString(2, 0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      dateCodec0.cast(defaultJSONParser0, (Type) class1, (Object) parserConfig0, (Object) "");
      dateCodec0.getFastMatchToken();
      int int0 = Opcodes.INVOKESPECIAL;
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      PipedWriter pipedWriter0 = new PipedWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(pipedWriter0, 1954, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      serializeWriter0.writeDirect = true;
      Class<Integer> class0 = Integer.TYPE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-78);
      FileSystemHandling.shouldAllThrowIOExceptions();
      pipedWriter0.close();
      dateCodec0.write(jSONSerializer0, (byte) (-78), class0, class0, (byte) (-78));
      MockDateFormat.getDateInstance();
      AppendableSerializer appendableSerializer0 = new AppendableSerializer();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      JSON.DEFFAULT_DATE_FORMAT = "0000-00-00";
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Float float0 = new Float((-4838.7));
      ZoneInfo zoneInfo0 = (ZoneInfo)jSONSerializer0.timeZone;
      JSON.defaultTimeZone = (TimeZone) zoneInfo0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(CLjava/lang/String;J)V");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(float0, jSONReaderScanner0, parserConfig0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "nNa XsdD;r(:vO");
      JavaBeanInfo.getBuilderClass((JSONType) null);
      MockDate mockDate0 = new MockDate();
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = Opcodes.CHECKCAST;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("(CLjava/lang/String;J)V", 0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      defaultJSONParser1.setDateFomrat(dateFormat0);
      int int1 = dateCodec0.getFastMatchToken();
      assertEquals(2, int1);
      
      System.setCurrentTimeMillis(0);
      Class<Double> class0 = Double.TYPE;
      dateCodec0.cast(defaultJSONParser1, (Type) class0, (Object) jSONReaderScanner0, (Object) "0000-00-00");
      assertEquals(2, dateCodec0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      IdentityHashMap<String, Field> identityHashMap0 = new IdentityHashMap<String, Field>();
      Float float0 = new Float((-4839.100951308172));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("HZZ0Kv%+vY@y3r^9H|&*");
      Locale locale0 = Locale.US;
      int int0 = Short.SIZE;
      Class<Integer> class0 = Integer.TYPE;
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(pipedWriter0, (byte)32, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      dateCodec0.write(jSONSerializer0, 0, float0, class0, (byte)32);
      Class<Double> class1 = Double.TYPE;
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Integer> class0 = Integer.TYPE;
      Object object0 = new Object();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("AllowArbitraryCommas");
      System.setCurrentTimeMillis(2);
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) null, (Object) "/Date(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/Date(\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      PipedWriter pipedWriter0 = new PipedWriter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(pipedWriter0, (-852), serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      LinkedList<ContextValueFilter> linkedList0 = new LinkedList<ContextValueFilter>();
      Byte byte0 = new Byte((byte) (-18));
      jSONSerializer0.out.expandCapacity(38);
      Integer integer0 = new Integer(38);
      dateCodec0.write(jSONSerializer0, byte0, integer0, (Type) null, 38);
      System.setCurrentTimeMillis((-852));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      int int0 = Opcodes.T_INT;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(CLjava/lang/tring;J)V", parserConfig0);
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) mockHijrahDate0, (Object) "(CLjava/lang/tring;J)V");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"(CLjava/lang/tring;J)V\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      System.setCurrentTimeMillis((-851L));
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[2] = serializerFeature2;
      serializerFeatureArray0[3] = serializerFeature1;
      SerializerFeature serializerFeature3 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[4] = serializerFeature2;
      serializerFeatureArray0[5] = serializerFeature3;
      serializerFeatureArray0[6] = serializerFeature2;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[7] = serializerFeature4;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Byte byte0 = new Byte((byte) (-18));
      // Undeclared exception!
      try { 
        dateCodec0.write(jSONSerializer0, byte0, serializerFeature0, (Type) null, 20);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.util.Date
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0000-00-00t00:00:00", parserConfig0);
      ClassLoader.getSystemClassLoader();
      int int0 = Calendar.WEDNESDAY;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      parserConfig0.propertyNamingStrategy = parserConfig0.propertyNamingStrategy;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)94;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte)94;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      System.setCurrentTimeMillis((byte)94);
      Class<Float> class0 = Float.TYPE;
      dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) mockHijrahDate0, (Object) "0000-00-00t00:00:00");
      dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) null, (Object) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      JSON.DEFFAULT_DATE_FORMAT = "";
      ParserConfig parserConfig0 = new ParserConfig();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      LinkedList<Field> linkedList0 = new LinkedList<Field>();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      Locale locale0 = Locale.US;
      JSON.defaultLocale = locale0;
      parserConfig0.addDeny("");
      Class<Integer> class0 = Integer.TYPE;
      String string0 = "0001-01-01t00:00:00+08:00";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0001-01-01t00:00:00+08:00");
      PipedReader pipedReader0 = new PipedReader((byte)32);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      Float.min(1, (byte)32);
      Integer integer0 = new Integer(0);
      ClassLoader.getSystemClassLoader();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) pascalNameFilter0, (Object) "0001-01-01t00:00:00+08:00");
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) "", (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse error
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }
}
