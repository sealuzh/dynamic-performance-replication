/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:23:40 GMT 2018
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.HijrahDate;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) mockJapaneseDate0);
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        jSONArray1.getObject((-10), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<MockHijrahDate> linkedHashSet0 = new LinkedHashSet<MockHijrahDate>();
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet(120, object0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.getInteger((-10));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap.KeySetView<Method, Boolean> concurrentHashMap_KeySetView0 = ConcurrentHashMap.newKeySet(121);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) concurrentHashMap_KeySetView0);
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.getJSONObject("");
      JSONObject jSONObject1 = new JSONObject((Map<String, Object>) null);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      boolean boolean1 = jSONArray2.remove((Object) jSONObject2);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      List<MockMinguoDate> list0 = jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(3296, (Collection<?>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3296, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2443);
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentAdd(object0);
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAdd(3935, (Object) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3935, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      jSONArray0.fluentSet(120, object0);
      jSONArray0.fluentClear();
      Integer integer0 = new Integer((-10));
      assertEquals((-10), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(840, (Object) mockMinguoDate0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 840, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2465);
      Class<Annotation> class0 = Annotation.class;
      List<Annotation> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(list0);
      jSONArray2.removeAll(jSONArray1);
      boolean boolean0 = jSONArray3.isEmpty();
      assertTrue(boolean0);
      
      jSONArray2.clear();
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2069);
      // Undeclared exception!
      try { 
        jSONArray0.getDate(2069);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2069, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1805);
      jSONArray0.getComponentType();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      jSONArray0.fluentRetainAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(1805);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1805, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap.KeySetView<Method, Boolean> concurrentHashMap_KeySetView0 = ConcurrentHashMap.newKeySet(121);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) concurrentHashMap_KeySetView0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) mockMinguoDate0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.getJSONObject("");
      JSONObject jSONObject1 = new JSONObject((Map<String, Object>) null);
      boolean boolean0 = jSONArray2.contains(mockMinguoDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1805);
      jSONArray0.getComponentType();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray0.set(72, mockJapaneseDate0);
      jSONArray0.lastIndexOf((Object) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-51);
      JSON.parse(byteArray0, (Feature[]) null);
      jSONArray0.getShortValue((byte)70);
      jSONArray0.add((Object) null);
      System.setCurrentTimeMillis(71);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      int int0 = 79;
      jSONArray0.set(79, mockJapaneseDate0);
      byte byte0 = (byte) (-49);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1805);
      jSONArray0.getRelatedArray();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) mockThaiBuddhistDate0);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      jSONArray0.set(120, hashMap0);
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaObject(class0);
      int int0 = 2016;
      // Undeclared exception!
      try { 
        jSONArray0.getByte(2016);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2016, Size: 121
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1805);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)117;
      // Undeclared exception!
      try { 
        jSONArray0.getLong(1107297537);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1107297537, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.getBoolean((-10));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList(2459, 3426);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 3426
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2472);
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentAdd(object0);
      // Undeclared exception!
      try { 
        jSONArray1.getBigInteger(120);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 120, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3467, propertyNamingStrategy0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.CamelCase;
      propertyNamingStrategy1.translate("1.2.46");
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.getIntValue(120);
      jSONArray0.remove((Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1.2.46");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      jSONArray0.getShort(3428);
      jSONArray0.getDoubleValue(0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      int int0 = Calendar.JANUARY;
      jSONArray0.equals((Object) null);
      jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      assertEquals(6934, jSONArray1.size());
      assertEquals(6934, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3467, (Object) null);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      propertyNamingStrategy1.translate("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.hashCode();
      jSONArray0.getJSONObject(2160);
      jSONArray0.getFloatValue(2217);
      jSONArray0.iterator();
      jSONArray1.addAll((Collection<?>) jSONArray0);
      assertEquals(6936, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JavaBeanInfo.getBuilderClass((JSONType) null);
      String[] stringArray0 = new String[3];
      JSONField jSONField0 = mock(JSONField.class, new ViolatedAssumptionAnswer());
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Field> linkedList0 = new LinkedList<Field>();
      jSONArray0.retainAll(linkedList0);
      jSONArray0.containsAll(linkedList0);
      Type type0 = jSONArray0.getComponentType();
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) mockHijrahDate0);
      Integer integer0 = new Integer(3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockHijrahDate0.getMockedClassName();
      jSONArray0.hashCode();
      jSONArray0.getJSONObject(0);
      int int0 = (-372);
      // Undeclared exception!
      try { 
        jSONArray1.getBigDecimal(3467);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3467, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3467, propertyNamingStrategy0);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      propertyNamingStrategy1.translate("");
      jSONArray0.fluentAddAll(3467, (Collection<?>) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue((-10));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3467, propertyNamingStrategy0);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      propertyNamingStrategy1.translate("");
      jSONArray0.getRelatedArray();
      jSONArray1.getJSONObject(3454);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(2691, (Collection<?>) jSONArray0);
      jSONArray2.getBoolean(2691);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue((-879));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3457);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.alibaba.fastjson.JSONArray");
      mockPrintStream0.print('G');
      jSONArray0.writeJSONString((Appendable) mockPrintStream0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray0.set((-1), mockHijrahDate0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.fluentPut("kotlin.reflect.jvm.internal.KClassImpl", mockPrintStream0);
      jSONArray0.lastIndexOf(jSONObject1);
      byte byte0 = (byte)102;
      LinkedList<MockHijrahDate> linkedList0 = new LinkedList<MockHijrahDate>();
      linkedList0.add(mockHijrahDate0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedList0);
      jSONArray0.retainAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue((byte)70);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 70, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = stringArray0[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray(62);
      ListIterator<Object> listIterator0 = jSONArray0.listIterator();
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentSet(120, parserConfig0);
      // Undeclared exception!
      try { 
        jSONArray2.getJSONArray(120);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONObject cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = "lB`|6=gR^5S!";
      stringArray0[4] = "";
      stringArray0[5] = "";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getString(120);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 120, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(101);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 101
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) jSONArray0);
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[1] = serializerFeature1;
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        jSONArray2.set((-10), mockJapaneseDate0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) mockHijrahDate0);
      Integer integer0 = new Integer(3);
      // Undeclared exception!
      try { 
        jSONArray1.getDouble(3461);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3461, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.getComponentType();
      jSONArray0.clone();
      // Undeclared exception!
      try { 
        jSONArray1.getDate(17);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 17, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.remove(120);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 120, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray3.fluentAddAll((-10), (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-10), propertyNamingStrategy0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "rxcQX4uW$qJEiCnixt");
      JSONArray jSONArray0 = new JSONArray(1583);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONArray2.add(1798, object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1798, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3467, propertyNamingStrategy0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(3454, (Collection<?>) jSONArray0);
      jSONArray1.getIntValue(156);
      // Undeclared exception!
      try { 
        jSONArray2.getDouble((-1884));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1805);
      jSONArray0.getComponentType();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      int int0 = 72;
      jSONArray0.set(72, mockJapaneseDate0);
      jSONArray0.lastIndexOf((Object) null);
      byte byte0 = (byte) (-51);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-51);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(72);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@157b81ef
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      jSONArray0.fluentSet(3467, propertyNamingStrategy0);
      jSONArray0.isEmpty();
      jSONArray0.getComponentType();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)109;
      jSONArray0.getLongValue(2434);
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(2321);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2321, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      JSONArray jSONArray0 = new JSONArray(35);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentSet(3459, mockThaiBuddhistDate0);
      JSONArray jSONArray3 = jSONArray2.fluentRemove(8);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray3.indexOf(mockJapaneseDate0);
      boolean boolean0 = jSONArray2.containsAll(jSONArray0);
      assertEquals(3459, jSONArray2.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.setRelatedArray((Object) null);
      jSONArray0.hashCode();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) mockHijrahDate0);
      Integer integer0 = new Integer(3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.hashCode();
      jSONArray0.getJSONObject(0);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue((-372));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      jSONArray0.fluentSet(3467, propertyNamingStrategy0);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      propertyNamingStrategy1.translate("");
      JavaBeanInfo.getBuilderClass((JSONType) null);
      jSONArray0.getObject(120, (Type) null);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(3467);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : PascalCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[5];
      jSONArray0.DEFAULT_GENERATE_FEATURE = (int) (byte) (-10);
      jSONArray0.add(0, (Object) null);
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)49;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      BiFunction<Object, Object, JSONPath.Operator> biFunction0 = (BiFunction<Object, Object, JSONPath.Operator>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.values();
      hashMap0.computeIfPresent((String) null, biFunction0);
      hashMap0.clone();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3467, propertyNamingStrategy0);
      jSONArray0.getIntValue(3436);
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      jSONArray1.indexOf((Object) null);
      jSONArray0.containsAll(jSONArray1);
      jSONArray1.getJSONObject(887);
      jSONArray0.listIterator(1);
      // Undeclared exception!
      try { 
        jSONArray1.getLongValue(3467);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : KebabCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3467, propertyNamingStrategy0);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      propertyNamingStrategy1.translate("");
      jSONArray1.fluentAddAll(1391, (Collection<?>) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue((-10));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[5];
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3467, propertyNamingStrategy0);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      propertyNamingStrategy1.translate("");
      jSONArray0.getIntValue(1705);
      jSONArray1.getByteValue(836);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray1.lastIndexOf(mockJapaneseDate0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.getComponentType();
      jSONArray0.clone();
      MockDate mockDate0 = new MockDate((-10), 120, 21, 120, (-10));
      // Undeclared exception!
      try { 
        jSONArray1.getSqlDate(15);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 15, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      byte byte0 = (byte) (-48);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.clone();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3467, propertyNamingStrategy0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      jSONArray1.fluentAdd((Object) mockThaiBuddhistDate0);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(3467);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : KebabCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      jSONArray0.fluentSet(3467, propertyNamingStrategy0);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      propertyNamingStrategy1.translate("");
      int int0 = 3426;
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(3467);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : PascalCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte) (-98);
      byteArray0[7] = (byte)114;
      byteArray0[8] = (byte)111;
      Feature[] featureArray0 = new Feature[0];
      JSON.parseObject(byteArray0, (Type) parameterizedTypeImpl0, featureArray0);
      jSONArray0.setComponentType(parameterizedTypeImpl0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        PropertyNamingStrategy.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.alibaba.fastjson.PropertyNamingStrategy.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2067);
      jSONArray0.stream();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(2067);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2067, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[5];
      jSONArray0.DEFAULT_GENERATE_FEATURE = (int) (byte) (-10);
      jSONArray0.add(0, (Object) null);
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)49;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      BiFunction<Object, Object, JSONPath.Operator> biFunction0 = (BiFunction<Object, Object, JSONPath.Operator>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.values();
      hashMap0.computeIfPresent((String) null, biFunction0);
      hashMap0.clone();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3467, propertyNamingStrategy0);
      jSONArray0.getIntValue(3436);
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      propertyNamingStrategy0.translate("");
      jSONArray1.indexOf((Object) null);
      jSONArray0.containsAll(jSONArray1);
      jSONArray1.getJSONObject(887);
      jSONArray0.listIterator(1);
      jSONArray1.getObject(1443, (Type) null);
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(3467);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : KebabCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[5];
      jSONArray0.DEFAULT_GENERATE_FEATURE = (int) (byte) (-10);
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)126;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[4] = (byte)49;
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3465, propertyNamingStrategy0);
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      JavaBeanInfo.getBuilderClass((JSONType) null);
      jSONArray2.getObject(4609, (Type) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 1;
      jSONArray0.getIntValue(1);
      // Undeclared exception!
      try { 
        jSONArray2.getByteValue(3465);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : KebabCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-10);
      jSONArray0.DEFAULT_GENERATE_FEATURE = (int) (byte) (-10);
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)126;
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3465, propertyNamingStrategy0);
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      JavaBeanInfo.getBuilderClass((JSONType) null);
      jSONArray1.getObject(435, (Type) null);
      jSONArray0.getIntValue((byte)126);
      int int0 = 114;
      jSONArray1.getByteValue(114);
      JSONArray jSONArray3 = new JSONArray(120);
      jSONArray2.indexOf((Object) null);
      jSONArray3.containsAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((byte) (-10));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
