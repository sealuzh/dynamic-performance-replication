/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:36:15 GMT 2018
 */

package org.la4j.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.linear.GaussianSolver;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GaussianSolver_ESTest extends GaussianSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 643;
      DenseVector denseVector0 = DenseVector.zero(643);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      GaussianSolver gaussianSolver0 = new GaussianSolver(matrix0);
      // Undeclared exception!
      try { 
        gaussianSolver0.solve(denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This system can't be solved.
         //
         verifyException("org.la4j.linear.GaussianSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(1748);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      matrix0.removeLastColumn();
      GaussianSolver gaussianSolver0 = null;
      try {
        gaussianSolver0 = new GaussianSolver(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>(hashMap0);
      int int0 = 1;
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap1, 1);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      GaussianSolver gaussianSolver0 = new GaussianSolver(matrix0);
      gaussianSolver0.applicableTo(matrix0);
      // Undeclared exception!
      try { 
        gaussianSolver0.solve(sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This system is singular.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.constant(8, (-617.0));
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      GaussianSolver gaussianSolver0 = new GaussianSolver(matrix0);
      BasicVector basicVector0 = (BasicVector)gaussianSolver0.solve(denseVector0);
      SparseVector.zero(8);
      gaussianSolver0.solve(denseVector0);
      CompressedVector compressedVector0 = (CompressedVector)SparseVector.zero(873);
      compressedVector0.toDiagonalMatrix();
      GaussianSolver gaussianSolver1 = new GaussianSolver(matrix0);
      MockRandom mockRandom0 = new MockRandom(0L);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)DenseMatrix.randomSymmetric(8, mockRandom0);
      GaussianSolver gaussianSolver2 = new GaussianSolver(basic2DMatrix0);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      BasicVector basicVector1 = (BasicVector)ooPlaceVectorsSubtraction0.apply((SparseVector) compressedVector0, (DenseVector) basicVector0);
      gaussianSolver2.solve(basicVector1);
      gaussianSolver2.solve(denseVector0);
      Random.setNextRandom(8);
  }
}
