/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:19:31 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("TT.sjNn");
      Token token0 = xPathLexer1.literal();
      assertNotNull(token0);
      assertEquals("", token0.getTokenText());
      assertEquals(27, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token1 = xPathLexer3.not();
      assertEquals(23, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!CS&_,5&A");
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.consume((-808));
      assertEquals("!CS&_,5&A", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(2, token0.getTokenType());
      assertEquals(")", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals(" ", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'N%ks}%=@");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("'", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("N", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("%", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!CS&_,5A");
      Token token0 = xPathLexer0.doubleColon();
      token0.toString();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.setPreviousToken(token0);
      Token token1 = xPathLexer1.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" M[izlHOW^j\"");
      xPathLexer0.nextToken();
      xPathLexer0.rightBracket();
      xPathLexer0.number();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      String string0 = xPathLexer0.getXPath();
      assertEquals(" M[izlHOW^j\"", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("iWMSd(Ou2<]YX|U");
      xPathLexer0.div();
      xPathLexer0.not();
      xPathLexer0.mod();
      xPathLexer0.isIdentifierStartChar('^');
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.hasMoreChars();
      xPathLexer0.whitespace();
      xPathLexer1.hasMoreChars();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4f(y@*vGC)}u),");
      xPathLexer0.consume();
      xPathLexer0.slashes();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.colon();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      assertFalse(xPathLexer3.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4f(y@*vGC)}u),");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.notEquals();
      assertEquals("f(", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("y", token1.getTokenText());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("@*", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("vGC", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      boolean boolean0 = xPathLexer2.isIdentifierChar('p');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'6C!.zH]");
      Token token0 = xPathLexer0.number();
      Token token1 = xPathLexer0.doubleColon();
      token1.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.at();
      token2.toString();
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.number();
      token2.toString();
      xPathLexer2.setXPath("[ (19) ('6)");
      assertFalse(xPathLexer2.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.plus();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("\"}w%");
      xPathLexer1.div();
      xPathLexer1.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4@*8");
      xPathLexer0.nextToken();
      xPathLexer0.consume((-934));
      xPathLexer0.leftBracket();
      // Undeclared exception!
      try { 
        xPathLexer0.literal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("aY[ah&8T<:WP");
      Token token0 = xPathLexer0.equals();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setPreviousToken((Token) null);
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer2.identifier();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z+!ylRlTLM}");
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.equals();
      String string0 = null;
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.whitespace();
      xPathLexer0.leftBracket();
      xPathLexer0.plus();
      xPathLexer0.setXPath("&R#A^C0DQjR#0_(3");
      xPathLexer0.dots();
      xPathLexer0.isIdentifierChar('e');
      xPathLexer0.isIdentifierChar('e');
      xPathLexer0.notEquals();
      xPathLexer0.setXPath("N\"-2^Ny[V");
      assertEquals("N\"-2^Ny[V", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("skqXQ4>!+Djlt;k&5");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("s", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.getXPath();
      Token token1 = xPathLexer0.pipe();
      assertEquals("k", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("g.zq0?b");
      Token token2 = xPathLexer1.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("g", token2.getTokenText());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      assertEquals("q", token3.getTokenText());
      
      Token token4 = xPathLexer1.dots();
      assertEquals(".", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      xPathLexer0.div();
      XPathLexer xPathLexer2 = new XPathLexer("skqXQ4>!+Djlt;k&5");
      XPathLexer xPathLexer3 = new XPathLexer("g.zq0?b");
      xPathLexer0.isIdentifierChar(']');
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token5 = xPathLexer2.equals();
      assertEquals("s", token5.getTokenText());
      assertEquals(21, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4f(y@*vGC)}),");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.notEquals();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("f(", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("y@", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("*", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.pipe();
      assertEquals(")", token4.getTokenText());
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer0.getPreviousToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("GC", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"sOEOh %}2");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.notEquals();
      Token token1 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token1);
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".\"'.2Ci@c?w:2O");
      Token token0 = xPathLexer0.rightParen();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.doubleColon();
      xPathLexer0.equals();
      token1.toString();
      xPathLexer0.nextToken();
      token1.toString();
      token1.toString();
      xPathLexer0.dollar();
      xPathLexer0.isIdentifierStartChar('\'');
      xPathLexer0.div();
      Token token2 = xPathLexer0.div();
      assertNull(token2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".\"'.2Ci@c?w:2O");
      Token token0 = xPathLexer0.rightParen();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.doubleColon();
      token1.toString();
      xPathLexer0.nextToken();
      token1.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.whitespace();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.not();
      assertEquals("[", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals(" ", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("(", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("^J-Ru");
      Token token0 = xPathLexer0.nextToken();
      Token token1 = xPathLexer0.leftParen();
      Token token2 = xPathLexer0.equals();
      Token token3 = xPathLexer0.getPreviousToken();
      String string0 = token1.toString();
      assertEquals("[ (1) (^)", string0);
      
      token3.toString();
      xPathLexer0.setPreviousToken(token2);
      assertEquals("J", token2.getTokenText());
      assertEquals(21, token2.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("-", token4.getTokenText());
      assertEquals(6, token4.getTokenType());
      
      token0.toString();
      assertEquals("^J-Ru", token0.getTokenText());
      
      Token token5 = xPathLexer0.whitespace();
      String string1 = token5.toString();
      assertEquals("[ (-2) ()", string1);
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("Ru", token6.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token7 = xPathLexer1.literal();
      assertNull(token7);
      
      Token token8 = xPathLexer0.whitespace();
      assertEquals((-2), token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"sOEOh %}2");
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.slashes();
      Token token2 = xPathLexer0.doubleColon();
      token1.toString();
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.notEquals();
      Token token3 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token3);
      token0.toString();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!Ip_ZJUJx");
      xPathLexer0.star();
      Token token0 = xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.literal();
      xPathLexer1.div();
      XPathLexer xPathLexer2 = new XPathLexer("!Ip_ZJUJx");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.operatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.nextToken();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer2.consume();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer2.consume();
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token1 = xPathLexer8.or();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "!Ip_ZJUJx";
      XPathLexer xPathLexer0 = new XPathLexer("!Ip_ZJUJx");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.comma();
      Token token0 = xPathLexer1.star();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.setPreviousToken(token0);
      xPathLexer3.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = null;
      try {
        xPathLexer6 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("[ (");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("[", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.number();
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.setXPath("[ (");
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("219kz@L,Jc.Y<");
      XPathLexer xPathLexer5 = new XPathLexer("[ (");
      Token token1 = xPathLexer4.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("219", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4f(y@*vGC)}),");
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.notEquals();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      Token token1 = xPathLexer0.div();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer0.consume(31);
      xPathLexer0.literal();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      xPathLexer0.setXPath("V=J+J");
      Token token2 = xPathLexer0.plus();
      assertEquals("V", token2.getTokenText());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      assertEquals("=", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals("J", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(5, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.plus();
      xPathLexer0.relationalOperator();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("aY[ah&8T<:WP");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("Y[", token1.getTokenText());
      
      String string0 = token0.toString();
      assertEquals("[ (13) (a)", string0);
      
      xPathLexer0.doubleColon();
      Token token2 = xPathLexer0.doubleColon();
      token2.toString();
      token2.toString();
      String string1 = token2.toString();
      assertEquals("[ (19) (&8)", string1);
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("T<:WP", token3.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.consume();
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("<", token4.getTokenText());
      
      char char0 = xPathLexer0.LA(1091);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.div();
      Token token3 = xPathLexer1.plus();
      assertEquals(5, token3.getTokenType());
      
      xPathLexer0.mod();
      boolean boolean0 = xPathLexer2.isIdentifierChar('E');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-]");
      Token token0 = xPathLexer0.comma();
      assertEquals("-", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("]", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4f(y@*vGC)}u),");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.slashes();
      String string0 = token0.toString();
      token0.toString();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer1.colon();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      String string1 = xPathLexer0.getXPath();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!CS&_,5&A");
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (23) (!)", string0);
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals("S", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("&_,5&A", token3.getTokenText());
      
      char char0 = xPathLexer0.LA(109);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.div();
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      assertEquals("&", token4.getTokenText());
      
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      assertEquals("_", token5.getTokenText());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"sOEOh %}2");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.nextToken();
      token1.toString();
      xPathLexer0.whitespace();
      token1.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      xPathLexer1.consume();
      Token token2 = xPathLexer1.mod();
      assertNull(token2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = new Token(1, ") (", 1, 64);
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.star();
      assertEquals(")", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(1, int0);
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(" (", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
      
      xPathLexer0.div();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("l0A<>fY'X?");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.whitespace();
      XPathLexer xPathLexer2 = new XPathLexer("l0A<>fY'X?");
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("axus9rYa>");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.nextToken();
      token0.toString();
      Token token1 = xPathLexer0.whitespace();
      token1.toString();
      xPathLexer0.nextToken();
      token1.toString();
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      xPathLexer0.consume();
      token1.toString();
      xPathLexer1.mod();
      xPathLexer0.setXPath("[ (-2) ()");
      assertFalse(xPathLexer0.equals((Object)xPathLexer1));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Xm3:vbc(h8VcUFgZyq");
      xPathLexer0.nextToken();
      xPathLexer0.div();
      xPathLexer0.and();
      xPathLexer0.comma();
      xPathLexer0.setXPath("");
      xPathLexer0.whitespace();
      xPathLexer0.setXPath("Xm3:vbc(h8VcUFgZyq");
      assertEquals("Xm3:vbc(h8VcUFgZyq", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("aY[ah&8T<:WP");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.doubleColon();
      String string0 = token0.toString();
      assertEquals("[ (13) (a)", string0);
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      String string1 = token2.toString();
      assertEquals("[ (19) (h&)", string1);
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(30, token3.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.consume();
      Token token4 = xPathLexer0.colon();
      assertEquals("<", token4.getTokenText());
      assertEquals(18, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("k*swjq'$c'KsbN4");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("k", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals("*", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("s", token2.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("");
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token3 = xPathLexer2.comma();
      assertEquals(32, token3.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer0.setXPath("");
      XPathLexer xPathLexer7 = new XPathLexer("k*swjq'$c'KsbN4");
      Token token4 = xPathLexer7.pipe();
      assertEquals("k", token4.getTokenText());
      assertEquals(17, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("]U2@uN");
      Token token0 = xPathLexer2.comma();
      assertEquals("]", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer2.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("U2", token1.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("]U2@uN");
      XPathLexer xPathLexer5 = new XPathLexer(">");
      XPathLexer xPathLexer6 = new XPathLexer("jAm 7hZ;*dQ{Un[rpF=");
      Token token2 = xPathLexer6.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("jAm", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4f(y@*vGC)}),");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.slashes();
      Token token1 = xPathLexer0.doubleColon();
      token1.toString();
      token0.toString();
      token1.toString();
      xPathLexer0.setPreviousToken((Token) null);
      token1.toString();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("WE nLBj Kq");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.div();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer1.operatorName();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer1.currentPosition();
      Token token2 = xPathLexer1.mod();
      assertNull(token2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("PwR:i>)dmzkC");
      xPathLexer1.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.and();
      xPathLexer1.operatorName();
      xPathLexer2.slashes();
      xPathLexer1.nextToken();
      xPathLexer0.at();
      Token token0 = xPathLexer0.colon();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mqI\"liX2R+[plR");
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!CS&_,5A");
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.consume((-795));
      xPathLexer1.plus();
      xPathLexer0.rightBracket();
      // Undeclared exception!
      try { 
        xPathLexer0.div();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|p8");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("|", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals("p", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("8", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.literal();
      assertNull(token4);
      
      XPathLexer xPathLexer2 = new XPathLexer(";7CWN~,");
      Token token5 = xPathLexer2.nextToken();
      assertEquals(";7CWN~,", token5.getTokenText());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals((-1), token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".\"'.2Ci@c?w:2O");
      Token token0 = xPathLexer0.pipe();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.colon();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer2.getPreviousToken();
      XPathLexer xPathLexer5 = null;
      try {
        xPathLexer5 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dkkp?\\b&U, o6");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("d", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (11) (k)", string0);
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.whitespace();
      assertEquals("", token4.getTokenText());
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      assertEquals("b", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals((-1), token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "V:6C6U|";
      XPathLexer xPathLexer0 = new XPathLexer("V:6C6U|");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.comma();
      Token token1 = xPathLexer1.dollar();
      xPathLexer0.setPreviousToken(token1);
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setPreviousToken(token0);
      xPathLexer1.rightBracket();
      xPathLexer0.equals();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token2 = xPathLexer2.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-7B<");
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("-7B<");
      xPathLexer1.consume();
      Token token0 = xPathLexer1.slashes();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("-7", token1.getTokenText());
      
      token0.toString();
      xPathLexer0.setPreviousToken((Token) null);
      String string0 = token0.toString();
      assertEquals("[ (11) (7)", string0);
      
      xPathLexer1.operatorName();
      xPathLexer1.setXPath("[ (11) (7)");
      Token token2 = xPathLexer0.nextToken();
      assertEquals("B", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token3);
      assertEquals(17, token3.getTokenType());
      assertEquals("<", token3.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("[ (11) (7)");
      xPathLexer1.mod();
      xPathLexer1.leftParen();
      Token token4 = xPathLexer2.comma();
      assertEquals(32, token4.getTokenType());
      
      Token token5 = xPathLexer2.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("[ (11) (7)");
      Token token6 = xPathLexer4.leftParen();
      assertEquals(1, token6.getTokenType());
      assertEquals("[", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("90");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("\"sOEOh %}2");
      xPathLexer2.equals();
      xPathLexer2.equals();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token1 = xPathLexer0.slashes();
      xPathLexer0.leftParen();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer1.identifierOrOperatorName();
      xPathLexer2.mod();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("drpGXU");
      xPathLexer0.div();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer0.hasMoreChars();
      xPathLexer1.at();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.consume();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.or();
      String string0 = xPathLexer0.getXPath();
      assertEquals("drpGXU", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      Token token0 = xPathLexer0.number();
      xPathLexer0.relationalOperator();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer1.colon();
      XPathLexer xPathLexer2 = new XPathLexer("i:Gk}<B`bc7DYqC^p");
      xPathLexer1.operatorName();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.rightParen();
      Token token0 = xPathLexer2.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!CS&_,5A");
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("C", token1.getTokenText());
      
      String string0 = token0.toString();
      assertEquals("[ (23) (!)", string0);
      
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("3j~-pB%EI}W?(XCC");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer0.comma();
      Token token2 = xPathLexer1.nextToken();
      assertEquals(30, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("VTP");
      Token token3 = xPathLexer1.comma();
      assertEquals("j", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer1.whitespace();
      assertEquals((-2), token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      boolean boolean0 = xPathLexer3.isIdentifierChar('t');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.comma();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.getPreviousToken();
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      
      xPathLexer0.isIdentifierChar('~');
      xPathLexer0.operatorName();
      xPathLexer0.getXPath();
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNull(token4);
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      xPathLexer0.mod();
      boolean boolean0 = xPathLexer0.isIdentifierChar('~');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mqI\"liX2R+[plR");
      Token token0 = xPathLexer0.plus();
      Token token1 = xPathLexer0.dollar();
      String string0 = token0.toString();
      assertEquals("[ (5) (m)", string0);
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("I", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      String string1 = token1.toString();
      assertEquals("[ (26) (q)", string1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("]U2@uN");
      xPathLexer2.comma();
      Token token0 = xPathLexer0.slashes();
      Token token1 = xPathLexer2.nextToken();
      xPathLexer1.setPreviousToken(token1);
      xPathLexer0.setPreviousToken(token0);
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer1.slashes();
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer("/:a.H$XOV0N{");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.whitespace();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token0 = xPathLexer5.whitespace();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer5.plus();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer1.leftParen();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Q");
      xPathLexer0.and();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("Q", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.and();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      xPathLexer0.isIdentifierStartChar('5');
      xPathLexer0.mod();
      xPathLexer0.isIdentifierChar('d');
      xPathLexer0.identifier();
      xPathLexer0.dots();
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m");
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("PS=Sg'B?jia<V");
      XPathLexer xPathLexer2 = new XPathLexer("b6");
      xPathLexer1.nextToken();
      xPathLexer0.consume((-1707));
      assertFalse(xPathLexer0.equals((Object)xPathLexer1));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}.D'");
      xPathLexer0.currentPosition();
      xPathLexer0.currentPosition();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("}", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.rightParen();
      assertEquals("D", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#o\"b*p8JOK");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.leftBracket();
      xPathLexer1.at();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer1.colon();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("g0cp!4t1[B;o/");
      Token token0 = xPathLexer2.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("g", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer(")");
      XPathLexer xPathLexer5 = new XPathLexer(")");
      Token token2 = xPathLexer2.nextToken();
      assertEquals(30, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("H[ (");
      XPathLexer xPathLexer1 = new XPathLexer("'6CL!.zH]");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer1.pipe();
      XPathLexer xPathLexer3 = new XPathLexer("H[ (");
      XPathLexer xPathLexer4 = new XPathLexer("H[ (");
      xPathLexer4.equals();
      xPathLexer0.mod();
      xPathLexer1.div();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer0.not();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{ArP?");
      XPathLexer xPathLexer1 = new XPathLexer("<)`4r");
      xPathLexer0.nextToken();
      xPathLexer1.nextToken();
      xPathLexer1.consume((-1707));
      assertFalse(xPathLexer1.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.literal();
      assertNull(token2);
      
      xPathLexer1.div();
      XPathLexer xPathLexer2 = new XPathLexer("$");
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token3 = xPathLexer3.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer3.identifierOrOperatorName();
      assertNotNull(token4);
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token5 = xPathLexer2.slashes();
      assertEquals("$", token5.getTokenText());
      assertEquals(11, token5.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("$");
      Token token6 = xPathLexer5.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer5.nextToken();
      assertEquals("$", token7.getTokenText());
      assertEquals(26, token7.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token8 = xPathLexer5.identifier();
      assertEquals(15, token8.getTokenType());
      assertEquals("", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("TA(%XD");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      xPathLexer0.pipe();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.leftBracket();
      xPathLexer0.not();
      xPathLexer0.rightParen();
      token0.toString();
      token0.toString();
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.endPosition();
      xPathLexer0.div();
      xPathLexer0.leftParen();
      xPathLexer0.operatorName();
      xPathLexer0.hasMoreChars();
      xPathLexer0.minus();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-45));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!CS&_,5A");
      String string0 = "=@o][";
      XPathLexer xPathLexer1 = new XPathLexer("=@o][");
      xPathLexer1.nextToken();
      xPathLexer0.number();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.and();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = "d";
      XPathLexer xPathLexer1 = new XPathLexer("d");
      xPathLexer1.nextToken();
      Token token0 = xPathLexer1.pipe();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("A/E`^oTwA");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("A", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.comma();
      assertEquals("/", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer2.minus();
      assertEquals(6, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("!CS&_,NA");
      xPathLexer0.div();
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      assertEquals("E`", token3.getTokenText());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("^", token4.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(9, int0);
      
      Token token5 = xPathLexer3.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("!", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<>fY'X?");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.mod();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("J");
      xPathLexer1.div();
      XPathLexer xPathLexer2 = new XPathLexer(">X)X0");
      xPathLexer0.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.operatorName();
      xPathLexer3.colon();
      XPathLexer xPathLexer4 = new XPathLexer("t/E");
      xPathLexer4.slashes();
      XPathLexer xPathLexer5 = null;
      try {
        xPathLexer5 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath(">'Utlz^,{`>");
      Token token0 = xPathLexer0.nextToken();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      String string0 = token1.toString();
      assertEquals("[ (15) ()", string0);
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals("'", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      String string1 = token0.toString();
      assertEquals("[ (9) (>)", string1);
      assertEquals(9, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("FK3");
      xPathLexer0.div();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("K3", token0.getTokenText());
      
      xPathLexer0.literal();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("FK3");
      Token token1 = xPathLexer1.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("FK3", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer2.not();
      assertEquals(23, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.plus();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer("onft ");
      xPathLexer1.operatorName();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("aY[ahh.T<:WP");
      String string0 = "5E-j2J^!Qf4`";
      XPathLexer xPathLexer1 = new XPathLexer("aY[ahh.T<:WP");
      XPathLexer xPathLexer2 = new XPathLexer("5E-j2J^!Qf4`");
      xPathLexer2.nextToken();
      String string1 = "CQ!Mvg#@A``>#nLv-[";
      xPathLexer2.identifierOrOperatorName();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath(">'Utlz^,{`>");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(">", token0.getTokenText());
      assertEquals(9, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.not();
      assertEquals(23, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer(">'Utlz^,{`>");
      xPathLexer2.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("KybP ,3m=CE[uy k`");
      xPathLexer0.isIdentifierStartChar('d');
      XPathLexer xPathLexer5 = new XPathLexer("[ (");
      xPathLexer3.consume();
      xPathLexer3.number();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token2 = xPathLexer4.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("KybP", token2.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer2.setPreviousToken((Token) null);
      xPathLexer1.and();
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token3 = xPathLexer1.number();
      assertEquals(30, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      String string0 = "V:6C6U|";
      XPathLexer xPathLexer0 = new XPathLexer("dqkp?Pb&U o6");
      XPathLexer xPathLexer1 = new XPathLexer("V:6C6U|");
      XPathLexer xPathLexer2 = new XPathLexer("0M!/<eS1@ySr:s)OS`");
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token0 = xPathLexer2.not();
      xPathLexer2.number();
      xPathLexer2.star();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.consume();
      xPathLexer4.operatorName();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.at();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer2.number();
      xPathLexer0.rightParen();
      Token token1 = xPathLexer4.whitespace();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      String string0 = "'6C!.zH]";
      XPathLexer xPathLexer0 = new XPathLexer("'6C!.zH]");
      Token token0 = xPathLexer0.number();
      Token token1 = xPathLexer0.doubleColon();
      token1.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.at();
      Token token2 = xPathLexer0.dots();
      token0.toString();
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.number();
      Token token3 = xPathLexer1.plus();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.setPreviousToken(token3);
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("g0cp!4t1[B;o/");
      xPathLexer2.comma();
      xPathLexer2.equals();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer(")");
      XPathLexer xPathLexer5 = new XPathLexer(")");
      xPathLexer2.nextToken();
      Token token0 = xPathLexer3.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer(".6uBw&).KHw(:VfVdf");
      xPathLexer0.equals();
      xPathLexer0.or();
      xPathLexer1.nextToken();
      xPathLexer1.mod();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer("B@LnN");
      xPathLexer0.notEquals();
      // Undeclared exception!
      try { 
        xPathLexer1.LA((-2907));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
