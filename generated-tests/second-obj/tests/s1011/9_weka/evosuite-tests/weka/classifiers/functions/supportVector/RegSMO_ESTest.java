/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:02:39 GMT 2018
 */

package weka.classifiers.functions.supportVector;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.supportVector.Kernel;
import weka.classifiers.functions.supportVector.PolyKernel;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.functions.supportVector.RegSMO;
import weka.classifiers.functions.supportVector.SMOset;
import weka.classifiers.functions.supportVector.StringKernel;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.core.Capabilities;
import weka.core.Instances;
import weka.core.TechnicalInformation;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.NGramTokenizer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RegSMO_ESTest extends RegSMO_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      regSMO0.getTechnicalInformation();
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1765, 1.0E-4, 1765, 1765, 1765, 1.0E-4, 1765, 1765, 1765, 1765, 1765);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      regSMO0.getTechnicalInformation();
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine((-871), 8.180727426077047E-11, (-871), 1002.0, (-871), 8.180727426077047E-11, (-871), 0.0, (-871), 1002.0, (-871));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      RegSMO regSMO0 = new RegSMO();
      boolean boolean0 = regSMO0.findOptimalPointOnLine((-2076), 0L, 1423.4, 0L, (-2076), 0L, 1423.4, 0L, (-2076), 0L, (-2076));
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      try { 
        regSMO0.wrapUp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      regSMO0.getRevision();
      regSMO0.setEpsilon(1.0E75);
      assertEquals(1.0E75, regSMO0.getEpsilon(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      // Undeclared exception!
      try { 
        regSMO0.secondChoiceHeuristic(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      String string0 = regSMO0.epsilonTipText();
      assertEquals("The epsilon for round-off error (shouldn't be changed).", string0);
      
      String[] stringArray0 = new String[0];
      regSMO0.setOptions(stringArray0);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      RegSMO regSMO0 = new RegSMO();
      int int0 = regSMO0.takeStep(338, 338, 3.4396704190000004E-8, 3.4396704190000004E-8, 338);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine((-726), (-726), (-726), 5.0, (-726), 5.0, 5.0, 3185.3362583681305, 5.0, 3185.3362583681305, 5.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine((-649), 0.0, 0.0, 0.0, 1211, (-1165.54539217), 0.0, 0.0, 1211, 1211, 593);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      double double0 = regSMO0.m_b;
      regSMO0.epsilonParameterTipText();
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine((-836), 0.0, (-1495.7013999448359), 2.0, (-836), 0.0, 0.0, (-1889.35453528), (-836), 4256.3208436, (-836));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(740, (-1934.800043), 1073741824, (-1146.0), (-2144018847), (-2144018847), (-1146.0), 740, (-1934.800043), 740, 2197.4422529382);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      double double0 = regSMO0.m_b;
      assertEquals(0.0, double0, 0.01);
      
      regSMO0.m_eps = (-706.65903);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals((-706.65903), regSMO0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      String string0 = regSMO0.epsilonParameterTipText();
      assertNotNull(string0);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals((-706.65903), regSMO0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", string0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine((-836), 0.0, (-1495.7013999448359), 2.0, (-836), 0.0, 778.44471428, (-1889.35453528), (-836), 4256.3208436, (-836));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      TechnicalInformation technicalInformation0 = regSMO0.getTechnicalInformation();
      assertNotNull(technicalInformation0);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(TechnicalInformation.Type.MISC, technicalInformation0.getType());
      assertFalse(technicalInformation0.hasAdditional());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1765, 1.0E-4, 1765, 1002.0, 1765, 1.0E-4, 1765, 1.0E10, 1765, 1002.0, 1765);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      Instances instances0 = regSMO0.m_data;
      assertNull(instances0);
      
      try { 
        regSMO0.buildClassifier((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // SVM not initialized in optimizer. Use RegOptimizer.setSVMReg()
         //
         verifyException("weka.classifiers.functions.supportVector.RegOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      
      try { 
        regSMO0.takeStep(49, 25, 25, 25, 49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      
      regSMO0.m_nEvals = 2137452656;
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(2137452656, regSMO0.getKernelEvaluations());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      
      String[] stringArray0 = regSMO0.getOptions();
      assertNotNull(stringArray0);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(2137452656, regSMO0.getKernelEvaluations());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      
      String string0 = regSMO0.globalInfo();
      assertNotNull(string0);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(2137452656, regSMO0.getKernelEvaluations());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Implementation of SMO for support vector regression as described in :\n\nA.J. Smola, B. Schoelkopf (1998). A tutorial on support vector regression.", string0);
      
      String string1 = regSMO0.epsilonParameterTipText();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(2137452656, regSMO0.getKernelEvaluations());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", string1);
      
      regSMO0.setOptions(stringArray0);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(2137452656, regSMO0.getKernelEvaluations());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      
      try { 
        regSMO0.takeStep(1028, 2137452656, 1028, (-1129.390815947923), (-2843.6025251455635));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      
      boolean boolean0 = regSMO0.m_bModelBuilt;
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(195225774, 195225774, 19.760318157956526, 19.760318157956526, 195225774, (-708.5216273967687), 19.760318157956526, 195225774, (-2681.49917655967), 195225774, (-708.5216273967687));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      
      String string0 = regSMO0.getRevision();
      assertNotNull(string0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("8034", string0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(842, 7395.8999992604095, 7395.8999992604095, 1135.3851, 842, 842, (-730.0963186009), 5.70001, 842, 4.5919900000000005E-8, 1135.3851);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(59, 1.0E-12, 3526.82, 3526.82, 1925, (-2710.66521773), (-1083.4799606), (-1146.0), (-1083.4799606), 1.0E-12, (-2710.66521773));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(3284, 0.1, 80, 578, 3284, 3042.4690026, 0.1, 5.44979E-7, 1.0E-4, 1243, 0.1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 5.0;
      boolean boolean0 = regSMO0.m_bModelBuilt;
      assertFalse(boolean0);
      
      regSMO0.m_alpha = doubleArray0;
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      
      String string0 = regSMO0.toString();
      assertNotNull(string0);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("SMOreg\n\nSupport vectors:\n +       0     \n\n\n\nNumber of kernel evaluations: 0", string0);
      
      StringKernel stringKernel0 = new StringKernel();
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertNotNull(stringKernel0);
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertFalse(stringKernel0.getDebug());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertEquals(0, stringKernel0.numEvals());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      
      String string1 = regSMO0.epsilonTipText();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", string1);
      
      regSMO0.m_alpha1 = 1953.108335;
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(966296780, (-6.78214234), 1, (-1608.3898), 1, (-1608.3898), 0.0, 0, 0.05, 5.0, 202.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 966296780
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      double double0 = regSMO0.m_b;
      assertEquals(0.0, double0, 0.01);
      
      regSMO0.m_eps = (-706.65903);
      assertFalse(regSMO0.modelBuilt());
      assertEquals((-706.65903), regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      String string0 = regSMO0.epsilonParameterTipText();
      assertNotNull(string0);
      assertFalse(regSMO0.modelBuilt());
      assertEquals((-706.65903), regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", string0);
      
      regSMO0.m_bModelBuilt = true;
      assertEquals((-706.65903), regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertTrue(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine((-836), 0.0, (-1495.7013999448359), 2.0, (-836), 0.0, (-706.65903), (-1889.35453528), (-836), 4256.3208436, (-836));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      SMOreg sMOreg0 = regSMO0.m_SVM;
      assertNull(sMOreg0);
      
      regSMO0.m_SVM = null;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      String string0 = regSMO0.globalInfo();
      assertNotNull(string0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Implementation of SMO for support vector regression as described in :\n\nA.J. Smola, B. Schoelkopf (1998). A tutorial on support vector regression.", string0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1, (-915.516507421), 0, 0, 1, 2.8180727426077046, 1, 1, (-915.516507421), 1, (-2.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      
      regSMO0.m_bModelBuilt = true;
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertTrue(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(740, (-1934.800043), 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 740, (-1934.800043), 740, 2197.4422529382);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      regSMO0.m_eps = 343.9670419;
      assertFalse(regSMO0.modelBuilt());
      assertEquals(343.9670419, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      regSMO0.m_nCacheHits = 195225778;
      assertFalse(regSMO0.modelBuilt());
      assertEquals(343.9670419, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(195225778, regSMO0.getCacheHits());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(2146003020, (-1102), 1.0E-12, 1437.287904, 195225778, 141.39968180656433, 9.999999999E-13, 195225778, 3.412657500027016E-7, 3.412657500027016E-7, 1.0E-12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      double double0 = regSMO0.getScore();
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0.0, double0, 0.01);
      
      regSMO0.m_nSeed = 578;
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(578, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(578, 0.0, 0.0, 2848.578036017, 578, 0.0, (-16.60744562221794), 2848.578036017, 1.5, 578, 2848.578036017);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      
      String string0 = regSMO0.toString();
      assertNotNull(string0);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("SMOreg\n\nSupport vectors:\n +       0     \n\n\n\nNumber of kernel evaluations: 0", string0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine((-285), (-285), 0.1, (-285), 1058, 1188.20622, 1058, 251.65567885, (-1582.2888247658052), 0.1, (-2681.499176559671));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      TechnicalInformation technicalInformation0 = regSMO0.getTechnicalInformation();
      assertNotNull(technicalInformation0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(TechnicalInformation.Type.MISC, technicalInformation0.getType());
      assertFalse(technicalInformation0.hasAdditional());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4428;
      doubleArray0[1] = (double) 4428;
      doubleArray0[2] = (double) 4428;
      doubleArray0[3] = (double) 4428;
      doubleArray0[4] = (double) 4428;
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(166, 4428.0, 4428.0, 4428.0, 66, 4428, 578.0, 1099.31262, 578.0, 738.736675402, 738.736675402);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)24;
      byteArray0[7] = (byte)24;
      byteArray0[1] = (byte)24;
      double[] doubleArray0 = new double[9];
      regSMO0.m_nCacheHits = (-3552);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-3552), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)24}, byteArray0);
      assertTrue(boolean0);
      
      regSMO0.setEpsilon((byte)24);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-3552), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(24.0, regSMO0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      regSMO0.m_alpha = doubleArray0;
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-3552), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(24.0, regSMO0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      StringKernel stringKernel0 = new StringKernel();
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertNotNull(stringKernel0);
      assertFalse(stringKernel0.getDebug());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(0, stringKernel0.numEvals());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      
      stringKernel0.m_ChecksTurnedOff = false;
      assertFalse(stringKernel0.getDebug());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(0, stringKernel0.numEvals());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      
      double double0 = regSMO0.m_alpha2Star;
      assertEquals(0.0, double0, 0.01);
      
      regSMO0.m_alphaStar = regSMO0.m_alpha;
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-3552), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(24.0, regSMO0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertNotNull(capabilities0);
      assertFalse(stringKernel0.getDebug());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(0, stringKernel0.numEvals());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertFalse(capabilities0.hasDependencies());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1, (byte)24, 0, 1, (byte)24, 0, (byte)0, 998.9212041820141, (byte)24, (byte)24, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      
      double double0 = 0.1;
      regSMO0.m_alpha2Star = 0.1;
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(Integer.MAX_VALUE, Integer.MAX_VALUE, 0.1, 0.964, Integer.MAX_VALUE, Integer.MAX_VALUE, 19.760318157956526, 0.1, 0.1, Integer.MAX_VALUE, 163.594088310059);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      
      TechnicalInformation technicalInformation0 = regSMO0.getTechnicalInformation();
      assertNotNull(technicalInformation0);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(TechnicalInformation.Type.MISC, technicalInformation0.getType());
      assertFalse(technicalInformation0.hasAdditional());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(195225745, 195225745, 195225745, 1.7976931348623157E308, (-1103), 2420.225, 195225745, 300.0, 2420.225, 195225745, (-1103));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      
      regSMO0.m_eps = 343.9670419;
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(343.9670419, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int[] intArray0 = new int[3];
      intArray0[2] = (-1102);
      regSMO0.m_sparseIndices = intArray0;
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(343.9670419, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine((-1102), 299.76403411939435, 343.9670419, 343.9670419, 195225778, (-707.8551156261607), 0.1, 3412.657500027016, (-2610.437499140259), 3412.657500027016, (-707.8551156261607));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      
      boolean boolean0 = regSMO0.m_bModelBuilt;
      assertFalse(boolean0);
      
      RegSMO regSMO1 = new RegSMO();
      assertFalse(regSMO1.equals((Object)regSMO0));
      assertNotNull(regSMO1);
      assertEquals((-1), regSMO1.getCacheHits());
      assertEquals(0, regSMO1.getKernelEvaluations());
      assertEquals(0.001, regSMO1.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO1.epsilonParameterTipText());
      assertEquals(1, regSMO1.getSeed());
      assertEquals(1.0E-12, regSMO1.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO1.epsilonTipText());
      assertFalse(regSMO1.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO1.seedTipText());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      regSMO1.m_alpha2 = 3874.1;
      assertEquals((-1), regSMO1.getCacheHits());
      assertEquals(0, regSMO1.getKernelEvaluations());
      assertEquals(0.001, regSMO1.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO1.epsilonParameterTipText());
      assertEquals(1, regSMO1.getSeed());
      assertEquals(1.0E-12, regSMO1.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO1.epsilonTipText());
      assertFalse(regSMO1.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO1.seedTipText());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      StringKernel stringKernel0 = new StringKernel();
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertNotNull(stringKernel0);
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertEquals(0, stringKernel0.numEvals());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertFalse(stringKernel0.getDebug());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      
      regSMO1.m_bModelBuilt = false;
      assertEquals((-1), regSMO1.getCacheHits());
      assertEquals(0, regSMO1.getKernelEvaluations());
      assertEquals(0.001, regSMO1.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO1.epsilonParameterTipText());
      assertEquals(1, regSMO1.getSeed());
      assertEquals(1.0E-12, regSMO1.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO1.epsilonTipText());
      assertFalse(regSMO1.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO1.seedTipText());
      
      Enumeration enumeration0 = stringKernel0.listOptions();
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertNotNull(enumeration0);
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertEquals(0, stringKernel0.numEvals());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertFalse(stringKernel0.getDebug());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = regSMO1.toString();
      assertNotSame(regSMO1, regSMO0);
      assertFalse(regSMO1.equals((Object)regSMO0));
      assertNotNull(string0);
      assertEquals((-1), regSMO1.getCacheHits());
      assertEquals(0, regSMO1.getKernelEvaluations());
      assertEquals(0.001, regSMO1.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO1.epsilonParameterTipText());
      assertEquals(1, regSMO1.getSeed());
      assertEquals(1.0E-12, regSMO1.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO1.epsilonTipText());
      assertFalse(regSMO1.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO1.seedTipText());
      assertEquals("SMOreg\n\nSupport vectors:\n +       0     \n\n\n\nNumber of kernel evaluations: 0", string0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(0, 1, 1, 1, 0, 0, 1, 3874.1, (-2), 3874.1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 559.0;
      doubleArray0[1] = (-2411.4);
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = 1.4193495694326445E-7;
      doubleArray0[4] = 1796.18745530885;
      doubleArray0[5] = 1547.9573;
      regSMO0.m_alpha = doubleArray0;
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      
      // Undeclared exception!
      try { 
        regSMO0.secondChoiceHeuristic((-2146901959));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[0] = 202.0;
      regSMO0.m_alpha = doubleArray0;
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      String string0 = regSMO0.globalInfo();
      assertNotNull(string0);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("Implementation of SMO for support vector regression as described in :\n\nA.J. Smola, B. Schoelkopf (1998). A tutorial on support vector regression.", string0);
      
      StringKernel stringKernel0 = new StringKernel();
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertNotNull(stringKernel0);
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertEquals(0, stringKernel0.numEvals());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertFalse(stringKernel0.getDebug());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      regSMO0.setEpsilon(0);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.0, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      String string1 = stringKernel0.subsequenceLengthTipText();
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertNotNull(string1);
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertEquals(0, stringKernel0.numEvals());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertFalse(stringKernel0.getDebug());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals("The subsequence length.", string1);
      
      String[] stringArray0 = regSMO0.getOptions();
      assertNotNull(stringArray0);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.0, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      assertNotNull(alphabeticTokenizer0);
      assertEquals("Alphabetic string tokenizer, tokens are to be formed only from contiguous alphabetic sequences.", alphabeticTokenizer0.globalInfo());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(0, 0.0, 0.0, 1, 1, 0.0, 0.0, 0.0, 0.3, 1, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      byte[] byteArray0 = new byte[8];
      double[] doubleArray0 = new double[1];
      regSMO0.m_target = doubleArray0;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      regSMO0.m_alpha = doubleArray1;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      StringKernel stringKernel0 = new StringKernel();
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertNotNull(stringKernel0);
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertFalse(stringKernel0.getDebug());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(0, stringKernel0.numEvals());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      
      regSMO0.m_alphaStar = regSMO0.m_alpha;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      regSMO0.optimize();
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertNotNull(capabilities0);
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertFalse(stringKernel0.getDebug());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(0, stringKernel0.numEvals());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      doubleArray1[7] = (double) 2146944620;
      String string0 = stringKernel0.getRevision();
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertNotNull(string0);
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertFalse(stringKernel0.getDebug());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(0, stringKernel0.numEvals());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals("8034", string0);
      
      stringKernel0.setCacheSize(3);
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertFalse(stringKernel0.getDebug());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertEquals(3, stringKernel0.getCacheSize());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(0, stringKernel0.numEvals());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(0, 0, 0.0, (-1.0E-6), (byte)0, 0, 2.14694462E9, (-1.0E-6), 1, 2146944620, (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      byte[] byteArray0 = new byte[8];
      double[] doubleArray0 = new double[6];
      regSMO0.m_target = doubleArray0;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      byteArray0[0] = (byte)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      regSMO0.m_alpha = doubleArray1;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      StringKernel stringKernel0 = new StringKernel();
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertNotNull(stringKernel0);
      assertEquals(0, stringKernel0.numEvals());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertFalse(stringKernel0.getDebug());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      
      regSMO0.m_alphaStar = regSMO0.m_alpha;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = 'a';
      charArray0[3] = '%';
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1, (byte)0, (byte)0, (byte)0, (byte)0, 0, (-2968.1), 829.719811, (byte)0, 1, (-25.795711586));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 5.0;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      doubleArray0[4] = (-1687.3509212660585);
      doubleArray0[5] = 5.0;
      regSMO0.m_alpha = doubleArray0;
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      
      String string0 = regSMO0.toString();
      assertNotNull(string0);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("SMOreg\n\nSupport vectors:\n +       0     \n\n\n\nNumber of kernel evaluations: 0", string0);
      
      StringKernel stringKernel0 = new StringKernel();
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertNotNull(stringKernel0);
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertFalse(stringKernel0.getDebug());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertEquals(0, stringKernel0.numEvals());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      
      String string1 = stringKernel0.subsequenceLengthTipText();
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertNotNull(string1);
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertFalse(stringKernel0.getDebug());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertEquals(0, stringKernel0.numEvals());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertEquals("The subsequence length.", string1);
      
      String string2 = regSMO0.epsilonTipText();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", string2);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1, 912.0, (-1146.24318787), 0.0, 1, 1, (-618.8), 307.91016486214676, 5.0, 4849.731206, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      double[] doubleArray0 = new double[9];
      regSMO0.m_alpha = doubleArray0;
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      StringKernel stringKernel0 = new StringKernel();
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertNotNull(stringKernel0);
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals(0, stringKernel0.numEvals());
      assertFalse(stringKernel0.getUseNormalization());
      assertFalse(stringKernel0.getDebug());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      
      doubleArray0[4] = 0.0;
      // Undeclared exception!
      try { 
        regSMO0.secondChoiceHeuristic(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      
      Enumeration enumeration0 = regSMO0.listOptions();
      assertNotNull(enumeration0);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = 279.361571;
      regSMO0.m_bModelBuilt = false;
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      
      doubleArray0[3] = 2.147483810187751E9;
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      
      regSMO0.m_b = 2.147483810187751E9;
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      
      regSMO0.setEpsilon(279.361571);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(279.361571, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-15);
      doubleArray1[1] = 1535.22828347;
      doubleArray1[3] = (double) 61;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) (-15);
      regSMO0.m_alpha = doubleArray1;
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(279.361571, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      
      int int0 = regSMO0.secondChoiceHeuristic(61);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(279.361571, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, int0);
      
      String string0 = regSMO0.epsilonTipText();
      assertNotNull(string0);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(279.361571, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", string0);
      
      try { 
        regSMO0.examineExample(104);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      byte[] byteArray0 = new byte[8];
      double[] doubleArray0 = new double[1];
      regSMO0.m_target = doubleArray0;
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      byteArray0[1] = (byte)0;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      regSMO0.m_alpha = doubleArray1;
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      StringKernel stringKernel0 = new StringKernel();
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertNotNull(stringKernel0);
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertFalse(stringKernel0.getDebug());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals(0, stringKernel0.numEvals());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      
      regSMO0.m_alphaStar = regSMO0.m_alpha;
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      StringKernel stringKernel1 = new StringKernel();
      assertFalse(stringKernel1.equals((Object)stringKernel0));
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertNotNull(stringKernel1);
      assertEquals("Turns on the output of debugging information.", stringKernel1.debugTipText());
      assertEquals("Whether to use normalization.", stringKernel1.useNormalizationTipText());
      assertFalse(stringKernel1.getChecksTurnedOff());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel1.checksTurnedOffTipText());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel1.lambdaTipText());
      assertEquals("The size of the internal cache (a prime number).", stringKernel1.internalCacheSizeTipText());
      assertFalse(stringKernel1.getUseNormalization());
      assertFalse(stringKernel1.getDebug());
      assertEquals("The subsequence length.", stringKernel1.subsequenceLengthTipText());
      assertEquals(250007, stringKernel1.getCacheSize());
      assertEquals(3, stringKernel1.getSubsequenceLength());
      assertEquals(0.5, stringKernel1.getLambda(), 0.01);
      assertEquals(9, stringKernel1.getMaxSubsequenceLength());
      assertEquals(0, stringKernel1.numEvals());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel1.maxSubsequenceLengthTipText());
      assertEquals(200003, stringKernel1.getInternalCacheSize());
      assertEquals((-1), stringKernel1.numCacheHits());
      assertEquals("The pruning method.", stringKernel1.pruningMethodTipText());
      assertEquals("The size of the cache (a prime number).", stringKernel1.cacheSizeTipText());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = regSMO0.secondChoiceHeuristic(5446);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), int0);
      
      Random.setNextRandom(84);
      try { 
        regSMO0.examineExample(104);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 104
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      
      Enumeration enumeration0 = regSMO0.listOptions();
      assertNotNull(enumeration0);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = 42.66;
      doubleArray0[2] = 279.361571;
      doubleArray0[3] = 2.147483810187751E9;
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      
      regSMO0.m_b = 2.147483810187751E9;
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2.147483810187751E9;
      regSMO0.m_alphaStar = doubleArray1;
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      
      regSMO0.m_nEvals = (-15);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-15), regSMO0.getKernelEvaluations());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      
      regSMO0.m_error = doubleArray0;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-15), regSMO0.getKernelEvaluations());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      regSMO0.m_weights = doubleArray2;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-15), regSMO0.getKernelEvaluations());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      
      doubleArray2[1] = 1535.22828347;
      doubleArray2[2] = (double) (-15);
      doubleArray2[4] = (double) (-15);
      regSMO0.m_alpha = doubleArray2;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-15), regSMO0.getKernelEvaluations());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      
      int int0 = regSMO0.secondChoiceHeuristic(61);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-15), regSMO0.getKernelEvaluations());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), int0);
      
      Random.setNextRandom(104);
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      assertNotNull(nGramTokenizer0);
      assertEquals("The max N of the NGram.", nGramTokenizer0.NGramMaxSizeTipText());
      assertEquals(3, nGramTokenizer0.getNGramMaxSize());
      assertEquals("Splits a string into an n-gram with min and max grams.", nGramTokenizer0.globalInfo());
      assertEquals(1, nGramTokenizer0.getNGramMinSize());
      assertEquals(" \r\n\t.,;:'\"()?!", nGramTokenizer0.getDelimiters());
      assertEquals("The min N of the NGram.", nGramTokenizer0.NGramMinSizeTipText());
      assertFalse(nGramTokenizer0.hasMoreElements());
      assertEquals("Set of delimiter characters to use in tokenizing (\\r, \\n and \\t can be used for carriage-return, line-feed and tab)", nGramTokenizer0.delimitersTipText());
      
      try { 
        regSMO0.examineExample(2747);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      assertNotNull(precomputedKernelMatrixKernel0);
      assertEquals(0, precomputedKernelMatrixKernel0.numEvals());
      assertFalse(precomputedKernelMatrixKernel0.getDebug());
      assertEquals("Turns time-consuming checks off - use with caution.", precomputedKernelMatrixKernel0.checksTurnedOffTipText());
      assertEquals("This kernel is based on a static kernel matrix that is read from a file. Instances must have a single nominal attribute (excluding the class). This attribute must be the first attribute in the file and its values are used to reference rows/columns in the kernel matrix. The second attribute must be the class attribute.", precomputedKernelMatrixKernel0.globalInfo());
      assertEquals(0, precomputedKernelMatrixKernel0.numCacheHits());
      assertFalse(precomputedKernelMatrixKernel0.getChecksTurnedOff());
      assertEquals("The file holding the kernel matrix.", precomputedKernelMatrixKernel0.kernelMatrixFileTipText());
      assertEquals("Turns on the output of debugging information.", precomputedKernelMatrixKernel0.debugTipText());
      
      regSMO0.m_kernel = (Kernel) precomputedKernelMatrixKernel0;
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(0, precomputedKernelMatrixKernel0.numEvals());
      assertFalse(precomputedKernelMatrixKernel0.getDebug());
      assertEquals("Turns time-consuming checks off - use with caution.", precomputedKernelMatrixKernel0.checksTurnedOffTipText());
      assertEquals("This kernel is based on a static kernel matrix that is read from a file. Instances must have a single nominal attribute (excluding the class). This attribute must be the first attribute in the file and its values are used to reference rows/columns in the kernel matrix. The second attribute must be the class attribute.", precomputedKernelMatrixKernel0.globalInfo());
      assertEquals(0, precomputedKernelMatrixKernel0.numCacheHits());
      assertFalse(precomputedKernelMatrixKernel0.getChecksTurnedOff());
      assertEquals("The file holding the kernel matrix.", precomputedKernelMatrixKernel0.kernelMatrixFileTipText());
      assertEquals("Turns on the output of debugging information.", precomputedKernelMatrixKernel0.debugTipText());
      assertEquals("Turns on the output of debugging information.", regSMO0.m_kernel.debugTipText());
      assertFalse(regSMO0.m_kernel.getChecksTurnedOff());
      assertEquals("Turns time-consuming checks off - use with caution.", regSMO0.m_kernel.checksTurnedOffTipText());
      assertFalse(regSMO0.m_kernel.getDebug());
      
      doubleArray0[7] = 0.0;
      doubleArray0[1] = 0.0;
      regSMO0.m_alpha = doubleArray0;
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      String string0 = regSMO0.toString();
      assertNotNull(string0);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("SMOreg\n\nSupport vectors:\n +       0     \n\n\n\nNumber of kernel evaluations: 0", string0);
      
      StringKernel stringKernel0 = new StringKernel();
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertNotNull(stringKernel0);
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertEquals(0, stringKernel0.numEvals());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertFalse(stringKernel0.getDebug());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertFalse(stringKernel0.getUseNormalization());
      
      String string1 = stringKernel0.subsequenceLengthTipText();
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertNotNull(string1);
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertEquals(0, stringKernel0.numEvals());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertFalse(stringKernel0.getDebug());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals("The subsequence length.", string1);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(0, 1.0E-75, 1, (-1709.9649859405447), 1, 1.0E-75, 1.0E-75, 0.0, 202.0, 202.0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 5.0;
      doubleArray0[4] = (-1709.9649859405447);
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      assertNotNull(precomputedKernelMatrixKernel0);
      assertEquals(0, precomputedKernelMatrixKernel0.numCacheHits());
      assertEquals("This kernel is based on a static kernel matrix that is read from a file. Instances must have a single nominal attribute (excluding the class). This attribute must be the first attribute in the file and its values are used to reference rows/columns in the kernel matrix. The second attribute must be the class attribute.", precomputedKernelMatrixKernel0.globalInfo());
      assertEquals("The file holding the kernel matrix.", precomputedKernelMatrixKernel0.kernelMatrixFileTipText());
      assertFalse(precomputedKernelMatrixKernel0.getDebug());
      assertEquals("Turns time-consuming checks off - use with caution.", precomputedKernelMatrixKernel0.checksTurnedOffTipText());
      assertEquals(0, precomputedKernelMatrixKernel0.numEvals());
      assertFalse(precomputedKernelMatrixKernel0.getChecksTurnedOff());
      assertEquals("Turns on the output of debugging information.", precomputedKernelMatrixKernel0.debugTipText());
      
      regSMO0.m_kernel = (Kernel) precomputedKernelMatrixKernel0;
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0, precomputedKernelMatrixKernel0.numCacheHits());
      assertEquals("This kernel is based on a static kernel matrix that is read from a file. Instances must have a single nominal attribute (excluding the class). This attribute must be the first attribute in the file and its values are used to reference rows/columns in the kernel matrix. The second attribute must be the class attribute.", precomputedKernelMatrixKernel0.globalInfo());
      assertEquals("The file holding the kernel matrix.", precomputedKernelMatrixKernel0.kernelMatrixFileTipText());
      assertFalse(precomputedKernelMatrixKernel0.getDebug());
      assertEquals("Turns time-consuming checks off - use with caution.", precomputedKernelMatrixKernel0.checksTurnedOffTipText());
      assertEquals(0, precomputedKernelMatrixKernel0.numEvals());
      assertFalse(precomputedKernelMatrixKernel0.getChecksTurnedOff());
      assertEquals("Turns on the output of debugging information.", precomputedKernelMatrixKernel0.debugTipText());
      assertFalse(regSMO0.m_kernel.getDebug());
      assertEquals("Turns time-consuming checks off - use with caution.", regSMO0.m_kernel.checksTurnedOffTipText());
      assertFalse(regSMO0.m_kernel.getChecksTurnedOff());
      assertEquals("Turns on the output of debugging information.", regSMO0.m_kernel.debugTipText());
      
      doubleArray0[5] = 202.0;
      doubleArray0[7] = 6.5302;
      doubleArray0[1] = (-1709.9649859405447);
      regSMO0.m_alpha = doubleArray0;
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      
      StringKernel stringKernel0 = new StringKernel();
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertNotNull(stringKernel0);
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertFalse(stringKernel0.getDebug());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertEquals(0, stringKernel0.numEvals());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      
      String string0 = stringKernel0.subsequenceLengthTipText();
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertNotNull(string0);
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertFalse(stringKernel0.getDebug());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertEquals(0, stringKernel0.numEvals());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals("The subsequence length.", string0);
      
      String string1 = regSMO0.epsilonTipText();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", string1);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(0, (-251.65567885), 1, (-1709.9649859405447), 300, (-251.65567885), 0.12861076818834202, 6.5302, 202.0, 202.0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      regSMO0.m_b = (-538.375898);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)24;
      double[] doubleArray0 = new double[9];
      regSMO0.m_alpha = doubleArray0;
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      
      StringKernel stringKernel0 = new StringKernel();
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertNotNull(stringKernel0);
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertFalse(stringKernel0.getDebug());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(0, stringKernel0.numEvals());
      
      regSMO0.m_alphaStar = regSMO0.m_alpha;
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      
      regSMO0.setSeed((byte)24);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(24, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      
      StringKernel stringKernel1 = new StringKernel();
      assertFalse(stringKernel1.equals((Object)stringKernel0));
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertNotNull(stringKernel1);
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel1.checksTurnedOffTipText());
      assertEquals("Whether to use normalization.", stringKernel1.useNormalizationTipText());
      assertEquals("The size of the cache (a prime number).", stringKernel1.cacheSizeTipText());
      assertEquals(3, stringKernel1.getSubsequenceLength());
      assertEquals("Turns on the output of debugging information.", stringKernel1.debugTipText());
      assertFalse(stringKernel1.getChecksTurnedOff());
      assertEquals(0.5, stringKernel1.getLambda(), 0.01);
      assertEquals("The pruning method.", stringKernel1.pruningMethodTipText());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel1.maxSubsequenceLengthTipText());
      assertEquals(200003, stringKernel1.getInternalCacheSize());
      assertEquals((-1), stringKernel1.numCacheHits());
      assertEquals(250007, stringKernel1.getCacheSize());
      assertEquals(0, stringKernel1.numEvals());
      assertEquals("The subsequence length.", stringKernel1.subsequenceLengthTipText());
      assertEquals("The size of the internal cache (a prime number).", stringKernel1.internalCacheSizeTipText());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel1.lambdaTipText());
      assertFalse(stringKernel1.getDebug());
      assertEquals(9, stringKernel1.getMaxSubsequenceLength());
      assertFalse(stringKernel1.getUseNormalization());
      
      stringKernel1.setLambda((byte)24);
      assertNotSame(stringKernel1, stringKernel0);
      assertFalse(stringKernel1.equals((Object)stringKernel0));
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel1.checksTurnedOffTipText());
      assertEquals("Whether to use normalization.", stringKernel1.useNormalizationTipText());
      assertEquals("The size of the cache (a prime number).", stringKernel1.cacheSizeTipText());
      assertEquals(3, stringKernel1.getSubsequenceLength());
      assertEquals("Turns on the output of debugging information.", stringKernel1.debugTipText());
      assertFalse(stringKernel1.getChecksTurnedOff());
      assertEquals(24.0, stringKernel1.getLambda(), 0.01);
      assertEquals("The pruning method.", stringKernel1.pruningMethodTipText());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel1.maxSubsequenceLengthTipText());
      assertEquals(200003, stringKernel1.getInternalCacheSize());
      assertEquals((-1), stringKernel1.numCacheHits());
      assertEquals(250007, stringKernel1.getCacheSize());
      assertEquals(0, stringKernel1.numEvals());
      assertEquals("The subsequence length.", stringKernel1.subsequenceLengthTipText());
      assertEquals("The size of the internal cache (a prime number).", stringKernel1.internalCacheSizeTipText());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel1.lambdaTipText());
      assertFalse(stringKernel1.getDebug());
      assertEquals(9, stringKernel1.getMaxSubsequenceLength());
      assertFalse(stringKernel1.getUseNormalization());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(0, Double.NaN, 1, (byte)24, 0, (-2479.390795564), (byte)24, 0, 1.0002581244676183, 1.0, 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.999536822603057;
      doubleArray0[1] = 0.1;
      doubleArray0[2] = 0.1;
      doubleArray0[3] = 0.999536822603057;
      regSMO0.m_alpha = doubleArray0;
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      
      doubleArray0[4] = (-455.8662);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0E-22;
      doubleArray0[7] = (-1044.6794805);
      doubleArray0[1] = (-455.8662);
      regSMO0.m_target = doubleArray0;
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      
      double double0 = regSMO0.getEpsilon();
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, double0, 0.01);
      
      int int0 = regSMO0.secondChoiceHeuristic(500);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)24;
      regSMO0.m_b = (double) (byte)24;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)24;
      double[] doubleArray0 = new double[9];
      regSMO0.m_alpha = doubleArray0;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      Instances instances0 = regSMO0.m_data;
      assertNull(instances0);
      
      regSMO0.m_data = null;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      StringKernel stringKernel0 = new StringKernel();
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertNotNull(stringKernel0);
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertFalse(stringKernel0.getDebug());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals(0, stringKernel0.numEvals());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      
      char[] charArray0 = new char[0];
      double double0 = stringKernel0.normalizedKernel(charArray0, charArray0);
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertFalse(stringKernel0.getDebug());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals(0, stringKernel0.numEvals());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertEquals(Double.NaN, double0, 0.01);
      
      stringKernel0.m_Debug = false;
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertFalse(stringKernel0.getDebug());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals(0, stringKernel0.numEvals());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      
      regSMO0.setSeed((byte)24);
      assertEquals(24, regSMO0.getSeed());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      regSMO0.m_alphaStar = regSMO0.m_alpha;
      assertEquals(24, regSMO0.getSeed());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      int int0 = RegressionByDiscretization.ESTIMATOR_KERNEL;
      assertEquals(1, int0);
      
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertNotNull(capabilities0);
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertFalse(stringKernel0.getDebug());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals(0, stringKernel0.numEvals());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      
      stringKernel0.m_PruningMethod = (int) (byte) (-73);
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertFalse(stringKernel0.getDebug());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals(0, stringKernel0.numEvals());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      
      charArray1[5] = '\u0000';
      doubleArray0[2] = (double) (byte)24;
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1, 0.0, (byte)24, 1.0, 0, 0, (byte)24, '\u0000', 1.0, 24.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      
      regSMO0.m_nInstances = 77;
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      
      int int0 = 210;
      regSMO0.setSeed(210);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(210, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      
      try { 
        regSMO0.optimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      
      byte[] byteArray0 = new byte[4];
      double[] doubleArray0 = new double[1];
      regSMO0.m_target = doubleArray0;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      regSMO0.m_alpha = doubleArray1;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      
      SMO sMO0 = new SMO();
      assertEquals(2, SMO.FILTER_NONE);
      assertEquals(0, SMO.FILTER_NORMALIZE);
      assertEquals(1, SMO.FILTER_STANDARDIZE);
      assertNotNull(sMO0);
      assertEquals("Determines how/if the data will be transformed.", sMO0.filterTypeTipText());
      assertEquals(0.001, sMO0.getToleranceParameter(), 0.01);
      assertFalse(sMO0.getBuildLogisticModels());
      assertEquals("Whether to fit logistic models to the outputs (for proper probability estimates).", sMO0.buildLogisticModelsTipText());
      assertFalse(sMO0.getDebug());
      assertEquals("The number of folds for cross-validation used to generate training data for logistic models (-1 means use training data).", sMO0.numFoldsTipText());
      assertEquals(1.0, sMO0.getC(), 0.01);
      assertEquals(1, sMO0.getRandomSeed());
      assertEquals(1.0E-12, sMO0.getEpsilon(), 0.01);
      assertEquals("Random number seed for the cross-validation.", sMO0.randomSeedTipText());
      assertEquals("Turns time-consuming checks off - use with caution.", sMO0.checksTurnedOffTipText());
      assertEquals((-1), sMO0.getNumFolds());
      assertFalse(sMO0.getChecksTurnedOff());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", sMO0.epsilonTipText());
      assertEquals("The kernel to use.", sMO0.kernelTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", sMO0.debugTipText());
      assertEquals("The tolerance parameter (shouldn't be changed).", sMO0.toleranceParameterTipText());
      assertEquals("The complexity parameter C.", sMO0.cTipText());
      
      PolyKernel polyKernel0 = new PolyKernel();
      assertNotNull(polyKernel0);
      assertEquals("The exponent value.", polyKernel0.exponentTipText());
      assertEquals("The polynomial kernel : K(x, y) = <x, y>^p or K(x, y) = (<x, y>+1)^p", polyKernel0.globalInfo());
      assertEquals(1.0, polyKernel0.getExponent(), 0.01);
      assertEquals("Whether to use lower-order terms.", polyKernel0.useLowerOrderTipText());
      assertEquals(250007, polyKernel0.getCacheSize());
      assertEquals(0, polyKernel0.numEvals());
      assertEquals("Turns on the output of debugging information.", polyKernel0.debugTipText());
      assertFalse(polyKernel0.getChecksTurnedOff());
      assertFalse(polyKernel0.getUseLowerOrder());
      assertEquals("The size of the cache (a prime number), 0 for full cache and -1 to turn it off.", polyKernel0.cacheSizeTipText());
      assertFalse(polyKernel0.getDebug());
      assertEquals("Turns time-consuming checks off - use with caution.", polyKernel0.checksTurnedOffTipText());
      assertEquals(0, polyKernel0.numCacheHits());
      
      regSMO0.m_kernel = (Kernel) polyKernel0;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("The exponent value.", polyKernel0.exponentTipText());
      assertEquals("The polynomial kernel : K(x, y) = <x, y>^p or K(x, y) = (<x, y>+1)^p", polyKernel0.globalInfo());
      assertEquals(1.0, polyKernel0.getExponent(), 0.01);
      assertEquals("Whether to use lower-order terms.", polyKernel0.useLowerOrderTipText());
      assertEquals(250007, polyKernel0.getCacheSize());
      assertEquals(0, polyKernel0.numEvals());
      assertEquals("Turns on the output of debugging information.", polyKernel0.debugTipText());
      assertFalse(polyKernel0.getChecksTurnedOff());
      assertFalse(polyKernel0.getUseLowerOrder());
      assertEquals("The size of the cache (a prime number), 0 for full cache and -1 to turn it off.", polyKernel0.cacheSizeTipText());
      assertFalse(polyKernel0.getDebug());
      assertEquals("Turns time-consuming checks off - use with caution.", polyKernel0.checksTurnedOffTipText());
      assertEquals(0, polyKernel0.numCacheHits());
      assertEquals("Turns on the output of debugging information.", regSMO0.m_kernel.debugTipText());
      assertFalse(regSMO0.m_kernel.getChecksTurnedOff());
      assertEquals("Turns time-consuming checks off - use with caution.", regSMO0.m_kernel.checksTurnedOffTipText());
      assertFalse(regSMO0.m_kernel.getDebug());
      
      StringKernel stringKernel0 = new StringKernel();
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertNotNull(stringKernel0);
      assertFalse(stringKernel0.getDebug());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertEquals(0, stringKernel0.numEvals());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      
      regSMO0.m_alphaStar = regSMO0.m_alpha;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      
      regSMO0.optimize();
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertNotNull(capabilities0);
      assertFalse(stringKernel0.getDebug());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertEquals(0, stringKernel0.numEvals());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      doubleArray1[7] = (double) 0;
      String string0 = stringKernel0.getRevision();
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertNotNull(string0);
      assertFalse(stringKernel0.getDebug());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertEquals(0, stringKernel0.numEvals());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertEquals("8034", string0);
      
      stringKernel0.setCacheSize(3);
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertFalse(stringKernel0.getDebug());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals(3, stringKernel0.getCacheSize());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertEquals(0, stringKernel0.numEvals());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      
      boolean boolean1 = regSMO0.findOptimalPointOnLine(0, 0, 0.0, (-1.0E-6), (byte)0, 0, 0.0, (-1.0E-6), 1, 2146944622, (byte)0);
      assertFalse(boolean1 == boolean0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)24;
      byteArray0[7] = (byte)24;
      byteArray0[1] = (byte)24;
      byteArray0[3] = (byte)24;
      double[] doubleArray0 = new double[9];
      regSMO0.m_nCacheHits = (-3552);
      assertEquals((-3552), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte)0, (byte)24, (byte)0, (byte)0, (byte)0, (byte)24}, byteArray0);
      assertTrue(boolean0);
      
      regSMO0.setEpsilon((byte)24);
      assertEquals((-3552), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(24.0, regSMO0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      regSMO0.m_alpha = doubleArray0;
      assertEquals((-3552), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(24.0, regSMO0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      StringKernel stringKernel0 = new StringKernel();
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertNotNull(stringKernel0);
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertEquals(0, stringKernel0.numEvals());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertFalse(stringKernel0.getDebug());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      
      stringKernel0.m_ChecksTurnedOff = false;
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertEquals(0, stringKernel0.numEvals());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertFalse(stringKernel0.getDebug());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      
      double double0 = regSMO0.m_alpha2Star;
      assertEquals(0.0, double0, 0.01);
      
      regSMO0.m_alphaStar = regSMO0.m_alpha;
      assertEquals((-3552), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(24.0, regSMO0.getEpsilon(), 0.01);
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertNotNull(capabilities0);
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertEquals(0, stringKernel0.numEvals());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertFalse(stringKernel0.getDebug());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertFalse(stringKernel0.getUseNormalization());
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(0, 2.5812446761830365E-4, 0.0, (-1577.8138528619095), 0, (-236.0), 1, 2.0, 2.5812446761830365E-4, 1.0E-12, (-1037.400250673));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      byte[] byteArray0 = new byte[8];
      double[] doubleArray0 = new double[1];
      regSMO0.m_target = doubleArray0;
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      byteArray0[1] = (byte)0;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props");
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      regSMO0.m_alpha = doubleArray1;
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      boolean boolean1 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1);
      
      regSMO0.setEpsilon((byte)0);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0.0, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      StringKernel stringKernel0 = new StringKernel();
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertNotNull(stringKernel0);
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertEquals(0, stringKernel0.numEvals());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertFalse(stringKernel0.getDebug());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertFalse(stringKernel0.getUseNormalization());
      
      double double0 = regSMO0.m_alpha2Star;
      assertEquals(0.0, double0, 0.01);
      
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      assertEquals(1, StringKernel.PRUNING_LAMBDA);
      assertEquals(0, StringKernel.PRUNING_NONE);
      assertNotNull(capabilities0);
      assertEquals("The maximum subsequence length (theta in the paper)", stringKernel0.maxSubsequenceLengthTipText());
      assertEquals(9, stringKernel0.getMaxSubsequenceLength());
      assertEquals("The pruning method.", stringKernel0.pruningMethodTipText());
      assertEquals(200003, stringKernel0.getInternalCacheSize());
      assertEquals((-1), stringKernel0.numCacheHits());
      assertEquals(0.5, stringKernel0.getLambda(), 0.01);
      assertEquals("Turns time-consuming checks off - use with caution.", stringKernel0.checksTurnedOffTipText());
      assertEquals("Whether to use normalization.", stringKernel0.useNormalizationTipText());
      assertEquals("Turns on the output of debugging information.", stringKernel0.debugTipText());
      assertFalse(stringKernel0.getChecksTurnedOff());
      assertEquals("The size of the cache (a prime number).", stringKernel0.cacheSizeTipText());
      assertEquals(0, stringKernel0.numEvals());
      assertEquals("The size of the internal cache (a prime number).", stringKernel0.internalCacheSizeTipText());
      assertEquals(3, stringKernel0.getSubsequenceLength());
      assertEquals("The subsequence length.", stringKernel0.subsequenceLengthTipText());
      assertEquals(250007, stringKernel0.getCacheSize());
      assertFalse(stringKernel0.getDebug());
      assertEquals("Penalizes non-continuous subsequence matches, from (0,1)", stringKernel0.lambdaTipText());
      assertFalse(stringKernel0.getUseNormalization());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(2060, 1649.7, 2060, 2.0E-10, 0, (byte)0, 0.0, 1.7976931348623157E308, (-2302.0), 2.0E-10, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2060
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }
}
