/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 07:52:22 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.FilterInputStream;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSource;
import okio.ByteString;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, 1572, (-1734));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)106;
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)10;
      byte byte1 = (byte)0;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 0, (int) (byte)10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=0 byteCount=10
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      // Undeclared exception!
      try { 
        byteString0.getByte(68);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.indexOf(byteArray0);
      byte[] byteArray1 = byteString0.toByteArray();
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      ByteString byteString1 = ByteString.decodeBase64("g$!_GGmGVxM*-");
      assertNull(byteString1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      ByteString byteString1 = ByteString.decodeBase64("[text=d]");
      assertNull(byteString1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("\r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: \r
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)6;
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.EMPTY.endsWith(byteArray0);
      assertFalse(boolean0);
      
      String string0 = byteString0.utf8;
      int int0 = byteString0.indexOf(byteArray0, (int) (byte)6);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString1 = hashingSource0.hash();
      byteString0.endsWith(byteString1);
      String string0 = byteString0.base64Url();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.endsWith(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("pol8vy%S>%VcAw");
      byteString0.equals("pol8vy%S>%VcAw");
      ByteString byteString1 = byteString0.md5();
      byteString0.base64Url();
      byteString1.base64Url();
      byteString0.lastIndexOf(byteString1);
      byte[] byteArray0 = byteString1.toByteArray();
      ByteString byteString2 = ByteString.encodeUtf8("/Zfp}'>]cr");
      ByteBuffer byteBuffer0 = byteString1.asByteBuffer();
      byteString1.indexOf(byteString0);
      ByteString byteString3 = ByteString.of(byteBuffer0);
      ByteString byteString4 = byteString0.hmacSha512(byteString2);
      byteString4.EMPTY.sha256();
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("ijxlb0Bu0Tu1PON4pY4sMQ==", charset0);
      byteString4.EMPTY.lastIndexOf(byteArray0);
      byteString2.size();
      byte[] byteArray1 = new byte[0];
      byteString1.startsWith(byteArray1);
      byteString2.lastIndexOf(byteString3, (-1));
      String string0 = byteString4.base64();
      assertEquals("RSp94KdaNn4RU4huL0CWCDsX2rIBAgGFWxKY9AxT5UJSZv5kLpSBzOZQuu4vWQRrwrXdEAnDCqQ9h4ETtJJOpQ==", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeString("bytes is empty", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
      
      int int0 = byteString0.indexOf(byteArray0, (-267));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("l,5_LgSG]wAlAN#%Q");
      ByteString byteString0 = ByteString.of(byteBuffer0);
      ByteString byteString1 = ByteString.encodeUtf8("l,5_LgSG]wAlAN#%Q");
      byteString0.equals(byteBuffer0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      byteString1.string(charset0);
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream(enumeration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0, 279);
      byteString0.endsWith(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.getByte(98);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteString[] byteStringArray0 = new ByteString[2];
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteStringArray0[0] = byteString0;
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      byteString0.base64();
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      HashingSource hashingSource0 = HashingSource.sha256(gzipSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      boolean boolean0 = realBufferedSource0.closed;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource1.buffer;
      HashingSource.sha1(gzipSource0);
      ByteString byteString1 = hashingSource0.hash();
      ByteString byteString2 = ByteString.decodeHex("");
      boolean boolean1 = byteString0.endsWith(byteString0);
      assertTrue(boolean1);
      
      byteString1.base64Url();
      byteString0.toAsciiLowercase();
      assertTrue(byteString0.equals((Object)byteString2));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("l,5_LgSG]wAlAN#%Q");
      ByteString byteString0 = ByteString.of(byteBuffer0);
      byteString0.EMPTY.toAsciiLowercase();
      boolean boolean0 = byteString0.equals(byteBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("socket == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: s
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("/Zfp}'>]cr");
      byteString0.rangeEquals(56, (byte[]) null, 56, 56);
      byteString0.EMPTY.rangeEquals(56, (byte[]) null, 3026, 1235);
      Charset.defaultCharset();
      byteString0.size();
      byte[] byteArray0 = new byte[0];
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("Fjnpn!_q..I:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: j
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-26);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.decodeBase64("");
      ByteString byteString2 = ByteString.encodeUtf8("");
      byteString1.md5();
      byteString2.toString();
      PipedInputStream pipedInputStream0 = new PipedInputStream(4250);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append(';');
      byteString2.write(printStream0);
      assertSame(mockPrintStream0, printStream0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)38;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte)68);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      // Undeclared exception!
      try { 
        byteString0.substring(4, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(1)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("l,5_LgSG]wAlAN#%Q");
      ByteString byteString0 = ByteString.of(byteBuffer0);
      byteString0.equals(byteBuffer0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring(1764);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("pol8vy%S>%VcAw");
      byteString0.equals("pol8vy%S>%VcAw");
      ByteString byteString1 = byteString0.md5();
      byteString0.base64Url();
      byteString1.base64Url();
      int int0 = byteString0.lastIndexOf(byteString1);
      byte[] byteArray0 = byteString1.toByteArray();
      ByteString byteString2 = ByteString.encodeUtf8("/Zfp}'>]cr");
      ByteBuffer byteBuffer0 = byteString1.asByteBuffer();
      int int1 = byteString1.indexOf(byteString0);
      assertTrue(int1 == int0);
      
      ByteString byteString3 = ByteString.of(byteBuffer0);
      ByteString byteString4 = byteString0.hmacSha512(byteString2);
      byteString4.EMPTY.sha256();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString5 = ByteString.encodeString("ijxlb0Bu0Tu1PON4pY4sMQ==", charset0);
      byteString4.EMPTY.lastIndexOf(byteArray0);
      byteString2.size();
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = byteString1.startsWith(byteArray1);
      assertTrue(boolean0);
      
      byteString2.lastIndexOf(byteString3, (-1));
      assertTrue(byteString3.equals((Object)byteString1));
      
      ByteString byteString6 = byteString5.toAsciiLowercase();
      assertFalse(byteString6.equals((Object)byteString5));
      assertNotSame(byteString5, byteString6);
      
      int int2 = ByteString.codePointIndexToCharIndex("oYL@A", 101);
      assertEquals(5, int2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte) (-113);
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte)60;
      byteArray0[8] = (byte)55;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertArrayEquals(new byte[] {(byte) (-31), (byte)62, (byte) (-125), (byte)71, (byte)55, (byte) (-59), (byte)22, (byte)60, (byte)55}, byteArray0);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = byteString0.substring(0);
      ByteString byteString2 = byteString0.toAsciiLowercase();
      assertSame(byteString0, byteString1);
      assertNotSame(byteString2, byteString1);
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0, 1);
      assertEquals(0, int0);
      
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Buffer buffer0 = new Buffer();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("&C");
      byteString0.EMPTY.md5();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("&C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: &
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        ByteString.read(sequenceInputStream0, 32);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-26);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString.decodeBase64("");
      ByteString byteString1 = ByteString.encodeUtf8("g$!_GGmGVxM*-");
      ByteString byteString2 = byteString1.EMPTY.md5();
      byteString0.toString();
      ByteString byteString3 = byteString2.hmacSha512(byteString1);
      int int0 = byteString1.indexOf(byteString3, 121);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.sha512(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSource0);
      ByteString byteString1 = hashingSource0.hash();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = ByteString.codePointIndexToCharIndex("=p]sY5#ij9~", 297);
      assertEquals(11, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)104;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      int int1 = byteString0.compareTo(byteString1);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 100;
      ByteString.codePointIndexToCharIndex("|fA6^wh]J5Ln_6NVlo", 100);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      ByteString byteString0 = new ByteString(byteArray0);
      int int1 = 1;
      byteString0.lastIndexOf(byteArray0, 1);
      byteString0.indexOf(byteArray0);
      int int2 = (-3415);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer0 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("l,5_LgSG]wAlAN#%Q");
      ByteString byteString0 = ByteString.encodeString("l,5_LgSG]wAlAN#%Q", charset0);
      byteString0.EMPTY.hashCode = 1215;
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString1 = hashingSource0.hash();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)72;
      byteString0.EMPTY.base64();
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte) (-32);
      byteString1.endsWith(byteArray0);
      byteString1.hashCode = 1215;
      byteString0.lastIndexOf(byteString1, 1215);
      byteString1.hmacSha512(byteString0);
      ByteString byteString2 = byteString0.md5();
      assertNotSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)99;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.sha1();
      byteString0.hashCode();
      // Undeclared exception!
      try { 
        byteString0.compareTo((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteString byteString0 = ByteString.decodeBase64("Nl");
      ByteString byteString1 = ByteString.encodeUtf8("g$!_GGmGVxM*-");
      byteString0.md5();
      String string0 = byteString1.toString();
      assertEquals("[hex=6e2426664ee64e664e66e8462a26]", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)18;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode();
      ByteString byteString1 = byteString0.sha512();
      assertEquals(64, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.equals(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = hashingSource0.hash();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 110);
      byteString1.equals(pushbackInputStream0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      ByteString byteString2 = realBufferedSource0.readByteString();
      byteString2.endsWith(byteString1);
      ByteString byteString3 = byteString1.toAsciiUppercase();
      byteString0.sha256();
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString3));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.equals((Object) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteString0.internalArray();
      byteString0.compareTo(byteString1);
      // Undeclared exception!
      try { 
        byteString0.substring(97, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = ByteString.codePointIndexToCharIndex("\n not found: limit=", 351);
      assertEquals(19, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte) (-102);
      byteArray0[7] = (byte) (-79);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteString1);
      byteString1.EMPTY.toAsciiUppercase();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      int int1 = byteString0.lastIndexOf(byteString1, 1594);
      assertEquals(0, int1);
      
      ByteString byteString2 = byteString1.md5();
      int int2 = byteString2.EMPTY.lastIndexOf(byteString0, (-625));
      assertEquals((-1), int2);
      
      Charset charset0 = Charset.defaultCharset();
      byteString1.string(charset0);
      byteString1.rangeEquals((-38), byteArray0, (-1), (int) (byte)111);
      assertTrue(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = hashingSource0.hash();
      boolean boolean0 = byteString0.equals(byteString1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0, 1);
      byteString0.indexOf(byteArray0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ByteString.read(dataInputStream0, 1);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      boolean boolean0 = byteString1.equals(buffer0);
      assertFalse(boolean0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.readByteString();
      ByteString byteString2 = byteString1.substring(3, 4);
      boolean boolean1 = byteString2.endsWith(byteString1);
      assertEquals(1, byteString2.size());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)50;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      byteString1.write(buffer1);
      byteString1.toString();
      ByteString.decodeBase64("#");
      // Undeclared exception!
      try { 
        byteString0.hmacSha1((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.EMPTY.hmacSha256(byteString0);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.equals(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      ByteBuffer byteBuffer0 = byteString1.asByteBuffer();
      ByteString byteString2 = ByteString.of(byteBuffer0);
      boolean boolean0 = byteString1.equals(byteString0);
      assertFalse(boolean0);
      assertTrue(byteString1.equals((Object)byteString2));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      boolean boolean0 = byteString0.equals(hashingSource0);
      ByteString byteString1 = hashingSource0.hash();
      ByteBuffer byteBuffer0 = byteString1.asByteBuffer();
      ByteString.of(byteBuffer0);
      boolean boolean1 = byteString0.endsWith(byteString1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)116;
      int int0 = byteString0.lastIndexOf(byteArray0, (int) (byte)51);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      int int0 = byteString1.compareTo(byteString0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-3);
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString1.compareTo(byteString0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.EMPTY.startsWith(byteString1);
      assertFalse(boolean0);
      
      ByteString byteString2 = new ByteString(byteArray0);
      byteString2.asByteBuffer();
      ByteString byteString3 = byteString2.toAsciiUppercase();
      assertTrue(byteString3.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      String string0 = byteString0.toString();
      assertEquals("[hex=6ee6ee66e666e666eeee66666e66ee66e66e6666]", string0);
      
      byteString0.asByteBuffer();
      HashingSink hashingSink0 = HashingSink.hmacSha1(buffer0, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      ByteString byteString2 = byteString1.toAsciiUppercase();
      assertNotSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      HashingSource hashingSource1 = HashingSource.hmacSha1(buffer0, byteString0);
      ByteString byteString1 = hashingSource1.hash();
      boolean boolean0 = byteString0.equals(byteString1);
      assertFalse(boolean0);
      
      byteString1.toByteArray();
      assertFalse(byteString0.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte)99;
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byteString0.toString();
      // Undeclared exception!
      try { 
        byteString0.substring((-2699));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = byteString0.substring(0);
      String string0 = byteString0.toString();
      assertEquals("[hex=e6ee6eee66666e666eeeeee66666e66666e66e6e66e6ee6eee6ee6ee6e6e66e6e6666eeee6ee6e6666eeee6ee6666ee66e66ee66e6ee6eeeeeeeee6e66e66ee6]", string0);
      
      byteString0.substring(0, 0);
      assertSame(byteString0, byteString1);
  }
}
