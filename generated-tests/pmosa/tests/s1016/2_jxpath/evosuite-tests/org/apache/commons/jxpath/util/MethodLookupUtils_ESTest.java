/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 08:26:53 GMT 2018
 */

package org.apache.commons.jxpath.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import org.apache.commons.jxpath.util.MethodLookupUtils;
import org.apache.commons.jxpath.util.TypeConverter;
import org.apache.commons.jxpath.util.TypeUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MethodLookupUtils_ESTest extends MethodLookupUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Method method0 = MethodLookupUtils.lookupMethod(class0, "trim", objectArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "G*t\"P/pXD;Q#a[mQc";
      objectArray0[1] = (Object) "G*t\"P/pXD;Q#a[mQc";
      objectArray0[2] = (Object) "G*t\"P/pXD;Q#a[mQc";
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) "G*t\"P/pXD;Q#a[mQc";
      objectArray0[5] = (Object) "G*t\"P/pXD;Q#a[mQc";
      objectArray0[6] = (Object) "G*t\"P/pXD;Q#a[mQc";
      MethodLookupUtils.lookupStaticMethod(class0, "G*t\"P/pXD;Q#a[mQc", objectArray0);
      Class<Object> class1 = Object.class;
      MethodLookupUtils.lookupConstructor(class1, objectArray0);
      MethodLookupUtils.lookupMethod(class0, "duw;{fy[#n7S", objectArray0);
      Class<Object> class2 = Object.class;
      MethodLookupUtils.lookupConstructor(class2, objectArray0);
      MethodLookupUtils.lookupConstructor(class2, objectArray0);
      MethodLookupUtils.lookupStaticMethod(class1, "o<^g.t{,1", objectArray0);
      Class<String> class3 = String.class;
      MethodLookupUtils.lookupConstructor(class3, objectArray0);
      Class<Object> class4 = Object.class;
      Constructor constructor0 = MethodLookupUtils.lookupConstructor(class4, objectArray0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class0;
      Method method0 = MethodLookupUtils.lookupMethod(class0, "hashCode", objectArray0);
      assertFalse(method0.isBridge());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[1];
      MethodLookupUtils.lookupMethod(class0, (String) null, objectArray0);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "lastIndexOf";
      Method method0 = MethodLookupUtils.lookupMethod(class0, "lastIndexOf", objectArray0);
      assertFalse(method0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) methodLookupUtils0;
      MethodLookupUtils.lookupConstructor(class0, objectArray0);
      Class<String> class1 = String.class;
      Object[] objectArray1 = null;
      MethodLookupUtils.lookupStaticMethod(class1, "", (Object[]) null);
      Class<Object> class2 = Object.class;
      MethodLookupUtils.lookupConstructor(class2, (Object[]) null);
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupStaticMethod(class0, (String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[0];
      MethodLookupUtils.lookupMethod(class0, "", objectArray0);
      MethodLookupUtils.lookupStaticMethod(class0, "", (Object[]) null);
      Constructor constructor0 = MethodLookupUtils.lookupConstructor(class0, objectArray0);
      Class<Object> class1 = Object.class;
      MethodLookupUtils.lookupMethod(class1, "=", (Object[]) null);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) null;
      objectArray1[1] = (Object) null;
      objectArray1[2] = (Object) "";
      objectArray1[3] = (Object) null;
      objectArray1[4] = (Object) class1;
      objectArray1[5] = (Object) constructor0;
      objectArray1[6] = (Object) null;
      objectArray1[7] = (Object) "=";
      objectArray1[8] = (Object) "=";
      MethodLookupUtils.lookupMethod(class1, "", objectArray1);
      Class<Object> class2 = Object.class;
      Object[] objectArray2 = new Object[6];
      objectArray2[0] = (Object) "=";
      objectArray2[1] = (Object) null;
      objectArray2[2] = (Object) null;
      objectArray2[3] = (Object) class1;
      objectArray2[4] = (Object) constructor0;
      objectArray2[5] = (Object) null;
      Method method0 = MethodLookupUtils.lookupStaticMethod(class2, "qAt.E!ZTY#~=la5N", objectArray2);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) class0;
      objectArray0[5] = (Object) class0;
      MethodLookupUtils.lookupConstructor(class0, objectArray0);
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) null;
      objectArray1[1] = (Object) "";
      objectArray1[2] = (Object) "";
      objectArray1[3] = (Object) class0;
      objectArray1[4] = (Object) null;
      MethodLookupUtils.lookupMethod(class0, "", objectArray1);
      MethodLookupUtils.lookupMethod(class0, "org.apache.commons.jxpath.ExpressionContext", objectArray0);
      Class<String> class1 = String.class;
      MethodLookupUtils.lookupMethod(class1, "4W>V}M]", objectArray0);
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class1, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = "";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class0;
      MethodLookupUtils.lookupStaticMethod(class0, "", objectArray0);
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupConstructor(class0, objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/logging/LogFactory
         //
         verifyException("org.apache.commons.beanutils.ConvertUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) methodLookupUtils0;
      objectArray0[1] = (Object) "Ii[;7=e{R!z9+W's";
      objectArray0[2] = (Object) "Ii[;7=e{R!z9+W's";
      objectArray0[3] = (Object) "Ii[;7=e{R!z9+W's";
      objectArray0[4] = (Object) methodLookupUtils0;
      objectArray0[5] = (Object) "Ii[;7=e{R!z9+W's";
      Class<String> class1 = String.class;
      MethodLookupUtils.lookupConstructor(class1, objectArray0);
      objectArray0[6] = (Object) methodLookupUtils0;
      MethodLookupUtils.lookupMethod(class0, "Ii[;7=e{R!z9+W's", objectArray0);
      TypeConverter typeConverter0 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      TypeUtils.setTypeConverter(typeConverter0);
      Class<Object> class2 = Object.class;
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) class2;
      MethodLookupUtils.lookupConstructor(class2, objectArray1);
      MethodLookupUtils.lookupConstructor(class2, (Object[]) null);
      Class<Object> class3 = Object.class;
      MethodLookupUtils.lookupConstructor(class3, objectArray0);
      Class<Object> class4 = Object.class;
      Constructor constructor0 = MethodLookupUtils.lookupConstructor(class4, objectArray1);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = "getSimpleame";
      Class<String> class0 = String.class;
      MethodLookupUtils.lookupMethod(class0, "getSimpleame", objectArray0);
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupConstructor(class1, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Ambigous constructor [null]
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) methodLookupUtils0;
      MethodLookupUtils.lookupStaticMethod(class0, "", objectArray0);
      MethodLookupUtils.lookupMethod(class0, "", objectArray0);
      TypeConverter typeConverter0 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(typeConverter0).canConvert(any() , any(java.lang.Class.class));
      TypeUtils.setTypeConverter(typeConverter0);
      MethodLookupUtils.lookupStaticMethod(class0, "y*>Q:h!=$lz<9C3", objectArray0);
      MethodLookupUtils.lookupConstructor(class0, objectArray0);
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) typeConverter0;
      objectArray1[1] = (Object) null;
      Object object0 = new Object();
      objectArray1[2] = object0;
      objectArray1[3] = (Object) "";
      objectArray1[4] = (Object) typeConverter0;
      objectArray1[5] = (Object) "y*>Q:h!=$lz<9C3";
      MethodLookupUtils.lookupMethod(class0, "y*>Q:h!=$lz<9C3", objectArray1);
      MethodLookupUtils.lookupMethod(class0, "y*>Q:h!=$lz<9C3", objectArray1);
      Method method0 = MethodLookupUtils.lookupMethod(class0, "java.lang.Character", objectArray1);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[0];
      MethodLookupUtils.lookupMethod(class0, "f5I5K=Ud*7n@?0:ExF", objectArray0);
      Class<String> class1 = String.class;
      MethodLookupUtils.lookupConstructor(class1, objectArray0);
      Class<Object> class2 = Object.class;
      MethodLookupUtils.lookupMethod(class2, "!X", objectArray0);
      MethodLookupUtils.lookupMethod(class2, "i", objectArray0);
      MethodLookupUtils.lookupStaticMethod(class0, "f5I5K=Ud*7n@?0:ExF", objectArray0);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      MethodLookupUtils.lookupStaticMethod(class0, "f5I5K=Ud*7n@?0:ExF", objectArray0);
      MethodLookupUtils.lookupStaticMethod(class1, "f5I5K=Ud*7n@?0:ExF", objectArray0);
      Class<Object> class3 = Object.class;
      MethodLookupUtils.lookupStaticMethod(class3, "f5I5K=Ud*7n@?0:ExF", objectArray0);
      Class<Integer> class4 = Integer.class;
      MethodLookupUtils.lookupMethod(class4, "|b", objectArray0);
      MethodLookupUtils.lookupConstructor(class0, objectArray0);
      Class<Integer> class5 = Integer.class;
      MethodLookupUtils.lookupMethod(class5, "|^", objectArray0);
      Class<String> class6 = String.class;
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) class3;
      objectArray1[1] = (Object) null;
      objectArray1[2] = (Object) null;
      Object object0 = new Object();
      objectArray1[3] = object0;
      objectArray1[4] = (Object) null;
      objectArray1[5] = (Object) class2;
      objectArray1[6] = (Object) "f5I5K=Ud*7n@?0:ExF";
      Object object1 = new Object();
      objectArray1[7] = object1;
      objectArray1[8] = (Object) class0;
      Method method0 = MethodLookupUtils.lookupMethod(class6, "", objectArray1);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "QqiAk?@";
      objectArray0[1] = (Object) class0;
      MethodLookupUtils.lookupStaticMethod(class0, "QqiAk?@", objectArray0);
      MethodLookupUtils.lookupStaticMethod(class0, "[E]Hx/Gh|ZWt", objectArray0);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<Object> class1 = Object.class;
      MethodLookupUtils.lookupConstructor(class1, objectArray0);
      TypeConverter typeConverter0 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false, false).when(typeConverter0).canConvert(any() , any(java.lang.Class.class));
      doReturn((Method) null).when(typeConverter0).convert(any() , any(java.lang.Class.class));
      TypeUtils.setTypeConverter(typeConverter0);
      MethodLookupUtils.lookupStaticMethod(class0, "QqiAk?@", objectArray0);
      Class<String> class2 = String.class;
      MethodLookupUtils.lookupConstructor(class2, objectArray0);
      MethodLookupUtils.lookupStaticMethod(class0, "org.apache.commons.jxpath.util.MethodLookupUtils", objectArray0);
      String string0 = "java.util.List";
      MethodLookupUtils.lookupStaticMethod(class0, "java.util.List", objectArray0);
      Class<Object> class3 = Object.class;
      MethodLookupUtils.lookupStaticMethod(class3, "QqiAk?@", objectArray0);
      MethodLookupUtils.lookupConstructor(class1, objectArray0);
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class1, "java.util.List", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "QqiAk?@";
      objectArray0[1] = (Object) class0;
      MethodLookupUtils.lookupStaticMethod(class0, "QqiAk?@", objectArray0);
      Class<Object> class1 = Object.class;
      MethodLookupUtils.lookupConstructor(class1, objectArray0);
      TypeConverter typeConverter0 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true, true, false).when(typeConverter0).canConvert(any() , any(java.lang.Class.class));
      doReturn("[E]Hx/Gh|ZWt").when(typeConverter0).convert(any() , any(java.lang.Class.class));
      TypeUtils.setTypeConverter(typeConverter0);
      MethodLookupUtils.lookupStaticMethod(class0, "QqiAk?@", objectArray0);
      Class<String> class2 = String.class;
      MethodLookupUtils.lookupConstructor(class2, objectArray0);
      Class<Object> class3 = Object.class;
      MethodLookupUtils.lookupConstructor(class3, objectArray0);
      Class<Integer> class4 = Integer.class;
      MethodLookupUtils.lookupMethod(class4, (String) null, objectArray0);
      Class<Object> class5 = Object.class;
      String string0 = "";
      MethodLookupUtils.lookupMethod(class5, string0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Method method0 = MethodLookupUtils.lookupMethod(class0, "hashCode", objectArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) "getDeclaredField";
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) "getDeclaredField";
      objectArray0[4] = (Object) "getDeclaredField";
      objectArray0[5] = (Object) "getDeclaredField";
      objectArray0[6] = (Object) "getDeclaredField";
      MethodLookupUtils.lookupStaticMethod(class0, "getDeclaredField", objectArray0);
      Class<Integer> class1 = Integer.class;
      MethodLookupUtils.lookupConstructor(class1, objectArray0);
      Class<Object> class2 = Object.class;
      MethodLookupUtils.lookupMethod(class2, "getDeclaredField", objectArray0);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      TypeUtils.setTypeConverter((TypeConverter) null);
      Class<Object> class3 = Object.class;
      MethodLookupUtils.lookupConstructor(class3, objectArray0);
      Class<String> class4 = String.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class4, "B", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "QqiAk?@";
      objectArray0[1] = (Object) class0;
      MethodLookupUtils.lookupStaticMethod(class0, "QqiAk?@", objectArray0);
      MethodLookupUtils.lookupStaticMethod(class0, "[E]Hx/Gh|ZWt", objectArray0);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      TypeConverter typeConverter0 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      TypeUtils.setTypeConverter(typeConverter0);
      TypeConverter typeConverter1 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      TypeUtils.setTypeConverter(typeConverter1);
      Class<Object> class1 = Object.class;
      MethodLookupUtils.lookupConstructor(class1, objectArray0);
      Object object0 = new Object();
      TypeConverter typeConverter2 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(typeConverter2).canConvert(any() , any(java.lang.Class.class));
      doReturn((Object) null).when(typeConverter2).convert(any() , any(java.lang.Class.class));
      TypeUtils.setTypeConverter(typeConverter2);
      Class<String> class2 = String.class;
      MethodLookupUtils.lookupConstructor(class2, objectArray0);
      Class<Integer> class3 = Integer.class;
      String string0 = null;
      MethodLookupUtils.lookupMethod(class3, string0, objectArray0);
      Class<Object> class4 = Object.class;
      String string1 = "";
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class4, string1, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      MethodLookupUtils.lookupConstructor(class0, (Object[]) null);
      MethodLookupUtils.lookupConstructor(class0, (Object[]) null);
      Class<Object> class1 = Object.class;
      MethodLookupUtils.lookupConstructor(class1, (Object[]) null);
      Class<Integer> class2 = Integer.class;
      MethodLookupUtils.lookupMethod(class2, "q4", (Object[]) null);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      MethodLookupUtils.lookupConstructor(class1, (Object[]) null);
      MethodLookupUtils.lookupStaticMethod(class0, "toHexString", (Object[]) null);
      TypeConverter typeConverter0 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      TypeUtils.setTypeConverter(typeConverter0);
      MethodLookupUtils.lookupStaticMethod(class1, "notify", (Object[]) null);
      Class<Integer> class3 = Integer.class;
      MethodLookupUtils.lookupConstructor(class3, (Object[]) null);
      MethodLookupUtils.lookupMethod(class2, "decode", (Object[]) null);
      Class<Object> class4 = Object.class;
      MethodLookupUtils.lookupMethod(class4, "q4", (Object[]) null);
      Class<String> class5 = String.class;
      MethodLookupUtils.lookupMethod(class5, "decode", (Object[]) null);
      MethodLookupUtils.lookupMethod(class1, "decode", (Object[]) null);
      MethodLookupUtils.lookupStaticMethod(class0, "decode", (Object[]) null);
      Class<Integer> class6 = Integer.class;
      MethodLookupUtils.lookupConstructor(class6, (Object[]) null);
      MethodLookupUtils.lookupConstructor(class2, (Object[]) null);
      Class<Integer> class7 = Integer.class;
      MethodLookupUtils.lookupMethod(class7, "notify", (Object[]) null);
      MethodLookupUtils.lookupStaticMethod(class3, "decode", (Object[]) null);
      Method method0 = MethodLookupUtils.lookupStaticMethod(class5, "8qB'6vL!ZYByqHgE5^H", (Object[]) null);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Class<Integer> class0 = Integer.class;
      MethodLookupUtils.lookupStaticMethod(class0, "hashCode", objectArray0);
      Class<String> class1 = String.class;
      Object object0 = new Object();
      Object object1 = new Object();
      Method method0 = MethodLookupUtils.lookupMethod(class1, "hashCode", objectArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) class0;
      Method method0 = MethodLookupUtils.lookupMethod(class0, "charAt", objectArray0);
      assertEquals(1, method0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<String> class0 = String.class;
      MethodLookupUtils.lookupStaticMethod(class0, "hashSCode", (Object[]) null);
      Class<String> class1 = String.class;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      MethodLookupUtils.lookupMethod(class1, "hashSCode", objectArray0);
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class0, "lastIndexOf", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Ambigous method call: lastIndexOf
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) class0;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class0, "contentEquals", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Ambigous method call: contentEquals
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Class<String> class0 = String.class;
      MethodLookupUtils.lookupStaticMethod(class0, "TSyr+[8VEKqw?:rNClb", objectArray0);
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) null;
      objectArray1[1] = objectArray1[0];
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupStaticMethod(class1, "join", objectArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Ambigous method call: join
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupStaticMethod(class0, "valueOf", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Ambigous method call: valueOf
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }
}
