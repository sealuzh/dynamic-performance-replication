/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 08:55:29 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PrintStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import okio.Buffer;
import okio.ByteString;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.SegmentedByteString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SegmentedByteString_ESTest extends SegmentedByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Pipe pipe0 = new Pipe(1525L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf(byteArray0, (int) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Pipe pipe0 = new Pipe(1525L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      Object object0 = new Object();
      segmentedByteString0.equals(object0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)2;
      // Undeclared exception!
      try { 
        segmentedByteString0.indexOf(byteArray0, 3426);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString1.hmacSha1(segmentedByteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Pipe pipe0 = new Pipe(1525L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      Object object0 = new Object();
      segmentedByteString0.equals(object0);
      segmentedByteString0.hashCode();
      // Undeclared exception!
      try { 
        segmentedByteString0.toAsciiLowercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Pipe pipe0 = new Pipe(1525L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 0);
      segmentedByteString1.rangeEquals((-3817), (byte[]) null, 593, 0);
      SegmentedByteString segmentedByteString2 = null;
      try {
        segmentedByteString2 = new SegmentedByteString(buffer0, (-16777216));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-16777216
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Pipe pipe0 = new Pipe(1525L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      Object object0 = new Object();
      segmentedByteString0.equals(object0);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring((-1381), (-1381));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Pipe pipe0 = new Pipe(1525L);
      Pipe pipe1 = new Pipe(1525L);
      Pipe.PipeSink pipe_PipeSink0 = pipe1.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 0);
      Object object0 = new Object();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString1.substring(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Pipe pipe0 = new Pipe(1525L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.base64();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Pipe pipe0 = new Pipe(1525L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.internalArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Pipe pipe0 = new Pipe(2818L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        segmentedByteString0.string(charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      MockFile mockFile0 = new MockFile("vT[e");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) dataOutputStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintStream printStream0 = mockPrintStream0.format("jV9=mT|@jswO$'r", objectArray0);
      segmentedByteString0.write(printStream0);
      segmentedByteString0.write(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("3R'/{oeWPU%v");
      segmentedByteString0.write(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toAsciiLowercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Pipe pipe0 = new Pipe(1525L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 0);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(realBufferedSink0.buffer, 0);
      // Undeclared exception!
      try { 
        segmentedByteString1.sha1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      ByteString byteString0 = ByteString.decodeBase64("");
      segmentedByteString0.rangeEquals((-1436), byteString0, 0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toAsciiLowercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(18);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      boolean boolean0 = segmentedByteString0.rangeEquals(18, (ByteString) segmentedByteString0, 1, 1);
      assertFalse(boolean0);
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      buffer0.writeDecimalLong(85L);
      Object object0 = new Object();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 1);
      segmentedByteString1.hashCode();
      assertEquals(1, segmentedByteString1.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0);
      Object object0 = new Object();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = (ByteString) segmentedByteString0;
      byteStringArray0[1] = (ByteString) segmentedByteString0;
      byteStringArray0[2] = (ByteString) segmentedByteString0;
      Options.of(byteStringArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      segmentedByteString0.startsWith(byteArray0);
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte(1006);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=1006 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0);
      Object object0 = new Object();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = (ByteString) segmentedByteString0;
      byteStringArray0[1] = (ByteString) segmentedByteString0;
      byteStringArray0[2] = (ByteString) segmentedByteString0;
      Options.of(byteStringArray0);
      segmentedByteString0.toAsciiLowercase();
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0);
      Object object0 = new Object();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[1] = (ByteString) segmentedByteString0;
      Options options0 = Options.of(byteStringArray0);
      options0.get(1);
      segmentedByteString0.rangeEquals(0, byteStringArray0[1], 1, 1);
      segmentedByteString0.utf8();
      segmentedByteString0.md5();
      segmentedByteString0.write(buffer0);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(3468, (-2363));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(1959L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      // Undeclared exception!
      try { 
        segmentedByteString0.rangeEquals(0, (ByteString) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0);
      Object object0 = new Object();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = (ByteString) segmentedByteString0;
      byteStringArray0[1] = (ByteString) segmentedByteString0;
      byteStringArray0[2] = (ByteString) segmentedByteString0;
      Options.of(byteStringArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      segmentedByteString0.startsWith(byteArray0);
      segmentedByteString0.rangeEquals((int) (byte)52, byteStringArray0[1], (-1150), (-1150));
      segmentedByteString0.md5();
      int int0 = segmentedByteString0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0);
      Object object0 = new Object();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      segmentedByteString0.getByte(0);
      segmentedByteString0.md5();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      segmentedByteString0.startsWith(byteArray0);
      Object object1 = new Object();
      segmentedByteString0.toString();
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte(25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=25 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 1);
      segmentedByteString1.rangeEquals(0, (ByteString) segmentedByteString0, 0, 1);
      SegmentedByteString segmentedByteString2 = null;
      try {
        segmentedByteString2 = new SegmentedByteString(buffer0, 3093);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=0 byteCount=3093
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0);
      Object object0 = new Object();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      byte byte0 = ObjectStreamConstants.SC_EXTERNALIZABLE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object1 = new Object();
      String string0 = segmentedByteString0.toString();
      assertEquals("[text=0]", string0);
      
      Object object2 = new Object();
      segmentedByteString0.equals(object2);
      ByteString byteString0 = segmentedByteString0.sha256();
      segmentedByteString0.equals(byteString0);
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      ByteString byteString0 = segmentedByteString0.sha1();
      segmentedByteString0.getByte(0);
      boolean boolean0 = segmentedByteString0.equals(byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      buffer0.readByteString();
      segmentedByteString0.getByte(0);
      segmentedByteString0.hashCode();
      ByteString byteString0 = segmentedByteString0.toAsciiUppercase();
      segmentedByteString0.equals(byteString0);
      segmentedByteString0.base64Url();
      byte[] byteArray0 = new byte[1];
      segmentedByteString0.toAsciiUppercase();
      byteArray0[0] = (byte)79;
      segmentedByteString0.toAsciiUppercase();
      ByteString byteString1 = new ByteString(byteArray0);
      segmentedByteString0.equals(byteString1);
      ByteBuffer byteBuffer0 = segmentedByteString0.asByteBuffer();
      assertFalse(byteBuffer0.isDirect());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0);
      Object object0 = new Object();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = segmentedByteString0.hex();
      assertEquals("30", string0);
      
      boolean boolean0 = segmentedByteString0.rangeEquals(0, (ByteString) segmentedByteString0, 1, 1);
      byte byte0 = segmentedByteString0.getByte(0);
      assertEquals((byte)48, byte0);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)48;
      boolean boolean1 = segmentedByteString0.startsWith(byteArray1);
      assertTrue(boolean1);
      
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-22);
      byteArray2[1] = (byte) (-22);
      byteArray2[2] = (byte)37;
      boolean boolean2 = segmentedByteString0.rangeEquals(0, byteArray2, (int) (byte) (-22), (int) (byte)0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }
}
