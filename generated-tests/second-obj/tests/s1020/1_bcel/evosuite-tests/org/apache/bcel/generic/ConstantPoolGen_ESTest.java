/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:25:19 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.FCMPL;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.INVOKEDYNAMIC;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.InstructionListObserver;
import org.apache.bcel.generic.LDC_W;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.NEW;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.ReferenceType;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantInteger constantInteger0 = new ConstantInteger(1000);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1000, (-775));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[2] = (Constant) constantNameAndType1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(14);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addLong(14);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(282, 282);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantDouble constantDouble0 = new ConstantDouble((-4665.77773));
      constantArray0[1] = (Constant) constantDouble0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1017), (-1017));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[2] = (Constant) constantMethodHandle1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupFieldref("5opV($v(", "W&cO:Ud1", "5opV($v(");
      assertEquals((-1), int0);
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addUtf8("v=");
      constantPoolGen0.lookupInteger(1);
      constantPoolGen0.lookupString("v=");
      int int0 = constantPoolGen0.lookupDouble((-1));
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger(0);
      constantPoolGen0.lookupInteger(1);
      String string0 = "vxnLsh95_^<?d";
      constantPoolGen0.getFinalConstantPool();
      BasicType basicType0 = Type.FLOAT;
      // Undeclared exception!
      try { 
        Type.getReturnTypeSize("vxnLsh95_^<?d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: vxnLsh95_^<?d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getSize();
      int int0 = constantPoolGen0.addFloat(239.43663F);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.getSize();
      int int0 = constantPoolGen0.addFloat(2);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1994091957), (-1994091957));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1994091957), 997);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1994091957
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("L%M1.#C)rq /Rn:[0");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantUtf8_0.clone();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addUtf8("L%M1.#C)rq /Rn:[0");
      GETFIELD gETFIELD0 = new GETFIELD();
      GETFIELD gETFIELD1 = new GETFIELD();
      // Undeclared exception!
      try { 
        gETFIELD1.getReferenceType(constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Character.MIN_SUPPLEMENTARY_CODE_POINT;
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(65536);
      constantArray0[0] = (Constant) constantClass0;
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65536
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1601));
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodType0, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodType[16](descriptor_index = -1601)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(122);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Constant[] constantArray1 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray1);
      constantPoolGen0.getFinalConstantPool();
      int int0 = Pattern.DOTALL;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(122, 64);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray1);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInterfaceMethodref0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addClass("ETo0x");
      constantPoolGen0.toString();
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      constantPoolGen0.addDouble(0.0);
      int int0 = constantPoolGen0.lookupDouble((-1591.4));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(0.0);
      int int0 = constantPoolGen0.lookupString("'xhOvw#Y1+aKyn&m");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("LP9P_;/&sWis");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1), (-1));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupLong((-635L));
      assertEquals((-1), int0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1922, 223);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantLong constantLong0 = new ConstantLong((-1465L));
      constantArray0[1] = (Constant) constantLong0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-2258), 1922);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[2] = (Constant) constantInterfaceMethodref1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2258
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = 0;
      // Undeclared exception!
      try { 
        constantPoolGen0.addFieldref("<`7db\"", "<`7db\"", "<`7db\"");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FCMPL fCMPL0 = new FCMPL();
      Type type0 = fCMPL0.getType(constantPoolGen0);
      MethodGen methodGen0 = new MethodGen(2507, type0, type0.NO_ARGS, (String[]) null, "&", "&", (InstructionList) null, constantPoolGen0);
      int int0 = constantPoolGen0.lookupInterfaceMethodref(methodGen0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      Constant[] constantArray0 = new Constant[5];
      ConstantClass constantClass0 = new ConstantClass((-794));
      constantArray0[1] = (Constant) constantClass0;
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -794
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("il.append(new RET(");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.addConstant(constantUtf8_0, constantPoolGen0);
      constantPoolGen1.getFinalConstantPool();
      constantPoolGen1.lookupDouble(1);
      assertEquals(2, constantPoolGen1.getSize());
      
      int int0 = constantPoolGen0.lookupFieldref("il.append(new RET(", "#6%wx1#MNH", "a;8ERb-$@~J");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2409), 14);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(14, 14);
      constantArray0[0] = (Constant) constantMethodref1;
      long long0 = 1L;
      ConstantLong constantLong0 = new ConstantLong(1L);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantMethodref constantMethodref2 = new ConstantMethodref((-293), (-293));
      ConstantMethodref constantMethodref3 = new ConstantMethodref(constantMethodref1);
      ConstantMethodref constantMethodref4 = new ConstantMethodref(constantMethodref3);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantMethodref0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2409
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addDouble(537.489);
      constantPoolGen0.addDouble(537.489);
      constantPoolGen0.getFinalConstantPool();
      ConstantClass constantClass0 = new ConstantClass(1);
      int int0 = constantPoolGen0.addLong(1);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantDouble0.setBytes(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantPool0.constantToString((Constant) constantDouble1);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool1);
      constantPool0.setConstantPool(constantArray0);
      constantPoolGen0.lookupNameAndType("MmHl", ":");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addConstant(constantDouble1, constantPoolGen1);
      constantPoolGen0.addLong((-1));
      constantPoolGen0.setConstant(45, constantDouble1);
      constantPoolGen0.addFloat(45);
      int int0 = constantPoolGen0.lookupClass("MmHl");
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger(0);
      constantPoolGen0.lookupInteger(0);
      String string0 = "vxnLsh95_^<?d";
      constantPoolGen0.getFinalConstantPool();
      BasicType basicType0 = Type.FLOAT;
      // Undeclared exception!
      try { 
        Type.getReturnTypeSize("vxnLsh95_^<?d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: vxnLsh95_^<?d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong((-1608L));
      constantPoolGen0.addInteger(1);
      constantPoolGen0.addInteger(1);
      constantPoolGen0.lookupInteger(240);
      constantPoolGen0.getSize();
      Type type0 = null;
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = null;
      // Undeclared exception!
      try { 
        Type.getMethodSignature(typeArray0[1], typeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantInteger constantInteger0 = new ConstantInteger(6);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(6, 6);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("A");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[3] = (Constant) constantUtf8_1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen1.addLong(6);
      constantPoolGen0.addConstant(constantInteger1, constantPoolGen1);
      constantPoolGen1.lookupNameAndType("\nExiting!!\n", "l$Nj@Em~");
      int int0 = constantPoolGen0.lookupDouble((-268.898));
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Float.SIZE;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(32, 32);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("il.append(new RET(");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      ConstantClass constantClass0 = new ConstantClass(2);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.lookupInterfaceMethodref(" {", ">JqBR1Ca@q1Ov*", (String) null);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantArray0[0], constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupUtf8("");
      ConstantFloat constantFloat0 = new ConstantFloat((-1));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantFloat1;
      constantArray0[1] = (Constant) constantFloat1;
      constantArray0[2] = (Constant) constantFloat0;
      constantArray0[3] = (Constant) constantFloat1;
      constantArray0[4] = (Constant) constantFloat0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("j~7yU9-|Bml");
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantFloat0;
      constantArray0[7] = (Constant) constantFloat0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addConstant(constantFloat1, constantPoolGen1);
      int int0 = constantPoolGen0.lookupMethodref("j~7yU9-|Bml", "HeF5u0}io", (String) null);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Character.MIN_RADIX;
      int int1 = Pattern.CANON_EQ;
      constantPoolGen0.addDouble((-2148.54030325237));
      constantPoolGen0.getFinalConstantPool();
      ConstantLong constantLong0 = new ConstantLong(1);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantLong0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int2 = constantPoolGen0.addConstant(constantLong0, constantPoolGen1);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(3, int2);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2409), 1);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("()<null object>");
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantString constantString0 = new ConstantString(233);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[3] = (Constant) constantString1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = Short.SIZE;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[2];
      ObjectType objectType0 = Type.THROWABLE;
      constantPoolGen0.addClass(objectType0);
      ConstantDouble constantDouble0 = new ConstantDouble(16);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantFloat constantFloat0 = new ConstantFloat((-3562.2556F));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen1.addFloat(0.0F);
      int int1 = Double.MIN_EXPONENT;
      int int2 = constantPoolGen0.lookupLong(256);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref(">$-CvN%@$#\"x", ">$-CvN%@$#\"x", ">$-CvN%@$#\"x");
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(4);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = Float.MAX_EXPONENT;
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      String string0 = Constants.CONSTRUCTOR_NAME;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(5, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addInterfaceMethodref("F%>}-f)ZYb", "F%>}-f)ZYb", "F%>}-f)ZYb");
      JavaClass.getComparator();
      Integer integer0 = new Integer(4);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(":");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantUtf8_0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.lookupInterfaceMethodref("Unknown constant type ", "xPf^K+re", "?}C{SESP!$");
      assertEquals(5, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantInteger constantInteger0 = new ConstantInteger(0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 0);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantFloat constantFloat0 = new ConstantFloat(0);
      constantArray0[2] = (Constant) constantFloat0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("A");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[3] = (Constant) constantUtf8_1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupUtf8("aA|8");
      int int0 = constantPoolGen0.lookupFloat((-536));
      assertEquals((-1), int0);
      assertEquals(6, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 0);
      ConstantFloat constantFloat0 = new ConstantFloat(0);
      constantArray0[2] = (Constant) constantFloat0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addFloat(0);
      assertEquals(2, int0);
      
      constantPoolGen0.lookupFloat(0);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(256, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("()<null object>");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantString constantString0 = new ConstantString(1);
      ConstantString constantString1 = new ConstantString(constantString0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantArray0[3] = (Constant) constantString1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(4, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("M{dNgV19 RN4");
      ConstantString constantString0 = new ConstantString(233);
      ConstantUtf8.getCachedInstance("%%");
      ConstantString constantString1 = new ConstantString(1);
      Constant[] constantArray0 = new Constant[20];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantString1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(233, (-1287));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[5] = (Constant) constantMethodHandle1;
      constantArray0[6] = (Constant) constantString1;
      constantArray0[7] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPoolGen0.lookupFieldref("M{dNgV19 RN4", "%%", (String) null);
      constantPoolGen1.addInteger(1);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      String string0 = "";
      ConstantUtf8.getInstance("");
      int int0 = 1000;
      ConstantInteger constantInteger0 = new ConstantInteger(1000);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1000, (-775));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantNameAndType1, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1000
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addClass("w*\"ZY@}l`G6]Z%R;Q*:%:ldc");
      constantPoolGen0.addString("w*\"ZY@}l`G6]Z%R;Q*:%:ldc");
      constantPoolGen0.addMethodref("w*\"ZY@}l`G6]Z%R;Q*:%:ldc", "w*\"ZY@}l`G6]Z%R;Q*:%:ldc", "w*\"ZY@}l`G6]Z%R;Q*:%:ldc");
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(5);
      // Undeclared exception!
      try { 
        iNSTANCEOF0.toString(constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 5. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong((-4574949703127398636L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantInteger constantInteger0 = new ConstantInteger(1276);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1276, 75);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong(2212L);
      constantPoolGen0.lookupFieldref("", "", "");
      int int0 = constantPoolGen0.lookupLong(7L);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addLong(3003L);
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(1);
      String string0 = "[ 8p";
      constantPoolGen0.lookupLong(3003L);
      constantPoolGen0.getFinalConstantPool();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 1);
      String string1 = null;
      String string2 = "%";
      constantPoolGen0.lookupMethodref("[ 8p", "[ 8p", "%");
      NEW nEW0 = new NEW();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        nEW0.getLoadClassType(constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.index;
      constantPoolGen0.adjustSize();
      constantPoolGen0.addString("org.apache.bcel.classfile.Utility");
      ConstantLong constantLong0 = new ConstantLong(1L);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-4), 1);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantFieldref1.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      int int1 = Short.SIZE;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(256, 1);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      constantPoolGen1.addConstant(constantLong0, constantPoolGen0);
      ObjectType objectType0 = Type.STRING;
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen(constantPool0);
      constantPoolGen1.addConstant(constantLong0, constantPoolGen3);
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) objectType0;
      typeArray0[8] = (Type) objectType0;
      typeArray0[4] = (Type) objectType0;
      typeArray0[6] = (Type) objectType0;
      typeArray0[8] = (Type) objectType0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.apache.bcel.classfile.Utility";
      stringArray0[1] = "org.apache.bcel.classfile.Utility";
      stringArray0[2] = "Type of ConstValue invalid: ";
      stringArray0[0] = "H";
      stringArray0[4] = "Type of ConstValue invalid: ";
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ();
      InstructionList instructionList0 = new InstructionList();
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(6, objectType0, typeArray0, stringArray0, (String) null, "%", instructionList0, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Mismatch in argument array lengths: 9 vs. 5
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupInterfaceMethodref("a4Xn>J/QrTi5SnP66r%B$$TnUa8cedO~-", "a4Xn>J/QrTi5SnP66r%B$$TnUa8cedO~-", "a4Xn>J/QrTi5SnP66r%B$$TnUa8cedO~-");
      constantPoolGen0.getConstantPool();
      constantPoolGen0.addMethodref("a4Xn>J/QrTi5SnP66r%B$$TnUa8cedO~-", "a4Xn>J/QrTi5SnP66r%B$$TnUa8cedO~-", "a4Xn>J/QrTi5SnP66r%B$$TnUa8cedO~-&),&!4s!o ^by]Y");
      constantPoolGen0.lookupNameAndType("a4Xn>J/QrTi5SnP66r%B$$TnUa8cedO~-", "a4Xn>J/QrTi5SnP66r%B$$TnUa8cedO~-&),&!4s!o ^by]Y");
      String string0 = "]$B-[jF&%-|QI9\\Z";
      String string1 = ")=";
      ArrayType arrayType0 = null;
      try {
        arrayType0 = new ArrayType(")=", 2733);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid number of dimensions: 2733
         //
         verifyException("org.apache.bcel.generic.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("ldoc", "ldoc", "ldoc");
      constantPoolGen0.addNameAndType("ldoc", "ldoc");
      constantPoolGen0.size = 4;
      int int0 = Double.SIZE;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(4, 2);
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      constantPoolGen0.getFinalConstantPool();
      Method.getComparator();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref(">$-CvN%@$#\"x", ">$-CvN%@$#\"x", ">$-CvN%@$#\"x");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      constantPoolGen0.addString("Tep}x[R;#Xkz");
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(4);
      constantPoolGen0.lookupLong(2711L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "m&");
      constantPoolGen0.addClass("m&");
      ConstantFieldref constantFieldref0 = new ConstantFieldref(8, 8);
      int int0 = Pattern.DOTALL;
      int int1 = Character.MAX_RADIX;
      int int2 = Double.SIZE;
      int int3 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      Constant constant0 = constantFieldref1.copy();
      int int4 = Double.SIZE;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addInteger((-2228));
      constantPoolGen0.addString("Tep}x[R;#Xkz");
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constant0, constantPoolGen0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantClass cannot be cast to org.apache.bcel.classfile.ConstantNameAndType
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addString("w*\"ZY@}l`G6]Z%R;Q*:%:ldc");
      int int0 = constantPoolGen0.lookupString("w*\"ZY@}l`G6]Z%R;Q*:%:ldc");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(0.0);
      ConstantString constantString0 = new ConstantString(1);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addFieldref("m&&|NB7?o_F6&o&;u70m.KkbmU /^D", "]~y<;.t,a", "m&&|NB7?o_F6&o&;u70m.KkbmU /^D");
      ObjectType objectType0 = Type.THROWABLE;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      assertEquals(7, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantInteger constantInteger0 = new ConstantInteger(4);
      String string0 = Constants.CONSTRUCTOR_NAME;
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(4, 4);
      constantArray0[4] = (Constant) constantMethodHandle0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(4, 4);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addClass("<init>");
      int int0 = Float.BYTES;
      constantPoolGen0.addInterfaceMethodref("<init>", "<init>", "<init>");
      constantPoolGen0.addInteger(4);
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPool0.copy();
      constantPoolGen0.addInterfaceMethodref("<init>", "<init>", "<init>");
      constantMethodHandle0.setReferenceKind(7);
      int int1 = Character.MIN_RADIX;
      constantFieldref0.copy();
      constantPoolGen0.lookupInteger(9);
      LDC_W lDC_W0 = null;
      try {
        lDC_W0 = new LDC_W((-1073741808));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Negative index value: -1073741808
         //
         verifyException("org.apache.bcel.generic.CPInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantInteger constantInteger0 = new ConstantInteger(6);
      Character.getName(6);
      ConstantInteger constantInteger1 = new ConstantInteger(6);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(6, 6);
      constantArray0[4] = (Constant) constantMethodHandle0;
      int int0 = Float.BYTES;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(6);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      BasicType basicType0 = Type.BYTE;
      String[] stringArray0 = new String[0];
      InstructionList instructionList0 = new InstructionList(iNSTANCEOF0);
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      MethodGen methodGen0 = new MethodGen(4, basicType0, basicType0.NO_ARGS, stringArray0, ")", "F=Pb!n&K!/4>Ixvy", instructionList0, constantPoolGen0);
      constantPoolGen0.addMethodref(methodGen0);
      methodGen0.copy("!h7=9k$uXJR+qbj\"F%", constantPoolGen1);
      ArrayType arrayType0 = new ArrayType("f;DM}a{5O=", 6);
      int int1 = Pattern.CANON_EQ;
      InstructionList instructionList1 = new InstructionList();
      assertEquals(0, instructionList1.getLength());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantInteger constantInteger0 = new ConstantInteger(6);
      Character.getName(6);
      ConstantInteger constantInteger1 = new ConstantInteger(6);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(6, 6);
      constantArray0[4] = (Constant) constantMethodHandle0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(6, 6);
      int int0 = Float.BYTES;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(6);
      BasicType basicType0 = Type.BYTE;
      String[] stringArray0 = new String[0];
      InstructionList instructionList0 = new InstructionList(iNSTANCEOF0);
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      MethodGen methodGen0 = new MethodGen(5, basicType0, basicType0.NO_ARGS, stringArray0, ")", "F=Pb!n&K!/4>Ixvy", instructionList0, constantPoolGen0);
      constantPoolGen0.addMethodref(methodGen0);
      MethodGen methodGen1 = methodGen0.copy("wV(m", constantPoolGen0);
      constantPoolGen0.lookupMethodref(methodGen1);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      org.apache.bcel.classfile.Visitor visitor0 = mock(org.apache.bcel.classfile.Visitor.class, new ViolatedAssumptionAnswer());
      constantPoolGen1.addDouble(223.63);
      INSTANCEOF iNSTANCEOF1 = new INSTANCEOF();
      constantPoolGen0.addMethodref(methodGen0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(6, (-1));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.adjustSize();
      constantPoolGen0.addFloat((-1231.212F));
      constantPoolGen0.adjustSize();
      assertEquals(12, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantInteger constantInteger0 = new ConstantInteger(6);
      Character.getName(6);
      ConstantInteger constantInteger1 = new ConstantInteger(6);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(6, 6);
      constantArray0[4] = (Constant) constantMethodHandle0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(6, 6);
      int int0 = Float.BYTES;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int1 = constantPoolGen0.addFieldref("ACKNOWLEDGE", "bootstrap_method_attr_index", ")");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(6);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")");
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      constantPoolGen0.lookupNameAndType(")", "ACKNOWLEDGE");
      BasicType basicType0 = Type.BYTE;
      String[] stringArray0 = new String[0];
      InstructionList instructionList0 = new InstructionList(iNSTANCEOF0);
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen3, (long) 6);
      InstructionList instructionList1 = pUSH0.getInstructionList();
      instructionList0.insert((Instruction) iNSTANCEOF0, instructionList1);
      MethodGen methodGen0 = new MethodGen(5, basicType0, basicType0.NO_ARGS, stringArray0, ")", "F=Pb!n&K!/4>Ixvy", instructionList0, constantPoolGen0);
      MethodGen methodGen1 = methodGen0.copy("bootstrap_method_attr_index", constantPoolGen2);
      constantPoolGen0.lookupMethodref(methodGen1);
      assertEquals(12, constantPoolGen0.getSize());
      
      ConstantPoolGen constantPoolGen4 = new ConstantPoolGen();
      constantPoolGen2.addDouble((-1));
      INSTANCEOF iNSTANCEOF1 = new INSTANCEOF();
      ConstantPoolGen constantPoolGen5 = new ConstantPoolGen();
      constantPoolGen4.addUtf8("bootstrap_method_attr_index");
      constantPoolGen1.toString();
      int int2 = constantPoolGen4.lookupUtf8("P'We4L*&3;@m(");
      assertFalse(int2 == int1);
  }
}
