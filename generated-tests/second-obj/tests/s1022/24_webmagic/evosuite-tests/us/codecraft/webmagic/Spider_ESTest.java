/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:46:05 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadPoolExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.JsonPathSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".json");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider1.pipeline(multiPagePipeline0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) synchronousQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("WebMagic");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getSpiderListeners();
      spider0.setSpiderListeners((List<SpiderListener>) null);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread(1193);
      Spider spider2 = spider1.setUUID("");
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "#Myqe04_R";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#Myqe04_R");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1358);
      spider1.thread((ExecutorService) forkJoinPool0, 1358);
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      Spider spider2 = spider0.startRequest((List<Request>) null);
      assertTrue(spider2.isExitWhenComplete());
      
      Spider spider3 = spider1.setExitWhenComplete(false);
      spider3.setExitWhenComplete(false);
      spider2.isSpawnUrl();
      spider2.thread((ExecutorService) forkJoinPool0, 2);
      assertFalse(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Json json0 = new Json(linkedList0);
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      Spider spider2 = spider1.clearPipeline();
      Spider spider3 = spider2.setSpawnUrl(true);
      Class<Request> class1 = Request.class;
      json0.toList(class1);
      Spider spider4 = spider3.startRequest((List<Request>) null);
      Spider spider5 = spider4.setUUID("Spider {} closed! {} pages downloaded.");
      boolean boolean0 = spider5.isExitWhenComplete();
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".json");
      Spider spider0 = Spider.create(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider0.getStartTime();
      spider0.getStatus();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("j(o-xc&zPZ;@:QmW");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(" stop success!");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = " stop success!";
      spider1.getPageCount();
      // Undeclared exception!
      try { 
        spider0.get("us.codecraft.webmagic.utils.MultiKeyMapBase");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#Myqe04_R");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setUUID("|");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("|", (String) null);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider0.getPageCount();
      // Undeclared exception!
      try { 
        spider1.get("#Myqe04_R");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("waitNewUrl - interrupted, error {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("waitNewUrl - interrupted, error {}");
      spider1.setExitWhenComplete(false);
      Page page0 = Page.fail();
      Page page1 = page0.setSkip(true);
      Page page2 = page1.setRawText("waitNewUrl - interrupted, error {}");
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("a3@{m.7wG$");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      spider1.getPageCount();
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("a3@{m.7wG$");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      long long0 = spider1.getPageCount();
      assertEquals(0L, long0);
      
      spider0.stop();
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop success!");
      SpiderMonitor.instance();
      Locale locale0 = Locale.UK;
      locale0.getUnicodeLocaleAttributes();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor1);
      Spider spider1 = spider0.setSpawnUrl(false);
      // Undeclared exception!
      try { 
        spider1.thread((-2356));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_AbortPolicy0);
      // Undeclared exception!
      try { 
        spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("title");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.pipeline(resultItemsCollectorPipeline0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider2 = spider1.setPipelines(linkedList0);
      spider2.stop();
      Page page0 = new Page();
      // Undeclared exception!
      try { 
        spider1.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("waitNewUrl - interrupted, error {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider0.stop();
      Request[] requestArray0 = new Request[8];
      Page page0 = Page.fail();
      spider1.extractAndAddRequests(page0, false);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("init cache scheduler success");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      Spider spider2 = spider1.thread(1193);
      Spider.Status spider_Status0 = Spider.Status.Init;
      spider_Status0.getValue();
      spider2.runAsync();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      spider2.setEmptySleepTime(2054);
      spider0.checkIfRunning();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "_";
      stringArray0[1] = "_";
      stringArray0[2] = "_";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Running");
      stringArray0[3] = "";
      spider0.setEmptySleepTime((-2117));
      stringArray0[4] = "_";
      stringArray0[5] = "_";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("a3@{m.7wG$");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      Request[] requestArray0 = new Request[3];
      Request request0 = new Request("7,Zh9H?");
      Request request1 = request0.setBinaryContent(false);
      Request request2 = request1.addHeader("a3@{m.7wG$", "a3@{m.7wG$");
      Request request3 = request2.setPriority((-624L));
      Request request4 = request3.setMethod("[T^,f8");
      Request request5 = request4.setUrl("");
      requestArray0[0] = request5;
      Request request6 = request4.setMethod("H.U-q&6nOq");
      requestArray0[1] = request6;
      Request request7 = new Request();
      requestArray0[2] = request7;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("a3@{m.7wG$");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("|");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "C4Ud[>T0Kd7yPkEk:");
      phantomJSDownloader0.setRetryNum(101);
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      long long0 = spider2.getPageCount();
      assertEquals(0L, long0);
      
      int int0 = spider1.getThreadAlive();
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("init cache scheduler success");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      Spider spider2 = spider1.thread(1193);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider3 = spider2.addPipeline(consolePipeline0);
      spider0.stop();
      spider3.getScheduler();
      int int0 = spider3.getThreadAlive();
      assertEquals(0, int0);
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".json");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getUUID();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = ".json";
      stringArray0[2] = ".json";
      stringArray0[3] = ".json";
      stringArray0[4] = ".json";
      stringArray0[5] = ".json";
      stringArray0[6] = ".json";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Spider spider1 = spider0.startUrls(list0);
      Spider spider2 = spider0.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Spider spider3 = spider2.scheduler(priorityScheduler0);
      PriorityScheduler priorityScheduler1 = new PriorityScheduler();
      priorityScheduler1.getLeftRequestsCount(spider0);
      priorityScheduler1.poll(spider3);
      Page.fail();
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider4 = spider2.thread(167);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      spider4.stop();
      Spider.Status.fromValue(0);
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) list0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Spider spider1 = spider0.startUrls(list0);
      Spider spider2 = spider1.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider3 = spider2.scheduler(queueScheduler0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.getLeftRequestsCount(spider1);
      priorityScheduler0.poll(spider2);
      assertTrue(spider0.isSpawnUrl());
      
      Spider[] spiderArray0 = new Spider[6];
      spider0.spawnUrl = false;
      spiderArray0[0] = spider1;
      spiderArray0[1] = spider3;
      Page.fail();
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider0.getThreadAlive();
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      spider0.getSite();
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Locale locale0 = Locale.UK;
      locale0.getUnicodeLocaleAttributes();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("As[Be|f");
      ForkJoinTask.getPool();
      Request request0 = new Request();
      ResultItems resultItems0 = new ResultItems();
      Map<String, Object> map0 = resultItems0.getAll();
      Request request1 = request0.setExtras(map0);
      Request request2 = request1.setMethod("%8TB|DlmhuD^U");
      request2.setBinaryContent(true);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_cycle_tried_times");
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setSpawnUrl(false);
      Spider spider2 = spider1.addPipeline(jsonFilePipeline0);
      spider2.start();
      boolean boolean0 = spider1.isExitWhenComplete();
      assertFalse(spider0.isSpawnUrl());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("b.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.isSpawnUrl();
      Page page0 = Page.fail();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Page page1 = page0.setSkip(false);
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("javascript:");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("k<elRtst>!d}LSI", "javascript:");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum((-54));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Spider spider1 = spider0.setDownloader(phantomJSDownloader1);
      boolean boolean0 = false;
      Spider spider2 = spider1.setSpawnUrl(false);
      spider1.run();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("k<elRtst>!d}LSI");
      Spider spider3 = spider2.setUUID("javascript:");
      ForkJoinPool.commonPool();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider3.getStartTime();
      System.setCurrentTimeMillis((-54));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "a6}";
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setUUID("");
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>();
      List<String> list0 = spider1.getAll((Collection<String>) priorityBlockingQueue0);
      Spider spider3 = spider2.startUrls(list0);
      Page.fail();
      // Undeclared exception!
      try { 
        spider3.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("a3@{m.7wG$");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      Request[] requestArray0 = new Request[3];
      String string0 = "7,Zh9H?";
      boolean boolean0 = false;
      Request request0 = new Request();
      requestArray0[2] = request0;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Zv");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      Spider spider2 = spider1.clearPipeline();
      int int0 = spider2.getThreadAlive();
      assertEquals(0, int0);
      
      Spider spider3 = spider2.setUUID("Zv");
      spider0.stop();
      spider2.stop();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider4 = spider0.setPipelines(linkedList0);
      Scheduler scheduler0 = spider4.getScheduler();
      SpiderMonitor.instance();
      Locale locale0 = Locale.JAPANESE;
      Page page0 = Page.fail();
      Page page1 = Page.fail();
      page0.setSkip(false);
      Request request0 = new Request();
      request0.addHeader((String) null, "Zv");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      page1.setRequest(request0);
      spider3.extractAndAddRequests(page0, false);
      spider3.sleep(0);
      assertSame(queueScheduler0, scheduler0);
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop success!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("k<elRtst>!d}LSI", " stop success!");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum((-54));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Spider spider1 = spider0.setDownloader(phantomJSDownloader1);
      Spider spider2 = spider1.setSpawnUrl(false);
      spider1.run();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.getLeftRequestsCount(spider2);
      priorityScheduler0.poll(spider1);
      Page.fail();
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider2.getThreadAlive();
      spider2.stop();
      Spider.Status.fromValue((-239));
      Spider spider3 = spider0.clearPipeline();
      // Undeclared exception!
      try { 
        spider3.get(", cycleRetryTimes=");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }
}
