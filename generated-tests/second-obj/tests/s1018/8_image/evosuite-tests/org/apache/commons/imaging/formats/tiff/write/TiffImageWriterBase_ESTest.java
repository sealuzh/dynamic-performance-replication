/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:47:44 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff.write;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.nio.ByteOrder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import javax.swing.text.AttributeSet;
import javax.swing.text.StyleConstants;
import org.apache.commons.imaging.common.BinaryOutputStream;
import org.apache.commons.imaging.common.ImageBuilder;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort;
import org.apache.commons.imaging.formats.tiff.write.TiffImageWriterLossless;
import org.apache.commons.imaging.formats.tiff.write.TiffImageWriterLossy;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputDirectory;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputField;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputItem;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputSet;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputSummary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffImageWriterBase_ESTest extends TiffImageWriterBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(tiffOutputSet0.byteOrder);
      try { 
        tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No directories.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      try { 
        tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No directories.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy((ByteOrder) null);
      // Undeclared exception!
      try { 
        tiffImageWriterLossy0.writeImageFileHeader((BinaryOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(byteOrder0);
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.getOrCreateExifDirectory();
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      assertNotNull(tiffOutputSummary0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      TiffImageWriterLossless tiffImageWriterLossless0 = new TiffImageWriterLossless(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(byteOrder0);
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addExifDirectory();
      try { 
        tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing root directory.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.getOrCreateRootDirectory();
      tiffOutputSet0.setGPSInDegrees(0, 0);
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      assertNotNull(tiffOutputSummary0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteOrder.nativeOrder();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addInteroperabilityDirectory();
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      TiffOutputSummary tiffOutputSummary1 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      assertFalse(tiffOutputSummary1.equals((Object)tiffOutputSummary0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TiffImageWriterLossless tiffImageWriterLossless0 = new TiffImageWriterLossless(byteArray0);
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.getOrCreateGPSDirectory();
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossless0.validateDirectories(tiffOutputSet0);
      TiffOutputSummary tiffOutputSummary1 = tiffImageWriterLossless0.validateDirectories(tiffOutputSet0);
      assertFalse(tiffOutputSummary1.equals((Object)tiffOutputSummary0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(byteOrder1);
      MockFile mockFile0 = new MockFile("XMP_XML");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ByteOrder.nativeOrder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("XMP_XML", mockFile0);
      // Undeclared exception!
      try { 
        tiffImageWriterLossy0.writeImage((BufferedImage) null, mockPrintStream0, hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.io.MockFile cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      MockFile mockFile0 = new MockFile("XMP_XML");
      MockPrintStream mockPrintStream0 = new MockPrintStream("XMP_XML");
      ByteOrder.nativeOrder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("FORMAT", fileSystemHandling0);
      // Undeclared exception!
      try { 
        tiffImageWriterLossy0.writeImage((BufferedImage) null, mockPrintStream0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.getOrCreateRootDirectory();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      TiffOutputSummary tiffOutputSummary1 = new TiffOutputSummary(tiffOutputSummary0.byteOrder, tiffOutputDirectory0, tiffOutputSummary0.directoryTypeMap);
      ArrayList<TiffOutputItem> arrayList0 = new ArrayList<TiffOutputItem>();
      HashMap<Integer, TiffOutputDirectory> hashMap0 = new HashMap<Integer, TiffOutputDirectory>();
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      TiffOutputSummary tiffOutputSummary2 = new TiffOutputSummary(byteOrder0, tiffOutputSummary0.rootDirectory, tiffOutputSummary1.directoryTypeMap);
      tiffOutputDirectory0.findField((-3));
      tiffOutputSet0.getExifDirectory();
      TiffOutputSummary tiffOutputSummary3 = new TiffOutputSummary(tiffOutputSet0.byteOrder, tiffOutputSummary1.rootDirectory, tiffOutputSummary1.directoryTypeMap);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>();
      tiffOutputSummary2.rootDirectory.getFields();
      MockPrintStream mockPrintStream0 = new MockPrintStream("EXIF");
      TiffImageWriterLossy tiffImageWriterLossy1 = new TiffImageWriterLossy(byteOrder0);
      TiffImageWriterLossy tiffImageWriterLossy2 = new TiffImageWriterLossy();
      tiffImageWriterLossy0.write(mockPrintStream0, tiffOutputSet0);
      tiffImageWriterLossy2.write(mockPrintStream0, tiffOutputSet0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Hashtable<String, Object> hashtable2 = new Hashtable<String, Object>();
      hashtable2.putIfAbsent("EXIF", tiffOutputSummary3);
      // Undeclared exception!
      try { 
        tiffImageWriterLossy1.writeImage((BufferedImage) null, mockPrintStream0, hashtable2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.imaging.formats.tiff.write.TiffOutputSummary cannot be cast to org.apache.commons.imaging.formats.tiff.write.TiffOutputSet
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/8_image/The size must be non-negative");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      MockPrintStream mockPrintStream0 = new MockPrintStream("The size must be non-negative");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.NameAttribute;
      ImageBuilder imageBuilder0 = new ImageBuilder(2, 2, true);
      ImageBuilder imageBuilder1 = new ImageBuilder(34665, 2, true);
      BufferedImage bufferedImage0 = imageBuilder1.getBufferedImage();
      // Undeclared exception!
      tiffImageWriterLossy0.writeImage(bufferedImage0, mockPrintStream0, hashtable0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      HashMap<Integer, TiffOutputDirectory> hashMap0 = new HashMap<Integer, TiffOutputDirectory>();
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>();
      MockPrintStream mockPrintStream0 = new MockPrintStream("The size must be non-negative");
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.NameAttribute;
      ImageBuilder imageBuilder0 = new ImageBuilder(376, 34853, true);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      // Undeclared exception!
      tiffImageWriterLossy0.writeImage(bufferedImage0, mockPrintStream0, hashtable0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.getOrCreateRootDirectory();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/8_image/The size must be non-negative");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "XMP_XML");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/8_image/The size must be non-negative");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.addInteroperabilityDirectory();
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      TiffOutputSummary tiffOutputSummary1 = new TiffOutputSummary(tiffOutputSummary0.byteOrder, tiffOutputDirectory0, tiffOutputSummary0.directoryTypeMap);
      tiffOutputSummary0.rootDirectory.findField(335);
      tiffOutputSet0.getOrCreateGPSDirectory();
      tiffOutputSummary0.add(tiffOutputDirectory0, (TiffOutputField) null);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      ImageBuilder imageBuilder0 = new ImageBuilder(2171, 2171, true);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      hashtable0.put(".Tp-'-]lo+LQ$_", tiffOutputSummary0);
      MockFile mockFile0 = new MockFile("XMP_XML");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, mockFileOutputStream0, hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: .Tp-'-]lo+LQ$_
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.NameAttribute;
      ImageBuilder imageBuilder0 = new ImageBuilder(33, 2, true);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      tiffImageWriterLossy0.writeImage(bufferedImage0, byteArrayOutputStream0, hashMap0);
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(byteArrayOutputStream0, tiffOutputSet0.byteOrder);
      binaryOutputStream0.write4Bytes(33);
      tiffImageWriterLossy0.writeImageFileHeader(binaryOutputStream0, 902L);
  }
}
