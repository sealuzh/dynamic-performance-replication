/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 18:58:34 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.Set;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.GzipSink;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean0 = byteString1.EMPTY.endsWith(byteArray0);
      boolean boolean1 = byteString1.equals(byteString0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
      
      int int1 = ObjectStreamConstants.baseWireHandle;
      ByteString byteString1 = byteString0.EMPTY.substring(0);
      boolean boolean0 = byteString1.endsWith(byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("HmacSHA256");
      byteString0.hashCode();
      byteString0.asByteBuffer();
      ByteString byteString1 = byteString0.hmacSha1(byteString0);
      assertEquals(20, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
      
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean0 = byteString1.equals(byteString0);
      assertTrue(boolean0);
      
      ByteString byteString2 = byteString0.md5();
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.EMPTY.toString();
      ByteString byteString2 = byteString0.hmacSha256(byteString1);
      assertEquals(32, byteString2.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("HmacSHA256");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: H
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("HmacSHA256");
      byte[] byteArray0 = byteString0.toByteArray();
      byteString0.md5();
      boolean boolean0 = byteString0.rangeEquals(19, byteArray0, 19, 19);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      byteString0.asByteBuffer();
      boolean boolean0 = byteString0.equals("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)35;
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean1 = byteString0.startsWith(byteString1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Charset.defaultCharset();
      ByteString byteString1 = byteString0.sha512();
      byteString1.startsWith(byteString0);
      byteString1.lastIndexOf(byteArray0, 1);
      ByteString.encodeUtf8("yDLH%ka");
      String string0 = byteString0.base64Url();
      assertEquals("AAAAAA==", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("source exhausted prematurely", charset0);
      byteString0.toAsciiUppercase();
      byte byte0 = ObjectStreamConstants.TC_REFERENCE;
      assertEquals((byte)113, byte0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Pipe pipe0 = new Pipe(112L);
      pipe0.source();
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      HashingSink hashingSink0 = HashingSink.sha512(pipe_PipeSink0);
      ByteString byteString0 = hashingSink0.hash();
      String string0 = byteString0.toString();
      assertEquals("[hex=cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e]", string0);
      
      byte byte0 = ObjectStreamConstants.TC_LONGSTRING;
      ByteString byteString1 = hashingSink0.hash();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Charset.defaultCharset();
      String string0 = byteString0.toString();
      assertEquals("[text=\\r]", string0);
      
      Pipe pipe0 = new Pipe((byte)13);
      Buffer buffer0 = pipe0.buffer;
      byteString0.write(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString(0L);
      int int1 = byteString0.compareTo(byteString1);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("HmacSHA256");
      ByteString byteString1 = byteString0.sha1();
      byteString0.base64Url();
      byteString0.EMPTY.indexOf(byteString1);
      byte byte0 = ObjectStreamConstants.TC_REFERENCE;
      // Undeclared exception!
      try { 
        byteString1.getByte((byte)113);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 113
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteString1, (-3537));
      int int1 = byteString1.indexOf(byteString0, 1191);
      assertTrue(int1 == int0);
      
      boolean boolean0 = byteString0.equals(byteString1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("HmacSHA256");
      ByteString byteString1 = byteString0.sha1();
      byte[] byteArray0 = new byte[8];
      int int0 = byteString1.indexOf(byteArray0, (int) (byte) (-70));
      assertEquals((-1), int0);
      
      String string0 = byteString1.hex();
      assertEquals("088888888288e08088e8888e08e488e643e88846", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("sB[p;Fa");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: sB[p;Fa
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.base64Url();
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.equals(byteString1);
      assertTrue(boolean0);
      
      ByteString byteString2 = byteString1.sha256();
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString0 = ByteString.decodeBase64("HmacSHX25K");
      byteString0.EMPTY.sha256();
      byteString0.toByteArray();
      String string0 = byteString0.utf8();
      assertEquals("\u001Ef\uFFFDHu\uFFFD\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteString.decodeBase64("k\"YLW&Y#it");
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring(37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("source is closed");
      // Undeclared exception!
      try { 
        byteString0.substring(70, 1305);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(10)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0);
      int int1 = byteString0.hashCode();
      assertFalse(int1 == int0);
      
      ByteString byteString1 = byteString0.toAsciiLowercase();
      int int2 = byteString1.lastIndexOf(byteString1);
      assertEquals(0, int2);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeUtf8("maxBufferSize < 1: ");
      String string0 = byteString0.string(charset0);
      assertEquals("maxBufferSize < 1: ", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("HmacSHA256");
      byte[] byteArray0 = new byte[8];
      ByteString.codePointIndexToCharIndex("HmacSHA256", 465);
      byteString0.toAsciiLowercase();
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte) (-70));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Pipe pipe0 = new Pipe(112L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      pipe_PipeSink0.flush();
      HashingSink hashingSink0 = HashingSink.sha512(pipe_PipeSink0);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.toString();
      int int0 = ByteString.codePointIndexToCharIndex("[hex=cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e]", 53);
      int int1 = byteString0.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("'{)4", 2241);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ByteString byteString0 = ByteString.decodeBase64("HmacSHA256");
      String string0 = byteString0.utf8;
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString byteString1 = ByteString.of(byteBuffer0);
      boolean boolean0 = byteString1.startsWith(byteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      Charset.defaultCharset();
      String string0 = byteString0.base64();
      assertEquals("AA==", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (int) (byte)76, (int) (byte)76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=76 byteCount=76
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.equals(byteString0);
      byteString1.toAsciiUppercase();
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe((byte)13);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      HashingSink hashingSink0 = HashingSink.sha1(pipe_PipeSink0);
      HashingSink hashingSink1 = HashingSink.sha512(hashingSink0);
      ByteString byteString1 = hashingSink1.hash();
      String string0 = byteString1.toString();
      assertEquals("[hex=88838838888888888888888888888888888888888888888883888e8883888e8888888838888888888883888888888888838e388888888888883838888e888838]", string0);
      
      byteString1.sha512();
      ByteString byteString2 = byteString1.toAsciiLowercase();
      assertNotSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("source exhausted prematurely");
      assertNotNull(byteString0);
      assertEquals(19, byteString0.size());
      
      ByteString byteString1 = byteString0.sha1();
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(19, byteString0.size());
      assertEquals(20, byteString1.size());
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      String string0 = byteString0.base64Url();
      assertNotNull(string0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals(19, byteString0.size());
      assertNotSame(byteString0, byteString1);
      assertEquals("sourceexhaustedprematurelw==", string0);
      
      String string1 = byteString0.toString();
      assertNotNull(string1);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(19, byteString0.size());
      assertNotSame(byteString0, byteString1);
      assertEquals("[hex=88888888888888888888888e888ee8888888e8]", string1);
      
      // Undeclared exception!
      try { 
        ByteString.decodeHex("source exhausted prematurely");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: s
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteString0.size());
      
      ByteString byteString1 = byteString0.sha1();
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(3, byteString0.size());
      assertEquals(20, byteString1.size());
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      ByteString byteString2 = new ByteString(byteArray0);
      assertNotNull(byteString2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertEquals(3, byteString2.size());
      
      ByteString byteString3 = new ByteString(byteArray0);
      assertNotNull(byteString3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteString3.equals((Object)byteString1));
      assertTrue(byteString3.equals((Object)byteString2));
      assertTrue(byteString3.equals((Object)byteString0));
      assertEquals(3, byteString3.size());
      
      String string0 = byteString1.toString();
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString1));
      assertTrue(byteString0.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString3));
      assertEquals(3, byteString0.size());
      assertEquals(20, byteString1.size());
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString3);
      assertEquals("[hex=8e8888888888838888888888888888888888e888]", string0);
      
      ByteString byteString4 = byteString0.hmacSha256(byteString1);
      assertNotNull(byteString4);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString1));
      assertTrue(byteString0.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString2));
      assertEquals(3, byteString0.size());
      assertEquals(20, byteString1.size());
      assertEquals(32, byteString4.size());
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString4);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString4);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString1);
      assertNotSame(byteString4, byteString3);
      assertNotSame(byteString4, byteString2);
      
      ByteString byteString5 = new ByteString(byteArray0);
      assertNotNull(byteString5);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byteString5.equals((Object)byteString3));
      assertFalse(byteString5.equals((Object)byteString1));
      assertTrue(byteString5.equals((Object)byteString0));
      assertTrue(byteString5.equals((Object)byteString2));
      assertFalse(byteString5.equals((Object)byteString4));
      assertEquals(3, byteString5.size());
      
      boolean boolean0 = byteString5.equals("[hex=29e2dcfbb16f63bb0254df7585a15bb6fb5e927d]");
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byteString5.equals((Object)byteString3));
      assertFalse(byteString5.equals((Object)byteString1));
      assertTrue(byteString5.equals((Object)byteString0));
      assertTrue(byteString5.equals((Object)byteString2));
      assertFalse(byteString5.equals((Object)byteString4));
      assertEquals(3, byteString5.size());
      assertNotSame(byteString5, byteString2);
      assertNotSame(byteString5, byteString1);
      assertNotSame(byteString5, byteString4);
      assertNotSame(byteString5, byteString0);
      assertNotSame(byteString5, byteString3);
      assertFalse(boolean0);
      
      int int0 = byteString3.compareTo(byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString4));
      assertTrue(byteString0.equals((Object)byteString5));
      assertTrue(byteString0.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString5));
      assertFalse(byteString1.equals((Object)byteString4));
      assertFalse(byteString1.equals((Object)byteString3));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString4));
      assertTrue(byteString3.equals((Object)byteString2));
      assertTrue(byteString3.equals((Object)byteString5));
      assertTrue(byteString3.equals((Object)byteString0));
      assertEquals(3, byteString0.size());
      assertEquals(20, byteString1.size());
      assertEquals(3, byteString3.size());
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString5);
      assertNotSame(byteString0, byteString4);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString5);
      assertNotSame(byteString1, byteString4);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString5);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString4);
      assertEquals((-1), int0);
      
      boolean boolean1 = byteString3.endsWith(byteString4);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString4));
      assertTrue(byteString0.equals((Object)byteString5));
      assertTrue(byteString0.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString5));
      assertFalse(byteString1.equals((Object)byteString4));
      assertFalse(byteString1.equals((Object)byteString3));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString4));
      assertTrue(byteString3.equals((Object)byteString2));
      assertTrue(byteString3.equals((Object)byteString5));
      assertTrue(byteString3.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString5));
      assertFalse(byteString4.equals((Object)byteString2));
      assertTrue(boolean1 == boolean0);
      assertEquals(3, byteString0.size());
      assertEquals(20, byteString1.size());
      assertEquals(3, byteString3.size());
      assertEquals(32, byteString4.size());
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString5);
      assertNotSame(byteString0, byteString4);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString5);
      assertNotSame(byteString1, byteString4);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString5);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString4);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString1);
      assertNotSame(byteString4, byteString3);
      assertNotSame(byteString4, byteString5);
      assertNotSame(byteString4, byteString2);
      assertFalse(boolean1);
      
      ByteString byteString6 = byteString2.md5();
      assertNotNull(byteString6);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteString2.equals((Object)byteString4));
      assertTrue(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertTrue(byteString2.equals((Object)byteString3));
      assertTrue(byteString2.equals((Object)byteString5));
      assertFalse(byteString6.equals((Object)byteString1));
      assertFalse(byteString6.equals((Object)byteString3));
      assertFalse(byteString6.equals((Object)byteString0));
      assertFalse(byteString6.equals((Object)byteString5));
      assertFalse(byteString6.equals((Object)byteString2));
      assertFalse(byteString6.equals((Object)byteString4));
      assertEquals(3, byteString2.size());
      assertEquals(16, byteString6.size());
      assertNotSame(byteString2, byteString4);
      assertNotSame(byteString2, byteString5);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString6);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString6, byteString1);
      assertNotSame(byteString6, byteString3);
      assertNotSame(byteString6, byteString0);
      assertNotSame(byteString6, byteString5);
      assertNotSame(byteString6, byteString2);
      assertNotSame(byteString6, byteString4);
      
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      assertNotNull(byteBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteString0.equals((Object)byteString6));
      assertTrue(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString4));
      assertTrue(byteString0.equals((Object)byteString5));
      assertTrue(byteString0.equals((Object)byteString2));
      assertEquals(3, byteString0.size());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBufferR[pos=0 lim=3 cap=3]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.isReadOnly());
      assertEquals(3, byteBuffer0.remaining());
      assertEquals(3, byteBuffer0.capacity());
      assertEquals(3, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertNotSame(byteString0, byteString6);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString5);
      assertNotSame(byteString0, byteString4);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteString0.size());
      
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteString0.size());
      assertEquals(0, int0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      String string0 = byteString0.toString();
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteString0.size());
      assertEquals("[hex=888888]", string0);
      
      int int1 = byteString0.indexOf(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(int1 == int0);
      assertEquals(3, byteString0.size());
      assertEquals(0, int1);
      
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(2, int2);
      
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteString0.size());
      assertEquals(3, byteString1.size());
      assertSame(byteString0, byteString1);
      assertSame(byteString1, byteString0);
      
      String string1 = byteString0.string(charset0);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, byteString0.size());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertSame(byteString0, byteString1);
      assertEquals("\u0000\u0000\u0000", string1);
      
      ByteString byteString2 = ByteString.decodeBase64("Failed to close timed out socket ");
      assertNotNull(byteString2);
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(20, byteString2.size());
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      
      int int3 = byteString1.EMPTY.indexOf(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(3, byteString0.size());
      assertEquals(3, byteString1.size());
      assertSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString1, byteString2);
      assertSame(byteString1, byteString0);
      assertEquals((-1), int3);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      int int4 = byteString2.lastIndexOf(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals(20, byteString2.size());
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-1), int4);
      
      ByteString byteString3 = byteString0.sha1();
      assertNotNull(byteString3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString2));
      assertEquals(3, byteString0.size());
      assertEquals(20, byteString3.size());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString3);
      assertSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString2);
      
      int int5 = byteString3.compareTo(byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString3));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString2));
      assertEquals(3, byteString0.size());
      assertEquals(3, byteString1.size());
      assertEquals(20, byteString3.size());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString3);
      assertSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString1, byteString2);
      assertSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString2);
      assertEquals(1, int5);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Deflater deflater0 = new Deflater();
      assertNotNull(deflater0);
      assertTrue(deflater0.needsInput());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteString0.size());
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(3, byteString1.size());
      
      ByteString byteString2 = byteString1.hmacSha256(byteString0);
      assertNotNull(byteString2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byteString0.equals((Object)byteString1));
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertEquals(3, byteString0.size());
      assertEquals(3, byteString1.size());
      assertEquals(32, byteString2.size());
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      
      boolean boolean0 = byteString2.equals(byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteString0.equals((Object)byteString2));
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString2));
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertEquals(3, byteString0.size());
      assertEquals(3, byteString1.size());
      assertEquals(32, byteString2.size());
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteString0.size());
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(2, byteString1.size());
      
      boolean boolean0 = byteString0.equals(byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertTrue(byteString0.equals((Object)byteString1));
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(2, byteString0.size());
      assertEquals(2, byteString1.size());
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertTrue(boolean0);
      
      boolean boolean1 = byteString1.startsWith(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, byteString1.size());
      assertNotSame(byteString1, byteString0);
      assertTrue(boolean1);
      
      ByteString byteString2 = byteString0.toAsciiLowercase();
      assertNotNull(byteString2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertTrue(byteString0.equals((Object)byteString1));
      assertTrue(byteString2.equals((Object)byteString1));
      assertEquals(2, byteString0.size());
      assertEquals(2, byteString2.size());
      assertNotSame(byteString0, byteString1);
      assertSame(byteString0, byteString2);
      assertSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteString0.size());
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(2, byteString1.size());
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      GzipSink gzipSink0 = new GzipSink(buffer0);
      assertNotNull(gzipSink0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteString0);
      assertNotNull(bufferedSink0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertTrue(byteString0.equals((Object)byteString1));
      assertEquals(2, byteString0.size());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotSame(byteString0, byteString1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      
      HashingSink hashingSink0 = HashingSink.sha1(bufferedSink0);
      assertNotNull(hashingSink0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertTrue(byteString0.equals((Object)byteString1));
      assertEquals(2, byteString0.size());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotSame(byteString0, byteString1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      
      HashingSink hashingSink1 = HashingSink.hmacSha512(gzipSink0, byteString1);
      assertNotNull(hashingSink1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertEquals(2, byteString1.size());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotSame(byteString1, byteString0);
      assertNotSame(hashingSink1, hashingSink0);
      
      HashingSink hashingSink2 = HashingSink.sha256(hashingSink0);
      assertNotNull(hashingSink2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink2.equals((Object)hashingSink0));
      assertFalse(hashingSink2.equals((Object)hashingSink1));
      assertEquals(2, byteString0.size());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotSame(byteString0, byteString1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotSame(hashingSink0, hashingSink2);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink2, hashingSink0);
      assertNotSame(hashingSink2, hashingSink1);
      
      ByteString byteString2 = hashingSink2.hash();
      assertNotNull(byteString2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(hashingSink0.equals((Object)hashingSink2));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink2.equals((Object)hashingSink0));
      assertFalse(hashingSink2.equals((Object)hashingSink1));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(2, byteString0.size());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString2.size());
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotSame(hashingSink0, hashingSink2);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink2, hashingSink0);
      assertNotSame(hashingSink2, hashingSink1);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      
      String string0 = byteString2.toString();
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(byteString0.equals((Object)byteString2));
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(hashingSink0.equals((Object)hashingSink2));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink2.equals((Object)hashingSink0));
      assertFalse(hashingSink2.equals((Object)hashingSink1));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(2, byteString0.size());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(32, byteString2.size());
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotSame(hashingSink0, hashingSink2);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink2, hashingSink0);
      assertNotSame(hashingSink2, hashingSink1);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertEquals("[hex=83888888e8888888e8888888ee888e888888888888e8e38888e8ee8888888888]", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("HmacSHA256");
      assertNotNull(byteString0);
      assertEquals(7, byteString0.size());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("HmacSHA256", false);
      assertNotNull(mockFileOutputStream0);
      
      byteString0.write(mockFileOutputStream0);
      assertEquals(7, byteString0.size());
      
      ByteString byteString1 = ByteString.decodeHex("");
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(0, byteString1.size());
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("g#bl61Jx/]3'\"B k");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: g
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex(" E3#6x\"8%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit:  
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        ByteString.decodeHex("byteString == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: y
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteString0.size());
      
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteString0.size());
      assertEquals(0, int0);
      
      String string0 = byteString0.toString();
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteString0.size());
      assertEquals("[hex=888888]", string0);
      
      ByteString byteString1 = ByteString.decodeHex("");
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(0, byteString1.size());
      assertNotSame(byteString1, byteString0);
      
      String string1 = byteString0.toString();
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertTrue(string1.equals((Object)string0));
      assertEquals(3, byteString0.size());
      assertNotSame(byteString0, byteString1);
      assertEquals("[hex=888888]", string1);
      
      byte byte0 = ObjectStreamConstants.TC_REFERENCE;
      assertEquals((byte)113, byte0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      // Undeclared exception!
      try { 
        ByteString.read(mockFileInputStream0, (-880));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -880
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      
      ByteString byteString0 = ByteString.encodeString("p2UJr\u0004=g!nO+:,", charset0);
      assertNotNull(byteString0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, byteString0.size());
      
      // Undeclared exception!
      try { 
        ByteString.decodeHex("6JpmEYXd*Z)x<&v=53");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: J
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("HmacSHA256");
      assertNotNull(byteString0);
      assertEquals(7, byteString0.size());
      
      ByteString byteString1 = byteString0.sha1();
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(7, byteString0.size());
      assertEquals(20, byteString1.size());
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      String string0 = byteString1.base64Url();
      assertNotNull(string0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(7, byteString0.size());
      assertEquals(20, byteString1.size());
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals("D4eIW4KB4BBX5fEZAZTX5kPtgUY=", string0);
      
      String string1 = byteString1.toString();
      assertNotNull(string1);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, byteString0.size());
      assertEquals(20, byteString1.size());
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals("[hex=88888888888888888888888e88e8888883888888]", string1);
      
      // Undeclared exception!
      try { 
        ByteString.decodeHex("D4eIW4KB4BBX5fEZAZTX5kPtgUY=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: I
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.SC_EXTERNALIZABLE;
      assertEquals((byte)4, byte0);
      
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, (-1755));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteString0.size());
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(1, byteString1.size());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = byteString1.equals(pipedInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(1, byteString1.size());
      assertEquals(0, pipedInputStream0.available());
      assertNotSame(byteString1, byteString0);
      assertFalse(boolean0);
      
      ByteString byteString2 = byteString0.hmacSha512(byteString1);
      assertNotNull(byteString2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(byteString0.equals((Object)byteString1));
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(1, byteString0.size());
      assertEquals(1, byteString1.size());
      assertEquals(64, byteString2.size());
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      ByteString byteString0 = ByteString.encodeString("source exhausted prematurely", charset0);
      assertNotNull(byteString0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(28, byteString0.size());
      
      // Undeclared exception!
      try { 
        ByteString.decodeHex("source exhausted prematurely");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: s
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteString0.size());
      
      ByteString byteString1 = byteString0.sha1();
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(3, byteString0.size());
      assertEquals(20, byteString1.size());
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      byteString1.EMPTY.hashCode();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(3, byteString0.size());
      assertEquals(20, byteString1.size());
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      // Undeclared exception!
      try { 
        byteString0.EMPTY.write((Buffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "HmacSHA256";
      ByteString byteString0 = ByteString.decodeBase64("HmacSHA256");
      assertNotNull(byteString0);
      assertEquals(7, byteString0.size());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("HmacSHA256", false);
      assertNotNull(mockFileOutputStream0);
      
      Pipe pipe0 = new Pipe(10000L);
      assertNotNull(pipe0);
      
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      assertNotNull(pipe_PipeSource0);
      
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      assertNotNull(hashingSource0);
      
      ByteString byteString1 = hashingSource0.hash();
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(20, byteString1.size());
      assertNotSame(byteString1, byteString0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)14;
      byte byte0 = (byte)18;
      byteArray0[4] = (byte)18;
      byteString0.EMPTY.hashCode = (int) (byte)0;
      assertEquals(7, byteString0.size());
      
      boolean boolean0 = byteString1.startsWith(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)55, (byte)0, (byte)14, (byte)18}, byteArray0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(20, byteString1.size());
      assertNotSame(byteString1, byteString0);
      assertFalse(boolean0);
      
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("HmacSHA256");
      assertNotNull(mockFileOutputStream1);
      assertFalse(mockFileOutputStream1.equals((Object)mockFileOutputStream0));
      
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      
      ByteString byteString0 = ByteString.decodeHex("");
      assertNotNull(byteString0);
      assertEquals(0, byteString0.size());
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSink0.buffer);
      assertNotNull(hashingSource0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      
      HashingSource hashingSource1 = HashingSource.sha1(realBufferedSink0.buffer);
      assertNotNull(hashingSource1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource1, hashingSource0);
      
      ByteString byteString1 = hashingSource0.hash();
      assertNotNull(byteString1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString1.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString1, byteString0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)6;
      ByteString byteString2 = new ByteString(byteArray0);
      assertNotNull(byteString2);
      assertArrayEquals(new byte[] {(byte) (-30), (byte)6}, byteArray0);
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertEquals(2, byteString2.size());
      
      int int1 = byteString2.lastIndexOf(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-30), (byte)6}, byteArray0);
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(int1 == int0);
      assertEquals(2, byteString2.size());
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertEquals(0, int1);
      
      int int2 = byteString0.compareTo(byteString2);
      assertArrayEquals(new byte[] {(byte) (-30), (byte)6}, byteArray0);
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals(2, byteString2.size());
      assertEquals(0, byteString0.size());
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Pipe pipe0 = new Pipe(1444L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0);
      assertNotNull(bufferedInputStream0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      try { 
        ByteString.read(inputStream0, 2);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      assertNotNull(byteString0);
      assertEquals(0, byteString0.size());
      
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, (-988), 20);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteString0.size());
      
      Pipe pipe0 = new Pipe(2945L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      assertNotNull(hashingSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString1 = hashingSink0.hash();
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(64, byteString1.size());
      assertNotSame(byteString1, byteString0);
      
      String string0 = byteString1.toString();
      assertNotNull(string0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(64, byteString1.size());
      assertNotSame(byteString1, byteString0);
      assertEquals("[hex=88838838888888888888888888888888888888888888888883888e8883888e8888888838888888888883888888888888838e388888888888883838888e888838]", string0);
      
      // Undeclared exception!
      try { 
        ByteString.encodeString("[hex=cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e]", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Pipe pipe0 = new Pipe(1444L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0);
      assertNotNull(bufferedInputStream0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      assertNotNull(hashingSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertNotNull(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(64, byteString0.size());
      
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(64, byteString0.size());
      assertEquals(64, byteString1.size());
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      String string0 = byteString0.toString();
      assertNotNull(string0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(64, byteString0.size());
      assertNotSame(byteString0, byteString1);
      assertEquals("[hex=88838838888888888888888888888888888888888888888883888e8883888e8888888838888888888883888888888888838e388888888888883838888e888838]", string0);
      
      String string1 = byteString1.base64Url();
      assertNotNull(string1);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(string1.equals((Object)string0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(64, byteString0.size());
      assertEquals(64, byteString1.size());
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals("z4PhNX7vuL3xVChQ1k2AB9Yg5AULVxXcg_SpIdNM6c5H0NE8XYXysP-DGNKHfuwvQ7kxvUdBWoGlODJa-SfaPg==", string1);
      
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteString0.size());
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertTrue(int1 == int0);
      assertEquals(2, int1);
      
      ByteString byteString1 = byteString0.substring(2);
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(2, byteString0.size());
      assertEquals(0, byteString1.size());
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = byteString1.toString();
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(2, byteString0.size());
      assertEquals(0, byteString1.size());
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteString0.size());
      
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteString0.size());
      assertEquals(0, int0);
      
      int int1 = ObjectStreamConstants.baseWireHandle;
      assertFalse(int1 == int0);
      assertEquals(8257536, int1);
      
      ByteString byteString1 = byteString0.EMPTY.substring(0);
      assertNotNull(byteString1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(2, byteString0.size());
      assertEquals(0, byteString1.size());
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      assertNotNull(pushbackInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 18);
      assertNotNull(bufferedInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      assertNotNull(bufferedInputStream1);
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertFalse(fileDescriptor0.valid());
      
      ByteString byteString2 = ByteString.read(mockFileInputStream0, 0);
      assertNotNull(byteString2);
      assertFalse(byteString2.equals((Object)byteString0));
      assertTrue(byteString2.equals((Object)byteString1));
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, byteString2.size());
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Pipe pipe0 = new Pipe(112L);
      assertNotNull(pipe0);
      
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      assertNotNull(byteString0);
      assertEquals(0, byteString0.size());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)62;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)62}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      try { 
        ByteString.read(byteArrayInputStream0, (byte)62);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteString0.size());
      
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteString0.size());
      assertEquals(0, int0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      ByteString byteString1 = realBufferedSource0.readByteString();
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString1.size());
      assertNotSame(byteString1, byteString0);
      
      String string0 = byteString1.toString();
      assertNotNull(string0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString1.size());
      assertNotSame(byteString1, byteString0);
      assertEquals("[size=0]", string0);
      
      int int1 = byteString0.indexOf(byteArray0, 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertTrue(int1 == int0);
      assertEquals(2, byteString0.size());
      assertNotSame(byteString0, byteString1);
      assertEquals(0, int1);
      
      String string1 = byteString1.base64Url();
      assertNotNull(string1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString1.size());
      assertNotSame(byteString1, byteString0);
      assertEquals("", string1);
      
      ByteString byteString2 = byteString0.substring(0, 0);
      assertNotNull(byteString2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertTrue(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(2, byteString0.size());
      assertEquals(0, byteString2.size());
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
  }
}
