/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 05:02:03 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.removeFirst();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.toDiagonalMatrix();
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Integer integer0 = new Integer((-1512));
      Byte byte0 = new Byte((byte) (-85));
      hashMap0.put(integer0, byte0);
      // Undeclared exception!
      try { 
        SparseVector.fromMap(hashMap0, 509);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      compressedVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      HashMap<Integer, Long> hashMap1 = new HashMap<Integer, Long>();
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-191));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -191
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1726.555;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1208.2603;
      doubleArray0[3] = (-102.54187448929);
      doubleArray0[4] = (-3811.04);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.min();
      int int0 = 0;
      SparseVector.zero(0, 0);
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("kb1$uP?fwz7]2!S .|8");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 16;
      doubleArray0[5] = (double) 16;
      doubleArray0[3] = (double) 16;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 16;
      doubleArray0[6] = (double) 16;
      int[] intArray0 = new int[6];
      intArray0[0] = 16;
      intArray0[1] = 2;
      intArray0[2] = 16;
      intArray0[3] = 2;
      intArray0[4] = 16;
      intArray0[5] = 2;
      CompressedVector compressedVector0 = new CompressedVector(16, 2, doubleArray0, intArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2, vectorFunction0);
      assertArrayEquals(new double[] {0.0, 2.0, 0.0, 16.0, 2.0, 16.0, 16.0}, doubleArray0, 0.01);
      assertEquals(0.125, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1782.9010410758294;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(8, vectorFunction0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.max();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)8).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(8, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1338.200222);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      compressedVector0.is(vectorPredicate0);
      // Undeclared exception!
      try { 
        compressedVector0.eachNonZero((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1);
      compressedVector0.toDiagonalMatrix();
      compressedVector0.setAll(1);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      compressedVector0.non(vectorPredicate0);
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(758, 1119.5453306432);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '758' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertNull(compressedVector1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-2371.27647);
      doubleArray0[2] = 2185.90603054435;
      doubleArray0[3] = (-1704.3938125);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2044.6002);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.toString();
      String string0 = "SgO%0%";
      compressedVector0.isZeroAt(0);
      // Undeclared exception!
      try { 
        Vector.fromMatrixMarket("SgO%0%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(1);
      hashMap0.put(integer0, integer0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2493);
      compressedVector0.nonZeroAt((-427));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2493, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 32);
      boolean boolean0 = compressedVector0.nonZeroAt(32);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(32, compressedVector0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random(827, (double) 827, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 800.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4);
      mockRandom0.nextLong();
      mockRandom0.nextBoolean();
      CompressedVector compressedVector0 = CompressedVector.random(4, 0.0, (Random) mockRandom0);
      compressedVector0.min();
      compressedVector0.toBinary();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      Vector.random(4, mockRandom0);
      compressedVector0.each(vectorProcedure0);
      // Undeclared exception!
      try { 
        compressedVector0.set(4, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '4' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(1, (double) 1, (Random) mockRandom0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 8;
      CompressedVector compressedVector0 = CompressedVector.zero(8);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      compressedVector0.blankOfLength(8);
      int int1 = 1171;
      compressedVector0.blankOfLength(1171);
      compressedVector0.setAll(Double.POSITIVE_INFINITY);
      CompressedVector compressedVector1 = CompressedVector.zero(1171);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0, (double)8, (-726.85842), (-726.85842), (double)1171).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.transform(vectorFunction0);
      // Undeclared exception!
      try { 
        compressedVector1.slice((-2705), 1171);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-2705' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4);
      mockRandom0.nextLong();
      mockRandom0.nextBoolean();
      // Undeclared exception!
      try { 
        CompressedVector.random(4, (-0.48779089135961556), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.toDiagonalMatrix();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(2100, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2111, 2111);
      Vector vector0 = compressedVector0.copyOfLength(2111);
      compressedVector0.manhattanNorm();
      compressedVector0.toDiagonalMatrix();
      compressedVector0.swapElements(760, (-1660));
      compressedVector0.innerProduct(vector0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1509, vectorFunction0);
      String string0 = null;
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2044.6002);
      doubleArray0[1] = (-2044.6002);
      CompressedVector.fromArray(doubleArray0);
      int int0 = 6;
      compressedVector0.isZeroAt(6);
      String string0 = "+$4T}<x-$?e`";
      // Undeclared exception!
      try { 
        Vector.fromMatrixMarket("+$4T}<x-$?e`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)22;
      Byte byte0 = new Byte((byte)22);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Integer integer0 = new Integer(9);
      Byte byte1 = new Byte((byte)22);
      hashMap0.put(integer0, byte1);
      SparseVector.fromMap(hashMap0, (byte)22);
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(16, (byte)22);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 22.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4);
      Integer integer0 = new Integer(4);
      mockRandom0.nextBoolean();
      CompressedVector compressedVector0 = CompressedVector.random(4, 0.0, (Random) mockRandom0);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 3613.584;
      doubleArray0[3] = (double) 4;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      compressedVector1.mkString(numberFormat0);
      compressedVector0.manhattanNorm();
      compressedVector1.product();
      // Undeclared exception!
      try { 
        compressedVector0.copyOfLength((-164));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -164
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(8);
      hashMap0.put(integer0, integer0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 758);
      Integer integer1 = new Integer(758);
      compressedVector0.swapElements(8, 8);
      CompressedVector.zero(581);
      compressedVector0.set(8, 758);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(758, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)37;
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(0L);
      mockRandom1.nextDouble();
      CompressedVector compressedVector0 = new CompressedVector(2946);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.transform(vectorFunction0);
      compressedVector0.toBinary();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      compressedVector0.set((byte)37, (byte)22);
      compressedVector0.toBinary();
      compressedVector0.copyOfLength((byte)22);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = (-1983.8138394112);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.blankOfLength(2504);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-1285), vectorFunction0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-2371.27647);
      doubleArray0[2] = 2185.90603054435;
      doubleArray0[5] = (-2044.6002);
      doubleArray0[7] = (-1.5295541893808688);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      String string0 = "SgO%0%";
      compressedVector0.isZeroAt(0);
      // Undeclared exception!
      try { 
        Vector.fromMatrixMarket("SgO%0%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2111, 2111);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2111;
      doubleArray0[1] = (-1983.8138394112);
      doubleArray0[2] = (-670.0);
      doubleArray0[3] = (double) 760;
      doubleArray0[4] = (double) (-1660);
      doubleArray0[5] = 100.0;
      doubleArray0[6] = (double) 2111;
      doubleArray0[7] = (-1983.8138394112);
      CompressedVector.fromArray(doubleArray0);
      int int0 = 2504;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)16;
      byteArray0[0] = (byte)16;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(10);
      hashMap0.put(integer0, integer0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 758);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(758, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(8);
      Integer.max(772, 772);
      Integer.toUnsignedLong((-534));
      hashMap0.put(integer0, integer0);
      int int0 = 2884;
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2884);
      Integer integer1 = new Integer(2884);
      Integer integer2 = new Integer(2884);
      Integer.max(613, 13);
      int int1 = 2092;
      compressedVector0.swapElements(2092, (-2414));
      // Undeclared exception!
      try { 
        compressedVector0.innerProduct((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2111, 2111);
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)16;
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      compressedVector1.blankOfLength(2504);
      compressedVector0.setAll(2.0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(10);
      hashMap0.put(integer0, integer0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2455);
      compressedVector0.swapElements((-1), (-1));
      Vector vector0 = compressedVector0.blankOfLength(2455);
      assertEquals(2455, vector0.length());
      assertFalse(vector0.equals((Object)compressedVector0));
      
      compressedVector0.getOrElse(10, 10);
      assertEquals(2455, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(8);
      Integer.toUnsignedLong((-534));
      hashMap0.put(integer0, integer0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2884);
      Integer integer1 = new Integer(2884);
      Integer integer2 = new Integer(2884);
      Integer.max(613, 13);
      Integer.divideUnsigned(2681, 613);
      Integer.divideUnsigned(8, 8);
      hashMap0.put(integer1, integer2);
      compressedVector0.divide(120);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      compressedVector0.sliceLeft(2884);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(16);
      Integer.max(772, 772);
      Integer.toUnsignedLong((-534));
      hashMap0.put(integer0, integer0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2884);
      Integer integer1 = new Integer(2884);
      Integer integer2 = new Integer(2884);
      compressedVector0.toDiagonalMatrix();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-5385), 731);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(10);
      hashMap0.put(integer0, integer0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2455);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(3, 445);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 8;
      Integer integer0 = new Integer(8);
      Integer.toUnsignedLong(741);
      hashMap0.put(integer0, integer0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2884);
      Integer integer1 = new Integer(2884);
      compressedVector0.toDiagonalMatrix();
      int int1 = (-1173);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(8, (-1173));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(10);
      hashMap0.put(integer0, integer0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2493);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(10, 2493);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(10);
      hashMap0.put(integer0, integer0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2451);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(10, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(10);
      Integer integer1 = new Integer(2);
      hashMap0.put(integer1, integer1);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 10);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2, vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      CompressedVector compressedVector1 = CompressedVector.fromCollection(linkedList0);
      assertEquals(0, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(8);
      Integer.toUnsignedString(8);
      Integer integer1 = new Integer((-1224));
      hashMap0.put(integer0, integer1);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 758);
      Integer integer2 = new Integer(758);
      compressedVector0.toColumnMatrix();
      compressedVector0.toDiagonalMatrix();
      compressedVector0.swapElements(741, 741);
      assertEquals(758, compressedVector0.length());
      
      Double double0 = new Double((-316.9652933));
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      CompressedVector.zero(2884, 8);
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 1140);
      compressedVector1.set(8, 0.0);
      assertEquals(0, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(8);
      Integer.toUnsignedLong(741);
      hashMap0.put(integer0, integer0);
      int int0 = 2884;
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2884);
      Integer integer1 = new Integer(741);
      int int1 = 2681;
      Integer.divideUnsigned(1, 1);
      Integer.divideUnsigned(1, (-865));
      Integer integer2 = new Integer((-865));
      hashMap0.put(integer2, integer0);
      compressedVector0.divide(2884);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(8, vectorFunction0);
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(852, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 498;
      intArray0[1] = 498;
      intArray0[2] = 2051;
      CompressedVector compressedVector0 = new CompressedVector(498, 2051, (double[]) null, intArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1614.863)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.update(vectorFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1856);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.copyOfLength(1856);
      int int0 = (-849);
      CompressedVector compressedVector1 = CompressedVector.zero(3689);
      int int1 = 256;
      compressedVector1.copyOfLength(1856);
      compressedVector1.iterator();
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("~v>)*Pl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(10);
      hashMap0.put(integer0, integer0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2455);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(1, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(9);
      Integer integer1 = new Integer(9);
      hashMap0.put(integer0, integer1);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2412);
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      compressedVector0.subtract((Vector) sparseVector0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)2;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(8);
      hashMap0.put(integer0, integer0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 758);
      assertEquals(758, compressedVector0.length());
      
      Integer integer1 = new Integer(758);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      CompressedVector compressedVector1 = new CompressedVector(758);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)8, (double)758, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      CompressedVector compressedVector2 = (CompressedVector)compressedVector1.transform(vectorFunction0);
      compressedVector2.hadamardProduct(compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1.0, compressedVector2.density(), 0.01);
      
      compressedVector0.set(8, (-1214));
      assertEquals(1, compressedVector0.cardinality());
      
      compressedVector1.swapElements(8, 758);
      assertFalse(compressedVector1.equals((Object)compressedVector2));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 32);
      assertEquals(32, compressedVector0.length());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      compressedVector1.swapElements(1, 0);
      assertEquals(0.5, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(8);
      hashMap0.put(integer0, integer0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 758);
      Integer integer1 = new Integer(758);
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector0.toDiagonalMatrix();
      assertEquals(1, cRSMatrix0.cardinality());
      
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      CompressedVector compressedVector1 = new CompressedVector(758);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, (double)(-1214), (double)8).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      CompressedVector compressedVector2 = (CompressedVector)compressedVector1.transform(vectorFunction0);
      compressedVector0.set(8, (-1214));
      assertEquals(1, compressedVector0.cardinality());
      
      compressedVector2.swapElements(8, 758);
      assertEquals(0.996042216358839, compressedVector2.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2071, 2071);
      CompressedVector compressedVector1 = new CompressedVector(2071, 2071);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2299.738095535095, (double)2071, 2299.738095535095, (double)2071, (-2263.1155115)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      Double double0 = new Double(2071);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.nextDouble();
      CompressedVector compressedVector2 = new CompressedVector(8);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-1674), 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2071, 2071);
      CompressedVector compressedVector1 = CompressedVector.zero(2071);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2071, (double)2071, (double)2071, (-40.893981648603), (double)2071).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-40.893981648603), (double)2071, (-40.893981648603), 100.0, (-40.893981648603)).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction1);
      double double0 = new Double(2071);
      compressedVector1.swapElements((-4175), (-4175));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2071, 2071);
      CompressedVector.zero(2071);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2071, (double)2071, (double)2071, (-40.893981648603), (double)2071).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(991.364504615, (-40.893981648603), 100.0, 1.0, 991.364504615).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction1);
      // Undeclared exception!
      try { 
        compressedVector0.get((-2377));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-2377' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(8);
      hashMap0.put(integer0, integer0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 758);
      MockRandom mockRandom0 = new MockRandom(758);
      mockRandom0.nextFloat();
      mockRandom0.nextDouble();
      CompressedVector compressedVector1 = new CompressedVector(2020);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.transform(vectorFunction0);
      compressedVector0.set(5, 2828.778697632);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(5, 758);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      Vector vector0 = compressedVector0.divide(Double.NEGATIVE_INFINITY);
      compressedVector0.swapElements((-1622), 2);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Vector.fromMap(hashMap0, 2157);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      vector0.swapElements((-4109), (-25));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1612.0);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = (-1747.7413960571914);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      Vector vector0 = compressedVector0.divide(Double.NEGATIVE_INFINITY);
      compressedVector0.swapElements((-1605), 2);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      vector0.each(vectorProcedure0);
      compressedVector0.swapElements((-1605), (-1847));
  }
}
