/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:52:48 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Canvas;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Label;
import java.awt.Panel;
import java.awt.event.ComponentListener;
import java.awt.event.InputMethodListener;
import java.awt.image.ImageObserver;
import java.beans.EventSetDescriptor;
import java.io.File;
import java.io.IOException;
import java.text.AttributedCharacterIterator;
import java.util.Locale;
import javax.swing.JComponent;
import javax.swing.JScrollPane;
import javax.swing.JViewport;
import javax.swing.ScrollPaneConstants;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.associations.Apriori;
import weka.associations.FilteredAssociator;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SGDText;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.clusterers.HierarchicalClusterer;
import weka.core.Capabilities;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.CSVSaver;
import weka.core.converters.MatlabLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.KDTree;
import weka.core.tokenizers.NGramTokenizer;
import weka.filters.AllFilter;
import weka.filters.supervised.attribute.AttributeSelection;
import weka.filters.supervised.attribute.Discretize;
import weka.filters.supervised.attribute.NominalToBinary;
import weka.filters.supervised.instance.Resample;
import weka.filters.supervised.instance.StratifiedRemoveFolds;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.Logger;
import weka.gui.beans.Appender;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.ImageSaver;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceStreamToBatchMaker;
import weka.gui.beans.ModelPerformanceChart;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.Sorter;
import weka.gui.beans.StripChart;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TestSetMaker;
import weka.gui.beans.TextViewer;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetListener;
import weka.gui.beans.TrainingSetMaker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      String string1 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Filter filter0 = new Filter();
      TestInstances testInstances0 = new TestInstances();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(testInstances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.core.TestInstances : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      boolean boolean0 = filter0.eventGeneratable("v|1x&, *le]93QC'43");
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      filter0.removeInstanceListener(instanceStreamToBatchMaker0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.removeTrainingSetListener((TrainingSetListener) null);
      filter0.addTrainingSetListener((TrainingSetListener) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getComponentListeners();
      filter0.getMouseMotionListeners();
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getWrappedAlgorithm();
      Saver saver0 = new Saver();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Instances instances0 = substringLabeler0.m_outputStructure;
      TestSetEvent testSetEvent0 = new TestSetEvent(saver0, (Instances) null);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getVisual();
      filter0.isDoubleBuffered();
      filter0.isBusy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextViewer textViewer0 = new TextViewer();
      textViewer0.transferFocusBackward();
      filter0.connectionNotification("weka/gui/beans/icons/", textViewer0);
      filter0.setCustomName("weka/gui/beans/icons/");
      filter0.stop();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent1 = flowByExpression0.m_ie;
      assertNotSame(instanceEvent1, instanceEvent0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      BasicComboBoxEditor basicComboBoxEditor0 = new BasicComboBoxEditor();
      Border border0 = LineBorder.createBlackLineBorder();
      filter0.connectionNotification("dataSet", border0);
      AttributeSelection attributeSelection0 = new AttributeSelection();
      filter0.stop();
      filter0.connectionAllowed("v|1x&, *le]93QC'43");
      Character character0 = new Character('U');
      DefaultEditorKit.CopyAction defaultEditorKit_CopyAction0 = new DefaultEditorKit.CopyAction();
      JComponent.getDefaultLocale();
      Sorter sorter0 = new Sorter();
      sorter0.getConnectedFormat();
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      KDTree kDTree0 = new KDTree((Instances) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      // Undeclared exception!
      try { 
        textDirectoryLoader0.getNextInstance((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.converters.TextDirectoryLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      Panel panel0 = new Panel();
      Appender appender0 = new Appender();
      Instances instances0 = appender0.m_completeHeader;
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(panel0, (Instances) null);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.getSize();
      trainTestSplitMaker0.requestFocusInWindow();
      filter0.connectionNotification("dataSet", trainTestSplitMaker0);
      filter0.getVetoableChangeListeners();
      boolean boolean0 = filter0.connectionAllowed("dataSet");
      assertFalse(boolean0);
      
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
      Apriori apriori0 = new Apriori();
      apriori0.getInstancesOnlyClass();
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      Saver saver0 = new Saver();
      DataSetEvent dataSetEvent0 = new DataSetEvent(saver0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Filter filter0 = new Filter();
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte) (-106);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      filter0.setWrappedAlgorithm(stratifiedRemoveFolds0);
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.addTrainingSetListener(trainTestSplitMaker0);
      assertEquals("StratifiedRemoveFolds", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ComponentOrientation componentOrientation0 = ComponentOrientation.LEFT_TO_RIGHT;
      ComponentOrientation componentOrientation1 = ComponentOrientation.getOrientation(locale0);
      locale0.getDisplayCountry(locale0);
      filter0.applyComponentOrientation(componentOrientation0);
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      filter0.setLog(logPanel0);
      filter0.getVisual();
      filter0.getFocusListeners();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      InstanceEvent instanceEvent0 = new InstanceEvent(componentOrientation1);
      filter0.acceptInstance(instanceEvent0);
      Appender appender0 = new Appender();
      filter0.addTestSetListener(appender0);
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      weka.filters.Filter filter1 = filteredAssociator0.getFilter();
      filter0.setFilter(filter1);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Filter filter0 = new Filter();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.connectionNotification("dataSet", trainTestSplitMaker0);
      filter0.getVetoableChangeListeners();
      boolean boolean0 = filter0.connectionAllowed("r+F`[~i$<M8{%`C3SJY");
      assertTrue(boolean0);
      
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      SystemInUtil.addInputLine("FY0XLOo'X4S 5)d");
      filter0.removeDataSourceListener(trainTestSplitMaker0);
      filter0.disconnectionNotification("r+F`[~i$<M8{%`C3SJY", globalInfoJavadoc0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getVisual();
      TextViewer textViewer0 = new TextViewer();
      filter0.connectionNotification("weka/gui/beans/icons/", textViewer0);
      boolean boolean0 = textViewer0.m_design;
      filter0.eventGeneratable("weka/gui/beans/icons/");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Sorter sorter0 = new Sorter();
      sorter0.getBorder();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      trainTestSplitMaker0.setVisible(false);
      filter0.connectionNotification("weka/gui/beans/icons/", textViewer0);
      trainTestSplitMaker0.add((Component) filter0);
      AttributeSelection attributeSelection0 = new AttributeSelection();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      filter0.stop();
      filter0.connectionAllowed("Z");
      JScrollPane jScrollPane0 = new JScrollPane(filter0);
      JScrollPane jScrollPane1 = null;
      try {
        jScrollPane1 = new JScrollPane(trainTestSplitMaker0, (-473), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid verticalScrollBarPolicy
         //
         verifyException("javax.swing.JScrollPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setCharSet("@data");
      textDirectoryLoader0.getRevision();
      System.setCurrentTimeMillis(2843);
      Filter filter0 = new Filter();
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, instances0, 2843, 2843, 2843, 2843);
      testSetEvent0.m_maxRunNumber = 2843;
      filter0.acceptTestSet(testSetEvent0);
      Appender appender0 = new Appender();
      filter0.addInstanceListener(appender0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      Resample resample0 = new Resample();
      filter0.setFilter(resample0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      Cursor cursor0 = logPanel0.getCursor();
      logPanel0.isOpaque();
      filter0.setLog(logPanel0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      filter0.getFocusListeners();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      ComponentOrientation componentOrientation0 = ComponentOrientation.RIGHT_TO_LEFT;
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      filter0.removeInputMethodListener((InputMethodListener) null);
      filter0.acceptInstance(instanceEvent0);
      instanceEvent0.setStatus(2);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      flowByExpression0.getCursor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DataSetEvent dataSetEvent0 = new DataSetEvent(cursor0, (Instances) null);
      flowByExpression0.m_indexOfFalseStep = 1199;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      filter0.acceptDataSet(dataSetEvent0);
      String string0 = "T:bBdVgxec_-Yx,";
      // Undeclared exception!
      try { 
        filter0.performRequest("T:bBdVgxec_-Yx,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // T:bBdVgxec_-Yx, not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getColorModel();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getRevision();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, instances0, 2843, 2843);
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.addConfigurationListener(configurationListener0);
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      System.setCurrentTimeMillis(2843);
      DataSetEvent dataSetEvent0 = new DataSetEvent(trainingSetEvent0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getRevision();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, instances0, 2843, (-1377));
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.addConfigurationListener(configurationListener0);
      filter0.getCustomName();
      System.setCurrentTimeMillis(2843);
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      BeanVisual beanVisual0 = modelPerformanceChart0.m_visual;
      filter0.setVisual(beanVisual0);
      assertEquals("ModelPerformanceChart", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getCustomName();
      String string0 = ScrollPaneConstants.VERTICAL_SCROLLBAR_POLICY;
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Filter filter0 = new Filter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.addDataSourceListener(flowByExpression0);
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      AttributeSelection attributeSelection0 = new AttributeSelection();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      AllFilter allFilter0 = new AllFilter();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      DataSetEvent dataSetEvent0 = new DataSetEvent(attributeSelection0, instances0);
      SystemInUtil.addInputLine((String) null);
      SGDText sGDText0 = new SGDText();
      attributeSelection0.getCapabilities();
      substringReplacer0.setComponentZOrder(filter0, 0);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.disconnectionNotification("f3", substringReplacer0);
      weka.filters.Filter filter1 = filter0.getFilter();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter1.isOutputFormatDefined());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      TextViewer textViewer0 = new TextViewer();
      Discretize discretize0 = new Discretize();
      filter0.setFilter(discretize0);
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      logPanel0.getGraphics();
      filter0.setLog(logPanel0);
      filter0.getFocusListeners();
      ComponentOrientation componentOrientation0 = ComponentOrientation.UNKNOWN;
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      InstanceEvent instanceEvent0 = new InstanceEvent(nominalToBinary0);
      instanceEvent0.setStatus(1459);
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent1 = appender0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.disconnectionNotification("g9,u\"~Bx1b $", (Object) null);
      filter0.setLog(logPanel0);
      assertEquals("Discretize", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.eventGeneratable("configuration");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      logPanel0.getGraphics();
      filter0.setLog(logPanel0);
      Label label0 = null;
      try {
        label0 = new Label("configuration");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.eventGeneratable("configuration");
      filter0.enumerateRequests();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      filter0.getInputContext();
      Locale locale0 = Locale.ITALY;
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      JComponent.getDefaultLocale();
      Sorter sorter0 = new Sorter();
      sorter0.getConnectedFormat();
      filter0.addInstanceListener(sorter0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      JViewport jViewport0 = new JViewport();
      jViewport0.getInsets();
      filter0.getInsets();
      PredictionAppender predictionAppender1 = new PredictionAppender();
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        filter0.notifyInstanceListeners((InstanceEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Sorter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      TestSetMaker testSetMaker0 = new TestSetMaker();
      testSetMaker0.getBaselineResizeBehavior();
      testSetMaker0.getColorModel();
      instanceStreamToBatchMaker0.disconnectionNotification("twOve", testSetMaker0);
      filter0.disconnectionNotification("twOve", instanceStreamToBatchMaker0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      ImageSaver imageSaver0 = new ImageSaver();
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      InstanceEvent instanceEvent0 = new InstanceEvent("twOve");
      DataSetEvent dataSetEvent0 = new DataSetEvent(textDirectoryLoader0, instances0);
      filter0.acceptInstance(instanceEvent0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/weka.log");
      JScrollPane jScrollPane0 = new JScrollPane();
      jScrollPane0.getRowHeader();
      filter0.isBusy();
      filter0.setToolTipText("@relation");
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      filter0.addComponentListener((ComponentListener) null);
      filter0.addInstanceListener(flowByExpression0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".arff");
      filter0.notifyInstanceListeners(instanceEvent0);
      StripChart stripChart0 = null;
      try {
        stripChart0 = new StripChart();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.StripChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = "can't process streamed instances; can't continue";
      filter0.checkImage((Image) null, (ImageObserver) filter0);
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      filter0.setFilter(nominalToBinary0);
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      logPanel0.getGraphics();
      logPanel0.isDoubleBuffered();
      FileSystemHandling.shouldAllThrowIOExceptions();
      filter0.setLog(logPanel0);
      ComponentOrientation componentOrientation0 = ComponentOrientation.UNKNOWN;
      NominalToBinary nominalToBinary1 = new NominalToBinary();
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0);
      SparseInstance sparseInstance0 = new SparseInstance(684);
      instanceEvent0.setInstance(sparseInstance0);
      filter0.acceptInstance(instanceEvent0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      CSVSaver cSVSaver0 = new CSVSaver();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      cSVSaver0.retrieveFile();
      try { 
        matlabLoader0.setSource((File) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source file object is null!
         //
         verifyException("weka.core.converters.AbstractFileLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/weka.log");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "uSjB(](<]#");
      Resample resample0 = new Resample();
      FileSystemHandling.shouldAllThrowIOExceptions();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      logPanel0.getCursor();
      logPanel0.isOpaque();
      filter0.setLog((Logger) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      filter0.getFocusListeners();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      ComponentOrientation componentOrientation0 = ComponentOrientation.RIGHT_TO_LEFT;
      InstanceEvent instanceEvent0 = new InstanceEvent(resample0);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      filter0.acceptInstance(instanceEvent0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DataSetEvent dataSetEvent0 = new DataSetEvent("- ", (Instances) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      filter0.acceptDataSet(dataSetEvent0);
      filter0.getFilter();
      filter0.removeTestSetListener(flowByExpression0);
      filter0.setFilter(resample0);
      // Undeclared exception!
      try { 
        filter0.performRequest("uSjB(](<]#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // uSjB(](<]# not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Filter filter0 = new Filter();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.getSize();
      filter0.connectionNotification("dataSet", trainTestSplitMaker0);
      filter0.getVetoableChangeListeners();
      filter0.connectionAllowed("r+F`[~i$<M8{%`C3SJY");
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      filter0.eventGeneratable("dataSet");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      PredictionAppender predictionAppender1 = new PredictionAppender();
      TestSetEvent testSetEvent0 = new TestSetEvent(textDirectoryLoader0, (Instances) null, 0, 0);
      filter0.acceptTestSet(testSetEvent0);
      filter0.enumerateRequests();
      filter0.acceptDataSet((DataSetEvent) null);
      AllFilter allFilter0 = new AllFilter();
      weka.filters.Filter filter1 = weka.filters.Filter.makeCopy(allFilter0);
      filter0.setFilter(filter1);
      filter0.acceptDataSet((DataSetEvent) null);
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.getSize();
      trainTestSplitMaker0.requestFocusInWindow();
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      SGDText sGDText0 = new SGDText();
      File file0 = sGDText0.getStopwords();
      SGD sGD0 = new SGD();
      SelectedTag selectedTag0 = sGD0.getLossFunction();
      sGDText0.setLossFunction(selectedTag0);
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      attributeSelectedClassifier0.getCapabilities();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setSource(file0);
      Filter filter1 = new Filter();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      Filter filter2 = new Filter();
      Appender appender0 = new Appender();
      filter0.addTestSetListener(appender0);
      BasicComboBoxEditor basicComboBoxEditor0 = new BasicComboBoxEditor();
      filter2.addInstanceListener(instanceStreamToBatchMaker0);
      filter2.getFocusListeners();
      filter0.isBusy();
      filter2.performRequest("Stop");
      Filter filter3 = new Filter();
      filter3.globalInfo();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.getSize();
      trainTestSplitMaker0.requestFocusInWindow();
      filter0.connectionNotification("dataSet", trainTestSplitMaker0);
      filter0.getVetoableChangeListeners();
      Locale locale0 = Locale.JAPAN;
      JComponent.setDefaultLocale(locale0);
      filter0.connectionAllowed("trainingSet");
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      try { 
        serializedInstancesLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SerializedInstancesLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Add add0 = new Add();
      filter0.setFilter(add0);
      filter0.getFocusListeners();
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      InstanceEvent instanceEvent0 = new InstanceEvent(nominalToBinary0);
      instanceEvent0.setStatus((-118));
      instanceEvent0.setStatus((-118));
      filter0.acceptInstance(instanceEvent0);
      filter0.removeConfigurationListener((ConfigurationListener) null);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Add add0 = new Add();
      filter0.setFilter(add0);
      filter0.getFocusListeners();
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      InstanceEvent instanceEvent0 = new InstanceEvent(nominalToBinary0);
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      filter0.setLog(logPanel0);
      ComponentOrientation componentOrientation0 = ComponentOrientation.UNKNOWN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      filter0.getFocusListeners();
      NominalToBinary nominalToBinary1 = new NominalToBinary();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      InstanceEvent instanceEvent1 = new InstanceEvent(predictionAppender0);
      instanceEvent1.setStatus(3594);
      instanceEvent1.setStatus(0);
      filter0.acceptInstance(instanceEvent0);
      filter0.removeConfigurationListener((ConfigurationListener) null);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.getSize();
      Locale locale0 = Locale.ROOT;
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      JComponent.setDefaultLocale(locale0);
      Add add0 = new Add();
      filter0.setFilter(add0);
      Filter filter1 = new Filter();
      filter1.getFocusListeners();
      Canvas canvas0 = new Canvas();
      InstanceEvent instanceEvent0 = new InstanceEvent(canvas0);
      instanceEvent0.setStatus(2);
      filter0.acceptInstance(instanceEvent0);
      filter0.removeConfigurationListener((ConfigurationListener) null);
      filter0.addDataSourceListener(trainTestSplitMaker0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Add add0 = new Add();
      filter0.setFilter(add0);
      filter0.getFocusListeners();
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      InstanceEvent instanceEvent0 = new InstanceEvent(nominalToBinary0);
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      filter0.setLog(logPanel0);
      ComponentOrientation componentOrientation0 = ComponentOrientation.UNKNOWN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      filter0.getFocusListeners();
      NominalToBinary nominalToBinary1 = new NominalToBinary();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      InstanceEvent instanceEvent1 = new InstanceEvent(predictionAppender0);
      instanceEvent1.setStatus(3594);
      filter0.acceptInstance(instanceEvent1);
      filter0.setCustomName(" instances.");
      LogitBoost logitBoost0 = new LogitBoost();
      Capabilities capabilities0 = logitBoost0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      filter0.disconnectionNotification("7r{)rU+,n", "7r{)rU+,n");
  }
}
