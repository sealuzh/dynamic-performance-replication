/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 12:31:14 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.qos.logback.classic.Logger;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.OrSelector;
import us.codecraft.webmagic.selector.Selector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("waitNewUrl - interrupted, error {}");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      spider1.isSpawnUrl();
      Page page0 = Page.fail();
      String string0 = "";
      page0.setRawText("");
      page0.toString();
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Page page0 = new Page();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("OH\"Plz,umL.^]2#'");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "OH\"Plz,umL.^]2#'";
      stringArray0[1] = "OH\"Plz,umL.^]2#'";
      stringArray0[2] = "OH\"Plz,umL.^]2#'";
      stringArray0[3] = "OH\"Plz,umL.^]2#'";
      stringArray0[4] = "OH\"Plz,umL.^]2#'";
      stringArray0[1] = "OH\"Plz,umL.^]2#'";
      stringArray0[6] = "OH\"Plz,umL.^]2#'";
      stringArray0[7] = "OH\"Plz,umL.^]2#'";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("page status code erro, page {} , code: {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider1 = spider0.startUrls(linkedList0);
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("?dWbSuY!rs");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "U=S;l";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("U=S;l");
      Spider spider0 = new Spider(simplePageProcessor0);
      Json json0 = new Json((List<String>) null);
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      Spider spider2 = spider1.pipeline((Pipeline) null);
      Class<Pipeline> class1 = Pipeline.class;
      json0.toList(class1);
      Spider spider3 = spider2.setPipelines((List<Pipeline>) null);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider4 = spider3.scheduler(priorityScheduler0);
      Spider spider5 = spider4.downloader((Downloader) null);
      int int0 = (-301);
      Logger logger0 = (Logger)spider4.logger;
      spider1.logger = (org.slf4j.Logger) logger0;
      // Undeclared exception!
      try { 
        spider5.sleep((-301));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pa:e\"status code err, page {} , code: {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.get("pa:e\"status code err, page {} , code: {}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("javascript:");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "javascript:";
      stringArray0[1] = "javascript:";
      stringArray0[2] = "javascript:";
      stringArray0[3] = "javascript:";
      stringArray0[4] = "javascript:";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("72<*cn[g]yoGcx*&");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      Spider spider2 = spider1.setExitWhenComplete(true);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider3 = spider2.addPipeline(jsonFilePipeline0);
      Spider spider4 = spider3.setUUID("/");
      Request[] requestArray0 = new Request[6];
      Request request0 = new Request();
      Request request1 = request0.addHeader("/", "72<*cn[g]yoGcx*&");
      Request request2 = request1.addHeader(", charset='", "$VALUES");
      Request request3 = request1.putExtra("72<*cn[g]yoGcx*&", request2);
      Request request4 = request3.setCharset("72<*cn[g]yoGcx*&");
      Request request5 = request4.addCookie("", "72<*cn[g]yoGcx*&");
      Request request6 = request5.setMethod("queue_");
      requestArray0[0] = request6;
      Request request7 = new Request();
      requestArray0[1] = request7;
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("title");
      fileCacheQueueScheduler0.poll(spider0);
      requestArray0[2] = null;
      Request request8 = new Request("");
      requestArray0[3] = request8;
      Request request9 = request0.setCharset("");
      requestArray0[4] = request9;
      Request request10 = request7.addCookie((String) null, "_cycle_tried_times");
      requestArray0[5] = request10;
      // Undeclared exception!
      try { 
        spider4.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = (-519);
      Spider.Status.fromValue((-519));
      String string0 = "phantomjs";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("phantomjs");
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-519), threadFactory0, threadPoolExecutor_AbortPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("//title");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider2 = spider1.addPipeline(collectorPipeline0);
      Request[] requestArray0 = new Request[5];
      Request request0 = new Request("//title");
      Request request1 = request0.addCookie("t_nv{JQKXA", "//title");
      Request request2 = request1.addHeader("//title", "//title");
      requestArray0[0] = request2;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Request request3 = request0.setExtras(hashMap0);
      Request request4 = request3.setMethod("");
      requestArray0[1] = request4;
      Request request5 = new Request("t_nv{JQKXA");
      requestArray0[2] = request5;
      Request request6 = request5.setMethod("");
      requestArray0[3] = request6;
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider2);
      requestArray0[4] = null;
      // Undeclared exception!
      try { 
        spider2.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pa:e\"status code err, page {} , code: {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = new Page();
      spider0.extractAndAddRequests(page0, false);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("72<*cn[g]yoGcx*&");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      Spider spider2 = spider1.setExitWhenComplete(true);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider3 = spider2.addPipeline(jsonFilePipeline0);
      spider3.setUUID("/");
      Request[] requestArray0 = new Request[6];
      Request request0 = new Request();
      Request request1 = request0.addHeader("/", "72<*cn[g]yoGcx*&");
      Request request2 = request1.addHeader(", charset='", "$VALUES");
      Request request3 = request1.putExtra("72<*cn[g]yoGcx*&", request2);
      Request request4 = request3.setCharset("72<*cn[g]yoGcx*&");
      Request request5 = request4.addCookie("", "72<*cn[g]yoGcx*&");
      Request request6 = request5.setMethod("queue_");
      requestArray0[0] = request6;
      Request request7 = new Request();
      requestArray0[1] = request7;
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("title");
      fileCacheQueueScheduler0.poll(spider0);
      requestArray0[2] = null;
      Request request8 = new Request("");
      requestArray0[3] = request8;
      Request request9 = request0.setCharset("");
      requestArray0[4] = request9;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Request request10 = request7.addCookie((String) null, "_cycle_tried_times");
      requestArray0[5] = request10;
      Locale locale0 = Locale.forLanguageTag("Wk?P%#^");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("yC&5O,=0~E^ap");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)17;
      byteArray0[8] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      List<SpiderListener> list0 = spider1.getSpiderListeners();
      assertNull(list0);
      
      long long0 = spider0.getPageCount();
      assertEquals(0L, long0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("yC&5O,=0~E^ap");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_cycle_tried_times");
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("Site{domain='");
      fileCacheQueueScheduler1.poll(spider0);
      String string0 = "";
      Request request1 = new Request(".\"em}u|");
      request0.setCharset("");
      request1.addCookie("PL75Z##", ".\"em}u|");
      Spider spider1 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[8];
      requestArray0[0] = null;
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider2 = spider1.setSpawnUrl(false);
      priorityScheduler0.poll(spider2);
      requestArray0[1] = null;
      Request request2 = new Request("PL75Z##");
      requestArray0[2] = request2;
      requestArray0[3] = request1;
      requestArray0[4] = request0;
      requestArray0[5] = request1;
      requestArray0[6] = request0;
      requestArray0[7] = request1;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("yC&5O,=0~E^ap");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      spider0.setExecutorService(forkJoinPool0);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("DX#p7!{");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      Spider spider2 = spider1.setPipelines((List<Pipeline>) null);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider3 = spider2.setExecutorService(forkJoinPool0);
      // Undeclared exception!
      try { 
        spider3.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("yC&5O,=0~E^ap");
      Spider spider0 = new Spider(simplePageProcessor0);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("yC&5O,=0~E^ap");
      Spider spider1 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider2 = spider1.setScheduler(priorityScheduler0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yC&5O,=0~E^ap");
      List<SpiderListener> list0 = spider2.getSpiderListeners();
      assertNull(list0);
      
      Spider.create(simplePageProcessor0);
      spider0.getStatus();
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("yC&5O,=0~E^ap");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider1 = spider0.startUrls(linkedList0);
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("page status code erro, page {} , code: {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("page status code erro, page {} , code: {}");
      Spider spider2 = spider1.clearPipeline();
      Spider spider3 = spider2.thread(2196);
      Spider spider4 = spider3.clearPipeline();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider5 = spider4.setPipelines(linkedList0);
      spider5.downloader((Downloader) null);
      Request request0 = new Request();
      Request request1 = request0.addHeader("d*'|5icfRTKa|\"}L,", "page status code erro, page {} , code: {}");
      request0.setPriority(3288L);
      request1.setCharset(":<R");
      request1.putExtra("", "d*'|5icfRTKa|\"}L,");
      // Undeclared exception!
      try { 
        spider3.onSuccess(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "page status code err, page {} , code: {}";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ysatY*R$y+KYLP3s");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("lUvQO");
      spider1.setScheduler(fileCacheQueueScheduler0);
      Page page0 = Page.fail();
      spider1.extractAndAddRequests(page0, false);
      // Undeclared exception!
      try { 
        spider1.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("yC&5O,=0~E^ap");
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2753);
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      Spider spider2 = spider1.setExecutorService(forkJoinPool0);
      Spider spider3 = spider2.setSpawnUrl(false);
      Spider spider4 = spider3.setUUID("yC&5O,=0~E^ap");
      Spider spider5 = spider4.setExitWhenComplete(true);
      spider5.thread((ExecutorService) forkJoinPool0, 40);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider6 = spider4.thread((ExecutorService) forkJoinPool0, 40);
      spider6.startRequest(linkedList0);
      // Undeclared exception!
      try { 
        spider0.get("JG8fOJk");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("yC&5O,=0~E^ap");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      List<SpiderListener> list0 = spider1.getSpiderListeners();
      assertNull(list0);
      
      spider0.stop();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "push to queue {}");
      Spider spider2 = spider0.downloader(phantomJSDownloader0);
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pa:e\"status code err, pae {} , ode: {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      spider0.stop();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("GmFDvBndX8z@8\"8+K8^");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request request0 = new Request();
      Spider.Status.values();
      Spider spider1 = spider0.setUUID("s");
      int int0 = spider1.getThreadAlive();
      assertEquals(0, int0);
      
      spider1.getSite();
      spider1.setEmptySleepTime(0);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("XwUH0=c+0l`nhdRC");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Spider spider0 = Spider.create(simplePageProcessor0);
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      boolean boolean0 = spider0.isExitWhenComplete();
      assertTrue(spider0.isSpawnUrl());
      assertTrue(boolean0);
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pa:e\"status code err, pae {} , ode: {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getCollectorPipeline();
      Spider spider1 = spider0.scheduler((Scheduler) null);
      List<SpiderListener> list0 = spider1.getSpiderListeners();
      assertNull(list0);
      
      spider1.setSpiderListeners((List<SpiderListener>) null);
      Spider spider2 = spider1.setScheduler((Scheduler) null);
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<,cZ75u7s ");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("<,cZ75u7s ", "");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "<,cZ75u7s ";
      stringArray0[2] = "<,cZ75u7s ";
      stringArray0[3] = "<,cZ75u7s ";
      stringArray0[4] = "<,cZ75u7s ";
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }
}
