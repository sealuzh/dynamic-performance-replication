/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 11:26:34 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import org.apache.derby.iapi.db.Database;
import org.apache.derby.iapi.services.context.ContextManager;
import org.apache.derby.iapi.store.access.TransactionController;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.apache.derby.impl.store.access.btree.index.B2I_v10_2;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jdbc.FBClob;
import org.firebirdsql.jdbc.FBDriverNotCapableException;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "selectselect into`.";
      SQLUtil.mutatesDataOrStructure("selectselect into`.");
      StringBuilder stringBuilder0 = new StringBuilder();
      String string1 = "ZW)wL}x.P";
      // Undeclared exception!
      try { 
        stringBuilder0.insert(39, "ZW)wL}x.P");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 39
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Ii";
      stringArray0[1] = "executez$+}q(u+=prxtp";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "executez$+}q(u+=prxtp", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("executez$+}q(u+=prxtp", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "^:Vc`21:icrYQ?ZK\"x", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT ^:Vc`21:icrYQ?ZK\"x PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("km'Tu^gg/u-", (DBTable) null, 40, "km'Tu^gg/u-");
      arrayList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      assertEquals("km'Tu^gg/u-", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("P}2g(*x");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("- ", dBSchema0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("nb~f", true, defaultDBTable0, "truncateconstraint");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT nb~f CHECK truncateconstraint", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "org.apache.derby.impl.store.access.btree.index.B2I";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.derby.impl.store.access.btree.index.B2I");
      String string1 = "org.databene.commons.condition.ComparationCondition";
      SQLUtil.isDML("org.databene.commons.condition.ComparationCondition");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.NEVER;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "drop indexselect into";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("execi{jx93cxafk", stringBuilder0);
      int int0 = 45;
      // Undeclared exception!
      try { 
        stringBuilder1.insert(45, (CharSequence) "drop indexselect into");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 45
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "B0G#8^TX'~!.";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("B0G#8^TX'~!.", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (B0G#8^TX'~!.) REFERENCES null(B0G#8^TX'~!.)", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.derby.impl.sql.compile.UnaryOperatorNode";
      stringArray0[1] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = SQLUtil.normalize("+3A-PRmXc*vq;=j:k", false);
      assertEquals("+ 3A - PRmXc * vq ; = j : k", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "delete\\o]<3ubo&)}zf)3]s";
      String[] stringArray0 = new String[0];
      String string1 = "BGy:o+\"MN10\"zj";
      SQLUtil.join("deleteo]<3ubo&)}zf)3]s", "derby.__rt.storage.createWithNoLog", stringArray0, "BGy:o+\"MN10\"zj", "CHECK ", stringArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      String string2 = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CHECK ");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("deleteo]<3ubo&)}zf)3]s join BGy:o+\"MN10\"zj as CHECK  on ", stringBuilder0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1, nameSpec1);
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-392376649), 17179869184L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -392376649
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "r-TIx2P";
      stringArray0[1] = "16]i751sBq>)w{A-:<5";
      stringArray0[2] = "r-TIx2P";
      stringArray0[3] = "&k";
      SQLUtil.leftJoin("r-TIx2P", stringArray0, "16]i751sBq>)w{A-:<5", "16]i751sBq>)w{A-:<5", stringArray0);
      SQLUtil.normalize("left join 16]i751sBq>)w{A-:<5 as 16]i751sBq>)w{A-:<5 on r-TIx2P.r-TIx2P = 16]i751sBq>)w{A-:<5.r-TIx2P and r-TIx2P.16]i751sBq>)w{A-:<5 = 16]i751sBq>)w{A-:<5.16]i751sBq>)w{A-:<5 and r-TIx2P.r-TIx2P = 16]i751sBq>)w{A-:<5.r-TIx2P and r-TIx2P.&k = 16]i751sBq>)w{A-:<5.&k", true);
      StringBuilder stringBuilder0 = new StringBuilder("LOB update");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "exec");
      int int0 = 747;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(747, (CharSequence) "r-TIx2P");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 747
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil.isQuery("select into`.");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "select into`.";
      stringArray0[1] = "select into`.";
      stringArray0[2] = "select into`.";
      SQLUtil.renderColumnListWithTableName("select into`.", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select into`.", (DBSchema) null);
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'select into`.' has no foreign key with the columns (select into`., select into`., select into`.)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "/* ";
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/* ");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.substituteMarkers("C&A yin*j.#A^VZ00(", "C&A yin*j.#A^VZ00(", "C&A yin*j.#A^VZ00(");
      assertEquals("'C&A yin*j.#A^VZ00('", string0);
      
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "'C&A yin*j.#A^VZ00('");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncate");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "truncate";
      stringArray0[1] = "^'TsE";
      stringArray0[2] = "^'TsE";
      stringArray0[3] = " join ";
      stringArray0[4] = "truncate";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "^'TsE", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("^'TsE", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      TableContainer tableContainer0 = new TableContainer("|9aVS\"ml");
      tableContainer0.getTable(" join ");
      dBUniqueIndex0.setTable((DBTable) null);
      dBPrimaryKeyConstraint0.addColumnName("drop materialized view");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, "^'TsE", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT ^'TsE UNIQUE (truncate, ^'TsE, ^'TsE,  join , truncate)", string1);
      
      String string2 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(truncate, ^'TsE, ^'TsE,  join , truncate)", string2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "updatecalling optimizeit() for join node";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("updatecalling optimizeit() for join node");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      charArray0[1] = '^';
      charArray0[2] = 'D';
      stringWriter0.write(charArray0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("op_info_transaction ", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      String string0 = "derby.storage.logBufferSize";
      int int0 = 69;
      StringBuilder stringBuilder0 = new StringBuilder(69);
      int int1 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(Integer.MAX_VALUE, (long) 69);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2147483647
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = null;
      DBSchema dBSchema0 = new DBSchema((String) null);
      DBPackage dBPackage0 = new DBPackage((String) null, dBSchema0);
      dBSchema0.addPackage(dBPackage0);
      dBSchema0.getTable((String) null);
      SQLUtil.typeAndName(dBSchema0);
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("schema null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'schema null' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("F+g2PaNA");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(";b;> iy7xoKgs/P'x", dBSchema0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "F+g2PaNA";
      stringArray0[1] = "EUk71zg";
      stringArray0[2] = "Y[9g";
      stringArray0[3] = "F+g2PaNA";
      stringArray0[4] = "EUk71zg";
      stringArray0[5] = "EUk71zg";
      stringArray0[6] = "F+g2PaNA";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "EUk71zg", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(";b;> iy7xoKgs/P'x", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String string0 = SQLUtil.ownerDotComponent(dBTable0);
      assertEquals("F+g2PaNA.;b;> iy7xoKgs/P'x", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.h2.index.ViewIndex";
      stringArray0[1] = "Calling optimizeIt() for join node";
      stringArray0[2] = "Calling optimizeIt() for join node";
      stringArray0[3] = "Calling optimizeIt() for join node";
      stringArray0[4] = "Calling optimizeIt() for join node";
      stringArray0[5] = "Calling optimizeIt() for join node";
      stringArray0[6] = "Calling optimizeIt() for join node";
      stringArray0[7] = "Calling optimizeIt() for join node";
      SQLUtil.renderColumnListWithTableName("Calling optimizeIt() for join node", stringArray0);
      String string0 = SQLUtil.renderColumnListWithTableName("42XAF", stringArray0);
      assertEquals("42XAF.org.h2.index.ViewIndex, 42XAF.Calling optimizeIt() for join node, 42XAF.Calling optimizeIt() for join node, 42XAF.Calling optimizeIt() for join node, 42XAF.Calling optimizeIt() for join node, 42XAF.Calling optimizeIt() for join node, 42XAF.Calling optimizeIt() for join node, 42XAF.Calling optimizeIt() for join node", string0);
      
      SQLUtil.isDML("Calling optimizeIt() for join node");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("Calling optimizeIt() for join node");
      assertNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Calling optimizeIt() for join node");
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM Calling optimizeIt() for join node WHERE org.h2.index.ViewIndex = 'org.h2.index.ViewIndex' AND Calling optimizeIt() for join node = 'Calling optimizeIt() for join node' AND Calling optimizeIt() for join node = 'Calling optimizeIt() for join node' AND Calling optimizeIt() for join node = 'Calling optimizeIt() for join node' AND Calling optimizeIt() for join node = 'Calling optimizeIt() for join node' AND Calling optimizeIt() for join node = 'Calling optimizeIt() for join node' AND Calling optimizeIt() for join node = 'Calling optimizeIt() for join node' AND Calling optimizeIt() for join node = 'Calling optimizeIt() for join node'", string1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("updatedelete", stringBuilder0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "updatedelete");
      SQLUtil.addRequiredCondition("updatedelete", stringBuilder1);
      String string0 = "YC";
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getTable("k/qBdUV^|", false);
      int int0 = (-2045306858);
      // Undeclared exception!
      try { 
        DBDataType.getInstance((-2045306858), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, (String) null, "rP0y", stringArray0);
      assertEquals("null as rP0y on null.null = rP0y.null and null.null = rP0y.null and null.null = rP0y.null and null.null = rP0y.null and null.null = rP0y.null and null.null = rP0y.null", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DBCatalog dBCatalog0 = new DBCatalog("delete.o1");
      DBSchema dBSchema0 = new DBSchema("@CODE", dBCatalog0);
      dBSchema0.getTable("delete.o1");
      DBDataType dBDataType0 = DBDataType.getInstance(5538, "delete.o1");
      Integer integer0 = new Integer((-1086));
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("yP{/Z", (DBTable) null, dBDataType0, integer0, integer1);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(" F'vL", (DBTable) null, dBDataType0, integer2);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("yP{/Z,  F'vL", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(" (");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format:  (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("h\"t}?4^lu(");
      assertNull(boolean0);
      
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("Z(H<&}", "gyE\"", (VersionNumber) null);
      defaultDatabase0.getCatalog("lJEo.<)wp}3AhB,");
      defaultDatabase0.getTables();
      String string0 = SQLUtil.ownerDotComponent(defaultDatabase0);
      assertEquals("Z(H<&}", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("hKb#M^");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("hKb#M^", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("LIKE", defaultDBTable0, (-123071932), "LIKE");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = 1001;
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-123071932), (CharSequence) "LIKE", (-123071932), 1001);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset -123071932
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLUtil.isDDL("alter index");
      String string0 = "update";
      String string1 = "phi";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "update";
      stringArray0[1] = "alter index";
      stringArray0[2] = "phi";
      stringArray0[3] = "update";
      stringArray0[4] = "update";
      stringArray0[5] = "update";
      stringArray0[6] = "P@-C7}z[TFYTZjv80P^";
      SQLUtil.join("update", "phi", stringArray0, "?C4h&", "P@-C7}z[TFYTZjv80P^", stringArray0);
      SQLUtil.mutatesStructure(" pwTfZER\"xc]~1>F");
      SQLUtil.normalize(" pwTfZER\"xc]~1>F", true);
      String string2 = "V}Z)F?!eHLR";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter index");
      // Undeclared exception!
      try { 
        DBDataType.getInstance("22003");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "dk5kg'";
      stringArray0[1] = "dk5kg'";
      stringArray0[2] = "dk5kg'";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[3] = "{mR,6kI{q:0~meAo";
      stringArray0[4] = "dk5kg'";
      stringArray0[5] = "dk5kg'";
      stringArray0[6] = "dk5kg'";
      stringArray0[7] = "dk5kg'";
      String string0 = SQLUtil.join("dk5kg'", "dk5kg'", stringArray0, "{mR,6kI{q:0~meAo", "dk5kg'", stringArray0);
      assertEquals("dk5kg' join {mR,6kI{q:0~meAo as dk5kg' on dk5kg'.dk5kg' = dk5kg'.dk5kg' and dk5kg'.dk5kg' = dk5kg'.dk5kg' and dk5kg'.dk5kg' = dk5kg'.dk5kg' and dk5kg'.{mR,6kI{q:0~meAo = dk5kg'.{mR,6kI{q:0~meAo and dk5kg'.dk5kg' = dk5kg'.dk5kg' and dk5kg'.dk5kg' = dk5kg'.dk5kg' and dk5kg'.dk5kg' = dk5kg'.dk5kg' and dk5kg'.dk5kg' = dk5kg'.dk5kg'", string0);
      
      boolean boolean0 = SQLUtil.isDML("dk5kg'");
      assertFalse(boolean0);
      
      DBSchema dBSchema0 = new DBSchema("'&SPq<3b");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("dk5kg'", dBSchema0);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "'&SPq<3b";
      stringArray1[1] = "dk5kg'";
      stringArray1[2] = "dk5kg' join {mR,6kI{q:0~meAo as dk5kg' on dk5kg'.dk5kg' = dk5kg'.dk5kg' and dk5kg'.dk5kg' = dk5kg'.dk5kg' and dk5kg'.dk5kg' = dk5kg'.dk5kg' and dk5kg'.{mR,6kI{q:0~meAo = dk5kg'.{mR,6kI{q:0~meAo and dk5kg'.dk5kg' = dk5kg'.dk5kg' and dk5kg'.dk5kg' = dk5kg'.dk5kg' and dk5kg'.dk5kg' = dk5kg'.dk5kg' and dk5kg'.dk5kg' = dk5kg'.dk5kg'";
      stringArray1[3] = "dk5kg' join {mR,6kI{q:0~meAo as dk5kg' on dk5kg'.dk5kg' = dk5kg'.dk5kg' and dk5kg'.dk5kg' = dk5kg'.dk5kg' and dk5kg'.dk5kg' = dk5kg'.dk5kg' and dk5kg'.{mR,6kI{q:0~meAo = dk5kg'.{mR,6kI{q:0~meAo and dk5kg'.dk5kg' = dk5kg'.dk5kg' and dk5kg'.dk5kg' = dk5kg'.dk5kg' and dk5kg'.dk5kg' = dk5kg'.dk5kg' and dk5kg'.dk5kg' = dk5kg'.dk5kg'";
      stringArray1[4] = "";
      stringArray1[5] = "dk5kg'";
      stringArray1[6] = "dk5kg'";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" REFERENCES ", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      String string1 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT \" REFERENCES \" ", string1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("I?U2&");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "I?U2&";
      stringArray0[1] = "I?U2&";
      stringArray0[2] = "[rq8+Xlt3iLsNkf%#J}";
      stringArray0[3] = "[rq8+Xlt3iLsNkf%#J}";
      stringArray0[4] = "create unique index';";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("[rq8+Xlt3iLsNkf%#J}", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("drop materialized view", stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1);
      assertEquals("CONSTRAINT [rq8+Xlt3iLsNkf%#J}  or drop materialized viewCONSTRAINT [rq8+Xlt3iLsNkf%#J} ", stringBuilder1.toString());
      assertEquals("CONSTRAINT [rq8+Xlt3iLsNkf%#J}  or drop materialized viewCONSTRAINT [rq8+Xlt3iLsNkf%#J} ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("drop materialized viewi{jx93cxafk", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized view", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(669, "alter table");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter materialized view", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("alter materialized view ALTER TABLE(3) NULL", string0);
      
      defaultDBTable0.countProviders();
      SQLUtil.isProcedureCall("alter materialized view");
      String string1 = SQLUtil.normalize("alter materialized view ALTER TABLE(3) NULL", false);
      assertEquals("alter materialized view ALTER TABLE (3) NULL", string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "alter materialized view ALTER TABLE (3) NULL";
      stringArray0[1] = "alter table";
      stringArray0[2] = "alter table";
      stringArray0[3] = "alter materialized view ALTER TABLE (3) NULL";
      Integer.compare(669, 161);
      stringArray0[4] = "drop materialized viewi{jx93cxafk";
      stringArray0[5] = "alter materialized view ALTER TABLE(3) NULL";
      stringArray0[6] = "drop materialized viewi{jx93cxafk";
      String string2 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM alter materialized view WHERE alter materialized view ALTER TABLE (3) NULL = 'alter materialized view ALTER TABLE (3) NULL' AND alter table = 'alter table' AND alter table = 'alter table' AND alter materialized view ALTER TABLE (3) NULL = 'alter materialized view ALTER TABLE (3) NULL' AND drop materialized viewi{jx93cxafk = 'drop materialized viewi{jx93cxafk' AND alter materialized view ALTER TABLE(3) NULL = 'alter materialized view ALTER TABLE(3) NULL' AND drop materialized viewi{jx93cxafk = 'drop materialized viewi{jx93cxafk'", string2);
      
      boolean boolean0 = SQLUtil.isQuery("Ly'Yj.nlA4ceJ");
      boolean boolean1 = SQLUtil.isProcedureCall("i{jx93cxafk");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLUtil.isProcedureCall("");
      String string0 = "call";
      String[] stringArray0 = new String[0];
      String string1 = "drop materialized vieworg.apache.derby.iapi.services.timer.timerfactory";
      SQLUtil.join("call", "d4", stringArray0, "drop materialized vieworg.apache.derby.iapi.services.timer.timerfactory", "", stringArray0);
      StringReader stringReader0 = new StringReader("d4");
      stringReader0.skip(1209L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("call");
      defaultDBTable0.getUniqueConstraint(stringArray0);
      streamTokenizer0.slashSlashComments(true);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'null' not found in table 'call'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLUtil.typeAndName((DBObject) null);
      String string0 = "XBM0K.D";
      StringBuilder stringBuilder0 = new StringBuilder(1478);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      int int0 = (-1939182961);
      // Undeclared exception!
      try { 
        stringBuilder1.append((CharSequence) stringBuilder0, (-1939182961), 1478);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start -1939182961, end 1478, s.length() 0
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("42601", true, "42601", "42601");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      dBCheckConstraint0.equals(integer0);
      SQLUtil.renderValue(dBCheckConstraint0);
      System.setCurrentTimeMillis(1824L);
      SQLUtil.mutatesStructure("!X1++iV9~&5=(");
      SQLUtil.substituteMarkers("!X1++iV9~&5=(", "!X1++iV9~&5=(", dBCheckConstraint0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "CONSTRAINT 42601CHECK 42601";
      SQLUtil.innerJoin("!X1++iV9~&5=(", stringArray0, "!X1++iV9~&5=(", "create unique index", stringArray0);
      SQLUtil.innerJoin("42601", stringArray0, "z7eV#KP$o=k@wQ", "create unique indexorg.apache.derby.iapi.services.timer.timerfactory", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "callorg.apache.derby.iapi.services.timer.timerfactory";
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "callorg.apache.derby.iapi.services.timer.timerfactory", false, "CONSTRAINT 42601CHECK 42601");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'CONSTRAINT 42601CHECK 42601' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "update";
      stringArray0[1] = "5!_`SU";
      SQLUtil.leftJoin("update", stringArray0, "5!_`SU", "1$jEe", stringArray0);
      TableContainer tableContainer0 = new TableContainer("&=K");
      tableContainer0.getTable("1$jEe");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBDataType dBDataType0 = DBDataType.getInstance(10, "updatedelete");
      Integer integer0 = RawTransaction.COMMIT;
      dBDataType0.isAlpha();
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer.remainderUnsigned((-2262), 10);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("0Od}O;?'[s\"q", (DBTable) null, dBDataType0, integer0, integer1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getContextManager();
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      GenericLanguageConnectionContext genericLanguageConnectionContext0 = null;
      try {
        genericLanguageConnectionContext0 = new GenericLanguageConnectionContext((ContextManager) null, (TransactionController) null, genericLanguageFactory0, genericLanguageConnectionFactory0, (Database) null, "left join 5!_`SU as 1$jEe on update.update = 1$jEe.update and update.5!_`SU = 1$jEe.5!_`SU", 2325, "deletedelete", ">Q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.context.ContextImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("Z9!");
      dBSchema0.isIdentical((DBObject) null);
      SQLUtil.typeAndName(dBSchema0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "schema Z9!";
      stringArray0[1] = "renamedelete";
      stringArray0[2] = "schema Z9!";
      stringArray0[3] = "schema Z9!";
      SQLUtil.renderColumnNames(stringArray0);
      String string0 = "42X19";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("executedelete", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(2112, "schema Z9!");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("42X19", defaultDBTable0, dBDataType0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "(schema Z9!, renamedelete, schema Z9!, schema Z9!)", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      int int0 = 41;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(2112, (CharSequence) "renamedelete", 2112, 41);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 2112
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create table");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      String string0 = SQLUtil.normalize("create table", true);
      assertEquals("create table", string0);
      
      Boolean boolean1 = SQLUtil.mutatesStructure("create table");
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("delete");
      SQLUtil.mutatesDataOrStructure("delete");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("8", (DBSchema) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("8", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "8");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "a/H'I~_n'CK5<ad";
      boolean boolean0 = false;
      SQLUtil.normalize("a/H'I~_n'CK5<ad", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("a / H 'I~_n' CK5 < ad");
      int int0 = 65;
      Integer integer0 = new Integer(65);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*", defaultDBTable0, (DBDataType) null, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        MockFile.createTempFile("*", "*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("org.apache.derby.impl.store.access.btree.index.B2I", " REFERENCES ", (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog("org.apache.derby.impl.store.access.btree.index.B2I", defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema("y=@d2HE!1'", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.store.access.btree.index.B2I", dBSchema0);
      defaultDBTable0.getUniqueConstraint((String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("4{");
      String string0 = "";
      int int0 = (-83);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-83));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "&p)qmC";
      stringArray0[1] = "&p)qmC";
      stringArray0[2] = "org.apache.derby.impl.sql.execute.rts.RealHashJoinStatistics";
      stringArray0[3] = "";
      stringArray0[4] = "&p)qmC";
      stringArray0[5] = "&p)qmC";
      stringArray0[6] = "Types.ARRAY: ";
      stringArray0[7] = "&p)qmC";
      stringArray0[8] = "mdR\"Aa#9!]q\"/3xG2";
      String string0 = SQLUtil.leftJoin("&p)qmC", stringArray0, "org.apache.derby.impl.sql.execute.rts.RealHashJoinStatistics", "Types.ARRAY: ", stringArray0);
      assertEquals("left join org.apache.derby.impl.sql.execute.rts.RealHashJoinStatistics as Types.ARRAY:  on &p)qmC.&p)qmC = Types.ARRAY: .&p)qmC and &p)qmC.&p)qmC = Types.ARRAY: .&p)qmC and &p)qmC.org.apache.derby.impl.sql.execute.rts.RealHashJoinStatistics = Types.ARRAY: .org.apache.derby.impl.sql.execute.rts.RealHashJoinStatistics and &p)qmC. = Types.ARRAY: . and &p)qmC.&p)qmC = Types.ARRAY: .&p)qmC and &p)qmC.&p)qmC = Types.ARRAY: .&p)qmC and &p)qmC.Types.ARRAY:  = Types.ARRAY: .Types.ARRAY:  and &p)qmC.&p)qmC = Types.ARRAY: .&p)qmC and &p)qmC.mdR\"Aa#9!]q\"/3xG2 = Types.ARRAY: .mdR\"Aa#9!]q\"/3xG2", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("+7N 3g5XHmUf;x");
      DBDataType dBDataType0 = DBDataType.getInstance(0, "+7N 3g5XHmUf;x");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("+7N 3g5XHmUf;x", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("DATE", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.delete(0, 7);
      StringBuilder stringBuilder3 = stringBuilder2.append((long) 0);
      // Undeclared exception!
      try { 
        stringBuilder3.insert(1595, 0.0F);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1595
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(", ");
      String[] stringArray0 = new String[9];
      stringArray0[0] = ", ";
      stringArray0[1] = ", ";
      stringArray0[2] = ", ";
      stringArray0[3] = ", ";
      stringArray0[4] = ", ";
      stringArray0[5] = ", ";
      stringArray0[6] = ", ";
      stringArray0[7] = ", ";
      stringArray0[8] = ", ";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM ,  WHERE ,  = ', ' AND ,  = ', ' AND ,  = ', ' AND ,  = ', ' AND ,  = ', ' AND ,  = ', ' AND ,  = ', ' AND ,  = ', ' AND ,  = ', '", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("55WB(");
      SQLUtil.isDML("55WB(");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "55WB(";
      stringArray0[1] = "55WB(";
      stringArray0[2] = "55WB(";
      stringArray0[3] = "55WB(";
      stringArray0[4] = "55WB(";
      stringArray0[5] = "55WB(";
      stringArray0[6] = "55WB(";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "55WB(";
      objectArray0[1] = (Object) "55WB(";
      objectArray0[2] = (Object) "55WB(";
      objectArray0[3] = (Object) "55WB(";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "calling opt";
      stringArray0[1] = "/*";
      stringArray0[2] = "/*";
      stringArray0[3] = "lower";
      stringArray0[4] = "/*";
      stringArray0[5] = "/*";
      stringArray0[6] = "/*";
      stringArray0[7] = "/*";
      SQLUtil.renderColumnListWithTableName("/*", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("lower", defaultDBTable0, (-8), "/*");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "tOZX^D)iWcfF{<", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'h';
      charArray0[1] = 'k';
      charArray0[2] = '$';
      charArray0[3] = 'F';
      charArray0[4] = 'k';
      charArray0[5] = '{';
      charArray0[6] = 'a';
      charArray0[7] = '{';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      // Undeclared exception!
      try { 
        stringBuilder1.append((CharSequence) "calling opt", 101, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 101, end -1, s.length() 11
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Character character0 = new Character('9');
      SQLUtil.renderValue(character0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "'9'");
      stringBuilder0.append((-2.147483648E9));
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      SQLUtil.addOptionalCondition("'9'", stringBuilder1);
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLUtil.isDDL("org.postgresql.jdbc3g.AbstractJdbc3gResultSet");
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.isQuery("org.postgresql.jdbc3g.AbstractJdbc3gResultSet");
      SQLUtil.removeComments("org.postgresql.jdbc3g.AbstractJdbc3gResultSet");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("org.postgresql.jdbc3g.AbstractJdbc3gResultSet");
      assertNull(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.postgresql.jdbc3g.AbstractJdbc3gResultSet";
      stringArray0[1] = "org.postgresql.jdbc3g.AbstractJdbc3gResultSet";
      stringArray0[2] = "create table";
      stringArray0[3] = "create table";
      stringArray0[4] = "org.postgresql.jdbc3g.AbstractJdbc3gResultSet";
      stringArray0[5] = "org.postgresql.jdbc3g.AbstractJdbc3gResultSet";
      stringArray0[6] = "org.postgresql.jdbc3g.AbstractJdbc3gResultSet";
      String string0 = SQLUtil.innerJoin("create table", stringArray0, "e_[X'xXzF\"t<do{a):", "alter indexm#jx/ooli&-l1l>q", stringArray0);
      assertEquals("e_[X'xXzF\"t<do{a): as alter indexm#jx/ooli&-l1l>q on create table.org.postgresql.jdbc3g.AbstractJdbc3gResultSet = alter indexm#jx/ooli&-l1l>q.org.postgresql.jdbc3g.AbstractJdbc3gResultSet and create table.org.postgresql.jdbc3g.AbstractJdbc3gResultSet = alter indexm#jx/ooli&-l1l>q.org.postgresql.jdbc3g.AbstractJdbc3gResultSet and create table.create table = alter indexm#jx/ooli&-l1l>q.create table and create table.create table = alter indexm#jx/ooli&-l1l>q.create table and create table.org.postgresql.jdbc3g.AbstractJdbc3gResultSet = alter indexm#jx/ooli&-l1l>q.org.postgresql.jdbc3g.AbstractJdbc3gResultSet and create table.org.postgresql.jdbc3g.AbstractJdbc3gResultSet = alter indexm#jx/ooli&-l1l>q.org.postgresql.jdbc3g.AbstractJdbc3gResultSet and create table.org.postgresql.jdbc3g.AbstractJdbc3gResultSet = alter indexm#jx/ooli&-l1l>q.org.postgresql.jdbc3g.AbstractJdbc3gResultSet", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLUtil.mutatesStructure("alter materialized view");
      SQLUtil.mutatesStructure("alter materialized view");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized view");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "drop indexm#jx/ooli&-l1l>q";
      stringArray0[1] = "`Y4@h,9ki2;<81]^o";
      stringArray0[2] = "drop indexm#jx/ooli&-l1l>q";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "drop indexm#jx/ooli&-l1l>q", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("drop indexm#jx/ooli&-l1l>q", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, ", calendar)", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.typeAndName(dBUniqueConstraint0);
      B2I_v10_2 b2I_v10_2_0 = new B2I_v10_2();
      SQLUtil.renderValue(b2I_v10_2_0);
      DBConstraint dBConstraint0 = null;
      StringBuilder stringBuilder0 = new StringBuilder(85);
      // Undeclared exception!
      try { 
        stringBuilder0.deleteCharAt(85);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 85
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SQLUtil.normalize("U,&Fy&R:TwOc57%", true);
      SQLUtil.isDML("U, & Fy & R : TwOc57 %");
      DBCatalog dBCatalog0 = new DBCatalog("U, & Fy & R : TwOc57 %");
      DBSchema dBSchema0 = new DBSchema("U,&Fy&R:TwOc57%", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("P?Gx$<=r", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("U, & Fy & R : TwOc57 %", (String[]) null, "*rQ$*2pEu", "constraint", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      String string0 = "org.apache.derby.iapi.se";
      SQLUtil.normalize("org.apache.derby.iapi.se", false);
      SQLUtil.isDML("org.apache.derby.iapi.se");
      SQLUtil.parseColumnTypeAndSize("org.apache.derby.iapi.se");
      FBClob fBClob0 = new FBClob();
      try { 
        fBClob0.getCharacterStream((-1L), 0L);
        fail("Expecting exception: FBDriverNotCapableException");
      
      } catch(FBDriverNotCapableException e) {
         //
         // Not yet implemented.
         //
         verifyException("org.firebirdsql.jdbc.FBClob", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "create unique index";
      DBSchema dBSchema0 = new DBSchema("create unique index");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique index", dBSchema0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider((-2661));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
