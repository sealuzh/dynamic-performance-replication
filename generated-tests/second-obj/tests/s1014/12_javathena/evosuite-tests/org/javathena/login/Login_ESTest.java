/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:16:17 GMT 2018
 */

package org.javathena.login;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.Socket;
import java.util.Calendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.javathena.core.data.IParse;
import org.javathena.core.data.Socket_data;
import org.javathena.login.Login;
import org.javathena.login.UserManagement;
import org.javathena.login.parse.FromChar;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Login_ESTest extends Login_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Login login0 = new Login();
      login0.getOut();
      MySQLConfig.setLogin_server_ip("conf/subnet_athena.conf");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "TTz!)7");
      Login.mmo_auth_syncXML();
      // Undeclared exception!
      try { 
        Login.mmo_auth_initXML();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         //  : Content is not allowed in prolog.
         //
         verifyException("com.thoughtworks.xstream.io.xml.DomDriver", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Login login0 = new Login();
      login0.yesNoOnOffToBoolean("YES");
      // Undeclared exception!
      try { 
        Login.login_log("YES");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Login login0 = new Login();
      login0.save_config_in_log();
      int[] intArray0 = login0.getServer_fd();
      assertNotNull(intArray0);
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Login login0 = new Login();
      Login.display_title();
      MockInetAddress.anyLocalAddress();
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Login.getDbManagemtType();
      Login login0 = new Login();
      UserManagement.addAccountIdCount(100000000);
      ConfigurationManagement.setAuth_before_save_file((-498));
      int int0 = Calendar.SHORT_FORMAT;
      login0.do_initTXT();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Login login0 = new Login();
      MySQLConfig.setDefault_codepage("/vRI886-AM8#(");
      Socket_data socket_data0 = new Socket_data((Socket) null, (IParse) null);
      Login.mmo_auth_initTXT();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.run();
      int int0 = Login.mmo_auth_initTXT();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Login.display_title();
      Login login0 = new Login();
      Login.mmo_auth_syncTXT();
      String string0 = "[IC^Hfl";
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("[IC^Hfl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Login login0 = new Login();
      PrintWriter printWriter0 = Login.loginLogOut;
      login0.setOut((PrintWriter) null);
      // Undeclared exception!
      try { 
        MySQLConfig.initConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = Login.getPASSWORDENC();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Login login0 = new Login();
      MySQLConfig.setLogin_server_id("conf/subnet_athena.conf");
      Login.display_title();
      MockInetAddress.anyLocalAddress();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = null;
      MockInetAddress.getByName("conf/subnet_athena.conf");
      // Undeclared exception!
      try { 
        login0.do_initXML();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Login.setPASSWORDENC(10000);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Login.mmo_auth_initXML();
      Login login0 = new Login();
      login0.getAuth_num();
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      // Undeclared exception!
      try { 
        login_Timer_interval_check_auth_sync0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Login.login_log("' due to underlying exception: ");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)105;
      Login.showTab(byteArray0);
      assertArrayEquals(new byte[] {(byte)71, (byte)105}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.close();
      login_ConnectionListener0.run();
      login0.setAuth_max(31034);
      assertEquals(31034, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Login login0 = new Login();
      login0.getAuth_max();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress1 = MockInetAddress.getLocalHost();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(inetAddress0, 893, inetAddress1, (-4497));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-4497
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.run();
      Socket_data socket_data0 = new Socket_data((Socket) null, (IParse) null);
      // Undeclared exception!
      try { 
        Login.codingKey(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Login.display_title();
      MockInetAddress.anyLocalAddress();
      Login.logUnknownPackets((Socket_data) null);
      // Undeclared exception!
      try { 
        Login.codingKey((Socket_data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Login.version((Socket_data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Login login0 = new Login();
      MySQLConfig.setDefault_codepage("conf/subnet_athena.conf");
      MockInetAddress.getByName("conf/subnet_athena.conf");
      ConfigurationManagement.setAccess_denynum((-1819));
      Login.mmo_auth_syncXML();
      String string0 = "ktTt<?}mO";
      login0.check_auth_sync();
      // Undeclared exception!
      try { 
        login0.parse_console("ktTt<?}mO");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Login login0 = new Login();
      MockSocket mockSocket0 = new MockSocket();
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      Login login1 = new Login();
      // Undeclared exception!
      try { 
        login1.parse_admin(100000000, socket_data0, login0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MySQLConfig.setLogin_server_db("- to creaZe new accounts with a limited time: tim+ of creation.");
      UserManagement.setAccountIdCount(624);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      Login login0 = new Login();
      Socket_data socket_data0 = new Socket_data((Socket) null);
      Login.getMd5Data(socket_data0);
      Login.mmo_auth_syncTXT();
      Login.mmo_auth_syncXML();
      // Undeclared exception!
      try { 
        Login.mmo_auth_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Login login0 = new Login();
      int int0 = login0.check_ipmask(30000, "// Accounts file: here are saved all information about the accounts.\n// Structure: account ID, username, password, sex, email, level, state, unban time, expiration time, # of logins, last login time, last (accepted) login ip, repeated(register key, register value)\n// where:\n//   sex             : M or F for normal accounts, S for server accounts\n//   level           : this account's gm level\n//   state           : 0: account is ok, 1 to 256: error code of packet 0x006a + 1\n//   unban time      : 0: no ban, <other value>: banned until the date (unix timestamp)\n//   expiration time : 0: unlimited account, <other value>: account expires on the date (unix timestamp)");
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Login login0 = new Login();
      Login.display_title();
      MockInetAddress.anyLocalAddress();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      MockSocket mockSocket0 = new MockSocket();
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      Login.mmo_auth_syncTXT();
      // Undeclared exception!
      try { 
        Login.mmo_auth_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Login login0 = new Login();
      MockInetAddress.getByName("conf/subnet_athena.conf");
      login0.do_initXML();
      login0.parse_console("CsassU");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("alive", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("conf/subnet_athena.conf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Login login0 = new Login();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      login0.check_ip(inetAddress0);
      UserManagement.setAccountIdCount(2000000);
      ConfigurationManagement.setAccess_allownum(50);
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      Login.getDbManagemtType();
      login0.getLog_fp();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncTXT();
      ConfigurationManagement.lesslessAuth_before_save_file();
      MySQLConfig.setLogin_server_pw("conf/subnet_athena.conf");
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      login0.check_ip(inetAddress0);
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      UserManagement.setAccountIdCount((-1443482680));
      login_ConnectionListener0.run();
      login_ConnectionListener0.close();
      // Undeclared exception!
      try { 
        Login.mmo_auth_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "CWO43");
      Random.setNextRandom(1930);
      Login login0 = new Login();
      MockSocket mockSocket0 = new MockSocket();
      FromChar fromChar0 = new FromChar();
      Socket_data socket_data0 = new Socket_data(mockSocket0, fromChar0);
      // Undeclared exception!
      try { 
        Login.codingKeyAdministration(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UserManagement.addUserTXT("F9v./0,y7", "- to creaZe new accounts with a limited time: tim+ of creation.", ".sz#", 'U');
      MySQLConfig.setLogin_server_db("- to creaZe new accounts with a limited time: tim+ of creation.");
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      Login login0 = new Login();
      Socket_data socket_data0 = new Socket_data((Socket) null);
      Login.getMd5Data(socket_data0);
      Login.mmo_auth_syncTXT();
      Login.mmo_auth_syncXML();
      // Undeclared exception!
      try { 
        Login.mmo_auth_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Login login0 = new Login();
      login0.getOut();
      UserManagement.addUserTXT("83", (String) null, "TTz!)7", 'U');
      MySQLConfig.setLogin_server_db("conf/subnet_athena.conf");
      UserManagement.setAccountIdCount(100000000);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      Login login1 = new Login();
      Socket_data socket_data0 = new Socket_data((Socket) null);
      Login.getMd5Data(socket_data0);
      Login.mmo_auth_syncTXT();
      Login.mmo_auth_syncXML();
      // Undeclared exception!
      try { 
        Login.mmo_auth_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Login login0 = new Login();
      MySQLConfig.setDefault_codepage("/vRI886-AM8#(");
      MockInetAddress.getByName(".");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/12_javathena/log/login.log");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "/vRI886-AM8#(");
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      login0.save_config_in_log();
      login0.do_initXML();
      Login login1 = new Login();
      login0.parse_console("<");
      login1.parse_console("alive");
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login1.new Timer_interval_check_auth_sync();
      login_Timer_interval_check_auth_sync0.run();
      // Undeclared exception!
      login0.do_initXML();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Login login0 = new Login();
      UserManagement.addUserTXT("Tth30]", "conf/subnet_athena.conf", "'03@R)Z", 'U');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)43;
      Login.showTab(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "rkBV824rB6");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "rkBV824rB6");
      login0.save_config_in_log();
      login0.do_initXML();
      // Undeclared exception!
      try { 
        login0.parse_console("exit");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Login login0 = new Login();
      MySQLConfig.setDefault_codepage("conf/subnet_athena.conf");
      InetAddress inetAddress0 = MockInetAddress.getByName("conf/subnet_athena.conf");
      UserManagement.addAccountIdCount((-2599));
      ConfigurationManagement.setAuth_before_save_file(100000000);
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, 2753);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      MockSocket mockSocket0 = new MockSocket(proxy0);
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      Login.getMd5Data(socket_data0);
      login0.check_auth_sync();
      // Undeclared exception!
      try { 
        Login.codingKey(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Login login0 = new Login();
      login0.getOut();
      MySQLConfig.setLogin_server_ip("conf/subnet_athena.conf");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "TTz!)7");
      Login.mmo_auth_syncXML();
      login0.check_auth_sync();
      Login login1 = new Login();
      login1.do_initTXT();
      login1.parse_console("help");
      // Undeclared exception!
      try { 
        login1.yesNoOnOffToBoolean("TTz!)7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Login login0 = new Login();
      MySQLConfig.setDefault_codepage("conf/subnet_athena.conf");
      MockInetAddress.getByName("conf/subnet_athena.conf");
      ConfigurationManagement.setAccess_denynum((-1819));
      login0.do_initXML();
      Login.mmo_auth_syncXML();
      login0.check_auth_sync();
      login0.parse_console("ktTt<?}mO");
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("ktTt<?}mO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }
}
