/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 22:13:04 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.nio.charset.Charset;
import java.util.Locale;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.BootstrapMethods;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.ExceptionTable;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LineNumberTable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Synthetic;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.classfile.Visitor;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassLoaderRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte byte0 = ElementValue.PRIMITIVE_BYTE;
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("|C&7Et8P", "|C&7Et8P", "|C&7Et8P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: |C&7Et8P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "J2U]z&n -";
      try { 
        Utility.typeOfMethodSignature("J2U]z&n -");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: J2U]z&n -
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Utility.typeOfSignature("[~.Ecg`u:#o-;Rr");
      Utility.replace("[~.Ecg`u:#o-;Rr", "The array of suffixes must not be null", "The array of suffixes must not be null");
      // Undeclared exception!
      try { 
        Utility.getSignature("[~.Ecg`u:#o-;Rr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [~.Ecg`u:#o-;Rr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utility.getSignature("\t<");
      byte[] byteArray0 = null;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("L,*\"yMq71KMu", "L,*\"yMq71KMu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"L,*\"yMq71KMu\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("wGAs", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `wGAs'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = true;
      Utility.accessToString((-283), true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte)96;
      Utility.toHexString(byteArray0);
      Utility.clearBit((-2093), (byte)117);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("75 29 00 0f 7d 00 4d 60", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `75 29 00 0f 7d 00 4d 60'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-95);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("a1", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.typeOfSignature("J a3NpR?6}Y2");
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte byte0 = ElementValue.PRIMITIVE_BYTE;
      String string0 = Utility.compactClassName("Bh_<b=S)Zw=");
      assertEquals("Bh_<b=S)Zw=", string0);
      
      int int0 = Utility.clearBit((byte)66, 4799);
      assertEquals(66, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      String string0 = Utility.format((-4028), 3037, false, '5');
      Utility.compactClassName("~", true);
      Utility.fillup("~", (-4028), true, '5');
      Utility.compactClassName("", "", false);
      Utility.compactClassName("", false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) string0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) byteArray0;
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte byte0 = ElementValue.PRIMITIVE_BYTE;
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("H7z(jCM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H7z(jCM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Utility.classOrInterface((-2866));
      try { 
        Utility.typeOfSignature("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-403), (-18));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utility.setBit((-832), (-832));
      Utility.isSet((-832), 2265);
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = Utility.isSet(13, 255);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-26);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("9e c1 67 d1 33 31 00 e6", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utility.searchOpcode(",}} >y.1");
      Utility.classOrInterface((short) (-1));
      int int0 = 0;
      boolean boolean0 = false;
      Utility.fillup(",}} >y.1", 0, false, 'z');
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Utility.searchOpcode("lstore_2");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lstore_2", (String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)0;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$b4$A$d4$c7$A", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = Utility.compactClassName("'>");
      assertEquals("'>", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('k');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Utility.getSignature("Hq");
      String string0 = "|";
      Utility.getSignature("|");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Hq";
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      Utility.getSignature("Hq");
      Utility.classOrInterface(36);
      // Undeclared exception!
      Utility.replace("ZRz", "", "\"1@7O");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = Utility.replace("{Eyj0_&LZ", "{Eyj0_&LZ", "{Eyj0_&LZ");
      assertEquals("{Eyj0_&LZ", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utility.methodSignatureReturnType("Byte code error: ");
      String string0 = "@gdRpv";
      boolean boolean0 = false;
      int int0 = (-215);
      int int1 = (-917);
      int int2 = 21;
      Attribute[] attributeArray0 = new Attribute[4];
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)31;
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)46;
      Constant[] constantArray0 = new Constant[5];
      ConstantString constantString0 = new ConstantString((byte)31);
      constantArray0[0] = (Constant) constantString0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = null;
      ConstantInterfaceMethodref constantInterfaceMethodref1 = null;
      try {
        constantInterfaceMethodref1 = new ConstantInterfaceMethodref((ConstantInterfaceMethodref) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantInterfaceMethodref", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utility.replace("Bh:<b=SVNw=", ";", "");
      Utility.getSignature("");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Bh:<b=SVNw=";
      stringArray0[1] = "Bh:<b=SVNw=";
      stringArray0[2] = "Bh:<b=SVNw=";
      stringArray0[3] = "Bh:<b=SVNw=";
      stringArray0[4] = "f2i";
      stringArray0[5] = "%";
      Utility.methodTypeToSignature("f2i", stringArray0);
      Utility.fillup("fD6kY%kuE@Fi{R", 0, false, ']');
      Utility.methodTypeToSignature("Bh:<b=SVNw=", stringArray0);
      MockFile mockFile0 = new MockFile("(LBh:<b=SVNw=;LBh:<b=SVNw=;LBh:<b=SVNw=;LBh:<b=SVNw=;Lf2i;L%;)Lf2i;", "%Nv\"2e");
      MockFile mockFile1 = new MockFile(mockFile0, "(LBh:<b=SVNw=;LBh:<b=SVNw=;LBh:<b=SVNw=;LBh:<b=SVNw=;Lf2i;L%;)LBh:<b=SVNw=;");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, true);
      try { 
        MockFile.createTempFile("strictfp", "Invalid StackMap frame_type: ", (File) mockFile1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char char0 = 'M';
      Utility.isJavaIdentifierPart('M');
      Utility.convertString("S8KjB");
      try { 
        Utility.methodSignatureArgumentTypes("S8KjB", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: S8KjB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "-xbBrwe";
      Utility.replace("-xbBrwe", "-xbBrwe", "-xbBrwe");
      String string1 = ">`Z|fT(3Pz.92AN?s*";
      try { 
        Utility.typeOfMethodSignature(">`Z|fT(3Pz.92AN?s*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >`Z|fT(3Pz.92AN?s*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("RsLYfS\u0001", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RsLYfS\u0001'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.classOrInterface(0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "class";
      MockFile mockFile0 = new MockFile("class");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      int int0 = 0;
      Utility.clearBit(91, 0);
      Utility.compactClassName("");
      Utility.getSignature("The size must be non-negative");
      byte[] byteArray0 = null;
      MockFile mockFile1 = new MockFile("");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile1, "LThe;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"LThe;\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("LocalVariable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LocalVariable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Illegll nested brackets:");
      assertEquals((byte)10, byte0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      Utility.isJavaIdentifierPart('^');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JtdrD+~VEX3odT");
      Utility.accessToString((-1485), false);
      // Undeclared exception!
      try { 
        Utility.compactClassName("aconst_null", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.compactClassName("1'>");
      Utility.accessToString(1186);
      try { 
        Utility.typeOfMethodSignature("putfield");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putfield
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte byte0 = ElementValue.PRIMITIVE_BYTE;
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.classOrInterface((byte)66);
      try { 
        Utility.typeOfSignature("U~d4M.AdRuiVei*f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U~d4M.AdRuiVei*f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((-2455L));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)32;
      byteArray1[2] = (byte)32;
      byteArray1[3] = (byte)32;
      byteArray1[4] = (byte)32;
      byteArray1[5] = (byte)32;
      String string0 = Utility.codeToString(byteArray1, constantPool0, (int) (byte)0, (int) (byte)32, true);
      assertEquals("0:    lload_2\n1:    lload_2\n2:    lload_2\n3:    lload_2\n4:    lload_2\n5:    lload_2\n", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-64), 99);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3a3v,Roq>b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3a3v,Roq>b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = ElementValue.PRIMITIVE_BYTE;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: true
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)50;
      Utility.encode(byteArray0, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1239, (-1874));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)24;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)24, (int) (byte)24);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte byte0 = ElementValue.PRIMITIVE_BYTE;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.compactClassName(" read ", " read ", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*0|)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0|)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte byte0 = ElementValue.PRIMITIVE_BYTE;
      // Undeclared exception!
      try { 
        Utility.signatureToString("The");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.compactClassName("PT7eoF]s", true);
      Utility.accessToString(12, true);
      try { 
        Utility.decode("PT7eoF]s", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature(".X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      try { 
        Utility.typeOfSignature("RuntimeVisibleAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RuntimeVisibleAnnotations
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte byte0 = ElementValue.PRIMITIVE_BYTE;
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)66;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)66;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.compactClassName(" read ", "java.lang.lxor", true);
      Utility.accessToString(41);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("'>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte byte0 = ElementValue.PRIMITIVE_BYTE;
      byte byte1 = Utility.typeOfSignature("Bh:<b=SVNw=");
      assertEquals((byte)8, byte1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      try { 
        Utility.typeOfSignature("=-.Z07$`AUeE :(w.1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =-.Z07$`AUeE :(w.1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.accessToString(2994);
      byte[] byteArray0 = Utility.decode("private final synchronized transient native interface strictfp", false);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = Utility.signatureToString("Insensitive");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte byte0 = ElementValue.PRIMITIVE_BYTE;
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)66;
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("7o5Iv?/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7o5Iv?/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = ObjectStreamConstants.baseWireHandle;
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#Z,`]~k`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #Z,`]~k`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte0 = Utility.typeOfSignature("CONSTANT_MethodType");
      assertEquals((byte)5, byte0);
      
      String string0 = Utility.compactClassName("java.lang.y]l}Vfs}u.;se&Q");
      assertEquals("java.lang.y]l}Vfs}u.;se&Q", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte byte0 = ElementValue.PRIMITIVE_BYTE;
      byte byte1 = Utility.typeOfSignature("D_");
      assertEquals((byte)7, byte1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-14);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-14), (int) (byte) (-14));
      assertEquals("0:    lstore_1\n1:    ishr\n2:    fadd\n3:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Insensitive");
      assertEquals((byte)10, byte0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Insensitive";
      objectArray0[1] = (Object) "Insensitive";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "Insensitive";
      objectArray0[4] = (Object) "Insensitive";
      objectArray0[5] = (Object) "Insensitive";
      objectArray0[6] = (Object) "Insensitive";
      objectArray0[7] = (Object) "Insensitive";
      Utility.printArray(objectArray0, false);
      String string0 = Utility.methodSignatureReturnType("Insensitive, Insensitive, java.lang.Object@4f3c4f76, Insensitive, Insensitive, Insensitive, Insensitive, Insensitive", false);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "J47mJ3:pI[_#l.L/";
      Utility.typeOfSignature("J47mJ3:pI[_#l.L/");
      // Undeclared exception!
      try { 
        Utility.signatureToString(")>}R^D)m}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `)>}R^D)m}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+&Yu:V<-Mnu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &Yu:V<-Mnu
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("OR~Rpcm'\"a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OR~Rpcm'\"a'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte byte0 = ElementValue.PRIMITIVE_BYTE;
      // Undeclared exception!
      try { 
        Utility.signatureToString("H7z(jCM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H7z(jCM'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "\\xq0?R30uEP(";
      Utility.searchOpcode("xq0?R30uEP(");
      String string1 = "($|UwTQV^QYRf";
      Utility.fillup("($|UwTQV^QYRf", (short) (-1), true, 'z');
      try { 
        Utility.decode("($|UwTQV^QYRf", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A", string0);
      
      byte[] byteArray1 = Utility.decode("$A", false);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode("W$bkT81sye6665lK]", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"bk\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte byte0 = ElementValue.PRIMITIVE_BYTE;
      try { 
        Utility.typeOfSignature(":<b=SBVNw=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :<b=SBVNw=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.convertString("OR~Rpcm'\"a");
      assertEquals("OR~Rpcm\\'\\\"a", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The array of suffixes must not be null");
      Utility.typeOfSignature("[~.Ecg`u:#o-;Rr");
      // Undeclared exception!
      try { 
        Utility.signatureToString("[~.Ecg`u:#o-;Rr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `~.Ecg`u:#o-;Rr'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)8;
      byteArray0[0] = (byte)8;
      byte byte1 = (byte)79;
      byteArray0[1] = (byte)79;
      byte byte2 = (byte)4;
      byteArray0[2] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.compactClassName("iconst_5", false);
      try { 
        Utility.methodSignatureArgumentTypes("iconst_5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iconst_5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      try { 
        Utility.typeOfSignature("A>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte byte0 = ElementValue.PRIMITIVE_BYTE;
      byte byte1 = Utility.typeOfSignature("J|^");
      assertEquals((byte)11, byte1);
      
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "J|^";
      stringArray0[3] = "w_qOgo|\"ht[>},i%]";
      stringArray0[4] = "";
      String string1 = Utility.methodTypeToSignature("SyntheticRepository could not load ", stringArray0);
      assertEquals("(L;L;LJ|^;[Lw_qOgo|\"ht;L;)LSyntheticRepository;", string1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("<<*E[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte byte0 = ElementValue.PRIMITIVE_BYTE;
      String string0 = Utility.signatureToString("V(g:-yS[AN)$d");
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      try { 
        Utility.typeOfSignature(", offset delta=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , offset delta=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9CRT}n|^k`MM-$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9CRT}n|^k`MM-$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("LocalVariable");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_RESET;
      try { 
        Utility.typeOfSignature("OR~Rpcm'\"a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OR~Rpcm'\"a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte byte0 = ElementValue.PRIMITIVE_BYTE;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(09^", "(09^", "Invalid signature: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `09^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "3a3v,Roq>X;b";
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utility.typeOfSignature("!T}Ge");
      Utility.typeOfSignature("!T}Ge");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("!T}Ge", "T-5", "!T}Ge");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: !T}Ge
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = Utility.signatureToString("DW");
      assertEquals("double", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "DW";
      stringArray0[1] = "double";
      stringArray0[2] = "double";
      stringArray0[3] = "double";
      stringArray0[4] = "DW";
      String string1 = Utility.methodTypeToSignature("double", stringArray0);
      assertEquals("(LDW;DDDLDW;)D", string1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte byte0 = ElementValue.PRIMITIVE_BYTE;
      try { 
        Utility.typeOfSignature("4,wFWaBs\" R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4,wFWaBs\" R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("P$fk&y?r&Wb*R'{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P$fk&y?r&Wb*R'{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1f^B!u<Rqp~}Er");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1f^B!u<Rqp~}Er
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.SC_SERIALIZABLE;
      String string0 = "E\\h-YKV*O~3ok}Y]";
      try { 
        Utility.typeOfSignature("Eh-YKV*O~3ok}Y]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Eh-YKV*O~3ok}Y]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "3a3v,Roq>X;b";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)66;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)83, 3036, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "M";
      try { 
        Utility.typeOfSignature("M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      try { 
        Utility.typeOfSignature("$nr2zw 7*7t)n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $nr2zw 7*7t)n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utility.signatureToString("DW");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)85;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1896, (int) (byte)69, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Utility.typeOfSignature("S{dV&#P`>5");
      try { 
        Utility.typeOfSignature("vWrXDKAlq<qKrh%0PY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: vWrXDKAlq<qKrh%0PY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("QP.jO[DXz&'Xw:{`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QP.jO[DXz&'Xw:{`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "P";
      try { 
        Utility.typeOfSignature("P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ";KO=#k1~fb@3w<:vMuU";
      stringArray0[1] = ";KO=#k1~fb@3w<:vMuU";
      try { 
        Utility.typeOfSignature(";KO=#k1~fb@3w<:vMuU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;KO=#k1~fb@3w<:vMuU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utility.methodTypeToSignature(".o9V?eA*Q", (String[]) null);
      Utility.convertString("");
      String string0 = Utility.methodTypeToSignature("class", (String[]) null);
      assertEquals("()Lclass;", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte) (-58);
      byteArray0[8] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-58), (int) (byte) (-58), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "X";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte)91;
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(4, (-3546));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 84, (int) (byte)35, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte) (-119);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-26), 6, true);
      assertEquals("0:    <illegal opcode>\n1:    lastore\n2:    if_icmpgt\t\t#14758\n5:    lstore_0\n6:    l2f\n", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 14, 6, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      try { 
        Utility.typeOfSignature("/).I4^\"MP'L ^v'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /).I4^\"MP'L ^v'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)75;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte) (-60);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-55), 40, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fstore_2
         // 1:    nop
         // 2:    fstore_2
         // 3:    astore_0
         // 4:    nop
         // 5:    castore
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\\");
      byteArray0[2] = (byte)98;
      try { 
        Utility.typeOfSignature("-^N>*8qBgy#Q?@'^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -^N>*8qBgy#Q?@'^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)35;
      byteArray0[7] = (byte)91;
      byte byte0 = Utility.typeOfSignature("FN3k$At[4r<");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String[] stringArray0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte)47;
      byteArray0[8] = (byte) (-1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 81, (int) (byte)82, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Utility.accessToString(2015);
      Utility.signatureToString("Z");
      Utility.setBit(113, 89);
      Utility.replace("multianewarray", "getstatic", "public private protected static final volatile transient native interface abstract");
      int int0 = 1077;
      Utility.setBit(33554545, 1077);
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("public private protected static final volatile transient native interface abstract", (String[]) null);
      boolean boolean0 = true;
      Utility.printArray((Object[]) null, true, true);
      Utility.convertString("multianewarray");
      byte[] byteArray0 = new byte[0];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("getstatic", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("L\r;V", true);
      assertEquals("\r", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      Utility.methodTypeToSignature("", (String[]) null);
      Utility.methodSignatureToString("()L;", "", "/^b7;z-", true);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)37;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("R2$r$A$A$A$A$A$A", string0);
      
      String string1 = Utility.methodTypeToSignature(" o{&cMV^7?3 MD", (String[]) null);
      assertEquals("()Lo{&cMV^7?3;", string1);
      
      String string2 = Utility.methodSignatureToString("()Lo{&cMV^7?3;", "()Lo{&cMV^7?3;", "x*2b]#+dV@i9gNy\"Q", false);
      assertEquals("x*2b]#+dV@i9gNy\"Q o{&cMV^7?3 ()Lo{&cMV^7?3;()", string2);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      try { 
        Utility.typeOfSignature("YN/L}1:p ^AUh=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YN/L}1:p ^AUh=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "GZ#_UB";
      // Undeclared exception!
      try { 
        Utility.signatureToString("GZ#_UB", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GZ#_UB'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)75;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte) (-60);
      try { 
        Utility.typeOfSignature("2EFGAh;[rp!,cZ_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2EFGAh;[rp!,cZ_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)47;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)82, (-1862), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)85;
      try { 
        Utility.typeOfSignature("W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)82;
      try { 
        Utility.typeOfSignature("5r+KU[@hOyS8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5r+KU[@hOyS8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%I>R6<RB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %I>R6<RB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-119);
      byteArray0[0] = (byte)63;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte) (-119);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-119), 6, false);
      try { 
        Utility.methodSignatureArgumentTypes("0:    lstore_0\n1:    l2f\n2:    nop\n3:    l2f\n4:    dstore\t\t%163\n6:    l2f\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    lstore_0
         // 1:    l2f
         // 2:    nop
         // 3:    l2f
         // 4:    dstore\t\t%163
         // 6:    l2f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String[] stringArray0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)37;
      byteArray0[4] = (byte)82;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte)78;
      byteArray0[8] = (byte) (-1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 81, (int) (byte)82, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      Utility.typeOfSignature("Z^J)\"!P>9i)]2SnAFVi");
      try { 
        Utility.typeOfSignature("& -6I3+U->4AM7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: & -6I3+U->4AM7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-117);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)67, (int) (byte)90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)111;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-14);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-14), (int) (byte) (-14));
      assertEquals("0:    ddiv\n1:    nop\n2:    fadd\n3:    <illegal opcode>\n", string0);
      
      String string1 = Utility.accessToString((int) (byte) (-14), false);
      assertEquals("private final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-119);
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong((byte) (-119));
      constantArray0[0] = (Constant) constantLong0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)57, (byte) (-119));
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantFloat constantFloat0 = new ConstantFloat(1.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantFloat1.setBytes(0.0F);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (-1593), 6);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Utility.signatureToString("C[zPE", false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "char";
      objectArray0[1] = (Object) "char";
      objectArray0[2] = (Object) "char";
      objectArray0[3] = (Object) "char";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "char";
      objectArray0[6] = (Object) "char";
      objectArray0[7] = (Object) "C[zPE";
      Utility.printArray(objectArray0, false);
      Utility.printArray(objectArray0);
      Utility.convertString("C[zPE");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -58
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)97;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)68, (int) (byte)97, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("NxG>*EQp$XLc2I/", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NxG>*EQp$XLc2I/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "O!wubV5d r:R$|*i");
      String string0 = Utility.signatureToString("S:V");
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)89;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)89, 1603, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      try { 
        Utility.typeOfSignature("GZ#_UB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GZ#_UB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("?+@iaK]A\"LA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?+@iaK]A\"LA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = "java.lang.";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.");
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("E.|^+q(|", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E.|^+q(|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Utility.signatureToString("Jr+Hy]!|;.|PvC-.x", true);
      Utility.signatureToString("Jr+Hy]!|;.|PvC-.x");
      try { 
        Utility.decode("long", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Utility.searchOpcode("xq0?R30uEP(");
      Utility.fillup("($|UwTQV^QYRf", (short) (-1), true, 'z');
      Utility.decode("($|UwTQV^QYRf", false);
      try { 
        Utility.methodSignatureArgumentTypes("($|UwTQV^QYRf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$|UwTQV^QYRf'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      short short0 = Constants.MINOR_1_1;
      Utility.fillup("($|UwTQV^QYRf", (short)3, true, ' ');
      try { 
        Utility.methodSignatureArgumentTypes("($|UwTQV^QYRf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$|UwTQV^QYRf'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = "LocalVariable";
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)125;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 254, 980, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 162, (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)82;
      Utility.typeOfSignature("V");
      Utility.methodSignatureReturnType("6Y&H\")S&}", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("6Y&H\")S&}", "monitorexit", "short", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6Y&H\")S&}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.typeOfSignature("8Y$';<PS|LLJ[iue ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8Y$';<PS|LLJ[iue 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3T_'R`S$+bwP3907^q|");
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) byteArray0;
      objectArray0[2] = (Object) "<clinit>";
      objectArray0[3] = (Object) "<clinit>";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Utility.printArray(objectArray0, false);
      Utility.signatureToString("[B@22fe5b, [B@22fe5b, <clinit>, <clinit>, java.lang.Object@60c305ba");
      String string1 = Utility.signatureToString("[B@22fe5b, [B@22fe5b, <clinit>, <clinit>, java.lang.Object@60c305ba");
      assertEquals("byte[]", string1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte) (-19);
      byte byte0 = (byte)103;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      byteSequence0.available();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("MethodParameters");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MethodParameters'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ws#rdZx479&B<]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ws#rdZx479&B<]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)56;
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-2726), 76);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 64, (-942), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      try { 
        Utility.decode("$-sk7w-$*##Wx:E:fA", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)93;
      byteArray0[1] = (byte)96;
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-86), 3130, false);
      Utility.compactClassName("0:    nop\n1:    iadd\n");
      try { 
        Utility.methodSignatureArgumentTypes("iflt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iflt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)32;
      byteArray1[2] = (byte)32;
      byteArray1[3] = (byte)32;
      byteArray1[4] = (byte) (-67);
      byteArray1[5] = (byte)32;
      byteArray1[6] = (byte)32;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)32, (int) (byte) (-67), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 8224. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6IYcyDJ4^A\"1um/{AC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6IYcyDJ4^A\"1um/{AC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-38);
      byte byte0 = (byte)68;
      byteArray0[4] = (byte)68;
      // Undeclared exception!
      try { 
        Utility.signatureToString("KFC&bv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KFC&bv'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-14), (byte) (-14));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantLong constantLong0 = new ConstantLong((byte) (-14));
      constantArray0[1] = (Constant) constantLong0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-14), 2046);
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(", low = ");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte) (-14);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-14), (int) (byte) (-14));
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    faload\n5:    <illegal opcode>\n6:    <illegal opcode>\n7:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)11, 82, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      try { 
        Utility.typeOfSignature("K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)11;
      byteArray0[6] = (byte)34;
      byteArray0[2] = (byte)0;
      byteArray0[8] = (byte)20;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)11, 82, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)122;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)74, false);
      assertEquals("0:    iload_3\n1:    ifnonnull\t\t#19019\n4:    ishr\n", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('|');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)11;
      byteArray0[6] = (byte)34;
      byteArray0[2] = (byte)0;
      byteArray0[8] = (byte)20;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)11, 82, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 2816. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)79;
      Utility.codeToString(byteArray0, constantPool0, (-3075), 36, false);
      try { 
        Utility.methodSignatureArgumentTypes("0:    <illegal opcode>\n1:    l2d\n2:    <illegal opcode>\n3:    nop\n4:    iastore\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    <illegal opcode>
         // 1:    l2d
         // 2:    <illegal opcode>
         // 3:    nop
         // 4:    iastore
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = "X";
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)67;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-1), 2344, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    pop2
         // 1:    <illegal opcode>
         // 2:    impdep2
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)125;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 191, 184, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Utility.searchOpcode("xq0?R30uEP(");
      Utility.fillup("($|UwTQV^QYRf", (short) (-1), true, 'z');
      try { 
        Utility.typeOfMethodSignature("($|UwTQV^QYRf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ($|UwTQV^QYRf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-122);
      byteArray0[3] = (byte) (-122);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-122), (int) (byte) (-122));
      assertEquals("0:    lstore_1\n1:    i2f\n2:    nop\n3:    i2f\n", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte byte0 = (byte)125;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte byte1 = (byte) (-105);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)42;
      byte byte2 = (byte)56;
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)125;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 191, 184, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte) (-120);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 153, 153, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte) (-109);
      byteArray0[7] = (byte) (-94);
      byteArray0[8] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)69, (int) (byte) (-109), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-58), (int) (byte)85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iand
         // 1:    ifnull\t\t#-14713
         // 4:    castore
         // 5:    castore
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-61);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-61);
      byteArray1[1] = (byte)85;
      byteArray1[2] = (byte) (-61);
      byteArray1[3] = (byte)75;
      String string0 = Utility.codeToString(byteArray1, constantPool0, (-2104), 148, true);
      assertEquals("0:    monitorexit\n1:    castore\n2:    monitorexit\n3:    astore_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)87;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)59;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)87, (int) (byte)7, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-69);
      byte[] byteArray1 = Utility.decode("if_acmpne", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 658, (int) (byte)85, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.decode("Q%n,$U5li#M7bo$4PE", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"4P\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = "X";
      byte byte0 = (byte)49;
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)81;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)7, 220, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Utility.searchOpcode("xq0?R30uEP(");
      Utility.fillup("($|UwTQV^QYRf", (short) (-1), true, 'z');
      byte[] byteArray0 = Utility.decode("($|UwTQV^QYRf", false);
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong((short) (-1));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(32767, (short) (-1));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 83, (int) (short) (-1), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-14);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)87;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)53, (-3687), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-96);
      byteArray0[0] = (byte)63;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte) (-96);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-96), 6, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lstore_0
         // 1:    if_icmpne\t\t#161
         // 4:    dstore\t\t%163
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = "Te";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)83;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)26, 129, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)86;
      boolean boolean0 = false;
      byte[] byteArray1 = new byte[5];
      byteArray1[1] = (byte)67;
      byteArray1[2] = (byte)67;
      byteArray1[3] = (byte)24;
      byteArray1[4] = (byte)67;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 188, 168, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)49;
      byteArray0[8] = (byte)122;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)91, 3655, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")fJpHNUexCKT3u#8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )fJpHNUexCKT3u#8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1603, (int) (byte)49, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Utility.searchOpcode("xq0?R30uEP(");
      Utility.fillup("($|UwTQV^QYRf", (short) (-1), true, 'z');
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte)14;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-39), (int) (byte)40, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.fillup("java.lang.Byte", (-2482), false, 'z');
      byte[] byteArray0 = Utility.decode("E.DD)i*_0v)xM", false);
      ConstantLong constantLong0 = new ConstantLong(1809L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantDouble constantDouble0 = new ConstantDouble((-2482));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(32767, 194);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 184, 1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte) (-93);
      byteArray0[8] = (byte) (-107);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 134, 158, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 57576. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = Utility.decode("CQiA!''", false);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-69), (int) (byte) (-69), false);
      assertEquals("0:    fstore_0\n1:    fastore\n2:    lmul\n3:    lstore_2\n4:    lload_3\n5:    dload_1\n6:    dload_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Utility.searchOpcode("xq0?R30uEP(");
      String string0 = "($|UwTQV^QYRf";
      boolean boolean0 = true;
      Utility.fillup("($|UwTQV^QYRf", (short) (-1), true, 'z');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)125;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 66, (int) (byte)125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-96);
      byteArray0[0] = (byte)63;
      byteArray0[3] = (byte) (-96);
      byteArray0[1] = (byte)45;
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte) (-96);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)63, (int) (byte)45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)67;
      byteArray0[4] = (byte)127;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)67, (int) (byte)67);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)19, (int) (byte)19, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)38;
      byte byte0 = (byte) (-67);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte) (-67);
      ConstantPool constantPool0 = null;
      int int0 = 36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 53, 36, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Utility.searchOpcode("xq0?R30uEP(");
      String string0 = "($|UwTQV^QYRf";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 222, (int) (byte)26, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)83;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 65, 1953, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = "X";
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)87;
      byteArray0[8] = (byte)50;
      Utility.encode(byteArray0, false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 40, (int) (byte)87, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = "A>";
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)71;
      byteArray0[0] = (byte)91;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte) (-117);
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2919, 2686, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-119);
      byteArray0[0] = (byte)63;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte) (-119);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-119), 6, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lstore_0
         // 1:    l2f
         // 2:    nop
         // 3:    l2f
         // 4:    lstore_3
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 765, (int) (byte) (-84));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-17);
      Constant[] constantArray0 = new Constant[6];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(749, (byte)113);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantInvokeDynamic constantInvokeDynamic2 = new ConstantInvokeDynamic((byte) (-89), (-273));
      constantArray0[1] = (Constant) constantInvokeDynamic2;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2661, 2661);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(188, 89);
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantInvokeDynamic constantInvokeDynamic3 = new ConstantInvokeDynamic((byte) (-17), 192);
      constantArray0[4] = (Constant) constantInvokeDynamic3;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(192, 749);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[5] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-17), (int) (byte) (-89), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lrem
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      String string0 = "Q%w,$U5li#M7bo$4PE";
      try { 
        Utility.typeOfSignature("Q%w,$U5li#M7bo$4PE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q%w,$U5li#M7bo$4PE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "RuntimeVisibleAYnotaRions";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte) (-60);
      byteArray0[8] = (byte) (-73);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-104), (int) (byte) (-60), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    impdep2
         // 1:    dcmpg
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.getSignature("java.lang.Long");
      assertEquals("Ljava/lang/Long;", string0);
      
      byte[] byteArray0 = new byte[8];
      constantPool0.copy();
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)1;
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-1996), (int) (byte) (-51));
      assertEquals("0:    istore_0\n1:    aload_3\n2:    dup2_x1\n3:    iand\n4:    <illegal opcode>\n5:    dconst_1\n6:    impdep2\n7:    aconst_null\n", string1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte) (-93);
      byteArray0[8] = (byte) (-107);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 134, 158, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte)107;
      byteArray0[8] = (byte)62;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1765), (int) (byte)17, false);
      assertEquals("0:    fload_0\n1:    idiv\n2:    sipush\t\t-25510\n5:    <illegal opcode>\n6:    <illegal opcode>\n7:    dmul\n8:    istore_3\n", string0);
      
      short short0 = Constants.INT2CHAR;
      byte[] byteArray1 = Utility.decode("dup", false);
      assertArrayEquals(new byte[] {(byte)100, (byte)117, (byte)112}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, (int) (byte)16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)74;
      constantPool0.copy();
      byteArray0[3] = (byte)74;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)74, 122, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-104);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte0 = (byte) (-68);
      byteArray0[1] = (byte) (-68);
      byte byte1 = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)81;
      byte byte2 = (byte)34;
      byteArray0[6] = (byte)34;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 179, (int) (byte) (-68), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)96, (int) (byte)96, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-76);
      byteArray0[0] = (byte) (-76);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1603, (int) (byte)49, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Utility.searchOpcode("xq0?R30uEP(");
      Utility.fillup("($|UwTQV^QYRf", (short) (-1), true, 'z');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-84);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3194, (-2484), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)74;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-57), (int) (byte) (-57), false);
      assertEquals("0:    iload_3\n1:    ifnonnull\t\t#19019\n4:    nop\n", string0);
      
      String string1 = Utility.getSignature("0:    iload_3\n1:    ifnonnull\t\t#19019\n4:    nop\n");
      assertEquals("L0:;", string1);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)19, (int) (byte)19, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)54;
      byteArray0[4] = (byte)0;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte)78;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)78;
      byteArray1[1] = (byte)54;
      byteArray1[2] = (byte) (-101);
      byteArray1[3] = (byte)54;
      byteArray1[4] = (byte) (-101);
      byteArray1[5] = (byte)51;
      byteArray1[6] = (byte)87;
      byteArray1[7] = (byte)54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 2740, (int) (byte)78, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)90, 2227, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Utility.convertString("\t<");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte) (-118);
      byteArray0[7] = (byte)66;
      byteArray0[8] = (byte) (-72);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 116, 8, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)81;
      byteArray0[6] = (byte)34;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)81, (-2288), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)64;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-95), 3125, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[7];
      byte[] byteArray2 = Utility.decode("8l#^JC^sx^T%$Ow1/|", false);
      String string0 = Utility.codeToString(byteArray2, constantPool0, (int) (byte)0, 16384, true);
      assertEquals("0:    fstore\t\t%108\n2:    fload_1\n3:    dup2_x2\n4:    dstore_3\n5:    fstore_0\n6:    dup2_x2\n7:    drem\n8:    ishl\n9:    dup2_x2\n10:   bastore\n11:   fload_3\n12:   dconst_0\n13:   dneg\n14:   daload\n15:   laload\n16:   iushr\n", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte byte0 = ElementValue.PRIMITIVE_BYTE;
      String string0 = Utility.signatureToString("F");
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Ny7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ny7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte) (-50);
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      constantArray0[0] = (Constant) constantDouble0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[2] = (Constant) constantMethodType1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("java.lang.Float");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[3] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 86, 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)43;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 61, 34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = "A>";
      try { 
        Utility.typeOfSignature("@0/l<I6Y.9:5T#b)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @0/l<I6Y.9:5T#b)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)111;
      byteArray0[8] = (byte)8;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3241), (int) (byte) (-66), true);
      assertEquals("0:    ddiv\n1:    arraylength\n2:    ddiv\n3:    ddiv\n4:    ddiv\n5:    iconst_5\n6:    ddiv\n7:    nop\n8:    iconst_5\n", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Yr5dK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Yr5dK'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-87);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 92, (int) (byte) (-87), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)74;
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-88), (int) (byte) (-88), false);
      assertEquals("0:    iload_3\n1:    jsr\t\t#19019\n4:    nop\n", string0);
      
      String string1 = Utility.getSignature("0:    iload_3\n1:    jsr\t\t#19019\n4:    nop\n");
      assertEquals("L0:;", string1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte) (-85);
      byteArray0[8] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-85), 83, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    areturn
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-94);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-94), (-15), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString("L~a<<=5Ik#EX;kWn05");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L~a<<=5Ik#EX;kWn05
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      String string0 = Constants.ILLEGAL_OPCODE;
      constantPool0.setConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("L~a<<=5Ik#EX;kWn05");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L~a<<=5Ik#EX;kWn05
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Utility.searchOpcode("xq0?R390uEP(");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)104;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (short) (-1), (int) (byte)104);
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)48;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 167, 702, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-104), (int) (byte) (-36));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ishl
         // 1:    <illegal opcode>
         // 2:    <illegal opcode>
         // 3:    lshl
         // 4:    fadd
         // 5:    dup
         // 6:    dcmpg
         // 7:    dup2
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)1;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2086, 289, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Utility.searchOpcode("xq0?R390uEP(");
      Utility.fillup("($|UwTQV^QYRf", (short) (-1), true, ' ');
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-116);
      byteArray0[0] = (byte) (-116);
      byte byte1 = (byte) (-77);
      byteArray0[1] = (byte) (-77);
      byte byte2 = (byte)6;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte) (-115);
      byteArray0[8] = (byte)56;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 170, (-1056));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 212. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Utility.searchOpcode("xq0?R390uEP(");
      Utility.fillup("($|UwTQV^QYRf", (short) (-1), true, ' ');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte) (-118);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (-2936), (int) (short) (-1), true);
      try { 
        Utility.methodSignatureReturnType("0:    dload_3\n1:    impdep1\n2:    aconst_null\n3:    iload\t\t%138\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    dload_3
         // 1:    impdep1
         // 2:    aconst_null
         // 3:    iload\t\t%138
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((-4247));
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte) (-120);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3687, 145);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)95;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-744), 631, true);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-93), (int) (byte)95);
      assertEquals("0:    swap\n1:    if_icmpgt\t\t#24321\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
      
      String string1 = Utility.convertString("0:    swap\n1:    if_icmpgt\t\t#24321\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n");
      assertEquals("0:    swap\\n1:    if_icmpgt\t\t#24321\\n4:    nop\\n5:    nop\\n6:    nop\\n7:    nop\\n", string1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)67;
      byte[] byteArray1 = new byte[19];
      byteArray1[0] = (byte)67;
      byteArray1[1] = (byte)67;
      byteArray1[2] = (byte)67;
      byteArray1[3] = (byte) (-92);
      byteArray1[4] = (byte)67;
      byteArray1[5] = (byte)67;
      int int0 = 9971;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 9971, (int) (byte) (-92), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat((-542.63104F));
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat0;
      constantArray0[2] = (Constant) constantFloat0;
      constantArray0[3] = (Constant) constantFloat0;
      constantArray0[4] = (Constant) constantFloat0;
      constantArray0[2] = (Constant) constantFloat0;
      constantArray0[6] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)70;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 102, 2011);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      short short0 = Utility.searchOpcode("xq0?R390uEP(");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)34;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-108), 910);
      assertEquals("0:    lcmp\n1:    fload_0\n2:    fload_0\n", string0);
      
      String string1 = Utility.compactClassName("xq0?R390uEP(");
      assertEquals("xq0?R390uEP(", string1);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-3368), (-3368));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dreturn
         // 1:    daload
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Utility.searchOpcode("xq0?R390uEP(");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)43;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3356, 2904);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-107);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1237), 81, false);
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)31, (int) (byte)31);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-113);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 249, (int) (byte) (-113), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)24;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2630, 139);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)14;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 17, (-786));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-55);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2523), (-2523));
      assertEquals("0:    ifle\t\t#-32055\n", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = "Te";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)67;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)67, 736);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 40, (-3923));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-102);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-102), (-15), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      short short0 = Constants.MINOR_1_1;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte)102;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 208, (int) (byte)102);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte) (-98);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 222, 184);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Utility.compactClassName("2n`rZlc{oJRoPlU", false);
      byte[] byteArray0 = Utility.decode("2n`rZlc{oJRoPlU", false);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, 6, 6);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte) (-53);
      byteArray0[7] = (byte) (-53);
      byteArray0[8] = (byte) (-53);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-53), (int) (byte) (-53), false);
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    fload\t\t%203\n5:    <illegal opcode>\n6:    <illegal opcode>\n7:    <illegal opcode>\n8:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)25;
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte)0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 161, (-334));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-59), 860);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte) (-100);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 84, 58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Utility.methodTypeToSignature("\"", (String[]) null);
      String string0 = "idiv";
      Utility.methodSignatureToString("()L\";", "g_%0[xK}~@88?h4K0`S", "idiv", false);
      Utility.methodSignatureArgumentTypes("()L\";");
      // Undeclared exception!
      try { 
        Utility.signatureToString("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      short short0 = Constants.FADD;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)91;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)25;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-125), (int) (byte) (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    impdep2
         // 1:    dup_x1
         // 2:    dup_x2
         // 3:    ifgt\t\t#-31984
         // 6:    pop2
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-103);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-103), 162);
      assertEquals("0:    ifeq\t\t#0\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)26;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-609), (int) (byte)26);
      assertEquals("0:    areturn\n1:    lookupswitch\tdefault = 1, npairs = 0 ()\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n", string0);
      
      int int0 = Utility.setBit(191, (-609));
      assertEquals((-2147483457), int0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1267, (int) (byte) (-80));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte) (-76);
      byteArray0[7] = (byte) (-36);
      byteArray0[8] = (byte) (-45);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)36, (int) (byte) (-72));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-111));
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-111);
      byteArray1[1] = (byte) (-111);
      byteArray1[2] = (byte) (-111);
      byteArray1[3] = (byte) (-111);
      byteArray1[4] = (byte) (-128);
      byteArray1[5] = (byte) (-111);
      byteArray1[6] = (byte) (-111);
      byteArray1[7] = (byte) (-111);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 3967, 749);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)26;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)29;
      byteArray0[3] = (byte)29;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 175, (int) (byte)29);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Utility.searchOpcode("xq0?R390uEP(");
      Utility.fillup("($|UwTQV^QYRf", (short) (-1), true, ' ');
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte) (-124);
      byteArray0[0] = (byte) (-124);
      byte byte1 = (byte) (-77);
      byteArray0[1] = (byte) (-77);
      byte byte2 = (byte)6;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte) (-115);
      byteArray0[8] = (byte)21;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 170, (-1056));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 197, (int) (byte)16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2311, (int) (byte)48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\"";
      stringArray0[1] = "\"";
      stringArray0[2] = "\"";
      stringArray0[3] = "\"";
      stringArray0[4] = "\"";
      stringArray0[5] = "\"";
      stringArray0[6] = "\"";
      Utility.methodTypeToSignature("\"", stringArray0);
      Utility.methodSignatureToString("(L\";L\";L\";L\";L\";L\";L\";)L\";", "'-Xo$:M=}8tWy-]", "g_%0[xK}~@88?h4K0`S", false);
      try { 
        Utility.methodSignatureArgumentTypes("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "long";
      Utility.methodTypeToSignature("4z", stringArray0);
      Utility.methodSignatureToString("(J)L4z;", "g_%0[xK}~@88?h4K0`S", "4z", false);
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte) (-44);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-482), 16384, false);
      assertEquals("0:    lxor\n1:    goto_w\t\t#-665333736\n6:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (-1661));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
