/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 13:13:20 GMT 2019
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.RenderableComponent;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.StandaloneComponentConfiguration;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.cite();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "java.lang.String@0000000012";
      Component component1 = component0.area(stringArray0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "=lz|s");
      TableBlock tableBlock0 = table0.colgroup();
      Submit submit0 = new Submit(tableBlock0, "=lz|s", "=lz|s");
      Checkbox checkbox0 = new Checkbox(submit0, "=lz|s", "=lz|s");
      checkbox0.getParent();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StandaloneComponent standaloneComponent0 = errorPage0.getPage();
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      block0.eval(errorPage0);
      assertTrue(block0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strike((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "& ~WQan", "& ~WQan");
      TableBlock tableBlock0 = new TableBlock(textArea0);
      DynamicSelectModel dynamicSelectModel0 = tableBlock0.selectModel();
      Component component0 = tableBlock0.s((Object) dynamicSelectModel0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Form form0 = new Form("null");
      Checkbox checkbox0 = new Checkbox(form0, "null", "mT01;6}D#g,yPHR");
      checkbox0.renderHint("null");
      assertEquals("null", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      Component component0 = errorPage0.legend((Object) dynamicSelectModel0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Form form0 = new Form((String) null);
      Component component0 = form0.clasS((CharSequence) null);
      assertEquals("wheel_components_Form", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "/", "&c+q_>04imBk=xX");
      Label label0 = new Label(errorPage0, checkbox0);
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(label0, "~|3Cu73k", "&c+q_>04imBk=xX", "~|3Cu73k", stringSelectModel0, true);
      StandaloneComponent standaloneComponent0 = select0._getTopLevelComponent(true);
      assertTrue(label0._isGeneratedId());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.wrapSelf();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Form form0 = new Form("fa:N!hv-d");
      // Undeclared exception!
      try { 
        form0.wBlock("fa:N!hv-d");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("org.mvel.ast.LiteralNode");
      // Undeclared exception!
      try { 
        xmlEntityRef0.tt((Object) "form");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Form form0 = new Form("Q");
      // Undeclared exception!
      try { 
        form0.title("Q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression((String) null);
      CheckboxGroup checkboxGroup0 = new CheckboxGroup((Component) null, "only one colon is allowed in attribute name when namespaces are enabled", "only one colon is allowed in attribute name when namespaces are enabled", stringSelectModel0, elExpression0);
      TextInput textInput0 = new TextInput(checkboxGroup0, (String) null, "org.mvel.conversion.BigIntegerCH$6");
      // Undeclared exception!
      try { 
        textInput0.table();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder((String) null);
      Checkbox checkbox0 = new Checkbox(block0, (String) null, "kwyP+9:S^gW_Lt;");
      // Undeclared exception!
      try { 
        checkbox0.sup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Form form0 = new Form("kJU=w|i6D-U3xCz5");
      TextArea textArea0 = new TextArea(form0, "kJU=w|i6D-U3xCz5", "kJU=w|i6D-U3xCz5");
      Radio radio0 = new Radio(textArea0, "@JtRCOs*2jgD", "nd0`r[z0_%6V4o_+c");
      Hidden hidden0 = new Hidden(radio0, "nd0`r[z0_%6V4o_+c", "'");
      // Undeclared exception!
      try { 
        hidden0.strong((Object) radio0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, (String) null);
      Submit submit0 = new Submit(table0, "", "");
      TextInput textInput0 = new TextInput(submit0, "Can't add components to a component that is not an instance of IContainer.", "");
      // Undeclared exception!
      try { 
        textInput0.strike();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "#__", "<");
      TableBlock tableBlock0 = new TableBlock(numberInput0, "null");
      TableRow tableRow0 = tableBlock0.tr();
      // Undeclared exception!
      try { 
        tableRow0.reset("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("_wrapper");
      // Undeclared exception!
      try { 
        xmlEntityRef0.placeholder("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateInput dateInput0 = new DateInput((Component) null, "nD(4hDjV", "q2. DfS`", "q2. DfS`");
      // Undeclared exception!
      try { 
        dateInput0.noscript();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "Tbody component can be added only to a Table.", "EB`%gmC|+&?O9>P_]");
      // Undeclared exception!
      try { 
        hidden0.noframes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Form form0 = new Form("null");
      DynamicSelectModel dynamicSelectModel0 = form0.selectModel();
      // Undeclared exception!
      try { 
        form0.multiSelect("null", dynamicSelectModel0, "null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Form form0 = new Form((String) null);
      TextArea textArea0 = new TextArea(form0, (String) null, ":nb@Z.THXyF");
      // Undeclared exception!
      try { 
        textArea0.message(":nb@Z.THXyF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Form form0 = new Form("AY,.qkar&o");
      // Undeclared exception!
      try { 
        form0.label();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("G'&Si~G-");
      // Undeclared exception!
      try { 
        xmlEntityRef0.kbd((Object) "G'&Si~G-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Form form0 = new Form("small");
      // Undeclared exception!
      try { 
        form0.h4();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, "dz?n)CX}|<^dE", "dz?n)CX}|<^dE", "dz?n)CX}|<^dE");
      // Undeclared exception!
      try { 
        dateInput0.h3((Object) "dz?n)CX}|<^dE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "eo#f", "n");
      MockDate mockDate0 = new MockDate(2, 2, (-3528), 2324, 2324, 15);
      // Undeclared exception!
      try { 
        submit0.h3((Object) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Form form0 = new Form("fZLMwS3IQ$4P-BR");
      // Undeclared exception!
      try { 
        form0.h3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "org.mvel.conversion.ShortCH$3", "org.mvel.conversion.ShortCH$3");
      ActionExpression actionExpression0 = new ActionExpression("h3");
      Form form0 = new Form(errorPage0, "p#b6vl0S", actionExpression0);
      DateInput dateInput0 = new DateInput(form0, "o0SAX4", "org.mvel.asm.Item", "org.mvel.asm.Item");
      // Undeclared exception!
      try { 
        checkbox0.h1((Object) dateInput0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "q", "Jo~t)y");
      // Undeclared exception!
      try { 
        checkbox0.entity("knbfjE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("2kp");
      Submit submit0 = new Submit(xmlEntityRef0, "sub", "2kp");
      // Undeclared exception!
      try { 
        submit0.em((Object) "2kp");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("expected > to end empty tag not ");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "?6;");
      TableBlock tableBlock0 = table0.tfoot();
      Checkbox checkbox0 = new Checkbox(tableBlock0, "y", "?6;");
      // Undeclared exception!
      try { 
        checkbox0.dfn();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "=lz|s");
      TableBlock tableBlock0 = table0.colgroup();
      Submit submit0 = new Submit(tableBlock0, "=lz|s", "=lz|s");
      // Undeclared exception!
      try { 
        submit0.dd();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select((Component) null, "TB?*CV%qp;{n-J", "TB?*CV%qp;{n-J", "TB?*CV%qp;{n-J", stringSelectModel0, false);
      Checkbox checkbox0 = new Checkbox(select0, "lXR_Z;pQ9m6^N.T3", "DPgN>p~DyWYAcN");
      // Undeclared exception!
      try { 
        checkbox0.big((Object) stringSelectModel0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "", "");
      Block block0 = new Block(radio0);
      Checkbox checkbox0 = new Checkbox(block0, "ins", "7z:}%%PD:>");
      Text text0 = new Text(checkbox0, "ins");
      // Undeclared exception!
      try { 
        text0.a();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._wrapComponentId("a@$b11GaG#9&/Y");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.form("java.lang.String@0000000012");
      component0.create();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Form form0 = new Form("org.mvel.ParserContext");
      Hidden hidden0 = new Hidden(form0, "org.mvel.ParserContext", "org.mvel.ParserContext");
      hidden0.attribute("org.mvel.ParserContext", "org.mvel.ParserContext");
      assertEquals("org.mvel.ParserContext", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder(":vyIs&");
      block0.getEngine();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("G'&Si~G-");
      xmlEntityRef0.afterAdd();
      assertEquals("G'&Si~G-", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      Table table0 = new Table(checkbox0, "q");
      table0._setComponentId("q");
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      FormElement formElement0 = checkbox0.label("</");
      assertTrue(formElement0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Form form0 = new Form("em");
      form0.date();
      assertEquals("em", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("54lJ:QVZf");
      Form form0 = new Form("_Wc^rU-C!&Tg");
      // Undeclared exception!
      try { 
        form0.remove((Component) xmlEntityRef0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Form form0 = new Form("null");
      // Undeclared exception!
      try { 
        form0.end();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not end compoennt, already at root.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Form form0 = new Form((String) null);
      FileInput fileInput0 = new FileInput(form0, (String) null, "Th component can be added only to a TableRow.");
      Component component0 = fileInput0.end();
      assertEquals("wheel_components_Form", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "=lz|s");
      TableBlock tableBlock0 = table0.colgroup();
      Submit submit0 = new Submit(tableBlock0, "=lz|s", "=lz|s");
      Component component0 = submit0.end("=lz|s");
      assertEquals("wheel_ErrorPage", component0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "kbd", "kbd");
      // Undeclared exception!
      try { 
        textInput0.end("kbd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression 'kbd'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "ZX3L");
      // Undeclared exception!
      try { 
        errorPage0.dateFormat("ZX3L", table0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      ElExpression elExpression0 = new ElExpression((String) null);
      RadioGroup radioGroup0 = new RadioGroup(tableRow0, "]", "]", (ISelectModel) null, elExpression0);
      Checkbox checkbox0 = new Checkbox(radioGroup0, (String) null, "meta");
      Any any0 = new Any(checkbox0, elExpression0);
      any0._setParent(tableRow0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", any0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(863, 1107, 1107, 74, 74);
      Text text0 = new Text(errorPage0, mockGregorianCalendar0);
      Block block0 = new Block(text0);
      ElExpression elExpression0 = new ElExpression("g<Pw7,1<B/EY78yfQ}");
      Label label0 = null;
      try {
        label0 = new Label(block0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression g<Pw7,1<B/EY78yfQ} in class wheel.ErrorPage
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("org.mvel.ast.LiteralNode");
      TextInput textInput0 = new TextInput(xmlEntityRef0, "form", "org.mvel.ast.LiteralNode");
      ElExpression elExpression0 = new ElExpression("org.mvel.ast.LiteralNode");
      List<Component> list0 = textInput0.findAll(elExpression0);
      assertEquals("org.mvel.ast.LiteralNode", xmlEntityRef0.getComponentId());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "RRnUKa$eCc@%W%*;UL");
      Any any0 = tableBlock0.col();
      // Undeclared exception!
      try { 
        any0.get("RRnUKa$eCc@%W%*;UL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id 'RRnUKa$eCc@%W%*;UL'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(" Ei~J-Kb,Fj^dG^);`9");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(xmlEntityRef0, " Ei~J-Kb,Fj^dG^);`9", "'.", stringSelectModel0, "'.");
      Checkbox checkbox0 = new Checkbox(select0, "'.", ",pf*@2jTvs=i#*16qlX");
      // Undeclared exception!
      try { 
        checkbox0.up(37);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, "failed to call clone() on reader ", "xmlns", "failed to call clone() on reader ");
      dateInput0.up((-1039));
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "zS;Qzr)E", "Colgroup component can be added only to a Table.");
      boolean boolean0 = textArea0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "wG%'9YgtiZZ/ g*a", "wG%'9YgtiZZ/ g*a");
      Checkbox checkbox0 = new Checkbox(numberInput0, "java.lang.String@0000000012", "wG%'9YgtiZZ/ g*a");
      Hidden hidden0 = new Hidden(checkbox0, "wG%'9YgtiZZ/ g*a", "java.lang.String@0000000012");
      boolean boolean0 = hidden0.equals(numberInput0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "mXA$lFM");
      TableBlock tableBlock0 = table0.thead();
      tableBlock0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Form form0 = new Form((String) null);
      TextArea textArea0 = new TextArea(form0, (String) null, ":nb@Z.THXyF");
      textArea0.addInternalRenderHint(":nb@Z.THXyF");
      assertEquals("wheel_components_Form", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "}", "}");
      // Undeclared exception!
      try { 
        errorPage0.add(textArea0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add a form element. No surrounding form found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ErrorPage errorPage1 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.addFirst(errorPage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Form form0 = new Form("Tfoot component can be added only to a Table.");
      // Undeclared exception!
      try { 
        form0.getComponents();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0._getTopLevelComponent(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "k.iFs-T", "wheel_ErrorPage");
      Image image0 = new Image(fileInput0, "wheel_ErrorPage", "wheel_ErrorPage");
      Checkbox checkbox0 = new Checkbox(image0, "ruHvsQq PS~u78NWJ", "unterminated '['");
      checkbox0._getVisibleForm(true);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(image0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._getVisibleForm(false);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("kSrkzBd*%<5k");
      Component component0 = errorPage0.link();
      assertTrue(component0._isGeneratedId());
      
      Form form0 = new Form(errorPage0, "kSrkzBd*%<5k", actionExpression0);
      form0.id("kSrkzBd*%<5k");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("kSrkzBd*%<5k");
      Form form0 = new Form(errorPage0, "kSrkzBd*%<5k", actionExpression0);
      // Undeclared exception!
      try { 
        form0.id("kSrkzBd*%<5k");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, (String) null);
      TableBlock tableBlock0 = table0.tfoot();
      tableBlock0.id("a@$b11GaG#9&/Y");
      assertFalse(tableBlock0._isGeneratedId());
      assertEquals("Table_1", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      ElExpression elExpression0 = new ElExpression((String) null);
      RadioGroup radioGroup0 = new RadioGroup(tableRow0, "]", "]", (ISelectModel) null, elExpression0);
      Checkbox checkbox0 = new Checkbox(radioGroup0, (String) null, "meta");
      // Undeclared exception!
      try { 
        checkbox0.id(".h");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.var();
      // Undeclared exception!
      try { 
        errorPage0.remove("Kq7KZt2Q)@C@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Component with id Kq7KZt2Q)@C@ does not exist.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "\"#", "\"#");
      TableBlock tableBlock0 = new TableBlock(checkbox0, "\"#");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\"#");
      TableBlock tableBlock1 = tableBlock0.renderHint(charBuffer0);
      tableBlock1.toString();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("54lJ:QVZf");
      Radio radio0 = new Radio(xmlEntityRef0, "_Wc^rU-C!&Tg", "_Wc^rU-C!&Tg");
      List<RenderableComponent> list0 = radio0._getRenderableChildren();
      assertEquals("54lJ:QVZf", xmlEntityRef0.getComponentId());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      DynamicSelectModel dynamicSelectModel0 = block0.selectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("");
      ElExpression elExpression0 = new ElExpression("");
      RadioGroup radioGroup0 = new RadioGroup(block0, "", "", dynamicSelectModel1, elExpression0);
      // Undeclared exception!
      try { 
        radioGroup0.find("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id  on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "null");
      table0.tfoot();
      ElExpression elExpression0 = new ElExpression("2_C!Z2-]7alhi\"F{M_");
      // Undeclared exception!
      try { 
        table0.findAll(elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate finder expression ' 2_C!Z2-]7alhi\"F{M_'
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.noscript();
      Link link0 = new Link(component0, component0);
      XmlPullParserFactory xmlPullParserFactory0 = XmlPullParserFactory.newInstance();
      XmlSerializer xmlSerializer0 = xmlPullParserFactory0.newSerializer();
      link0._renderActions(xmlSerializer0);
      assertTrue(link0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[0];
      Component component0 = errorPage0.attributes(stringArray0);
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, (String) null);
      TableBlock tableBlock0 = table0.tfoot();
      tableBlock0.attributes((String[]) null);
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, (String) null);
      TableBlock tableBlock0 = table0.tfoot();
      tableBlock0.renderHint((CharSequence) null);
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.cite();
      Component component1 = component0.code();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Form form0 = new Form("g/KMv,B");
      // Undeclared exception!
      try { 
        form0.h1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Form form0 = new Form("org.mvel.ParserContext");
      Hidden hidden0 = new Hidden(form0, "org.mvel.ParserContext", "org.mvel.ParserContext");
      // Undeclared exception!
      try { 
        form0.cite((Object) hidden0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("ft5TS.G");
      // Undeclared exception!
      try { 
        xmlEntityRef0.del((Object) "ft5TS.G");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Form form0 = new Form("% II");
      // Undeclared exception!
      try { 
        form0.h5((Object) "% II");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "& ~WQan", "& ~WQan");
      TableBlock tableBlock0 = new TableBlock(textArea0);
      ActionExpression actionExpression0 = new ActionExpression("& ~WQan");
      Form form0 = new Form(tableBlock0, "XMLDecl must have xml name in lowercase", actionExpression0);
      Component component0 = form0.sup();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("kSrkzBd*%<5k");
      Form form0 = new Form(errorPage0, "kSrkzBd*%<5k", actionExpression0);
      Component component0 = errorPage0.tt((Object) form0);
      Component component1 = component0.noscript();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.q();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Form form0 = new Form("2AQYE2BBy");
      // Undeclared exception!
      try { 
        form0.span();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "c07rd,grL4\".4w~1n ", "c07rd,grL4\".4w~1n ");
      // Undeclared exception!
      try { 
        checkbox0.pre((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.td();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Td component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "qo0i[cxYGW19gIK4", "qo0i[cxYGW19gIK4");
      DynamicSelectModel dynamicSelectModel0 = checkbox0.selectModel();
      // Undeclared exception!
      try { 
        checkbox0.select("onclick", dynamicSelectModel0, "qo0i[cxYGW19gIK4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.body();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(35, "qz95JQ(");
      Locale locale0 = Locale.UK;
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      Component component0 = errorPage0.s((Object) calendar0);
      Byte byte0 = new Byte((byte)19);
      Component component1 = component0.p((Object) byte0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.a((Object) null);
      ActionExpression actionExpression0 = new ActionExpression("Fb7");
      // Undeclared exception!
      try { 
        component0.numberInput((String) null, (CharSequence) actionExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "m#8y_)V@N", "m#8y_)V@N");
      // Undeclared exception!
      try { 
        submit0.caption();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      ActionExpression actionExpression0 = new ActionExpression("null");
      Form form0 = new Form(block0, "org.mvel.PropertyAccessor", actionExpression0);
      form0.reset("9}@<cFt(4h");
      assertTrue(block0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(actionExpression0.isSubmissible());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "br", "xpUXg&IL;F");
      // Undeclared exception!
      try { 
        hidden0.ol();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.big((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      Table table0 = new Table(checkbox0, "q");
      TableBlock tableBlock0 = table0.tbody();
      Component component0 = tableBlock0.wBlock("");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      CharBuffer charBuffer0 = CharBuffer.allocate(2507);
      Component component0 = errorPage0.param(charBuffer0, charBuffer0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      // Undeclared exception!
      try { 
        component0.strong((Object) mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = errorPage0.selectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration((String) null);
      Select select0 = new Select(errorPage0, "", "", "onclick", dynamicSelectModel1, true);
      Component component0 = select0.div();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Select_1", select0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "null", "null");
      // Undeclared exception!
      try { 
        radio0.thead();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DateInput dateInput0 = new DateInput((Component) null, ":Tz*gh!g,PP*n1-", ":Tz*gh!g,PP*n1-", ":Tz*gh!g,PP*n1-");
      dateInput0._setParent((Component) null);
      assertTrue(dateInput0.isValid());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StandaloneComponentConfiguration standaloneComponentConfiguration0 = errorPage0.config();
      Component component0 = errorPage0.address((Object) standaloneComponentConfiguration0);
      assertTrue(standaloneComponentConfiguration0.isRenderId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "div", "div");
      checkbox0._clear();
      assertEquals("input", checkbox0.defaultTagName());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      Table table0 = new Table(checkbox0, "q");
      TableBlock tableBlock0 = table0.tbody();
      tableBlock0.style();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(checkbox0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.textarea((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Form form0 = new Form("em");
      DateInput dateInput0 = new DateInput(form0, "em", "em", "em");
      Long long0 = new Long((-1042L));
      // Undeclared exception!
      try { 
        dateInput0.u((Object) long0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Form form0 = new Form("\"5");
      // Undeclared exception!
      try { 
        form0.br();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "mXA$lFM");
      TableBlock tableBlock0 = table0.thead();
      Component component0 = tableBlock0.table();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.textInput("/C^&T0-vc0) cT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "N3e@5Z+S2I#]y2Ox", "N3e@5Z+S2I#]y2Ox");
      FileInput fileInput0 = new FileInput(checkbox0, "FeplD8m]kVa", "EVf5 /}o+l");
      // Undeclared exception!
      try { 
        fileInput0.th();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Th component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, (String) null);
      TableBlock tableBlock0 = table0.tfoot();
      tableBlock0.action("java.lang.String@0000000012");
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.rawText(form0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Form form0 = new Form("null");
      // Undeclared exception!
      try { 
        form0.submit("ol");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.cite();
      Component component1 = errorPage0.form("java.lang.String@0000000012");
      Component component2 = component1.addFirst(component0);
      assertTrue(component2._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Form form0 = new Form("null");
      // Undeclared exception!
      try { 
        form0.big();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Form form0 = new Form("null");
      // Undeclared exception!
      try { 
        form0.iframe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(863, 1107, 1107, 74, 74);
      Text text0 = new Text(errorPage0, mockGregorianCalendar0);
      Block block0 = new Block(text0);
      Radio radio0 = new Radio(block0, "Could not encode string '", "null");
      TableBlock tableBlock0 = new TableBlock(radio0);
      Component component0 = tableBlock0.strike();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.legend();
      Table table0 = new Table(component0, "A[");
      TableBlock tableBlock0 = table0.tbody();
      Text text0 = new Text(component0, tableBlock0);
      Component component1 = errorPage0.h1((Object) text0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.noframes();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_2", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(" ");
      // Undeclared exception!
      try { 
        xmlEntityRef0.i();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("] (7");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dd((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      ActionExpression actionExpression0 = new ActionExpression("null");
      Form form0 = new Form(block0, "org.mvel.PropertyAccessor", actionExpression0);
      TableBlock tableBlock0 = new TableBlock(form0);
      DateInput dateInput0 = new DateInput(tableBlock0, "null", "Y}U;a5x91B9", actionExpression0);
      dateInput0._applyFormat(block0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
      assertTrue(block0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "object", "object");
      Table table0 = new Table(checkbox0, "`F%Pi*S1Qs2L@VV:");
      TableBlock tableBlock0 = table0.thead();
      Any any0 = tableBlock0.col();
      // Undeclared exception!
      try { 
        any0.u();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, (String) null);
      TableBlock tableBlock0 = table0.tfoot();
      Component component0 = tableBlock0.hr();
      assertEquals("Any_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Form form0 = new Form("");
      TextArea textArea0 = new TextArea(form0, "O'Q6Fh zZ6[", "O'Q6Fh zZ6[");
      // Undeclared exception!
      try { 
        textArea0.script();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.hidden((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, "failed to call clone() on reader ", "xmlns", "failed to call clone() on reader ");
      Component component0 = errorPage0.small((Object) dateInput0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "", "Q$h7SW^'\"Y\"vMnpku");
      // Undeclared exception!
      try { 
        textInput0.h2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Form form0 = new Form("I2");
      Checkbox checkbox0 = new Checkbox(form0, "%%Slz*{;f9FJl5=", "I2");
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        checkbox0.sub((Object) long0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("\"KJ$[N");
      DateInput dateInput0 = new DateInput(xmlEntityRef0, "M6mI", "strong", "M6mI");
      // Undeclared exception!
      try { 
        dateInput0.htmlText("M6mI");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Form form0 = new Form("asset/wheel/components/jquery.js?expires=88");
      // Undeclared exception!
      try { 
        form0.li((Object) "asset/wheel/components/jquery.js?expires=88");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("GV4Z\"d3B16thwHAv");
      FileInput fileInput0 = new FileInput(xmlEntityRef0, "IDCTor6Z6vt5ZR;2b9)", "X?t52+Q1UITlN;]?ku");
      Radio radio0 = new Radio(fileInput0, "org.apache.commons.io.filefilter.DirectoryFileFilter", "GV4Z\"d3B16thwHAv");
      Checkbox checkbox0 = new Checkbox(radio0, "GV4Z\"d3B16thwHAv", "GV4Z\"d3B16thwHAv");
      // Undeclared exception!
      try { 
        checkbox0.h5();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.bdo("2I0UK8wH8V\"fKQl");
      Table table0 = new Table(component0, "2I0UK8wH8V\"fKQl");
      table0.tfoot();
      List<RenderableComponent> list0 = table0._getRenderableChildren();
      assertNotNull(list0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.label((Object) null);
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("6O(RJN+[7?Xk;/U ");
      Component component1 = component0.h3((Object) xmlEntityRef0);
      assertTrue(component1._isGeneratedId());
      assertEquals("6O(RJN+[7?Xk;/U ", xmlEntityRef0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "", "Q$h7SW^'\"Y\"vMnpku");
      // Undeclared exception!
      try { 
        textInput0.code((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dt();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.numberInput((String) null, (CharSequence) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, (String) null);
      table0.text((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, (String) null);
      TableBlock tableBlock0 = table0.tfoot();
      Component component0 = tableBlock0.h4((Object) table0);
      component0.tt();
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "null");
      TableBlock tableBlock0 = table0.tfoot();
      Component component0 = tableBlock0.h4();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "Z_3L!");
      Component component0 = table0.b();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Form form0 = new Form("null");
      // Undeclared exception!
      try { 
        form0.b((Object) form0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "Invalid IOCase name: ", "Invalid IOCase name: ");
      // Undeclared exception!
      try { 
        textArea0.buttonInput("|h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.entity("ZX3L");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("ZX3L", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Form form0 = new Form("MTBN{Yg>,vQ");
      FileInput fileInput0 = new FileInput(form0, "MTBN{Yg>,vQ", "Y^G#FitSN^KZPw2");
      // Undeclared exception!
      try { 
        fileInput0.passwordInput("MTBN{Yg>,vQ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.encode("{S");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "null", "null");
      // Undeclared exception!
      try { 
        submit0.var((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "Yj^e(g{mq4O;`#xdg;n", "Yj^e(g{mq4O;`#xdg;n");
      TextInput textInput0 = new TextInput(fileInput0, "", "");
      Checkbox checkbox0 = new Checkbox(textInput0, "Yj^e(g{mq4O;`#xdg;n", "3D0o[Xs2vD~cW,P");
      // Undeclared exception!
      try { 
        checkbox0.pre();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Form form0 = new Form("null");
      // Undeclared exception!
      try { 
        form0.ins();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.object();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Form form0 = new Form("null");
      // Undeclared exception!
      try { 
        form0.colgroup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Colgroup component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Form form0 = new Form("org.mvel.ASTNode");
      // Undeclared exception!
      try { 
        form0.acronym();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.radio("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder(":vyIs&");
      Table table0 = new Table(block0, "h1");
      // Undeclared exception!
      try { 
        table0.wrapSelf();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("null");
      // Undeclared exception!
      try { 
        xmlEntityRef0.ul();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DateInput dateInput0 = new DateInput((Component) null, "", "}mi*3;R,l", "}mi*3;R,l");
      // Undeclared exception!
      try { 
        dateInput0.abbr((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "br", "xpUXg&IL;F");
      // Undeclared exception!
      try { 
        hidden0.div();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Form form0 = new Form("java/lang/Object");
      // Undeclared exception!
      try { 
        form0.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "Z_3L!");
      // Undeclared exception!
      try { 
        errorPage0.dateFormat("wheel.util.DynamicSelectModel", table0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to initialize SimpleDateFormat with pattern 'wheel.util.DynamicSelectModel'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "br", "xpUXg&IL;F");
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("RxsPs.XgFF");
      ElExpression elExpression0 = new ElExpression("xpUXg&IL;F");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(hidden0, "", "RxsPs.XgFF", dynamicSelectModel1, elExpression0);
      Component component0 = checkboxGroup0.em();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.nbsp();
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("kSrkzBd*%<5k");
      Form form0 = new Form(errorPage0, "kSrkzBd*%<5k", actionExpression0);
      Component component0 = errorPage0.tt((Object) form0);
      String string0 = component0.getComponentName();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Label", string0);
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Form form0 = new Form("(>pYtkvN<0;");
      // Undeclared exception!
      try { 
        form0.fieldset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "& ~WQan", "& ~WQan");
      TableBlock tableBlock0 = new TableBlock(textArea0);
      ActionExpression actionExpression0 = new ActionExpression("& ~WQan");
      Form form0 = new Form(tableBlock0, "XMLDecl must have xml name in lowercase", actionExpression0);
      Component component0 = form0.meta();
      // Undeclared exception!
      try { 
        component0.base(actionExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Form form0 = new Form("s");
      Checkbox checkbox0 = new Checkbox(form0, "s", "s");
      TextArea textArea0 = new TextArea(checkbox0, "s", "s");
      // Undeclared exception!
      try { 
        textArea0.q((Object) checkbox0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.a();
      Component component1 = component0.abbr();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.del();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("9n@W3.<Z#7");
      Radio radio0 = new Radio(errorPage0, "h2", "9n@W3.<Z#7");
      // Undeclared exception!
      try { 
        xmlEntityRef0.s((Object) radio0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.address();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.imageSubmit("@#}#Zc\"W", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "Y3FX;Sck6G(m/}uo", "Y3FX;Sck6G(m/}uo");
      // Undeclared exception!
      try { 
        textInput0.tr();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tr component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.form("java.lang.String@0000000012");
      ActionExpression actionExpression0 = new ActionExpression("");
      Component component1 = component0.form("java.lang.String@0000000012", actionExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1.equals((Object)component0));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.var();
      Component component1 = component0.em((Object) errorPage0);
      Component component2 = component1.legend((Object) null);
      assertTrue(component2._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dl();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.sub();
      Any any0 = new Any(component0, "CHECKCAST [Z");
      component0.samp((Object) any0);
      assertEquals("Any_1", any0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Yh.K{D/<!kHs<");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "Yh.K{D/<!kHs<", "%");
      DateInput dateInput0 = new DateInput(checkbox0, "%", "fg?x=!r\u0005", "Yh.K{D/<!kHs<");
      // Undeclared exception!
      try { 
        dateInput0.img("%", "%:dfv[*_G0F-");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.numberInput("%yWC)^L4puNe~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("null");
      // Undeclared exception!
      try { 
        errorPage0.checkboxGroup("null", (ISelectModel) null, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Component component0 = errorPage0.span((Object) mockGregorianCalendar0);
      ElExpression elExpression0 = new ElExpression("XC8#k@Gj'");
      // Undeclared exception!
      try { 
        component0.fileInput("XC8#k@Gj'", elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "noscript", "5K~?(*m(v3h@SVV}JjD");
      Hidden hidden0 = new Hidden((Component) null, "noscript", "div");
      // Undeclared exception!
      try { 
        checkbox0.i((Object) hidden0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.fileInput("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("kSrkzBd*%<5k");
      Form form0 = new Form(errorPage0, "kSrkzBd*%<5k", actionExpression0);
      // Undeclared exception!
      try { 
        form0.title("/#4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "@.EOIgzOB>4B!kz$j\"");
      block0.getAttributes();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, ";=EVa)+", "Col component can be added only to a TableBlock.");
      Radio radio0 = new Radio(submit0, "", ";=EVa)+");
      // Undeclared exception!
      try { 
        radio0.button();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Form form0 = new Form("a:tsVwC!");
      // Undeclared exception!
      try { 
        form0.checkbox("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "MMH&", "\n{SETTING UP MEMBERS...}\n");
      // Undeclared exception!
      try { 
        fileInput0.tbody();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tbody component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("kSrkzBd*%<5k");
      Form form0 = new Form(errorPage0, "kSrkzBd*%<5k", actionExpression0);
      Component component0 = errorPage0.tt((Object) form0);
      Component component1 = component0.blockquote();
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Form form0 = new Form("eRc5za8YmBA\"zkF@_N");
      // Undeclared exception!
      try { 
        form0.strong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "div", "[Pnl#=&/");
      DateInput dateInput0 = new DateInput(textArea0, "<N:", "[Pnl#=&/", "<N:");
      // Undeclared exception!
      try { 
        dateInput0.ins((Object) "<N:");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.legend();
      ElExpression elExpression0 = component0.el("A[");
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        errorPage0.radioGroup("?v*z &", dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Form form0 = new Form("'.");
      // Undeclared exception!
      try { 
        form0.p();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "cr R~mSrIvSKF");
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        table0.area(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attributes must be given in name, value pairs.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Form form0 = new Form("xo&vkZ:HU3Wd");
      // Undeclared exception!
      try { 
        form0.acronym((Object) "xo&vkZ:HU3Wd");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h6();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "", "null");
      // Undeclared exception!
      try { 
        radio0.s();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      TextArea textArea0 = new TextArea(xmlEntityRef0, "kbd", ">");
      // Undeclared exception!
      try { 
        textArea0.requestFocus();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      DateInput dateInput0 = new DateInput((Component) null, "H;PC>(S!", "code", "H;PC>(S!");
      // Undeclared exception!
      try { 
        dateInput0.dateInput("code", "YRrMNLf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, "failed to call clone() on reader ", "xmlns", "failed to call clone() on reader ");
      // Undeclared exception!
      try { 
        dateInput0.var();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder((String) null);
      Radio radio0 = new Radio(block0, (String) null, (String) null);
      Table table0 = new Table(radio0, (String) null);
      TableBlock tableBlock0 = table0.tfoot();
      errorPage0.sup((Object) tableBlock0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "kbd", "div");
      // Undeclared exception!
      try { 
        textArea0.small();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Form form0 = new Form("Cannot add a form element. No surrounding form found.");
      Checkbox checkbox0 = new Checkbox(form0, "Cannot add a form element. No surrounding form found.", "Cannot add a form element. No surrounding form found.");
      // Undeclared exception!
      try { 
        checkbox0.frame("Cannot add a form element. No surrounding form found.");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, "failed to call clone() on reader ", "xmlns", "failed to call clone() on reader ");
      Component component0 = errorPage0.dfn();
      Component component1 = component0.kbd((Object) dateInput0);
      Component component2 = component1.h3();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component2._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.samp();
      assertTrue(component0._isGeneratedId());
      
      errorPage0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.label();
      Component component1 = component0.li();
      assertEquals("Block_2", component1.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Form form0 = new Form("<6,3o>cEW\"7IetfJCeq");
      // Undeclared exception!
      try { 
        form0.map("rq>!p.?/h:x/,G'/{Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.legend();
      Component component1 = component0.dfn((Object) errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Form form0 = new Form("MTBN{Yg>,vQ");
      FileInput fileInput0 = new FileInput(form0, "MTBN{Yg>,vQ", "Y^G#FitSN^KZPw2");
      fileInput0.actionBinding("Y^G#FitSN^KZPw2");
      assertEquals("MTBN{Yg>,vQ", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Form form0 = new Form("&$TC*Ff`fQ-30M@||O^");
      // Undeclared exception!
      try { 
        form0.tfoot();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tfoot component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "", "{");
      // Undeclared exception!
      try { 
        radio0.h6((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Form form0 = new Form("INVOKEVIRTUAL java/lang/Byte.byteValue");
      // Undeclared exception!
      try { 
        form0.h2((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      ActionExpression actionExpression0 = new ActionExpression("null");
      Form form0 = new Form(block0, "org.mvel.PropertyAccessor", actionExpression0);
      TableBlock tableBlock0 = new TableBlock(form0);
      Component component0 = tableBlock0.clasS("a");
      assertFalse(form0._isGeneratedId());
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        errorPage0.multiSelect((String) null, dynamicSelectModel0, (CharSequence) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.kbd();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dt((Object) "");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, (String) null);
      Component component0 = table0.dd();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }
}
