/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 00:11:04 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Compiler;
import com.google.re2j.Prog;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Compiler_ESTest extends Compiler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[1];
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp1;
      regexp0.subs = regexpArray0;
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      regexp0.max = 3647;
      regexp0.op = regexp_Op1;
      regexp0.toString();
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Regexp regexp2 = null;
      // Undeclared exception!
      try { 
        Compiler.compileRegexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[5];
      regexp0.reinit();
      intArray0[0] = (-850);
      regexp0.cap = 840;
      intArray0[1] = 65310;
      intArray0[2] = 5;
      intArray0[3] = 1061;
      regexp0.runes = intArray0;
      regexp0.flags = 1631;
      intArray0[4] = 7;
      regexp0.runes = intArray0;
      Prog prog0 = Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertFalse(prog1.equals((Object)prog0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[1];
      Regexp.Op regexp_Op1 = Regexp.Op.END_TEXT;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexpArray0[0] = regexp1;
      regexp0.subs = regexpArray0;
      Regexp.Op regexp_Op2 = Regexp.Op.PLUS;
      regexp0.op = regexp_Op2;
      Regexp regexp2 = new Regexp(regexp0);
      Prog prog0 = Compiler.compileRegexp(regexp2);
      assertNotNull(prog0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[1];
      Regexp.Op regexp_Op1 = Regexp.Op.END_TEXT;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexpArray0[0] = regexp1;
      regexp0.subs = regexpArray0;
      Regexp.Op regexp_Op2 = Regexp.Op.QUEST;
      regexp0.op = regexp_Op2;
      Regexp regexp2 = new Regexp(regexp0);
      Prog prog0 = Compiler.compileRegexp(regexp2);
      assertNotNull(prog0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[1];
      regexp0.reinit();
      regexp1.min = (-2050);
      Regexp.Op regexp_Op1 = Regexp.Op.WORD_BOUNDARY;
      regexp0.op = regexp_Op1;
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      regexp1.op = regexp_Op0;
      Prog prog0 = Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertFalse(prog1.equals((Object)prog0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = 410;
      regexp0.name = "com.google.re2j.Compiler$1";
      regexp0.flags = 410;
      regexp0.reinit();
      Compiler.compileRegexp(regexp0);
      regexp0.max = 410;
      regexp0.reinit();
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.ALTERNATE;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexp1.min = 686;
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[1];
      regexp1.subs = regexpArray0;
      regexp1.op = regexp_Op0;
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      int[] intArray0 = new int[3];
      intArray0[0] = 1675;
      intArray0[1] = 8;
      intArray0[2] = 1114111;
      regexp1.runes = intArray0;
      regexp1.cap = 1792;
      regexp0.max = 10;
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.NO_MATCH;
      regexp0.op = regexp_Op1;
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      regexp0.toString();
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      regexp0.reinit();
      regexp0.min = 16;
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Regexp.Op regexp_Op2 = Regexp.Op.STAR;
      Regexp regexp1 = new Regexp(regexp_Op2);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      Object object0 = new Object();
      regexp1.equals(object0);
      regexp1.subs = regexpArray0;
      Compiler.compileRegexp(regexp1);
      Regexp regexp2 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op3 = Regexp.Op.CAPTURE;
      regexp2.op = regexp_Op3;
      // Undeclared exception!
      try { 
        regexp2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.toString();
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[3] = regexp2;
      regexpArray0[4] = regexp0;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray0[5] = regexp3;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp1;
      regexpArray0[8] = regexp0;
      regexp0.subs = regexpArray0;
      Prog prog0 = Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Prog prog1 = Compiler.compileRegexp(regexp1);
      assertFalse(prog1.equals((Object)prog0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.min = (-2077);
      int[] intArray1 = new int[0];
      regexp0.equals(regexp1);
      regexp1.runes = intArray1;
      regexp1.cap = 980;
      Prog prog0 = Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp1);
      regexp0.name = "w|ACJA`a?t`j";
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp1);
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertFalse(prog1.equals((Object)prog0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Object object0 = new Object();
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.max = (-1462);
      regexp0.equals(object0);
      regexp0.reinit();
      Compiler.compileRegexp(regexp0);
      regexp0.max = 13;
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Prog prog0 = Compiler.compileRegexp(regexp0);
      regexp0.name = "";
      regexp0.cap = (-461);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.flags = 2641;
      regexp1.equals(prog0);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Prog prog1 = Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Prog prog2 = Compiler.compileRegexp(regexp0);
      assertFalse(prog2.equals((Object)prog1));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-3874);
      intArray0[1] = (-167);
      intArray0[2] = 1;
      intArray0[3] = 6744;
      intArray0[4] = 363;
      intArray0[5] = 1957;
      intArray0[6] = 8;
      regexp1.runes = intArray0;
      regexp0.flags = 127490;
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 12;
      regexp0.flags = 12;
      regexp0.name = "";
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.cap = 12;
      regexp1.name = "Other_ID_Continue";
      regexp1.flags = 6456;
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Prog prog0 = Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Object object0 = new Object();
      regexp0.equals(object0);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Prog prog1 = Compiler.compileRegexp(regexp1);
      assertFalse(prog1.equals((Object)prog0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[4];
      regexp0.max = (-1321);
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[3] = regexp1;
      regexp0.subs = regexpArray0;
      regexp0.toString();
      Prog prog0 = Compiler.compileRegexp(regexp0);
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertFalse(prog1.equals((Object)prog0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.ALTERNATE;
      regexp0.op = regexp_Op1;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp1;
      regexp1.subs = regexpArray0;
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 3;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp1;
      regexp0.max = 1740;
      regexpArray0[4] = regexp0;
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp1;
      regexpArray0[7] = regexp1;
      regexp0.subs = regexpArray0;
      regexp1.name = "Cf";
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Object object0 = new Object();
      regexp0.equals(object0);
      regexp0.flags = (-88);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-88);
      intArray0[1] = (-88);
      intArray0[2] = (-88);
      intArray0[3] = 1567;
      regexp1.runes = intArray0;
      Compiler.compileRegexp(regexp1);
      Object object1 = new Object();
      regexp1.equals(object1);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp1);
      Prog prog0 = Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertFalse(prog1.equals((Object)prog0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.equals(regexp_Op0);
      regexp0.name = "";
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.NO_WORD_BOUNDARY;
      regexp0.op = regexp_Op1;
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1800);
      intArray0[1] = (-1519);
      intArray0[2] = 4;
      intArray0[3] = 2;
      intArray0[4] = 2437;
      intArray0[5] = 32;
      regexp1.runes = intArray0;
      Prog prog0 = Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp1);
      Regexp regexp2 = new Regexp(regexp0);
      Compiler.compileRegexp(regexp2);
      Prog prog1 = Compiler.compileRegexp(regexp2);
      assertFalse(prog1.equals((Object)prog0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = 3;
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[4];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      regexp1.max = 14;
      regexp1.runes = intArray0;
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Regexp regexp0 = null;
      // Undeclared exception!
      try { 
        Compiler.compileRegexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.toString();
      regexp0.reinit();
      regexp0.equals("A");
      regexp0.name = "";
      Prog prog0 = Compiler.compileRegexp(regexp0);
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertFalse(prog1.equals((Object)prog0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = 912;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_LINE;
      regexp1.op = regexp_Op1;
      Compiler.compileRegexp(regexp1);
      Regexp.Op regexp_Op2 = Regexp.Op.CONCAT;
      Regexp regexp2 = new Regexp(regexp_Op2);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = 2;
      regexp0.min = 1917;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.cap = 1917;
      regexp0.cap = 1917;
      regexp1.name = "";
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "Tt w(C3`SHg'";
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // regexp: unhandled case in compile
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = 0;
      Compiler.compileRegexp(regexp0);
      regexp0.op = regexp_Op0;
      Compiler.compileRegexp(regexp0);
      regexp0.flags = (-878);
      regexp0.max = 0;
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      regexp0.max = (-878);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Prog prog0 = Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertFalse(prog1.equals((Object)prog0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = (-1963);
      regexp0.name = "L^AY";
      regexp0.cap = 9;
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      regexp0.op = regexp_Op1;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp1;
      regexp1.subs = regexpArray0;
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1285);
      intArray0[1] = 1061;
      intArray0[2] = 848;
      intArray0[3] = 1073;
      intArray0[4] = 1689;
      intArray0[5] = 1631;
      intArray0[6] = 693;
      regexp0.runes = intArray0;
      regexp0.min = 44004;
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      regexp0.toString();
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.PLUS;
      Regexp regexp1 = new Regexp(regexp_Op1);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.name = "com.google.re2j.Compiler";
      Prog prog0 = Compiler.compileRegexp(regexp1);
      Prog prog1 = Compiler.compileRegexp(regexp1);
      assertFalse(prog1.equals((Object)prog0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1067;
      intArray0[1] = 1185;
      intArray0[2] = 48;
      intArray0[3] = 15;
      intArray0[4] = (-1893);
      intArray0[5] = 3059;
      intArray0[6] = (-2842);
      intArray0[7] = (-1);
      regexp0.runes = intArray0;
      Object object0 = new Object();
      regexp0.max = 1673;
      regexp0.equals(object0);
      regexp0.cap = (-841);
      regexp0.op = regexp_Op0;
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[5];
      intArray0[0] = 2563;
      regexp0.reinit();
      regexp0.equals("2MOz6_86&(KMLZT\"n");
      regexp0.cap = 2563;
      intArray0[1] = 620;
      intArray0[2] = 15;
      Object object0 = new Object();
      regexp0.equals(regexp_Op0);
      regexp0.equals(object0);
      intArray0[3] = (-2);
      regexp0.flags = (-2);
      intArray0[4] = 242;
      regexp0.runes = intArray0;
      regexp0.name = "&gol";
      Compiler.compileRegexp(regexp0);
      regexp0.name = "&gol";
      regexp0.name = "Logical_Order_Exception";
      Prog prog0 = Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Compiler.compileRegexp(regexp0);
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertFalse(prog1.equals((Object)prog0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 105;
      regexp0.flags = 14;
      regexp0.cap = 105;
      regexp0.name = "FRgsNAs+\")C";
      Compiler.compileRegexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      regexp0.name = "FRgsNAs+\")C";
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexp1.max = (-326);
      regexp0.reinit();
      regexp1.name = "FRgsNAs+\")C";
      regexp1.min = 1273;
      regexp1.equals(regexp_Op0);
      // Undeclared exception!
      try { 
        Compiler.compileRegexp(regexp1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // regexp: unhandled case in compile
         //
         verifyException("com.google.re2j.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[6];
      regexp0.equals(regexp_Op0);
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.equals(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      regexp0.op = regexp_Op1;
      regexp0.max = 2423;
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[9];
      intArray0[0] = 2423;
      intArray0[1] = (-4771);
      intArray0[2] = 2423;
      intArray0[3] = 2423;
      intArray0[4] = 2423;
      intArray0[5] = 2423;
      intArray0[6] = 2423;
      intArray0[7] = 2423;
      intArray0[8] = 2423;
      regexp1.runes = intArray0;
      regexp0.name = "aMz8L.Bf$ex<b";
      regexp1.op = regexp_Op0;
      Prog prog0 = Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp1);
      Prog prog1 = Compiler.compileRegexp(regexp1);
      assertFalse(prog1.equals((Object)prog0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "Ideographic";
      Compiler.compileRegexp(regexp0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[4];
      intArray0[0] = 301;
      intArray0[1] = (-1826);
      regexp1.toString();
      regexp0.min = (-1826);
      intArray0[2] = (-2393);
      intArray0[3] = 778;
      regexp1.runes = intArray0;
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Prog prog0 = Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp1);
      Compiler.compileRegexp(regexp0);
      Prog prog1 = Compiler.compileRegexp(regexp0);
      assertFalse(prog1.equals((Object)prog0));
  }
}
