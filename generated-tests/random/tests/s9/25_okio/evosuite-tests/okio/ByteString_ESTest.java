/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 17:26:41 GMT 2019
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import okio.Buffer;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(51);
      ByteString byteString1 = ByteString.of(byteBuffer0);
      boolean boolean0 = byteString1.startsWith(byteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-102);
      byteArray0[7] = (byte)34;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = byteString1.toAsciiUppercase();
      assertNotSame(byteString2, byteString1);
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Pipe pipe0 = new Pipe(900L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      HashingSink hashingSink0 = HashingSink.sha1(realBufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = ByteString.encodeUtf8("tO[|&{G<x^");
      ByteString byteString2 = byteString0.EMPTY.hmacSha512(byteString1);
      ByteString byteString3 = byteString2.toAsciiUppercase();
      assertNotSame(byteString3, byteString2);
      assertFalse(byteString3.equals((Object)byteString2));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = ByteString.of(byteArray0);
      byte[] byteArray1 = byteString0.toByteArray();
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("EB_MO-Ii7UZ?[I~ZQz");
      int int0 = byteString0.size();
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = ByteString.of(byteArray0, (int) (byte)1, (int) (byte)1);
      assertEquals(1, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("EB_MO-Ii7UZ?[I~ZQz");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)105;
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("okio.SegmentPool", charset0);
      ByteString byteString1 = byteString0.sha256();
      int int0 = byteString0.lastIndexOf(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      String string0 = byteString0.hex();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("US-ASCII");
      assertEquals(6, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("string == null", 8);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      String string0 = byteString0.base64Url();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(51);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      String string0 = byteString0.base64();
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(51);
      ByteString byteString1 = ByteString.of(byteBuffer0);
      boolean boolean0 = byteString0.rangeEquals(51, byteString1, 51, 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      boolean boolean0 = byteString0.rangeEquals(51, byteString0, 51, 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 1697, 1697);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=1697 byteCount=1697
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = ByteString.of(byteArray0);
      int int0 = byteString0.lastIndexOf(byteString0, (int) (byte)127);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Pipe pipe0 = new Pipe(93L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha256(pipe_PipeSource0);
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = new byte[5];
      int int0 = byteString0.EMPTY.indexOf(byteArray0, (-29));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0, 9);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[0];
      int int0 = byteString0.EMPTY.indexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      int int0 = byteString0.indexOf(byteString0, 349);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      boolean boolean0 = byteString0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = byteString0.EMPTY.endsWith(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      boolean boolean0 = byteString0.EMPTY.endsWith(byteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("<R5FJag8,\"gKId", 63);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        byteString0.hmacSha1((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("EB_MO-Ii7UZ?[I~ZQz");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)105;
      int int0 = byteString0.lastIndexOf(byteArray0, (int) (byte)105);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("EB_MO-Ii7UZ?[I~ZQz");
      byte[] byteArray0 = new byte[1];
      int int0 = byteString0.lastIndexOf(byteArray0, (int) (byte)105);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("]");
      ByteString byteString1 = byteString0.sha512();
      byte[] byteArray0 = new byte[1];
      int int0 = byteString1.indexOf(byteArray0, 1);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = byteString0.rangeEquals((int) (byte)64, byteArray0, (-1358), (-114));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("]");
      String string0 = byteString0.hex();
      //  // Unstable assertion: assertEquals("dd", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("#k");
      assertNull(byteString0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      boolean boolean0 = byteString0.EMPTY.rangeEquals((-1036), byteString0, 349, (-1036));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      // Undeclared exception!
      try { 
        byteString0.getByte(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      int int0 = byteString0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("okio.SegmentPool", charset0);
      ByteString byteString1 = byteString0.sha256();
      String string0 = byteString1.toString();
      //  // Unstable assertion: assertEquals("[hex=d0d02e04b00bcda40002bdb0e0a60dbf06a02adad9a22d60009bfb62f0ab0002]", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      ByteString byteString0 = ByteString.of(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=0a000000]", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("#<b");
      ByteString byteString0 = ByteString.of(byteBuffer0);
      String string0 = byteString0.toString();
      assertEquals("[text=#<b]", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", charset0);
      String string0 = byteString0.toString();
      assertEquals("[size=68 text=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u2026]", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[6];
      ByteString byteString1 = ByteString.of(byteArray0);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.encodeUtf8("BatK4EK&#aE&&'zMwS^");
      int int0 = byteString1.compareTo(byteString0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)1;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      int int0 = byteString1.compareTo(byteString0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      int int0 = byteString1.compareTo(byteString0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.hashCode();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.EMPTY;
      boolean boolean0 = byteString0.equals(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      Object object0 = new Object();
      boolean boolean0 = byteString0.EMPTY.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(51);
      ByteString byteString1 = ByteString.of(byteBuffer0);
      boolean boolean0 = byteString0.endsWith(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("data");
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      byteString0.EMPTY.write(bufferedOutputStream0);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString byteString1 = byteString0.EMPTY.sha1();
      ByteString byteString2 = byteString1.substring(11);
      assertEquals(9, byteString2.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2519);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring(5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.EMPTY.substring(0);
      assertTrue(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      // Undeclared exception!
      try { 
        byteString0.substring(51, 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(0)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-102);
      byteArray0[7] = (byte)36;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      ByteString byteString2 = byteString1.toAsciiUppercase();
      assertSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)65;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)65, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("okio.SegmentPool", charset0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        ByteString.read(byteArrayInputStream0, (byte)80);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-47), (-47));
      // Undeclared exception!
      try { 
        ByteString.read(byteArrayInputStream0, (-47));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -47
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, (-1052));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteString.read(byteArrayInputStream0, (byte)1);
      assertEquals(2, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("okio.HashingSource");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: o
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("4edIqR9uw>IC-o7Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: I
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("+hF&D01Trz@:CZ9k>(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: +
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
      assertEquals(34, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: ?
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        byteString0.EMPTY.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("#<b");
      ByteString byteString0 = ByteString.of(byteBuffer0);
      String string0 = byteString0.string(charset0);
      assertEquals("#<b", string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString byteString0 = ByteString.decodeBase64("");
      ByteString byteString1 = byteString0.sha1();
      byteString0.toAsciiLowercase();
      byteString1.EMPTY.utf8();
      int int0 = byteString1.lastIndexOf(byteString0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      byteString1.startsWith(byteArray0);
      byteString0.toByteArray();
      int int1 = byteString1.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeString("Tmd)\"", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, 1206, (-2303));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=-1 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("]");
      int int0 = byteString0.compareTo(byteString0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      int int0 = byteString0.indexOf(byteString0, (-1426));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      // Undeclared exception!
      try { 
        byteString0.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      // Undeclared exception!
      try { 
        byteString0.EMPTY.write((Buffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("EB_MO-Ii7UZ?[I~ZQz");
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring((-1617));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("vHHOt+4CDBw*EBL^/y");
      byte[] byteArray0 = new byte[1];
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("okio.SegmentPool", charset0);
      ByteString byteString1 = byteString0.sha256();
      boolean boolean0 = byteString0.startsWith(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("EB_MO-Ii7UZ?[I~ZQz");
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString byteString1 = ByteString.of(byteBuffer0);
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("EB_MO-Ii7UZ?[I~ZQz");
      ByteString byteString1 = byteString0.md5();
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("EB_MO-Ii7UZ?[I~ZQz");
      String string0 = byteString0.base64Url();
      assertEquals("RUJfTU8tSWk3VVo_W0l-WlF6", string0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("]");
      ByteString byteString1 = byteString0.hmacSha1(byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("vHHOt+4CDBw*EBL^/y");
      int int0 = byteString0.EMPTY.indexOf(byteString0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("okio.SegmentPool", charset0);
      int int0 = byteString0.lastIndexOf(byteString0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("okio.SegmentPool", charset0);
      int int0 = byteString0.lastIndexOf(byteString0, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        byteString0.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      String string0 = byteString0.base64();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      byte[] byteArray1 = byteString0.internalArray();
      int int0 = byteString0.lastIndexOf(byteArray1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("EB_MO-Ii7UZ?[I~ZQz");
      byte[] byteArray0 = new byte[1];
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals((-1), int0);
      assertEquals(18, byteString0.size());
  }
}
