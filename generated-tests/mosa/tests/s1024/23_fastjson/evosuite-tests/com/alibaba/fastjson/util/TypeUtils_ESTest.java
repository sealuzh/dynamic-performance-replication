/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 15:34:45 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.PageAttributes;
import java.awt.Point;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.sql.ClientInfoStatus;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.Instant;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Currency;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.Spliterator;
import java.util.TreeMap;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      TypeUtils.isGenericParamType(class0);
      Class<?> class1 = TypeUtils.loadClass("");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TypeUtils.isNumber(")Ljava/lang/Object;");
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      Class<AtomicLong> class0 = AtomicLong.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.castToJavaBean((Map<String, Object>) weakHashMap0, class0, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(21, false);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      jSONObject0.getByteValue((String) null);
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Constructor<SQLTransientException>[] constructorArray0 = (Constructor<SQLTransientException>[]) Array.newInstance(Constructor.class, 6);
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      Class<Time> class0 = Time.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) linkedList0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TypeUtils.isNumber("=l\"?+pAz]2a6i7F{B");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("=l\"?+pAz]2a6i7F{B");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"=l\"?+pAz]2a6i7F{B\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeUtils.getGenericParamType(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, typeArray0[0]);
      TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) negativeArraySizeException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseInt error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.IntegerCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<NumberFormat> class0 = NumberFormat.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      TypeUtils.isGenericParamType(class0);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : char
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) linkedHashMap0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Currency> class0 = Currency.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      TypeUtils.castToString(linkedHashSet0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Class<Double> class0 = Double.class;
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("'", (ClassLoader) aSMClassLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      assertEquals(12, mapDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      TypeUtils.getSerializeFeatures(class0);
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      MockThread mockThread0 = new MockThread("_");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("_", classLoader0);
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) ",", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(17);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) atomicInteger0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TypeUtils.castToBoolean((Object) null);
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<InternalError> class1 = InternalError.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.getCollectionItemType(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(jSONType0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      TypeUtils.getClassFromMapping("Lorg.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken");
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.unwrapOptional(type0);
      TypeUtils.loadClass("Lorg.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken");
      TypeUtils.getRawClass(type0);
      Class<?> class0 = TypeUtils.loadClass(", actual ");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      TypeUtils.isGenericParamType(class0);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.util.ParameterizedTypeImpl@401
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TypeUtils.getClassFromMapping("null");
      TypeUtils.getGenericParamType((Type) null);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Class<Collator> class0 = Collator.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      Collator collator0 = TypeUtils.castToJavaBean((Map<String, Object>) hashtable0, class0, parserConfig0);
      assertNull(collator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("Ljava.awt.Font");
      Class<MessageFormat> class0 = MessageFormat.class;
      TypeUtils.getParserFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : ljava.awt.font
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Constructor<SQLTransientException>[] constructorArray0 = (Constructor<SQLTransientException>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TypeUtils.isNumber("kotlin.ranges.ClosedFloatRange");
      TypeUtils.toLocale("getMetaClass");
      Class<?> class0 = TypeUtils.getClassFromMapping("getMetaClass");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("L", (ClassLoader) aSMClassLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      assertEquals(12, mapDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      SecurityException securityException0 = new SecurityException();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) weakHashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      JSONObject jSONObject0 = new JSONObject();
      Class<SQLWarning> class0 = SQLWarning.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      SQLWarning sQLWarning0 = TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(treeMap0);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      Class<Short> class0 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(jSONPDeserializer0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TypeUtils.isNumber("L");
      Boolean boolean0 = new Boolean(true);
      Boolean.getBoolean("L");
      Integer integer0 = TypeUtils.castToInt(boolean0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      TypeUtils.castToFloat(integer0);
      TypeUtils.castToSqlTime(integer0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      MockThread.currentThread();
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0, "+o`5oc8H");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("+o`5oc8H", parserConfig0);
      // Undeclared exception!
      try { 
        javaObjectDeserializer0.deserialze(defaultJSONParser0, (Type) class0, (Object) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("_~8QH|/p?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : _~8QH|/p?
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.toLocale("{xhU{Jzoj>'kTu");
      JSONObject jSONObject0 = new JSONObject(45, false);
      BigInteger bigInteger0 = jSONObject0.getBigInteger("1.2.46");
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TypeUtils.castToDouble((Object) null);
      TypeUtils.castToBigDecimal((Object) null);
      OptionalCodec optionalCodec0 = new OptionalCodec();
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0, "getMetaClass");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        classLoader0.loadClass("?IBKKh&[($)");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      TypeUtils.getSerializeFeatures(class0);
      Class<Annotation> class1 = Annotation.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      TypeUtils.isGenericParamType(class0);
      TypeUtils.fnv1a_64_lower("getClass");
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      TypeUtils.castToString(outOfMemoryError0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      SecurityException securityException0 = new SecurityException();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Class<OptionalCodec> class1 = OptionalCodec.class;
      TypeUtils.isProxy(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class com.alibaba.fastjson.parser.deserializer.OptionalCodec
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put((String) null, (String) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      TypeUtils.castToDate((Object) null);
      System.setCurrentTimeMillis(1L);
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      TypeUtils.loadClass("p#Z47fI38-1~qa`j9<", (ClassLoader) null);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) propertyProcessableDeserializer0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      Class<Annotation> class0 = Annotation.class;
      Class<SqlDateDeserializer> class1 = SqlDateDeserializer.class;
      TypeUtils.getAnnotation((Class<?>) class1, class0);
      ParserConfig parserConfig0 = new ParserConfig();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[1]);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = TypeUtils.cast((Object) parserConfig0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertNull(mockThaiBuddhistDate0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      Class<InternalError> class1 = InternalError.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      assertNotNull(illegalThreadStateException0);
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertNull(illegalThreadStateException0.getMessage());
      
      AtomicInteger atomicInteger0 = new AtomicInteger(749);
      assertNotNull(atomicInteger0);
      assertEquals("749", atomicInteger0.toString());
      assertEquals(749.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(749, atomicInteger0.intValue());
      assertEquals((byte) (-19), atomicInteger0.byteValue());
      assertEquals(749L, atomicInteger0.longValue());
      assertEquals((short)749, atomicInteger0.shortValue());
      assertEquals(749, atomicInteger0.get());
      assertEquals(749.0, atomicInteger0.doubleValue(), 0.01);
      
      Integer integer0 = TypeUtils.castToInt(atomicInteger0);
      assertNotNull(integer0);
      assertEquals(749, (int)integer0);
      assertEquals("749", atomicInteger0.toString());
      assertEquals(749.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(749, atomicInteger0.intValue());
      assertEquals((byte) (-19), atomicInteger0.byteValue());
      assertEquals(749L, atomicInteger0.longValue());
      assertEquals((short)749, atomicInteger0.shortValue());
      assertEquals(749, atomicInteger0.get());
      assertEquals(749.0, atomicInteger0.doubleValue(), 0.01);
      
      Class<?> class2 = TypeUtils.getClass((Type) class1);
      assertNotNull(class2);
      assertEquals("class java.lang.InternalError", class2.toString());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      assertNotNull(illegalMonitorStateException0);
      assertEquals("java.lang.IllegalMonitorStateException", illegalMonitorStateException0.toString());
      assertNull(illegalMonitorStateException0.getMessage());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      ObjectDeserializer objectDeserializer0 = parserConfig0.getDeserializer((Type) class1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(objectDeserializer0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, objectDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("Lorg.springframework.util.LinkedMultiValueMap");
      assertNotNull(string0);
      assertEquals("lorg.springframework.util.LinkedMultiValueMap", string0);
      
      boolean boolean0 = TypeUtils.isNumber("L");
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Class<?> class0 = TypeUtils.loadClass("[Z", (ClassLoader) null);
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("class [Z", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isArray());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("scan false error", "fastjson.parser.autoTypeAccept", (-3938));
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("fastjson.parser.autoTypeAccept", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals((-3938), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: scan false error", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("scan false error", sQLInvalidAuthorizationSpecException0.getMessage());
      
      boolean boolean2 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean2);
      assertFalse(class0.isInterface());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("class [Z", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isArray());
      assertTrue(boolean2 == boolean0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertNotNull(decimalFormat0);
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) decimalFormat0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("Ljava.util.concurrent.ConcurrentSkipListSet");
      assertEquals(274170218040624494L, long0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClassLoader classLoader0 = null;
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("(Ljava/lang/reflect/Type;)Ljava/lang/Object;");
      assertNotNull(illegalThreadStateException0);
      assertEquals("java.lang.IllegalThreadStateException: (Ljava/lang/reflect/Type;)Ljava/lang/Object;", illegalThreadStateException0.toString());
      assertEquals("(Ljava/lang/reflect/Type;)Ljava/lang/Object;", illegalThreadStateException0.getMessage());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("Ljava.util.concurrent.ConcurrentSkipListSet");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ljava.util.concurrent.ConcurrentSkipListSet\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      assertNotNull(stackOverflowError0);
      assertEquals("java.lang.StackOverflowError", stackOverflowError0.toString());
      assertNull(stackOverflowError0.getMessage());
      
      Class<?> class1 = TypeUtils.loadClass("is", (ClassLoader) null);
      assertNull(class1);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<Double> class2 = Double.TYPE;
      assertNotNull(class2);
      assertEquals("double", class2.toString());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isPrimitive());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      VerifyError verifyError0 = new VerifyError();
      assertNotNull(verifyError0);
      assertEquals("java.lang.VerifyError", verifyError0.toString());
      assertNull(verifyError0.getMessage());
      
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      assertNotNull(propertyProcessableDeserializer0);
      assertEquals(12, propertyProcessableDeserializer0.getFastMatchToken());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<?> class1 = TypeUtils.loadClass("+%Sh", classLoader1);
      assertNull(class1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "+%Sh", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.PropertyProcessable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("Ljava.util.concurrent.ConcurrentSkipListSet");
      assertEquals(274170218040624494L, long0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      Class<?> class0 = TypeUtils.loadClass("i9yLLd+NwAYI@V", (ClassLoader) aSMDeserializerFactory0.classLoader);
      assertNull(class0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("i9yLLd+NwAYI@V", "i9yLLd+NwAYI@V", (-1424));
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("i9yLLd+NwAYI@V", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("i9yLLd+NwAYI@V", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: i9yLLd+NwAYI@V", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals((-1424), sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      TypeUtils.castToJavaBean((Object) null, class1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<Short> class0 = Short.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertNotNull(class1);
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      
      Class<Method> class2 = Method.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : com.alibaba.fastjson.parser.ParserConfig@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl1 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      assertNotNull(parameterizedTypeImpl1);
      assertSame(parameterizedTypeImpl0, parameterizedTypeImpl1);
      assertSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized(class0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl2 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl2);
      assertSame(parameterizedTypeImpl2, parameterizedTypeImpl1);
      assertSame(parameterizedTypeImpl2, parameterizedTypeImpl0);
      
      Class<Short> class1 = Short.TYPE;
      assertNotNull(class1);
      assertEquals("short", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      
      Class<Integer> class2 = Integer.TYPE;
      assertNotNull(class2);
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("int", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isPrimitive());
      
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) parameterizedTypeImpl2;
      ParameterizedTypeImpl parameterizedTypeImpl3 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[0]);
      assertNotNull(parameterizedTypeImpl3);
      
      ParserConfig parserConfig0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) typeArray0[1], (ParameterizedType) parameterizedTypeImpl3, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          JSONObject jSONObject0 = new JSONObject();
          assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
          assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
          assertNotNull(jSONObject0);
          assertEquals(0, jSONObject0.size());
          assertTrue(jSONObject0.isEmpty());
          
          DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
          assertNotNull(dateFormatSymbols0);
          assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
          
          JSONObject jSONObject1 = jSONObject0.fluentPut("listContext", dateFormatSymbols0);
          assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
          assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
          assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
          assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
          assertNotNull(jSONObject1);
          assertEquals(1, jSONObject0.size());
          assertFalse(jSONObject0.isEmpty());
          assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
          assertEquals(1, jSONObject1.size());
          assertFalse(jSONObject1.isEmpty());
          assertSame(jSONObject0, jSONObject1);
          assertSame(jSONObject1, jSONObject0);
          
          SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("$F$bPP6", "@type", (-1989));
          assertNotNull(sQLSyntaxErrorException0);
          assertEquals("$F$bPP6", sQLSyntaxErrorException0.getMessage());
          assertEquals("@type", sQLSyntaxErrorException0.getSQLState());
          assertEquals("java.sql.SQLSyntaxErrorException: $F$bPP6", sQLSyntaxErrorException0.toString());
          assertEquals((-1989), sQLSyntaxErrorException0.getErrorCode());
          
          Spliterator<Throwable> spliterator0 = sQLSyntaxErrorException0.spliterator();
          assertNotNull(spliterator0);
          assertEquals("$F$bPP6", sQLSyntaxErrorException0.getMessage());
          assertEquals("@type", sQLSyntaxErrorException0.getSQLState());
          assertEquals("java.sql.SQLSyntaxErrorException: $F$bPP6", sQLSyntaxErrorException0.toString());
          assertEquals((-1989), sQLSyntaxErrorException0.getErrorCode());
          
          JSONObject jSONObject2 = jSONObject0.fluentPut("1.2.46", sQLSyntaxErrorException0);
          assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
          assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
          assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
          assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
          assertNotNull(jSONObject2);
          assertEquals(2, jSONObject0.size());
          assertFalse(jSONObject0.isEmpty());
          assertEquals("$F$bPP6", sQLSyntaxErrorException0.getMessage());
          assertEquals("@type", sQLSyntaxErrorException0.getSQLState());
          assertEquals("java.sql.SQLSyntaxErrorException: $F$bPP6", sQLSyntaxErrorException0.toString());
          assertEquals((-1989), sQLSyntaxErrorException0.getErrorCode());
          assertFalse(jSONObject2.isEmpty());
          assertEquals(2, jSONObject2.size());
          assertSame(jSONObject0, jSONObject2);
          assertSame(jSONObject0, jSONObject1);
          assertSame(jSONObject2, jSONObject1);
          assertSame(jSONObject2, jSONObject0);
          
          // Undeclared exception!
          try { 
            TypeUtils.castToInt(jSONObject2);
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // create asm serializer error, class byte
             //
             verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[1]);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseBoolean error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.BooleanCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "ftg]NU2`jHN.~i3W6";
      ThreadGroup threadGroup0 = new ThreadGroup("ftg]NU2`jHN.~i3W6");
      assertNotNull(threadGroup0);
      assertEquals("ftg]NU2`jHN.~i3W6", threadGroup0.getName());
      
      MockThread mockThread0 = new MockThread(threadGroup0, "clazz");
      assertNotNull(mockThread0);
      assertEquals("ftg]NU2`jHN.~i3W6", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      mockThread0.run();
      assertEquals("ftg]NU2`jHN.~i3W6", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      MockThread mockThread1 = new MockThread();
      assertNotNull(mockThread1);
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1);
      assertNotNull(mockThread2);
      assertEquals("ftg]NU2`jHN.~i3W6", threadGroup0.getName());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      assertNotNull(classLoader0);
      assertEquals("ftg]NU2`jHN.~i3W6", threadGroup0.getName());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("ftg]NU2`jHN.~i3W6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : ftg]NU2`jHN.~i3W6
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
      
      boolean boolean0 = TypeUtils.isNumber("t9V7=:n7w-+Tynd_wP");
      assertFalse(boolean0);
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("Ljava.awt.Color");
      assertNotNull(illegalThreadStateException0);
      assertEquals("java.lang.IllegalThreadStateException: Ljava.awt.Color", illegalThreadStateException0.toString());
      assertEquals("Ljava.awt.Color", illegalThreadStateException0.getMessage());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("getMessage", ":@=hgj@a4", illegalThreadStateException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.lang.IllegalThreadStateException: Ljava.awt.Color", illegalThreadStateException0.toString());
      assertEquals("Ljava.awt.Color", illegalThreadStateException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("getMessage", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: getMessage", sQLIntegrityConstraintViolationException0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLIntegrityConstraintViolationException: getMessage
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("p#Z47fI38-1~qa`j9<", (ClassLoader) null);
      assertNull(class0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("getisAutoTypeSupport", "getSuppressed");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("getisAutoTypeSupport", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("getSuppressed", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: getisAutoTypeSupport", sQLNonTransientConnectionException0.toString());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)sQLNonTransientConnectionException0.fillInStackTrace();
      assertNotNull(sQLNonTransientConnectionException1);
      assertEquals("getisAutoTypeSupport", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("getSuppressed", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: getisAutoTypeSupport", sQLNonTransientConnectionException0.toString());
      assertEquals("getSuppressed", sQLNonTransientConnectionException1.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("getisAutoTypeSupport", sQLNonTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: getisAutoTypeSupport", sQLNonTransientConnectionException1.toString());
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      
      Spliterator<Throwable> spliterator0 = sQLNonTransientConnectionException0.spliterator();
      assertNotNull(spliterator0);
      assertEquals("getisAutoTypeSupport", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("getSuppressed", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: getisAutoTypeSupport", sQLNonTransientConnectionException0.toString());
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "p#Z47fI38-1~qa`j9<", (Type) null, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      VerifyError verifyError0 = new VerifyError();
      assertNotNull(verifyError0);
      assertEquals("java.lang.VerifyError", verifyError0.toString());
      assertNull(verifyError0.getMessage());
      
      verifyError0.printStackTrace();
      assertEquals("java.lang.VerifyError", verifyError0.toString());
      assertNull(verifyError0.getMessage());
      
      long long0 = TypeUtils.fnv1a_64_lower("yB`wyN&'8x1mf");
      assertEquals(7703927747904144305L, long0);
      
      SecurityException securityException0 = new SecurityException();
      assertNotNull(securityException0);
      assertNull(securityException0.getMessage());
      assertEquals("java.lang.SecurityException", securityException0.toString());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Class<?> class0 = TypeUtils.loadClass("yB`wyN&'8x1mf");
      assertNull(class0);
      
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      assertNotNull(parameterizedTypeImpl0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@3c1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("DisableCircularReferenceDetect", (ClassLoader) null);
      assertNull(class0);
      
      Class<Integer> class1 = Integer.TYPE;
      assertNotNull(class1);
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("int", class1.toString());
      assertFalse(class1.isAnnotation());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Integer integer0 = TypeUtils.cast((Object) null, class1, parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("int", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      TypeUtils.clearClassMapping();
      long long0 = Integer.toUnsignedLong(772);
      assertEquals(772L, long0);
      
      long long1 = TypeUtils.fnv1a_64_lower("[int");
      assertEquals((-1375383049607796893L), long1);
      assertFalse(long1 == long0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      
      MessageFormat messageFormat0 = new MessageFormat("fastjson.parser.autoTypeSupport", locale0);
      assertNotNull(messageFormat0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      
      int int0 = Integer.remainderUnsigned(37, 37);
      assertEquals(0, int0);
      
      String string0 = locale0.getScript();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      int int1 = Integer.compareUnsigned(0, (-1442383834));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) null;
      typeArray0[1] = (Type) null;
      typeArray0[2] = (Type) null;
      typeArray0[3] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[1]);
      assertNotNull(parameterizedTypeImpl0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException(";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Z", "v:Y%ay*0bsM$y,dd,", 184);
      assertNotNull(sQLTransientException0);
      assertEquals(";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Z", sQLTransientException0.getMessage());
      assertEquals("v:Y%ay*0bsM$y,dd,", sQLTransientException0.getSQLState());
      assertEquals(184, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: ;Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Z", sQLTransientException0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLTransientException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@88af81c5
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance;
      assertNotNull(sqlDateDeserializer0);
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(sqlDateDeserializer0);
      assertTrue(boolean0);
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      
      ThreadGroup threadGroup0 = new ThreadGroup("ftg]NU2`jHN.~i3W6");
      assertNotNull(threadGroup0);
      assertEquals("ftg]NU2`jHN.~i3W6", threadGroup0.getName());
      
      MockThread mockThread0 = new MockThread(threadGroup0, "clazz");
      assertNotNull(mockThread0);
      assertEquals("ftg]NU2`jHN.~i3W6", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      mockThread0.run();
      assertEquals("ftg]NU2`jHN.~i3W6", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      MockThread mockThread1 = new MockThread();
      assertNotNull(mockThread1);
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1);
      assertNotNull(mockThread2);
      assertEquals("ftg]NU2`jHN.~i3W6", threadGroup0.getName());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      
      MockThread.reset();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      assertNotNull(mockIllegalArgumentException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("clazz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : clazz
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      Class<?> class0 = TypeUtils.loadClass("is", (ClassLoader) null);
      assertNull(class0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<Double> class1 = Double.TYPE;
      assertNotNull(class1);
      assertEquals("double", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : com.alibaba.fastjson.parser.ParserConfig@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
      
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
      
      Class<String> class2 = String.class;
      Type[] typeArray0 = new Type[9];
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class1;
      typeArray0[5] = (Type) class1;
      typeArray0[7] = (Type) class2;
      Class<Byte> class3 = Byte.TYPE;
      assertNotNull(class3);
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isEnum());
      assertFalse(class3.isAnnotation());
      assertTrue(class3.isPrimitive());
      assertEquals("byte", class3.toString());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(1041, class3.getModifiers());
      
      typeArray0[8] = (Type) class3;
      Class<Short> class4 = Short.TYPE;
      assertNotNull(class4);
      assertEquals("short", class4.toString());
      assertFalse(class4.isArray());
      assertFalse(class4.isInterface());
      assertEquals(1041, class4.getModifiers());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertTrue(class4.isPrimitive());
      assertFalse(class4.isAnnotation());
      
      JSONObject jSONObject0 = new JSONObject(1788);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertNotNull(jSONObject0);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      
      Class<Jdk8DateCodec> class5 = Jdk8DateCodec.class;
      Jdk8DateCodec jdk8DateCodec0 = TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class5, (ParserConfig) null);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertNotNull(jdk8DateCodec0);
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      int int0 = 47;
      StackTraceElement stackTraceElement0 = new StackTraceElement("andIncrement", "className", "Lorg.springframework.util.LinkedMultiValueMap", 47);
      assertNotNull(stackTraceElement0);
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap", stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("className", stackTraceElement0.getMethodName());
      assertEquals("andIncrement", stackTraceElement0.getClassName());
      assertEquals("andIncrement.className(Lorg.springframework.util.LinkedMultiValueMap:47)", stackTraceElement0.toString());
      assertEquals(47, stackTraceElement0.getLineNumber());
      
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stackTraceElement0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : andIncrement.className(Lorg.springframework.util.LinkedMultiValueMap:47)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      String string0 = identityHashMap0.put((String) null, (String) null);
      assertNull(string0);
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Class<?> class0 = TypeUtils.getClass((Type) genericArrayType0);
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1, class0.getModifiers());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("L", "L", 61);
          assertNotNull(sQLTimeoutException0);
          assertEquals(61, sQLTimeoutException0.getErrorCode());
          assertEquals("L", sQLTimeoutException0.getSQLState());
          assertEquals("java.sql.SQLTimeoutException: L", sQLTimeoutException0.toString());
          assertEquals("L", sQLTimeoutException0.getMessage());
          
          Throwable[] throwableArray0 = sQLTimeoutException0.getSuppressed();
          assertNotNull(throwableArray0);
          assertEquals(61, sQLTimeoutException0.getErrorCode());
          assertEquals("L", sQLTimeoutException0.getSQLState());
          assertEquals("java.sql.SQLTimeoutException: L", sQLTimeoutException0.toString());
          assertEquals("L", sQLTimeoutException0.getMessage());
          
          SQLWarning sQLWarning0 = new SQLWarning("not close json text, token : ", "L\"|36G+5M-");
          assertNotNull(sQLWarning0);
          assertEquals("L\"|36G+5M-", sQLWarning0.getSQLState());
          assertEquals("not close json text, token : ", sQLWarning0.getMessage());
          assertEquals("java.sql.SQLWarning: not close json text, token : ", sQLWarning0.toString());
          assertEquals(0, sQLWarning0.getErrorCode());
          
          Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
          Class<Long> class0 = Long.TYPE;
          assertNotNull(class0);
          assertTrue(class0.isPrimitive());
          assertEquals(1041, class0.getModifiers());
          assertFalse(class0.isEnum());
          assertFalse(class0.isSynthetic());
          assertEquals("long", class0.toString());
          assertFalse(class0.isAnnotation());
          assertFalse(class0.isInterface());
          assertFalse(class0.isArray());
          
          Type[] typeArray0 = new Type[1];
          typeArray0[0] = (Type) class0;
          ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
          assertNotNull(parameterizedTypeImpl0);
          assertTrue(class0.isPrimitive());
          assertEquals(1041, class0.getModifiers());
          assertFalse(class0.isEnum());
          assertFalse(class0.isSynthetic());
          assertEquals("long", class0.toString());
          assertFalse(class0.isAnnotation());
          assertFalse(class0.isInterface());
          assertFalse(class0.isArray());
          
          String string0 = parameterizedTypeImpl0.getTypeName();
          assertNotNull(string0);
          assertTrue(class0.isPrimitive());
          assertEquals(1041, class0.getModifiers());
          assertFalse(class0.isEnum());
          assertFalse(class0.isSynthetic());
          assertEquals("long", class0.toString());
          assertFalse(class0.isAnnotation());
          assertFalse(class0.isInterface());
          assertFalse(class0.isArray());
          
          ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
          assertTrue(parserConfig0.compatibleWithJavaBean);
          assertFalse(parserConfig0.fieldBased);
          assertFalse(ParserConfig.AUTO_SUPPORT);
          assertNotNull(parserConfig0);
          assertFalse(parserConfig0.isAutoTypeSupport());
          assertTrue(parserConfig0.isAsmEnable());
          
          // Undeclared exception!
          try { 
            TypeUtils.cast((Object) sQLWarning0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // type not match. java.sql.SQLWarning -> long
             //
             verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertEquals("char", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      
      Map<String, String> map0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      Set<String> set0 = hashtable0.keySet();
      assertNotNull(set0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotSame(parserConfig1, parserConfig0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      parserConfig1.propertyNamingStrategy = propertyNamingStrategy0;
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : com.alibaba.fastjson.parser.ParserConfig@95
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Method method0 = null;
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
      
      String string0 = "L;";
      Class<?> class0 = TypeUtils.loadClass("L;");
      assertNull(class0);
      
      Class<PropertyProcessableDeserializer> class1 = PropertyProcessableDeserializer.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      // Undeclared exception!
      try { 
        parserConfig0.createJavaBeanDeserializer((Class<?>) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      Class<Long> class1 = Long.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class1, treeMap0, false, propertyNamingStrategy0);
      assertNotNull(list0);
      assertEquals(0, treeMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Hashtable<SQLNonTransientException, BitSet> hashtable0 = new Hashtable<SQLNonTransientException, BitSet>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      StackTraceElementDeserializer stackTraceElementDeserializer0 = StackTraceElementDeserializer.instance;
      assertNotNull(stackTraceElementDeserializer0);
      assertEquals(12, stackTraceElementDeserializer0.getFastMatchToken());
      
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertNotNull(class1);
      assertFalse(class1.isArray());
      assertEquals(1537, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("interface com.alibaba.fastjson.parser.deserializer.PropertyProcessable", class1.toString());
      
      Class<PropertyNamingStrategy> class2 = PropertyNamingStrategy.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("t(85A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : t(85A
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      String string0 = TypeUtils.castToString(class0);
      assertNotNull(string0);
      
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      assertNotNull(jSONPDeserializer0);
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class1 = TypeUtils.loadClass("org.springframework.util.LinkedMultiValueMap", classLoader0);
      assertNull(class1);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "org.springframework.util.LinkedMultiValueMap", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      
      AtomicInteger atomicInteger0 = new AtomicInteger(57);
      assertNotNull(atomicInteger0);
      assertEquals("57", atomicInteger0.toString());
      assertEquals((byte)57, atomicInteger0.byteValue());
      assertEquals(57, atomicInteger0.get());
      assertEquals((short)57, atomicInteger0.shortValue());
      assertEquals(57.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(57, atomicInteger0.intValue());
      assertEquals(57L, atomicInteger0.longValue());
      assertEquals(57.0, atomicInteger0.doubleValue(), 0.01);
      
      Boolean boolean0 = TypeUtils.castToBoolean(atomicInteger0);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      assertEquals("57", atomicInteger0.toString());
      assertEquals((byte)57, atomicInteger0.byteValue());
      assertEquals(57, atomicInteger0.get());
      assertEquals((short)57, atomicInteger0.shortValue());
      assertEquals(57.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(57, atomicInteger0.intValue());
      assertEquals(57L, atomicInteger0.longValue());
      assertEquals(57.0, atomicInteger0.doubleValue(), 0.01);
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters((Class) null);
      assertNull(stringArray0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : false
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      String string0 = identityHashMap0.put((String) null, (String) null);
      assertNull(string0);
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      assertNotNull(list0);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("ishashCode");
      assertNull(class0);
      
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      Class<Object> class1 = Object.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      List<FieldInfo> list0 = TypeUtils.computeGetters(class1, map0);
      assertNotNull(list0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      assertNotNull(parameterizedTypeImpl0);
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      
      Thread[] threadArray0 = new Thread[0];
      int int0 = MockThread.enumerate(threadArray0);
      assertEquals(0, int0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<?> class1 = TypeUtils.loadClass((String) null, classLoader1);
      assertNull(class1);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, 116);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(116, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      
      boolean boolean0 = TypeUtils.isNumber("");
      assertTrue(boolean0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("fastjson.parser.autoTypeSupport", "DXUs+V@CN25:.", 116, hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(116, sQLClientInfoException0.getErrorCode());
      assertEquals("fastjson.parser.autoTypeSupport", sQLClientInfoException0.getMessage());
      assertEquals("DXUs+V@CN25:.", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: fastjson.parser.autoTypeSupport", sQLClientInfoException0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLClientInfoException: fastjson.parser.autoTypeSupport
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      Class<Annotation> class2 = Annotation.class;
      boolean boolean0 = TypeUtils.isHibernateInitialized(class2);
      assertTrue(boolean0);
      assertSame(class2, class1);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null, (Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType1).toString();
      doReturn(type0).when(genericArrayType1).getGenericComponentType();
      Type type1 = TypeUtils.checkPrimitiveArray(genericArrayType1);
      assertNotNull(type1);
      assertFalse(type1.equals((Object)type0));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance;
      assertNotNull(sqlDateDeserializer0);
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(sqlDateDeserializer0);
      assertTrue(boolean0);
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      
      Class<LinkageError> class0 = LinkageError.class;
      boolean boolean1 = TypeUtils.isProxy(class0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = TypeUtils.isHibernateInitialized(class0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertNotNull(class1);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      
      Class class2 = (Class)TypeUtils.unwrapOptional(class0);
      assertNotNull(class2);
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertEquals("class java.lang.LinkageError", class2.toString());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long long0 = Short.toUnsignedLong((short)151);
      assertEquals(151L, long0);
      
      long long1 = TypeUtils.fnv1a_64_lower("yB`wyN&'8x1mf");
      assertEquals(7703927747904144305L, long1);
      assertFalse(long1 == long0);
      
      String string0 = TypeUtils.castToString("yB`wyN&'8x1mf");
      assertNotNull(string0);
      
      SecurityException securityException0 = new SecurityException();
      assertNotNull(securityException0);
      assertNull(securityException0.getMessage());
      assertEquals("java.lang.SecurityException", securityException0.toString());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Class<OptionalCodec> class0 = OptionalCodec.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      WeakHashMap<Time, StackTraceElementDeserializer> weakHashMap0 = new WeakHashMap<Time, StackTraceElementDeserializer>();
      assertNotNull(weakHashMap0);
      
      Class<Calendar> class1 = Calendar.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) weakHashMap0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.util.Calendar
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber(")Ljava/lang/Object;");
      assertFalse(boolean0);
      
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      assertNotNull(weakHashMap0);
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      assertNotNull(illegalThreadStateException0);
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertNull(illegalThreadStateException0.getMessage());
      
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
      
      BreakIterator breakIterator0 = BreakIterator.getLineInstance();
      assertNotNull(breakIterator0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(breakIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : [checksum=0x10d0d814]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = Short.toUnsignedLong((short)151);
      assertEquals(151L, long0);
      
      byte[] byteArray0 = TypeUtils.castToBytes("yB`wyN&'8x1mf");
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-16), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-13), (byte)29, (byte)102}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Locale locale0 = TypeUtils.toLocale("{xhU{Jzoj>'kTu");
      assertNotNull(locale0);
      assertEquals("{xhu{jzoj>'ktu", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("{xhu{jzoj>'ktu", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertNotNull(class1);
      assertFalse(class1.isEnum());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("x.gN)`2&*-H|c");
      assertNotNull(string0);
      assertEquals("x.gN)`2&*-H|c", string0);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = Boolean.getBoolean("java/lang/Byte");
      assertFalse(boolean1);
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<?> class0 = TypeUtils.loadClass("TODO", classLoader0, false);
      assertNull(class0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      Class<?> class1 = TypeUtils.getCollectionItemClass((Type) null);
      assertNotNull(class1);
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      
      boolean boolean2 = TypeUtils.isNumber("K");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      assertNotNull(jSONPDeserializer0);
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) treeMap0, false, propertyNamingStrategy0);
      assertNotNull(list0);
      assertEquals(0, treeMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      
      Locale locale0 = TypeUtils.toLocale("ite");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ite", locale0.toString());
      assertEquals("ite", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ite", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      String string0 = identityHashMap0.put("ite", "ite");
      assertNull(string0);
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      String string1 = identityHashMap0.put((String) null, "Ll_");
      assertNull(string1);
      assertEquals(2, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException((String) null);
      assertNotNull(illegalMonitorStateException0);
      assertNull(illegalMonitorStateException0.getMessage());
      assertEquals("java.lang.IllegalMonitorStateException", illegalMonitorStateException0.toString());
      
      Class<Throwable> class1 = Throwable.class;
      IllegalMonitorStateException illegalMonitorStateException1 = (IllegalMonitorStateException)TypeUtils.castToJavaBean((Object) illegalMonitorStateException0, class1);
      assertNotNull(illegalMonitorStateException1);
      assertNull(illegalMonitorStateException0.getMessage());
      assertEquals("java.lang.IllegalMonitorStateException", illegalMonitorStateException0.toString());
      assertEquals("java.lang.IllegalMonitorStateException", illegalMonitorStateException1.toString());
      assertNull(illegalMonitorStateException1.getMessage());
      assertSame(illegalMonitorStateException0, illegalMonitorStateException1);
      assertSame(illegalMonitorStateException1, illegalMonitorStateException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance;
      assertNotNull(sqlDateDeserializer0);
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("^tTgRlP=1om4u4");
      assertNotNull(illegalMonitorStateException0);
      assertEquals("java.lang.IllegalMonitorStateException: ^tTgRlP=1om4u4", illegalMonitorStateException0.toString());
      assertEquals("^tTgRlP=1om4u4", illegalMonitorStateException0.getMessage());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(illegalMonitorStateException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.lang.IllegalMonitorStateException: ^tTgRlP=1om4u4", illegalMonitorStateException0.toString());
      assertEquals("^tTgRlP=1om4u4", illegalMonitorStateException0.getMessage());
      assertEquals("java.lang.IllegalMonitorStateException: ^tTgRlP=1om4u4", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.lang.IllegalMonitorStateException: ^tTgRlP=1om4u4", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      AtomicInteger atomicInteger0 = new AtomicInteger(35);
      assertNotNull(atomicInteger0);
      assertEquals(35, atomicInteger0.get());
      assertEquals(35.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(35, atomicInteger0.intValue());
      assertEquals((byte)35, atomicInteger0.byteValue());
      assertEquals("35", atomicInteger0.toString());
      assertEquals(35L, atomicInteger0.longValue());
      assertEquals(35.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals((short)35, atomicInteger0.shortValue());
      
      boolean boolean0 = atomicInteger0.weakCompareAndSet(35, 37);
      assertTrue(boolean0);
      assertEquals(37, atomicInteger0.get());
      assertEquals("37", atomicInteger0.toString());
      assertEquals(37.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(37.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(37L, atomicInteger0.longValue());
      assertEquals((short)37, atomicInteger0.shortValue());
      assertEquals(37, atomicInteger0.intValue());
      assertEquals((byte)37, atomicInteger0.byteValue());
      
      int int0 = atomicInteger0.decrementAndGet();
      assertEquals(36, int0);
      assertEquals(36.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(36, atomicInteger0.intValue());
      assertEquals(36, atomicInteger0.get());
      assertEquals("36", atomicInteger0.toString());
      assertEquals(36L, atomicInteger0.longValue());
      assertEquals((short)36, atomicInteger0.shortValue());
      assertEquals(36.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals((byte)36, atomicInteger0.byteValue());
      
      Date date0 = TypeUtils.castToSqlDate(atomicInteger0);
      assertNotNull(date0);
      assertEquals(36.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(36, atomicInteger0.intValue());
      assertEquals(36, atomicInteger0.get());
      assertEquals("36", atomicInteger0.toString());
      assertEquals(36L, atomicInteger0.longValue());
      assertEquals((short)36, atomicInteger0.shortValue());
      assertEquals(36.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals((byte)36, atomicInteger0.byteValue());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(illegalMonitorStateException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockThread mockThread0 = new MockThread("}\"bxGxhZ?LM'Qmg>a0~");
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.parser.ParserConfig", classLoader0, false);
      assertNotNull(class0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertEquals("class com.alibaba.fastjson.parser.ParserConfig", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      PageAttributes.ColorType pageAttributes_ColorType0 = PageAttributes.ColorType.COLOR;
      assertNotNull(pageAttributes_ColorType0);
      
      PageAttributes.MediaType pageAttributes_MediaType0 = PageAttributes.MediaType.ISO_B3;
      assertNotNull(pageAttributes_MediaType0);
      
      PageAttributes.OrientationRequestedType pageAttributes_OrientationRequestedType0 = PageAttributes.OrientationRequestedType.LANDSCAPE;
      assertNotNull(pageAttributes_OrientationRequestedType0);
      
      PageAttributes.OriginType pageAttributes_OriginType0 = PageAttributes.OriginType.PHYSICAL;
      assertNotNull(pageAttributes_OriginType0);
      
      PageAttributes.PrintQualityType pageAttributes_PrintQualityType0 = PageAttributes.PrintQualityType.DRAFT;
      assertNotNull(pageAttributes_PrintQualityType0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1667);
      intArray0[1] = (-567);
      PageAttributes pageAttributes0 = null;
      try {
        pageAttributes0 = new PageAttributes(pageAttributes_ColorType0, pageAttributes_MediaType0, pageAttributes_OrientationRequestedType0, pageAttributes_OriginType0, pageAttributes_PrintQualityType0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid value for attribute printerResolution
         //
         verifyException("java.awt.PageAttributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("L", "L", 57);
      assertNotNull(sQLTimeoutException0);
      assertEquals(57, sQLTimeoutException0.getErrorCode());
      assertEquals("L", sQLTimeoutException0.getSQLState());
      assertEquals("L", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: L", sQLTimeoutException0.toString());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      assertEquals(57, sQLTimeoutException0.getErrorCode());
      assertEquals("L", sQLTimeoutException0.getSQLState());
      assertEquals("L", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: L", sQLTimeoutException0.toString());
      
      Throwable[] throwableArray0 = sQLTimeoutException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals(57, sQLTimeoutException0.getErrorCode());
      assertEquals("L", sQLTimeoutException0.getSQLState());
      assertEquals("L", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: L", sQLTimeoutException0.toString());
      
      SQLWarning sQLWarning0 = new SQLWarning("not close json text, token : ", "L\"|36G+5M-");
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("not close json text, token : ", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: not close json text, token : ", sQLWarning0.toString());
      assertEquals("L\"|36G+5M-", sQLWarning0.getSQLState());
      
      Consumer<Throwable> consumer1 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      assertNotNull(parameterizedTypeImpl0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>(hashtable0);
      assertNotNull(weakHashMap0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) weakHashMap0, false, propertyNamingStrategy0);
      assertNotNull(list0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast(object0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.lang.Object@27114be5
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      Class<?> class0 = TypeUtils.loadClass("java.time.ZonedDateTime", (ClassLoader) aSMDeserializerFactory0.classLoader);
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertEquals("class java.time.ZonedDateTime", class0.toString());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "int", (-1398));
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("int", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals((-1398), sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean(object0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = TypeUtils.castToString("yB`wyN&'8x1mf");
      assertNotNull(string0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Locale locale0 = TypeUtils.toLocale("yB`wyN&'8x1mf");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("yb`wyn&'8x1mf", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("yb`wyn&'8x1mf", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("yB`wyN&'8x1mf");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance;
      assertNotNull(sqlDateDeserializer0);
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(sqlDateDeserializer0);
      assertTrue(boolean0);
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      
      MockThread.reset();
      Locale locale0 = TypeUtils.toLocale("\"&EZZv$J;_I-l]4bp");
      assertNotNull(locale0);
      assertEquals("\"&ezzv$j;_I-L]4BP", locale0.toString());
      assertEquals("\"&ezzv$j;", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("I-L]4BP", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      
      Locale locale0 = TypeUtils.toLocale("ite");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ite", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ite", locale0.getLanguage());
      assertEquals("ite", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertNotNull(class1);
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isArray());
      
      Class class2 = (Class)TypeUtils.unwrapOptional(class1);
      assertNotNull(class2);
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isArray());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      
      Class<Byte> class3 = Byte.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class1, class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
      
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      assertNotNull(jSONPDeserializer0);
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
      
      long long0 = TypeUtils.fnv1a_64("fastjson.parser.deny");
      assertEquals(8807520128269719306L, long0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      assertNotNull(propertyProcessableDeserializer0);
      assertEquals(12, propertyProcessableDeserializer0.getFastMatchToken());
      
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(jSONObject0.defaultLocale);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotNull(dateFormatSymbols0);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      
      JSONObject jSONObject1 = jSONObject0.fluentPut("t(85A", dateFormatSymbols0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.size());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertFalse(jSONObject1.isEmpty());
      assertEquals(1, jSONObject1.size());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      boolean boolean0 = TypeUtils.isNumber("2t*A ,4/");
      assertFalse(boolean0);
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("yyyy-MM-dd HH:mm:ss");
      assertNotNull(illegalThreadStateException0);
      assertEquals("yyyy-MM-dd HH:mm:ss", illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException: yyyy-MM-dd HH:mm:ss", illegalThreadStateException0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(illegalThreadStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.IllegalThreadStateException: yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vM!RQ");
      assertFalse(boolean0);
      
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      assertNotNull(type0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      
      long long0 = TypeUtils.fnv1a_64_lower("yB`wyN&'8x1mf");
      assertEquals(7703927747904144305L, long0);
      
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      String string0 = TypeUtils.castToString(linkedHashSet0);
      assertNotNull(string0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, type0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"asmEnable\":true,\"autoTypeSupport\":false,\"compatibleWithJavaBean\":true,\"deserializers\":{},\"fieldBased\":false,\"symbolTable\":{}}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertEquals("char", class0.toString());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<?> class1 = TypeUtils.loadClass("ite", classLoader0, false);
      assertNull(class1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      Class<?> class2 = TypeUtils.getCollectionItemClass((Type) null);
      assertNotNull(class2);
      assertFalse(class2.isPrimitive());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      
      boolean boolean0 = TypeUtils.isNumber("-*4LtzDNHAF3p-cj");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("ite");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ite\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      Float float0 = new Float((double) (-1989));
      assertNotNull(float0);
      assertEquals((-1989.0F), (float)float0, 0.01F);
      
      String string0 = "multi-JSONCreator";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("multi-JSONCreator");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : multi-JSONCreator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("Lorg.springframework.util.LinkedMultiValueMap");
      assertNotNull(string0);
      assertEquals("lorg.springframework.util.LinkedMultiValueMap", string0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean boolean1 = Boolean.getBoolean("L");
      assertFalse(boolean1);
      
      Integer integer0 = TypeUtils.castToInt(boolean0);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      assertFalse(boolean0.equals((Object)boolean1));
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      TimeUnit[] timeUnitArray0 = TimeUnit.values();
      assertNotNull(timeUnitArray0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("j7");
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      boolean boolean2 = Boolean.getBoolean("j7");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      
      Integer integer0 = TypeUtils.castToInt(boolean1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      assertFalse(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean0));
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Float float0 = TypeUtils.castToFloat(integer0);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertFalse(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean0));
      
      Time time0 = TypeUtils.castToSqlTime(integer0);
      assertNotNull(time0);
      assertEquals("00:00:00", time0.toString());
      assertFalse(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean0));
      
      float float1 = Float.sum((-1.0F), 0.75F);
      assertEquals((-0.25F), float1, 0.01F);
      
      Class<Short> class0 = Short.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(class1);
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertTrue(class1.isArray());
      assertEquals("class [S", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(float0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|J^;[cG4 'FP,T&;");
      assertFalse(boolean0);
      
      Time time0 = new Time((-2602L));
      assertNotNull(time0);
      assertEquals("23:59:57", time0.toString());
      
      Object object0 = time0.clone();
      assertNotNull(object0);
      assertEquals("23:59:57", time0.toString());
      assertEquals("23:59:57", object0.toString());
      assertTrue(object0.equals((Object)time0));
      assertNotSame(time0, object0);
      assertNotSame(object0, time0);
      
      Date date0 = TypeUtils.castToSqlDate(time0);
      assertNotNull(date0);
      assertEquals("23:59:57", time0.toString());
      assertTrue(time0.equals((Object)object0));
      assertNotSame(time0, object0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<Insets> class0 = Insets.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("Lorg.springframework.util.LinkedMultiValueMap");
      assertNotNull(illegalThreadStateException0);
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap", illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException: Lorg.springframework.util.LinkedMultiValueMap", illegalThreadStateException0.toString());
      
      String string0 = illegalThreadStateException0.getLocalizedMessage();
      assertNotNull(string0);
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap", string0);
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap", illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException: Lorg.springframework.util.LinkedMultiValueMap", illegalThreadStateException0.toString());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("null", "%8LBYV5n{\"");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("%8LBYV5n{\"", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("null", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: null", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      Spliterator<Throwable> spliterator0 = sQLNonTransientConnectionException0.spliterator();
      assertNotNull(spliterator0);
      assertEquals("%8LBYV5n{\"", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("null", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: null", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      Float float0 = new Float(750.9002F);
      assertNotNull(float0);
      assertEquals(750.9002F, (float)float0, 0.01F);
      
      Long long0 = TypeUtils.castToLong(float0);
      assertNotNull(long0);
      assertEquals(750L, (long)long0);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      assertNotNull(imageCapabilities0);
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(imageCapabilities0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertNotNull(jSONObject0);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      assertNotNull(dateFormatSymbols0);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      
      JSONObject jSONObject1 = jSONObject0.fluentPut("listContext", dateFormatSymbols0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertNotNull(jSONObject1);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.size());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals(1, jSONObject1.size());
      assertFalse(jSONObject1.isEmpty());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Class<Short> class0 = Short.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Class<Integer> class1 = Integer.TYPE;
      assertNotNull(class1);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class1;
      typeArray0[5] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[5]);
      assertNotNull(parameterizedTypeImpl0);
      
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(jSONObject1.defaultLocale);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertNotNull(decimalFormatSymbols0);
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.size());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals(1, jSONObject1.size());
      assertFalse(jSONObject1.isEmpty());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) decimalFormatSymbols0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("char", class0.toString());
      
      String string0 = "ite";
      Class<Short> class1 = Short.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "ite", class1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ite\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      assertNotNull(type0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      assertNotNull(aSMDeserializerFactory1);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader1);
      assertSame(aSMClassLoader1, aSMClassLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("it", (ClassLoader) null);
      assertNull(class0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      
      MapDeserializer mapDeserializer0 = TypeUtils.cast((Object) null, (Type) parameterizedTypeImpl0, parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNull(mapDeserializer0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertSame(parameterizedTypeImpl0, type0);
      assertNotSame(aSMDeserializerFactory0, aSMDeserializerFactory1);
      assertSame(aSMClassLoader1, aSMClassLoader0);
      
      Class<?> class1 = TypeUtils.loadClass("fastjson.parser.autoTypeSupport", (ClassLoader) aSMClassLoader1, false);
      assertNull(class1);
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertNotSame(aSMDeserializerFactory0, aSMDeserializerFactory1);
      assertSame(aSMClassLoader1, aSMClassLoader0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("Lorg.springframework.util.LinkedMultiValueMap");
      assertNotNull(string0);
      assertEquals("lorg.springframework.util.LinkedMultiValueMap", string0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*<!");
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.isNumber("L");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : L
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      assertNotNull(type0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized(class0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl1 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl1);
      assertSame(parameterizedTypeImpl1, type0);
      assertSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(type0);
      assertNotNull(class1);
      assertEquals("class java.lang.String", class1.toString());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(parameterizedTypeImpl0, parameterizedTypeImpl1);
      assertSame(type0, parameterizedTypeImpl0);
      assertSame(type0, parameterizedTypeImpl1);
      
      WeakHashMap<Time, StackTraceElementDeserializer> weakHashMap0 = new WeakHashMap<Time, StackTraceElementDeserializer>();
      assertNotNull(weakHashMap0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Class<Calendar> class2 = Calendar.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) genericArrayType0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Constructor<SQLTransientException>[] constructorArray0 = (Constructor<SQLTransientException>[]) Array.newInstance(Constructor.class, 6);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor(constructorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      Locale locale0 = TypeUtils.toLocale("Ljava.util.concurrent.ConcurrentSkipListSet");
      assertNotNull(locale0);
      assertEquals("ljava.util.concurrent.concurrentskiplistset", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ljava.util.concurrent.concurrentskiplistset", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      Class<BitSet> class1 = BitSet.class;
      int int0 = TypeUtils.getParserFeatures(class1);
      assertEquals(0, int0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      Class<DecimalFormatSymbols> class2 = DecimalFormatSymbols.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      String string0 = identityHashMap0.put("", "has");
      assertNull(string0);
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      
      boolean boolean0 = TypeUtils.isProxy(class1);
      assertFalse(boolean0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class2);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(throwableDeserializer0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      
      boolean boolean1 = TypeUtils.isHibernateInitialized(throwableDeserializer0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(boolean1);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      assertFalse(boolean1 == boolean0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Date date0 = TypeUtils.castToSqlDate("");
      assertNull(date0);
      
      Class class3 = (Class)TypeUtils.getCollectionItemType(class2);
      assertNotNull(class3);
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals("class java.lang.Object", class3.toString());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jSONType0).toString();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("andIncrement", "className", "className", 47);
      assertNotNull(stackTraceElement0);
      assertEquals("andIncrement", stackTraceElement0.getClassName());
      assertEquals("andIncrement.className(className:47)", stackTraceElement0.toString());
      assertEquals("className", stackTraceElement0.getMethodName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("className", stackTraceElement0.getFileName());
      assertEquals(47, stackTraceElement0.getLineNumber());
      
      TypeUtils.clearClassMapping();
      long long0 = TypeUtils.fnv1a_64_lower("fastjson.parser.autoTypeSupport");
      assertEquals(1461384724327545714L, long0);
      
      Class<java.util.Date> class0 = java.util.Date.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      ParserConfig parserConfig1 = new ParserConfig(false);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertNotNull(parserConfig1);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      
      ParserConfig parserConfig2 = ParserConfig.getGlobalInstance();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig2.compatibleWithJavaBean);
      assertFalse(parserConfig2.fieldBased);
      assertNotNull(parserConfig2);
      assertFalse(parserConfig2.isAutoTypeSupport());
      assertTrue(parserConfig2.isAsmEnable());
      assertFalse(parserConfig2.equals((Object)parserConfig1));
      assertFalse(parserConfig2.equals((Object)parserConfig0));
      assertNotSame(parserConfig2, parserConfig1);
      assertNotSame(parserConfig2, parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) jSONType0, (Type) class0, parserConfig2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      Locale locale0 = TypeUtils.toLocale("Ljava.awt.Font");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ljava.awt.font", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ljava.awt.font", locale0.toString());
      
      Class<MessageFormat> class1 = MessageFormat.class;
      int int0 = TypeUtils.getParserFeatures(class1);
      assertEquals(0, int0);
      
      Class<?> class2 = TypeUtils.getCollectionItemClass(class0);
      assertNotNull(class2);
      assertFalse(class2.isAnnotation());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isArray());
      
      Class class3 = (Class)TypeUtils.unwrapOptional(class1);
      assertNotNull(class3);
      assertFalse(class3.isInterface());
      assertFalse(class3.isPrimitive());
      assertEquals("class java.text.MessageFormat", class3.toString());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isArray());
      assertFalse(class3.isAnnotation());
      
      Class<Byte> class4 = Byte.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "Ljava.awt.Font", class4);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ljava.awt.Font\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Short> class0 = Short.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jQcr,lJ5");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
      
      TypeUtils.clearClassMapping();
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      assertNotNull(list0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      assertNotNull(class2);
      assertFalse(class2.isAnnotation());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isArray());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class2);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(throwableDeserializer0);
      assertFalse(class2.isAnnotation());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      
      String string0 = TypeUtils.castToString(throwableDeserializer0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(string0);
      assertFalse(class2.isAnnotation());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = ParserConfig.DENY_PROPERTY;
      assertNotNull(string0);
      assertEquals("fastjson.parser.deny", string0);
      
      boolean boolean0 = TypeUtils.isNumber("Ljava.lang.AutoCloseable");
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      boolean boolean2 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      
      Integer integer0 = TypeUtils.castToInt("");
      assertNull(integer0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      ClassLoader classLoader2 = classLoader0.getParent();
      assertNotNull(classLoader2);
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertSame(classLoader0, classLoader1);
      
      Class<?> class0 = TypeUtils.loadClass("currencyCode", classLoader2, false);
      assertNull(class0);
      assertFalse(classLoader0.equals((Object)classLoader2));
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertSame(classLoader0, classLoader1);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass((Type) null);
      assertNotNull(class1);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLNonTransientConnectionException: 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("Lorg.springframework.util.LinkedMultiValueMap");
      assertNotNull(string0);
      assertEquals("lorg.springframework.util.LinkedMultiValueMap", string0);
      
      Boolean boolean0 = new Boolean("Lorg.springframework.util.LinkedMultiValueMap");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = Boolean.getBoolean("L");
      assertFalse(boolean1);
      
      Integer integer0 = TypeUtils.castToInt(boolean0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertTrue(boolean0.equals((Object)boolean1));
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("lorg.springframework.util.LinkedMultiValueMap", classLoader1, false);
      assertNull(class0);
      assertSame(classLoader1, classLoader0);
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader2);
      assertSame(classLoader2, classLoader1);
      assertSame(classLoader2, classLoader0);
      
      Locale locale0 = TypeUtils.toLocale("Lorg.springframework.util.LinkedMultiValueMap");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("lorg.springframework.util.linkedmultivaluemap", locale0.toString());
      assertEquals("lorg.springframework.util.linkedmultivaluemap", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(classLoader2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(101);
      assertNotNull(atomicInteger0);
      assertEquals((short)101, atomicInteger0.shortValue());
      assertEquals(101L, atomicInteger0.longValue());
      assertEquals(101, atomicInteger0.get());
      assertEquals("101", atomicInteger0.toString());
      assertEquals(101.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(101.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(101, atomicInteger0.intValue());
      assertEquals((byte)101, atomicInteger0.byteValue());
      
      Class<Short> class0 = Short.class;
      Short short0 = TypeUtils.castToJavaBean((Object) atomicInteger0, class0);
      assertNotNull(short0);
      assertEquals((short)101, (short)short0);
      assertEquals((short)101, atomicInteger0.shortValue());
      assertEquals(101L, atomicInteger0.longValue());
      assertEquals(101, atomicInteger0.get());
      assertEquals("101", atomicInteger0.toString());
      assertEquals(101.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(101.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(101, atomicInteger0.intValue());
      assertEquals((byte)101, atomicInteger0.byteValue());
      
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      assertNotNull(jSONPDeserializer0);
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("$ref", "L", 46);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("$ref", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(46, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("L", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: $ref", sQLIntegrityConstraintViolationException0.toString());
      
      SQLDataException sQLDataException0 = new SQLDataException("longValue", "fastjson.parser.autoTypeSupport", sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLDataException0);
      assertEquals("$ref", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(46, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("L", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: $ref", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("longValue", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: longValue", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("fastjson.parser.autoTypeSupport", sQLDataException0.getSQLState());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.sql.SQLDataException: longValue
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("Lorg.springframework.util.LinkedMultiValueMap");
      assertNotNull(string0);
      assertEquals("lorg.springframework.util.LinkedMultiValueMap", string0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lorg.springframework.util.LinkedMultiValueMap");
      assertFalse(boolean0);
      
      String string1 = ParserConfig.AUTOTYPE_ACCEPT;
      assertNotNull(string1);
      assertEquals("fastjson.parser.autoTypeAccept", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      Double double0 = new Double(1279.6124190685);
      assertNotNull(double0);
      assertEquals(1279.6124190685, (double)double0, 0.01);
      
      java.util.Date date0 = TypeUtils.castToDate(double0);
      assertNotNull(date0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      assertNotNull(jSONPDeserializer0);
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      
      long long0 = TypeUtils.fnv1a_64_lower("yB`wyN&'8x1mf");
      assertEquals(7703927747904144305L, long0);
      
      String string0 = TypeUtils.castToString(jSONPDeserializer0);
      assertNotNull(string0);
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      
      SecurityException securityException0 = new SecurityException();
      assertNotNull(securityException0);
      assertNull(securityException0.getMessage());
      assertEquals("java.lang.SecurityException", securityException0.toString());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      WeakHashMap<Time, StackTraceElementDeserializer> weakHashMap0 = new WeakHashMap<Time, StackTraceElementDeserializer>();
      assertNotNull(weakHashMap0);
      
      Class<Calendar> class1 = Calendar.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Byte byte0 = new Byte((byte) (-15));
      assertNotNull(byte0);
      assertEquals((byte) (-15), (byte)byte0);
      
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)TypeUtils.cast((Object) byte0, class1, parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(mockGregorianCalendar0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-15,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=985,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3960, 3960, 3960);
      assertNotNull(mockDate0);
      assertEquals("Tue Nov 04 00:00:00 GMT 6200", mockDate0.toString());
      
      Date date0 = new Date(3960);
      assertNotNull(date0);
      
      boolean boolean0 = mockDate0.after(date0);
      assertTrue(boolean0);
      assertEquals("Tue Nov 04 00:00:00 GMT 6200", mockDate0.toString());
      
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Tue Nov 04 00:00:00 GMT 6200", mockDate0.toString());
      
      Time time0 = TypeUtils.castToSqlTime(mockDate0);
      assertNotNull(time0);
      assertEquals("Tue Nov 04 00:00:00 GMT 6200", mockDate0.toString());
      assertEquals("00:00:00", time0.toString());
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      TreeMap<String, ClientInfoStatus> treeMap0 = new TreeMap<String, ClientInfoStatus>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(treeMap0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, treeMap0.size());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.sql.SQLClientInfoException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      String string0 = TypeUtils.castToString(linkedHashSet0);
      assertNotNull(string0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      assertNotNull(illegalThreadStateException0);
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      
      String string0 = illegalThreadStateException0.getLocalizedMessage();
      assertNull(string0);
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("getMetaClass", "null]");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: getMetaClass", sQLNonTransientConnectionException0.toString());
      assertEquals("null]", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("getMetaClass", sQLNonTransientConnectionException0.getMessage());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      assertNotNull(sQLNonTransientConnectionException1);
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertNull(sQLNonTransientConnectionException1.getMessage());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.toString());
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      
      Spliterator<Throwable> spliterator0 = sQLNonTransientConnectionException0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: getMetaClass", sQLNonTransientConnectionException0.toString());
      assertEquals("null]", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("getMetaClass", sQLNonTransientConnectionException0.getMessage());
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertNotSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
      
      Class<Long> class0 = Long.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLNonTransientConnectionException1, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.sql.SQLNonTransientConnectionException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("yB`wyN&'8x1mf");
      assertEquals(7703927747904144305L, long0);
      
      String string0 = TypeUtils.castToString("yB`wyN&'8x1mf");
      assertNotNull(string0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      Class<Point> class0 = Point.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) linkedHashMap0, false, propertyNamingStrategy0);
      assertNotNull(list0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("(Z)V");
      assertNotNull(illegalThreadStateException0);
      assertEquals("(Z)V", illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException: (Z)V", illegalThreadStateException0.toString());
      
      String string0 = illegalThreadStateException0.getLocalizedMessage();
      assertNotNull(string0);
      assertEquals("(Z)V", string0);
      assertEquals("(Z)V", illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException: (Z)V", illegalThreadStateException0.toString());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("null]", "getMetaClass");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("getMetaClass", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: null]", sQLNonTransientConnectionException0.toString());
      assertEquals("null]", sQLNonTransientConnectionException0.getMessage());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      assertNotNull(sQLNonTransientConnectionException1);
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.toString());
      assertNull(sQLNonTransientConnectionException1.getMessage());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      
      Spliterator<Throwable> spliterator0 = sQLNonTransientConnectionException1.spliterator();
      assertNotNull(spliterator0);
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.toString());
      assertNull(sQLNonTransientConnectionException1.getMessage());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertNotSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      LocalTime localTime0 = MockLocalTime.now();
      assertNotNull(localTime0);
      
      Time time0 = Time.valueOf(localTime0);
      assertNotNull(time0);
      assertEquals("20:21:21", time0.toString());
      
      java.util.Date date0 = TypeUtils.castToDate(time0);
      assertNotNull(date0);
      assertEquals("20:21:21", time0.toString());
      assertEquals("20:21:21", date0.toString());
      assertSame(time0, date0);
      assertSame(date0, time0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("ite");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : ite
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      assertNotNull(jSONPDeserializer0);
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      
      Locale locale0 = TypeUtils.toLocale("list_item_value");
      assertNotNull(locale0);
      assertEquals("list", locale0.getLanguage());
      assertEquals("ITEM", locale0.getCountry());
      assertEquals("value", locale0.getVariant());
      assertEquals("list_ITEM_value", locale0.toString());
      
      Class<MessageFormat> class0 = MessageFormat.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertNotNull(class1);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      
      Class<Integer> class2 = Integer.TYPE;
      assertNotNull(class2);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertEquals("int", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isPrimitive());
      
      Class class3 = (Class)TypeUtils.unwrapOptional(class2);
      assertNotNull(class3);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertEquals("int", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals("int", class3.toString());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertTrue(class3.isPrimitive());
      
      Class<Byte> class4 = Byte.class;
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException("nuM");
      assertNotNull(noSuchMethodException0);
      assertEquals("nuM", noSuchMethodException0.getMessage());
      assertEquals("java.lang.NoSuchMethodException: nuM", noSuchMethodException0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) noSuchMethodException0, class4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.NoSuchMethodException: nuM
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<MessageFormat> class1 = MessageFormat.class;
      int int0 = TypeUtils.getParserFeatures(class1);
      assertEquals(0, int0);
      
      Class<?> class2 = TypeUtils.getCollectionItemClass(class0);
      assertNotNull(class2);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      
      Class class3 = (Class)TypeUtils.unwrapOptional(class1);
      assertNotNull(class3);
      assertEquals("class java.text.MessageFormat", class3.toString());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isAnnotation());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Float float0 = new Float((float) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      float float1 = Float.min(3267.0F, 0);
      assertEquals(0.0F, float1, 0.01F);
      
      Class<PropertyNamingStrategy> class4 = PropertyNamingStrategy.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      PropertyNamingStrategy propertyNamingStrategy0 = TypeUtils.castToEnum((Object) float0, class4, parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(PropertyNamingStrategy.CamelCase, propertyNamingStrategy0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals((float)float0, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long long0 = Short.toUnsignedLong((short)151);
      assertEquals(151L, long0);
      
      MockThread mockThread0 = new MockThread("|J^;[cG4 'FP,T&;");
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Type[] typeArray0 = new Type[1];
      Class<Short> class0 = Short.TYPE;
      assertNotNull(class0);
      assertEquals("short", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      
      typeArray0[0] = (Type) class0;
      AtomicLong atomicLong0 = new AtomicLong(7179336928365889465L);
      assertNotNull(atomicLong0);
      assertEquals(169330617, atomicLong0.intValue());
      assertEquals("7179336928365889465", atomicLong0.toString());
      assertEquals(7.179337E18F, atomicLong0.floatValue(), 0.01F);
      assertEquals((byte) (-71), atomicLong0.byteValue());
      assertEquals(7.1793369283658895E18, atomicLong0.doubleValue(), 0.01);
      assertEquals(7179336928365889465L, atomicLong0.get());
      assertEquals((short) (-14407), atomicLong0.shortValue());
      assertEquals(7179336928365889465L, atomicLong0.longValue());
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp(atomicLong0);
      assertNotNull(timestamp0);
      assertEquals(169330617, atomicLong0.intValue());
      assertEquals("7179336928365889465", atomicLong0.toString());
      assertEquals(7.179337E18F, atomicLong0.floatValue(), 0.01F);
      assertEquals((byte) (-71), atomicLong0.byteValue());
      assertEquals(7.1793369283658895E18, atomicLong0.doubleValue(), 0.01);
      assertEquals(7179336928365889465L, atomicLong0.get());
      assertEquals((short) (-14407), atomicLong0.shortValue());
      assertEquals(7179336928365889465L, atomicLong0.longValue());
      assertEquals("227506100-07-29 15:24:49.465", timestamp0.toString());
      assertEquals(465000000, timestamp0.getNanos());
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertNotNull(class1);
      assertEquals("short", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      int int0 = Boolean.compare(true, true);
      assertEquals(0, int0);
      
      boolean boolean1 = Boolean.getBoolean("L");
      assertFalse(boolean1);
      
      Integer integer0 = TypeUtils.castToInt(boolean0);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(integer0.equals((Object)int0));
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<?> class0 = TypeUtils.loadClass((String) null, classLoader1, false);
      assertNull(class0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<?> class1 = TypeUtils.getCollectionItemClass((Type) null);
      assertNotNull(class1);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      
      Class<?> class2 = TypeUtils.getClass((Type) class1);
      assertNotNull(class2);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals("class java.lang.Object", class2.toString());
      assertSame(class1, class2);
      assertSame(class2, class1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      String string0 = "ite";
      Class<Short> class1 = Short.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("short", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "ite", class1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ite\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
