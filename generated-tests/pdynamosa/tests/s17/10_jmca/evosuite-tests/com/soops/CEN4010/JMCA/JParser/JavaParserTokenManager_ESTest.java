/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 03:22:41 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserConstants;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)106;
      StringReader stringReader0 = new StringReader("=.kG)cyU~3L|bD_");
      char[] charArray0 = new char[3];
      charArray0[0] = 'H';
      charArray0[1] = 'P';
      charArray0[2] = 'G';
      stringReader0.read(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 33, 94);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(")", token0.toString());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2881, 2881, 2881);
      javaCharStream0.GetImage();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 2881, 86);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(104, token0.kind);
      assertEquals("/", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("", token1.toString());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5PnBaXu]gI* 1_^?");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1545), 42);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 77, (-517));
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, 42, 80);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream2);
      Token token0 = javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.SkipLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      //  // Unstable assertion: assertEquals(1, javaCharStream0.bufpos);
      //  // Unstable assertion: assertEquals(51, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"*/\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, (-1928));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(73, token0.kind);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%PE");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2881, 0, 0);
      javaCharStream0.GetImage();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 930, 112);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-674));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -674. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      StringReader stringReader0 = new StringReader("9Vd|h|9!- @iz)h{[W");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)11, (byte)0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      //  // Unstable assertion: assertEquals(4, javaCharStream0.getBeginColumn());
      //  // Unstable assertion: assertEquals(4, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R2F*7xJm+(~ )DN+>4");
      StringReader stringReader1 = new StringReader("u(");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 89, 89);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 8, (-2084));
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader1, 2964, 1653);
      // Undeclared exception!
      try { 
        javaParserTokenManager2.ReInit(javaCharStream2, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 13);
      StringReader stringReader0 = new StringReader("*wr*cJQA7lX_Ky*z");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.mark(13);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      Token.newToken(505);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParserTokenManager0.setDebugStream(javaParserTokenManager1.debugStream);
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager1.MoreLexicalActions();
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",jUGN(2}e");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 66, 118);
      javaCharStream0.maxNextCharInd = 66;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 66, column 118.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?*/k");
      StringReader stringReader1 = new StringReader("o3Z6 I6;~Bo");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (byte)68, (-12));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.jjimageLen = 68;
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-5), javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i:_|K]=t~ma");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.skip((-1676L));
      StringReader stringReader1 = new StringReader("i:_|K]=t~ma");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, (-1), (-1));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaCharStream0.ExpandBuff(false);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals("|", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(74, token1.kind);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M.(XdWWx%XQJy@eGB");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 32);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjround = (-146);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(33, javaCharStream0.getColumn());
      assertEquals(85, token0.kind);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}^|Yx*#{FLA{lg");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.mark(505);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Token.newToken((-1));
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream(115);
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M.(XdWWx%XQJy@eGB");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 32);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjround = 3484;
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(33, javaCharStream0.getBeginColumn());
      assertEquals(".", token1.toString());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R.");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(0, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M.(XdWWx%XQJy@eGB");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 32);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      char[] charArray0 = new char[7];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = ' ';
      charArray0[3] = '~';
      charArray0[4] = '~';
      charArray0[5] = ' ';
      charArray0[6] = '~';
      stringReader0.read(charArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 94, 94);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager2.MoreLexicalActions();
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("gESL@%;d5K=uBG M,");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 86, 0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(5, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      StringReader stringReader0 = new StringReader("@J~#=*@1{ :<3Z!yH");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 79, 32);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(34, javaCharStream0.getBeginColumn());
      assertEquals(90, token0.kind);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M.(XdWWx%XQJy@eGB");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 32);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("M", token0.toString());
      assertEquals(74, token0.kind);
      
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaCharStream0.ExpandBuff(true);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager2.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(39, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M)SmF");
      stringReader0.skip((-2929));
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2929), (-2929));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-2697));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2697. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"\n\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 5484, 81);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 5484, column 82.  Encountered: \"\\n\" (10), after : \"\\\"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i:_|K]=t~ma");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      StringReader stringReader1 = new StringReader("i:_|K]=t~ma");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, (-1), (-1));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader1, (-1), 1);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2);
      javaParserTokenManager1.jjnewStateCnt = 2073;
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager2.ReInit(javaCharStream1, 1);
      // Undeclared exception!
      try { 
        javaParserTokenManager2.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1, column 10.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iS:_|K]=t~ma");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte) (-9);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-105), (byte) (-105));
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<");
      StringReader stringReader1 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 5738, 5738);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(88, token0.kind);
      assertEquals("<", token0.toString());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R2F*7xJm+(~ )DN+>4");
      StringReader stringReader1 = new StringReader("R2F*7xJm+(~ )DN+>4");
      stringReader0.markSupported();
      stringReader0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-12), 44);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals("*", token0.toString());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("o3Z6 I6;~Bo");
      StringReader stringReader1 = new StringReader("{f");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 56, 421);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      assertEquals(421, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      assertEquals("f", token0.toString());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TB`8J6 y|lofu[");
      stringReader0.markSupported();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "TB`8J6 y|lofu[");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 9, 101);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream1, 2);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(2, javaCharStream1.getColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 15.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M)SmF");
      stringReader0.skip(1L);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2929), (-2929));
      javaCharStream0.ReInit((Reader) stringReader0, (-2929), 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.curLexState = 4843;
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
       //  fail("Expecting exception: Error");
       // Unstable assertion
      } catch(Error e) {
         //
         // Lexical error at line -2929, column 4.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("HMAZ~4");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2846), 85);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(88, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 459);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 3047);
      StringReader stringReader0 = new StringReader("EC%4/cT}/[Ex:");
      int int0 = JavaParserConstants.CHARACTER_LITERAL;
      StringReader stringReader1 = new StringReader("Error: Ignoring invalid lexical state : ");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-1259), 26);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",jUGN(2}e");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2062, (-1065));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(84, token0.kind);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9Vd|h|9!- @iz)h{[W");
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      charArray0[1] = '~';
      charArray0[2] = '~';
      charArray0[3] = '~';
      stringReader0.read(charArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M.(XdWWx%XQJy@eGB");
      StringReader stringReader1 = new StringReader("+<x{%.k5K4^+i=@= A");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 21, 20);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("+", token0.toString());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 13);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-108);
      byteArray0[0] = (byte)19;
      pipedOutputStream0.write(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, 13, 3674, 3674);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 13, column 3674.  Encountered: \"\\u0013\" (19), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("gR.");
      stringReader0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 1633);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      Locale locale0 = Locale.ROOT;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", (Object[]) javaParserTokenManager0.lexStateNames);
      javaParserTokenManager0.setDebugStream(printStream0);
      assertSame(mockPrintStream0, printStream0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5PnBaXu]gI* 1_^?");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1752), 4038);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit((JavaCharStream) null, (-1752));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1752. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      StringReader stringReader0 = new StringReader("null");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 25, 25);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals("null", token0.toString());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%C>ny3guD1Bk?a4");
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 506, 18);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "%C>ny3guD1Bk?a4");
      javaParserTokenManager1.image = stringBuffer0;
      javaParserTokenManager1.getNextToken();
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(124, token0.kind);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M)SmF");
      stringReader0.skip(1L);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2929), (-2929));
      javaCharStream0.ReInit((Reader) stringReader0, (-2929), 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(78, token0.kind);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R.");
      JavaCharStream javaCharStream0 = null;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit((JavaCharStream) null, 96);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 96. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StringReader stringReader0 = new StringReader("<token of kind 12>");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1716, 1350);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SwitchTo(1);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1716, javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 13);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 13);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)109;
      StringReader stringReader0 = new StringReader("Error: Ignoring invalid lexical state : ");
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      charArray0[1] = 'O';
      charArray0[2] = '~';
      int int0 = JavaParserConstants.CHARACTER_LITERAL;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 72, 41);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(48, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)106;
      StringReader stringReader0 = new StringReader("=.kG)cyU~3L|bD_");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte) (-39), 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(85, token0.kind);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}^|Yx*#{FLA{lg");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.mark(505);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Token token0 = Token.newToken((-1));
      token0.kind = (-1);
      javaParserTokenManager0.TokenLexicalActions(token0);
      stringReader0.skip(45035996273704960L);
      try { 
        pipedOutputStream0.write(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?*/k");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaCharStream0.ExpandBuff(true);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 1.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}^|Yx*#{FLA{lg");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.mark(505);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Token token0 = Token.newToken((-1));
      Token token1 = javaParserTokenManager0.getNextToken();
      token1.specialToken = token0;
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager2.lengthOfMatch = 80;
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 15.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)106;
      StringReader stringReader0 = new StringReader("=.kG)cyU~3L|bD_");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte) (-38), 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("=", token0.toString());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R.");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 86);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(".", token1.toString());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader("--");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1749), 22, 29);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(23, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5PnBaXu]gI* 1_^?");
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      stringReader0.markSupported();
      charArray0[1] = 'O';
      charArray0[2] = '+';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1752), 4038);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(4041, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"*/\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, (-1928));
      javaCharStream0.nextCharInd = 45;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column -1927.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 13);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 13);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      StringReader stringReader0 = new StringReader("Error: Ignoring invalid lexical state : ");
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      charArray0[1] = 'O';
      int int0 = JavaParserConstants.CHARACTER_LITERAL;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 72, 41);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(63, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/");
      StringReader stringReader1 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-3591), (-672));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-180));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -180. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%C>ny3guD1Bk?a4");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-313), 506);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals("C", token0.toString());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StringReader stringReader1 = new StringReader("^Z-N");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-4962), (byte)106);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("^", token0.toString());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 13);
      StringReader stringReader0 = new StringReader("*wr*cJQA7lX_Ky*z");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.mark(13);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      Token.newToken(505);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParserTokenManager0.setDebugStream(javaParserTokenManager1.debugStream);
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(4, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iS:_|K]=t~ma");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1115, 51);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?*/k");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("k", token0.toString());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R2F*7xJm+(~ )DN+>4");
      StringReader stringReader1 = new StringReader("u(");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 89, 89);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.bufline = javaParserTokenManager0.jjnewLexState;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader2 = new StringReader("Ylb8qfo'%");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader2, 0, 82);
      javaParserTokenManager0.ReInit(javaCharStream0);
      javaCharStream0.ReInit((Reader) stringReader1, 74, 89);
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, (-2334));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2334. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i:_|K]=t~ma");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.skip((-1676L));
      StringReader stringReader1 = new StringReader("i:_|K]=t~ma");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, (-1), (-1));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.MoreLexicalActions();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals("]", token0.toString());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[qOp{EL[~0z02b-~~3C");
      StringReader stringReader1 = new StringReader("[qOp{EL[~0z02b-~~3C");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-1249), (-1249));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1249), javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%C>ny3guD1Bk?a4");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-313), 506);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(506, javaCharStream0.getBeginColumn());
      assertEquals(108, token0.kind);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R.");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 86);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 61);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 61. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M.(XdWWx%XQJy@eGB");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjmatchedKind = 1849;
      javaParserTokenManager0.MoreLexicalActions();
      javaCharStream0.ExpandBuff(true);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.ReInit(javaCharStream0);
      javaParserTokenManager0.ReInit(javaCharStream0, 0);
      assertEquals(0, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3QUa\"Q6cR\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-696), 3456);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.curChar = 'g';
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 27);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 27. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i:_|K]=t~ma");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      StringReader stringReader1 = new StringReader("i:_|K]=t~ma");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, (-1), (-1));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(":", token0.toString());
      
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.ReInit(javaCharStream1, 3);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%C>ny3guD1Bk?a4");
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = 'G';
      StringReader stringReader1 = new StringReader("o3Z6 I6;~Bo");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 506, 506);
      stringReader1.read();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager2.getNextToken();
      Token token0 = javaParserTokenManager1.jjFillToken();
      //  // Unstable assertion: assertEquals(1, javaCharStream0.bufpos);
      //  // Unstable assertion: assertEquals("I6", token0.toString());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?*/k");
      stringReader0.mark(104);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("?", token0.toString());
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("*", token1.toString());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i:_|K]=t~ma");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 116, (-1464));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getColumn());
      
      javaParserTokenManager0.jjmatchedKind = 0;
      javaParserTokenManager0.setDebugStream((PrintStream) null);
      javaParserTokenManager0.ReInit(javaCharStream0, 1);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getLine());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}^|Yx*#{FLA{lg");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.mark(505);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      char[] charArray0 = new char[6];
      charArray0[0] = '5';
      charArray0[1] = 'H';
      charArray0[2] = '#';
      charArray0[3] = 'g';
      charArray0[4] = '=';
      charArray0[5] = 'v';
      stringReader0.read(charArray0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("R.");
      int int0 = 23;
      PipedInputStream pipedInputStream0 = new PipedInputStream(23);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, 23);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream1, 23, 23, 23);
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 23);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 23. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R.");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2765, 3049);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, true);
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(28);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 28. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)113, (byte)113);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)0, 68);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, false);
      List<Locale.LanguageRange> list0 = null;
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      // Undeclared exception!
      try { 
        Locale.filter((List<Locale.LanguageRange>) null, (Collection<Locale>) linkedList0, locale_FilteringMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("gESL@%;d5K=uBG M,");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 4, 119, 50);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      // Undeclared exception!
      try { 
        javaParserTokenManager1.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2881, 2881, 2881);
      javaCharStream0.GetImage();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.ReInit(javaCharStream0, 0);
      javaParserTokenManager0.MoreLexicalActions();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, false, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      javaParserTokenManager0.ReInit((JavaCharStream) null);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token token0 = token_GTToken0.next;
      javaParserTokenManager0.TokenLexicalActions((Token) null);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"Rl");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2056), 20);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -2056, column 23.  Encountered: <EOF> after : \"\\\"Rl\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      byteArrayInputStream0.mark(97);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 97, 661);
      javaCharStream0.prevCharIsLF = false;
      javaCharStream0.tokenBegin = 0;
      javaCharStream0.line = 0;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      byteArrayInputStream0.read(byteArray0, 0, 0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 13);
      StringReader stringReader0 = new StringReader("69jFCgorS@\"tQIA7&i");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2578, 115);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 1);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 2578, column 133.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iS:_|K]=t~ma");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)68;
      StringReader stringReader1 = new StringReader("o3Z6 I6;~Bo");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 506, 1905);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1908, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      StringReader stringReader0 = new StringReader("9Vd|h|9!- @iz)h{[W");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)11, (byte)0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      //  // Unstable assertion: assertEquals(5, javaCharStream0.bufpos);
      //  // Unstable assertion: assertEquals(106, token0.kind);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      //  // Unstable assertion: assertEquals(6, javaCharStream0.bufpos);
      //  // Unstable assertion: assertEquals(6, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3QUa\"Q6cR\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-696), 3456);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      //  // Unstable assertion: assertEquals(3, javaCharStream0.bufpos);
      //  // Unstable assertion: assertEquals(3459, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-38);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("cB.*?'G*o@p *<");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-2147483647), (byte)11);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager3.ReInit(javaCharStream0, 85);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 85. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("IMc(L#=z");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjmatchedKind = (-1);
      javaParserTokenManager0.ReInit(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      token_GTToken0.endColumn = 0;
      Token token0 = token_GTToken0.specialToken;
      javaParserTokenManager0.SkipLexicalActions((Token) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 13);
      StringReader stringReader0 = new StringReader("69jFCgorS@\"tQIA7&i");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2578, 115);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      //  // Unstable assertion: assertEquals(8, javaCharStream0.bufpos);
      //  // Unstable assertion: assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)126;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-95), (byte)0);
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (byte)126);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 126. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<=");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 22, 6);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0, 1);
      javaParserTokenManager0.TokenLexicalActions(token0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-1749));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1749. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 13);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 13);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)19;
      pipedOutputStream0.write(byteArray0);
      StringReader stringReader0 = new StringReader("do");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte) (-108), 348);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (byte) (-108), 53);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(25, token0.kind);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3QUa\"Q6cR\"");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)106;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 3683, 73);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream1.bufpos);
      assertEquals(3, javaCharStream1.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?*/k");
      StringReader stringReader1 = new StringReader("o3Z6 I6;~Bo");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (byte)68, (-12));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals("", token0.toString());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-38);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("cB.*?'G*o@p *<");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-2147483647), (byte)11);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      // Undeclared exception!
      try { 
        javaParserTokenManager2.ReInit(javaCharStream1, (int) (byte) (-38));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -38. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      StringReader stringReader0 = new StringReader("9Vd|h|9!- @iz)h{[W");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)11, (byte)11);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      //  // Unstable assertion: assertEquals(3, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      Token token0 = javaParserTokenManager1.getNextToken();
      //  // Unstable assertion: assertEquals(0, token0.kind);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<x");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 22, 6);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit((JavaCharStream) null, 22);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 22. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",jUGN(2}e");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte)78;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 27, (-1047));
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R2F*7xJm+(~ )DN+>4");
      StringReader stringReader1 = new StringReader("R2F*7xJm+(~ )DN+>4");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-12), 44);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.jjmatchedPos = 118;
      javaParserTokenManager1.getNextToken();
      Token token0 = javaParserTokenManager1.jjFillToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals("*", token0.toString());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 13);
      StringReader stringReader0 = new StringReader("yvw,,:Z%vJk");
      StringReader stringReader1 = new StringReader("yvw,,:Z%vJk");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-2526), 12);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-2924), 13);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(16, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}^|Yx*#{FLA{lg");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.mark(505);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Token token0 = Token.newToken((-1));
      token0.kind = (-1);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-2825), 11);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(11, javaCharStream1.getColumn());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-38);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("cB.*?'G*o@p *<");
      int int0 = JavaParserConstants.CHARACTER_LITERAL;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 80, (byte) (-38));
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.defaultLexState = (-728);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      assertEquals(5, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"*/\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 31);
      PipedInputStream pipedInputStream0 = new PipedInputStream(31);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte)33;
      byteArray0[8] = (byte) (-19);
      pipedOutputStream0.write(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0, (byte)33, (-1), 599);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(33, javaCharStream1.getLine());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 13);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 13);
      StringReader stringReader0 = new StringReader("$GkGw[|BJB! 1");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 565, 13);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(17, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("b");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2881, 2881, 2881);
      javaCharStream0.GetImage();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 2881, 86);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals("b", token0.toString());
      assertEquals(74, token0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("", token1.toString());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"protected\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      StringReader stringReader1 = new StringReader("\"protected\"");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, (-1), 1306);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream1, 123);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 123. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      StringReader stringReader0 = new StringReader("9Vd|h|9!- @iz)h{[W");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)11, (byte)0);
      javaCharStream0.inBuf = (-4724);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      //  // Unstable assertion: assertEquals(0, javaCharStream0.bufpos);
      //  // Unstable assertion: assertEquals(8, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 13);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 13);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)19;
      pipedOutputStream0.write(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, 13, 3674, 3674);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 13, column 3674.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}^|Yx*#{FLA{lg");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.mark(505);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Token token0 = Token.newToken((-1));
      token0.kind = (-1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      javaParserTokenManager0.setDebugStream(javaParserTokenManager1.debugStream);
      javaParserTokenManager1.jjFillToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      StringReader stringReader0 = new StringReader("9Vd|h|9!- @iz)h{[W");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)11, (byte)11);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      //  // Unstable assertion: assertEquals(2, javaCharStream0.bufpos);
      //  // Unstable assertion: assertEquals(13, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("else");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<x");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 22, 6);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals("x", token0.toString());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R2F*7xJm+(~ )DN+>4");
      StringReader stringReader1 = new StringReader("R2F*7xJm+(~ )DN+>4");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-12), 44);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = javaParserTokenManager0.getNextToken();
      //  // Unstable assertion: assertEquals(8, javaCharStream0.bufpos);
      //  // Unstable assertion: assertEquals(101, token0.kind);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"*/\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 40, (-198));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      charArray0[1] = '~';
      charArray0[2] = '~';
      charArray0[3] = ' ';
      stringReader0.read(charArray0);
      StringReader stringReader1 = new StringReader("`c7'|D{Tsohoq|fUi,#");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 32, 94);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 32, column 94.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" TPH*@QoOp!Z*i;pVAt");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.jjmatchedPos = 0;
      javaParserTokenManager0.SkipLexicalActions(token0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("}-GC6xYrC($", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("HMAZ~4");
      char[] charArray0 = new char[4];
      charArray0[0] = 'w';
      charArray0[1] = 'i';
      charArray0[2] = ' ';
      charArray0[3] = '\\';
      stringReader0.read(charArray0, 2, 2);
      StringReader stringReader1 = new StringReader("!G S8");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte) (-39), (-2417));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-2415), javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!=");
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 103, 119);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)85;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(120, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 13);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 13);
      StringReader stringReader0 = new StringReader("public");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 13, 13);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 13, 40);
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, 13, 49);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2);
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 462);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 462. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M.(XdWWx%XQJy@eGB");
      char[] charArray0 = new char[5];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'I';
      charArray0[3] = ' ';
      charArray0[4] = 'r';
      stringReader0.read(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.MoreLexicalActions();
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(7, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i:_|K]=t~ma");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      stringReader0.reset();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null, "Z'0 fyN }C");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iS:_|K]=t~ma");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-105);
      byteArray0[7] = (byte)111;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte) (-9);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-105), (byte) (-105));
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals((-104), javaCharStream0.getBeginColumn());
      assertEquals((-104), javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      StringReader stringReader0 = new StringReader("rH");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)0, 95);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      assertEquals(1, javaCharStream0.bufpos);
      
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaCharStream0.ExpandBuff(true);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(0, token0.kind);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PQ}yCr y");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 52);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(53, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 13);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 13);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-108);
      StringReader stringReader0 = new StringReader(">d/M/a$");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 13, 13);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(">", token0.toString());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M)SmF");
      stringReader0.skip(1L);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2929), (-2929));
      javaCharStream0.ReInit((Reader) stringReader0, (-2929), 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      StringBuffer stringBuffer0 = javaParserTokenManager0.image;
      javaParserTokenManager0.image = null;
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token1);
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(")", token0.toString());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z8x^WI");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 31);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 118, 0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(2, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager2.getNextToken();
      assertEquals(0, token0.kind);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader("gR.");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 1633);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1634, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%C>ny3guD1Bk?a4");
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = 'G';
      charArray0[2] = '/';
      charArray0[3] = 'r';
      charArray0[4] = 'I';
      charArray0[5] = '^';
      charArray0[6] = ' ';
      charArray0[7] = '~';
      stringReader0.read(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-313), 506);
      javaCharStream0.inputStream = (Reader) stringReader0;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(512, javaCharStream0.getEndColumn());
  }
}
