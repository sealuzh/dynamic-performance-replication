/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:39:29 GMT 2018
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.util.FieldInfo;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.nio.charset.Charset;
import java.sql.Date;
import java.text.NumberFormat;
import java.time.chrono.ChronoLocalDate;
import java.util.Calendar;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 23, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentRemove(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONArray jSONArray1 = jSONArray0.fluentSet(106, mockJapaneseDate0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 107
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Object object0 = jSONArray0.clone();
      assertTrue(object0.equals((Object)jSONArray0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      boolean boolean0 = jSONArray1.retainAll(jSONArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      jSONArray0.set(3089, mockHijrahDate0);
      jSONArray0.fluentSet(3089, mockHijrahDate0);
      JSONObject jSONObject0 = JSON.parseObject((String) null);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      jSONArray0.add((Object) propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3050);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      Class<JSONArray> class1 = JSONArray.class;
      FieldInfo fieldInfo0 = null;
      try {
        fieldInfo0 = new FieldInfo((String) null, class1, class1, class1, (Field) null, 989, 3089, 3050);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.FieldInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      jSONArray0.set(3089, mockHijrahDate0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      jSONArray1.getJSONObject(3089);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      boolean boolean0 = jSONArray1.addAll((Collection<?>) jSONArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<MockJapaneseDate> linkedList0 = new LinkedList<MockJapaneseDate>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray1.add(3164, (Object) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3164, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShort(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.getJSONObject(2766);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2766, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONArray jSONArray1 = jSONArray0.fluentSet(106, mockJapaneseDate0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(106, (Collection<?>) jSONArray0);
      jSONArray2.getRelatedArray();
      assertEquals(214, jSONArray1.size());
      assertEquals(214, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3062);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) jSONArray0);
      Object object0 = jSONArray2.getRelatedArray();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) jSONArray0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      jSONArray1.set(3089, mockHijrahDate0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      MockMinguoDate[] mockMinguoDateArray0 = new MockMinguoDate[0];
      // Undeclared exception!
      try { 
        jSONArray1.toArray(mockMinguoDateArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<MockThaiBuddhistDate> linkedList0 = new LinkedList<MockThaiBuddhistDate>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedList0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(linkedList0);
      assertSame(jSONArray0, jSONArray2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer((-1006));
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = Member.PUBLIC;
      JSONArray jSONArray0 = new JSONArray();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray0.setRelatedArray(mockJapaneseDate0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      Class<Method> class0 = Method.class;
      jSONArray0.toJavaList(class0);
      Object[] objectArray0 = jSONArray0.toArray();
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 46;
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      jSONArray0.clear();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      jSONArray0.clear();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) mockJapaneseDate0);
      // Undeclared exception!
      try { 
        jSONArray1.getIntValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@4c550688
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentAdd(0, (Object) jSONArray0);
      JSONArray jSONArray1 = new JSONArray(3089);
      Object object0 = new Object();
      JSONArray jSONArray2 = jSONArray0.fluentSet(1292, jSONArray1);
      jSONArray1.add((Object) jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : [{\"$ref\":\"@\"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[{\"$ref\":\"..\"}]]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(46);
      jSONArray0.clear();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      jSONArray0.clear();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      jSONArray1.getIntValue(0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(3089, class0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      jSONArray1.size();
      float float0 = jSONArray2.getFloatValue(0);
      assertEquals(3090, jSONArray0.size());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      jSONArray0.set(3089, mockHijrahDate0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      jSONArray1.getJSONObject(3089);
      jSONArray1.listIterator(3089);
      Class<Integer> class0 = Integer.class;
      jSONArray1.getObject(989, class0);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Type type0 = jSONArray0.getComponentType();
      assertNull(type0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      int int0 = jSONArray0.indexOf("i%7j\"<u[>RU3,J>IQ4i");
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals((-1), int0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, object0);
      assertNotNull(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      assertEquals(1, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      // Undeclared exception!
      try { 
        jSONArray1.getString(342);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 342, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3852);
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Object object0 = jSONArray0.set((-1), mockHijrahDate0);
      assertNull(object0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(1053);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1053, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONArray jSONArray0 = new JSONArray(46);
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      jSONArray0.clear();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      assertEquals(PropertyNamingStrategy.SnakeCase, propertyNamingStrategy0);
      
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      assertNotNull(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      int int0 = jSONArray1.getIntValue(0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, int0);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      JSONArray jSONArray2 = jSONArray0.fluentSet(3089, class0);
      assertNotNull(jSONArray2);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3090, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      int int1 = jSONArray1.size();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3090, int1);
      assertFalse(int1 == int0);
      assertEquals(3090, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      
      short short0 = jSONArray0.getShortValue(0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals((short)0, short0);
      assertEquals(3090, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      
      jSONArray2.setRelatedArray("]$@pQgu+O0g@");
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3090, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Object object0 = jSONArray0.set(3089, mockHijrahDate0);
      assertNull(object0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      double double0 = jSONArray0.getDoubleValue(34);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0.0, double0, 0.01);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertSame(jSONArray0, jSONArray1);
      
      JSONObject jSONObject0 = new JSONObject(3089);
      assertNotNull(jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      JSONArray jSONArray2 = jSONArray1.getJSONArray(989);
      assertNull(jSONArray2);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      boolean boolean0 = jSONArray1.removeAll(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(boolean0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertEquals(0, jSONArray1.size());
      assertTrue(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(2859);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2859, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      assertEquals(1, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Object object0 = jSONArray1.set(3089, mockHijrahDate0);
      assertNull(object0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      assertNotNull(jSONArray2);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3090, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      
      JSONObject jSONObject0 = jSONArray2.getJSONObject(3089);
      assertNotNull(jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3090, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      
      JSONArray jSONArray3 = jSONArray2.getJSONArray(989);
      assertNull(jSONArray3);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3090, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      
      boolean boolean0 = jSONArray2.addAll(989, (Collection<?>) jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(boolean0);
      assertEquals(6180, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(6180, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(6180, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Object object0 = jSONArray1.set(598, jSONArray0);
      assertNull(object0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(599, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(599, jSONArray1.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      assertNotNull(jSONArray2);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(599, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(599, jSONArray1.size());
      assertEquals(599, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      
      JSONArray jSONArray3 = jSONArray1.fluentRemove(11);
      assertNotNull(jSONArray3);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(598, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(598, jSONArray1.size());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(598, jSONArray3.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      
      // Undeclared exception!
      try { 
        jSONArray3.getDouble(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 598
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Object object0 = jSONArray1.set(447, mockHijrahDate0);
      assertNull(object0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(448, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(448, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      assertNotNull(jSONArray2);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(448, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(448, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(448, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray1);
      assertNotNull(jSONArray3);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(448, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(448, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(448, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(448, jSONArray3.size());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : [{\"$ref\":\"@\"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"mockedClassName\":\"java.time.chrono.HijrahDate\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(3045, object0);
      assertNotNull(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3046, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3046, jSONArray1.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      Object object1 = jSONArray1.getRelatedArray();
      assertNull(object1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3046, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3046, jSONArray1.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      Date date0 = jSONArray0.getSqlDate(989);
      assertNull(date0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3046, jSONArray0.size());
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      Object[] objectArray0 = jSONArray0.toArray();
      assertNotNull(objectArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Object object0 = jSONArray1.set(3089, mockHijrahDate0);
      assertNull(object0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      assertNotNull(jSONArray2);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3090, jSONArray2.size());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      
      double double0 = jSONArray0.getDoubleValue(14);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0.0, double0, 0.01);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray1);
      assertNotNull(jSONArray3);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3090, jSONArray2.size());
      assertEquals(3090, jSONArray3.size());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      
      JSONObject jSONObject0 = jSONArray2.getJSONObject(3089);
      assertNotNull(jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3090, jSONArray2.size());
      assertFalse(jSONObject0.isEmpty());
      assertEquals(1, jSONObject0.size());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray0);
      
      JSONArray jSONArray4 = jSONArray2.getJSONArray(989);
      assertNull(jSONArray4);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3090, jSONArray2.size());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray0);
      
      // Undeclared exception!
      try { 
        jSONArray1.getDate(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate@3262ef05
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
      
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues(class0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      JSONArray jSONArray0 = new JSONArray(list0);
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      assertNotNull(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray1.size());
      assertTrue(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      Class<Object> class1 = Object.class;
      List<Object> list1 = jSONArray1.toJavaList(class1);
      assertNotNull(list1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(list1.equals((Object)list0));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray1.size());
      assertTrue(jSONArray1.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list0, list1);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(list1, list0);
      
      jSONArray1.hashCode();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray1.size());
      assertTrue(jSONArray1.isEmpty());
      assertNotSame(list0, list1);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2847);
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONArray0.subList((-3162), (-3162));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -3162
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      assertEquals(1, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Object object0 = jSONArray1.set(3089, mockHijrahDate0);
      assertNull(object0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      assertNotNull(jSONArray2);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3090, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      
      boolean boolean0 = jSONArray2.getBooleanValue(989);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(boolean0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3090, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate@593e8697
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Object object0 = jSONArray0.set(3089, mockHijrahDate0);
      assertNull(object0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      JSONObject jSONObject0 = jSONArray1.getJSONObject(989);
      assertNull(jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      Long long0 = jSONArray0.getLong(989);
      assertNull(long0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertSame(jSONArray0, jSONArray1);
      
      Object object1 = jSONArray1.remove(989);
      assertNull(object1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3089, jSONArray0.size());
      assertEquals(3089, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      Object object0 = jSONArray0.set(1, mockThaiBuddhistDate0);
      assertNull(object0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(2, jSONArray0.size());
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Object object0 = jSONArray0.set(3089, mockHijrahDate0);
      assertNull(object0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      double double0 = jSONArray0.getDoubleValue(14);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0.0, double0, 0.01);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertSame(jSONArray0, jSONArray1);
      
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      assertNotNull(jSONArray2);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3090, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate@6ace1f0c
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : [{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      assertEquals(1, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Object object0 = jSONArray1.set(3089, mockHijrahDate0);
      assertNull(object0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      JSONArray jSONArray2 = new JSONArray(3089);
      assertNotNull(jSONArray2);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertEquals(0, jSONArray2.size());
      assertTrue(jSONArray2.isEmpty());
      
      JSONArray jSONArray3 = jSONArray1.fluentRemove((Object) jSONArray2);
      assertNotNull(jSONArray3);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray2));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(0, jSONArray2.size());
      assertTrue(jSONArray2.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(3090, jSONArray3.size());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray3);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertNotSame(jSONArray3, jSONArray2);
      
      Type type0 = jSONArray3.getComponentType();
      assertNull(type0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray2));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(0, jSONArray2.size());
      assertTrue(jSONArray2.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(3090, jSONArray3.size());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray3);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertNotSame(jSONArray3, jSONArray2);
      
      int int0 = NumberFormat.FRACTION_FIELD;
      assertEquals(1, int0);
      
      ChronoLocalDate chronoLocalDate0 = jSONArray3.getObject(989, (Type) null);
      assertNull(chronoLocalDate0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray2));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(0, jSONArray2.size());
      assertTrue(jSONArray2.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(3090, jSONArray3.size());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray3);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertNotSame(jSONArray3, jSONArray2);
      
      jSONArray2.setComponentType((Type) null);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertEquals(0, jSONArray2.size());
      assertTrue(jSONArray2.isEmpty());
      assertNotSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray3);
      
      Boolean boolean0 = jSONArray0.getBoolean(1);
      assertNull(boolean0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Object object0 = jSONArray1.set(3089, mockHijrahDate0);
      assertNull(object0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3090, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3090, jSONArray1.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      JSONArray jSONArray2 = jSONArray1.fluentAdd(3089, (Object) jSONArray1);
      assertNotNull(jSONArray2);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3091, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3091, jSONArray1.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3091, jSONArray2.size());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      
      JSONArray jSONArray3 = jSONArray1.fluentClear();
      assertNotNull(jSONArray3);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.size());
      assertEquals(0, jSONArray3.size());
      assertTrue(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = jSONArray1.lastIndexOf(integer0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals((-1), int0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.size());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      
      JSONArray jSONArray4 = jSONArray0.fluentRemove((Object) jSONArray1);
      assertNotNull(jSONArray4);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.size());
      assertTrue(jSONArray4.isEmpty());
      assertEquals(0, jSONArray4.size());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray3);
      
      Type type0 = jSONArray2.getComponentType();
      assertNull(type0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.size());
      assertTrue(jSONArray2.isEmpty());
      assertEquals(0, jSONArray2.size());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray4);
      
      int int1 = Calendar.LONG;
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        jSONArray3.getObject(989, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      assertEquals(1, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Object object0 = jSONArray1.set(3089, mockHijrahDate0);
      assertNull(object0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3090, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3090, jSONArray1.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      JSONArray jSONArray2 = new JSONArray(3089);
      assertNotNull(jSONArray2);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertTrue(jSONArray2.isEmpty());
      assertEquals(0, jSONArray2.size());
      
      JSONArray jSONArray3 = jSONArray1.fluentRemove((Object) jSONArray2);
      assertNotNull(jSONArray3);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray2));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertEquals(3090, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3090, jSONArray1.size());
      assertTrue(jSONArray2.isEmpty());
      assertEquals(0, jSONArray2.size());
      assertEquals(3090, jSONArray3.size());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertNotSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray3);
      assertNotSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      
      Type type0 = jSONArray3.getComponentType();
      assertNull(type0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray2));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertEquals(3090, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3090, jSONArray1.size());
      assertTrue(jSONArray2.isEmpty());
      assertEquals(0, jSONArray2.size());
      assertEquals(3090, jSONArray3.size());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertNotSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray3);
      assertNotSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      
      int int0 = NumberFormat.FRACTION_FIELD;
      assertEquals(1, int0);
      
      ChronoLocalDate chronoLocalDate0 = jSONArray3.getObject(989, (Type) null);
      assertNull(chronoLocalDate0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray2));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertEquals(3090, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3090, jSONArray1.size());
      assertTrue(jSONArray2.isEmpty());
      assertEquals(0, jSONArray2.size());
      assertEquals(3090, jSONArray3.size());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertNotSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray3);
      assertNotSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      
      byte byte0 = jSONArray3.getByteValue(989);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals((byte)0, byte0);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray2));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertEquals(3090, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3090, jSONArray1.size());
      assertTrue(jSONArray2.isEmpty());
      assertEquals(0, jSONArray2.size());
      assertEquals(3090, jSONArray3.size());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertNotSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray3);
      assertNotSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      
      Object[] objectArray0 = jSONArray1.toArray();
      assertNotNull(objectArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray2));
      assertEquals(3090, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3090, jSONArray1.size());
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      
      Long long0 = jSONArray0.getLong(3054);
      assertNull(long0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertEquals(3090, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      Object object0 = jSONArray0.set(989, jSONArray1);
      assertNull(object0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(990, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(990, jSONArray1.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      JSONObject jSONObject0 = new JSONObject(false);
      assertNotNull(jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      
      JSONObject jSONObject1 = new JSONObject(3089);
      assertNotNull(jSONObject1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject1.size());
      assertTrue(jSONObject1.isEmpty());
      
      JSONObject jSONObject2 = jSONObject1.getJSONObject("yyyy-MM-dd HH:mm:ss");
      assertNull(jSONObject2);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject1.size());
      assertTrue(jSONObject1.isEmpty());
      assertNotSame(jSONObject1, jSONObject0);
      
      // Undeclared exception!
      try { 
        jSONArray1.getBoolean(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : [{\"$ref\":\"@\"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Object object0 = jSONArray1.set(3089, mockHijrahDate0);
      assertNull(object0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3090, jSONArray1.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      assertNotNull(jSONArray2);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3090, jSONArray2.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      
      // Undeclared exception!
      jSONArray0.getDoubleValue(0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      JSONArray jSONArray1 = new JSONArray(3089);
      assertNotNull(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray1.equals((Object)jSONArray0));
      assertEquals(0, jSONArray1.size());
      assertTrue(jSONArray1.isEmpty());
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Object object0 = jSONArray1.set(3089, mockHijrahDate0);
      assertNull(object0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray1.equals((Object)jSONArray0));
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertNotSame(jSONArray1, jSONArray0);
      
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      assertNotNull(jSONArray2);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.equals((Object)jSONArray1));
      assertTrue(jSONArray1.equals((Object)jSONArray0));
      assertTrue(jSONArray2.equals((Object)jSONArray0));
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertEquals(0, jSONArray1.size());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray2.size());
      assertTrue(jSONArray2.isEmpty());
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 14, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      // Undeclared exception!
      try { 
        jSONArray0.getInteger((-3064));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      boolean boolean0 = jSONArray0.isEmpty();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(boolean0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Object object0 = jSONArray1.set(3089, mockHijrahDate0);
      assertNull(object0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      assertNotNull(jSONArray2);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3090, jSONArray2.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      
      JSONObject jSONObject0 = jSONArray2.getJSONObject(3089);
      assertNotNull(jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3090, jSONArray2.size());
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      
      JSONArray jSONArray3 = jSONArray2.getJSONArray(989);
      assertNull(jSONArray3);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3090, jSONArray2.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate@66a8d4e4
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      assertEquals(PropertyNamingStrategy.KebabCase, propertyNamingStrategy0);
      
      Object object0 = jSONArray0.set(1819, propertyNamingStrategy0);
      assertNull(object0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1820, jSONArray0.size());
      
      // Undeclared exception!
      try { 
        jSONArray0.getByte(1819);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : KebabCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      assertEquals(1, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Object object0 = jSONArray1.set(3089, mockHijrahDate0);
      assertNull(object0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      assertNotNull(jSONArray2);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3090, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      
      Integer integer0 = new Integer(3089);
      assertNotNull(integer0);
      assertEquals(3089, (int)integer0);
      
      LinkedList<MockThaiBuddhistDate> linkedList0 = new LinkedList<MockThaiBuddhistDate>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSONArray jSONArray3 = jSONArray0.fluentRetainAll(jSONArray1);
      assertNotNull(jSONArray3);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(3090, jSONArray3.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      
      long long0 = jSONArray3.getLongValue(989);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0L, long0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(3090, jSONArray3.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Object object0 = jSONArray1.set(3089, mockHijrahDate0);
      assertNull(object0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3090, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      Class<MockHijrahDate> class1 = MockHijrahDate.class;
      FieldInfo fieldInfo0 = new FieldInfo("yyyy-MM-dd HH:mm:ss", class1, class0, class0, (Field) null, (-535), 0, 3089);
      assertNotNull(fieldInfo0);
      assertEquals(0, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertEquals(3089, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldAccess);
      assertNull(fieldInfo0.getFormat());
      assertEquals("yyyy-MM-dd HH:mm:ss", fieldInfo0.toString());
      
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      assertNotNull(beanContext0);
      assertEquals(0, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertEquals(3089, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldAccess);
      assertNull(fieldInfo0.getFormat());
      assertEquals("yyyy-MM-dd HH:mm:ss", fieldInfo0.toString());
      assertEquals(0, beanContext0.getFeatures());
      assertEquals("yyyy-MM-dd HH:mm:ss", beanContext0.getName());
      assertEquals("", beanContext0.getLabel());
      assertFalse(beanContext0.isJsonDirect());
      assertNull(beanContext0.getFormat());
      
      Field field0 = beanContext0.getField();
      assertNull(field0);
      assertEquals(0, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertEquals(3089, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldAccess);
      assertNull(fieldInfo0.getFormat());
      assertEquals("yyyy-MM-dd HH:mm:ss", fieldInfo0.toString());
      assertEquals(0, beanContext0.getFeatures());
      assertEquals("yyyy-MM-dd HH:mm:ss", beanContext0.getName());
      assertEquals("", beanContext0.getLabel());
      assertFalse(beanContext0.isJsonDirect());
      assertNull(beanContext0.getFormat());
      assertSame(class0, class1);
      assertSame(class1, class0);
      
      JSONArray jSONArray2 = jSONArray0.fluentRemove((Object) null);
      assertNotNull(jSONArray2);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3089, jSONArray2.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      
      Type type0 = jSONArray0.getComponentType();
      assertNull(type0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      
      Integer integer0 = new Integer(989);
      assertNotNull(integer0);
      assertEquals(989, (int)integer0);
      
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, fieldInfo0.fieldType);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(II)V");
      assertFalse(boolean0);
      
      Object object0 = jSONArray0.set(3089, mockHijrahDate0);
      assertNull(object0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      String string0 = jSONArray1.getString(372);
      assertNull(string0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      JSONObject jSONObject0 = jSONArray1.getJSONObject(3089);
      assertNotNull(jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      boolean boolean1 = jSONArray0.isEmpty();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertSame(jSONArray0, jSONArray1);
      
      JSONArray jSONArray2 = jSONArray0.fluentRemove((Object) null);
      assertNotNull(jSONArray2);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3089, jSONArray0.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3089, jSONArray2.size());
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Object object0 = jSONArray1.set(3089, mockHijrahDate0);
      assertNull(object0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      assertNotNull(jSONArray2);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3090, jSONArray2.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      
      int int0 = jSONArray2.getIntValue(3056);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, int0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3090, jSONArray2.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      
      double double0 = jSONArray0.getDoubleValue(14);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0.0, double0, 0.01);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      
      JSONObject jSONObject0 = jSONArray2.getJSONObject(3089);
      assertNotNull(jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3090, jSONArray2.size());
      assertEquals(1, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate@2bc87376
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      assertEquals(1, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Object object0 = jSONArray1.set(3089, mockHijrahDate0);
      assertNull(object0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      assertNotNull(jSONArray2);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertEquals(3090, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3090, jSONArray2.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      assertEquals(PropertyNamingStrategy.KebabCase, propertyNamingStrategy0);
      
      boolean boolean0 = jSONArray2.add((Object) mockHijrahDate0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(boolean0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3091, jSONArray0.size());
      assertEquals(3091, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3091, jSONArray2.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      
      JSONArray jSONArray3 = jSONArray2.getJSONArray(0);
      assertNotNull(jSONArray3);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3091, jSONArray0.size());
      assertEquals(3091, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3091, jSONArray2.size());
      assertEquals(3091, jSONArray3.size());
      assertFalse(jSONArray3.isEmpty());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Object object0 = jSONArray0.set(3089, mockHijrahDate0);
      assertNull(object0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3090, jSONArray1.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      boolean boolean0 = jSONArray1.containsAll(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(boolean0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3090, jSONArray1.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      
      Iterator<Object> iterator0 = jSONArray1.iterator();
      assertNotNull(iterator0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3090, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3090, jSONArray1.size());
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Object object0 = jSONArray0.set(3089, mockHijrahDate0);
      assertNull(object0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3090, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      assertNotNull(pascalNameFilter0);
      
      LinkedHashSet<MockThaiBuddhistDate> linkedHashSet0 = new LinkedHashSet<MockThaiBuddhistDate>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      boolean boolean0 = linkedHashSet0.add(mockThaiBuddhistDate0);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      boolean boolean1 = jSONArray0.containsAll(linkedHashSet0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3090, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertNotNull(iterator0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3090, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = jSONArray0.defaultLocale.getDisplayVariant(jSONArray0.defaultLocale);
      assertNotNull(string0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals("", string0);
      assertEquals(3090, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      
      Long long0 = jSONArray0.getLong(544);
      assertNull(long0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3090, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      
      JSONObject jSONObject0 = jSONArray0.getJSONObject(81);
      assertNull(jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3090, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
  }
}
