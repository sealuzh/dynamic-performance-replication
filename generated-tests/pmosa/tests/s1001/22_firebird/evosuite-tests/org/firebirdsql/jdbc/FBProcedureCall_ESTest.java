/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 17:00:14 GMT 2018
 */

package org.firebirdsql.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.firebirdsql.jdbc.FBProcedureCall;
import org.firebirdsql.jdbc.FBProcedureParam;
import org.firebirdsql.jdbc.FBSQLException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FBProcedureCall_ESTest extends FBProcedureCall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      try { 
        fBProcedureCall0.mapOutParamIndexToPosition((-93), false);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // Specified parameter does not exist.
         //
         verifyException("org.firebirdsql.jdbc.FBProcedureCall", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      int int0 = 667;
      fBProcedureCall0.mapOutParamIndexToPosition(667);
      fBProcedureCall0.getInputParam(667);
      try { 
        fBProcedureCall0.registerOutParam(667, 667);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // Cannot find parameter with the specified position.
         //
         verifyException("org.firebirdsql.jdbc.FBProcedureCall", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(1, " otset an ");
      fBProcedureCall0.registerOutParam((-1), 34);
      boolean boolean0 = fBProcedureCall0.equals(fBProcedureParam0);
      assertEquals(34, fBProcedureParam0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.getOutputParam((-1));
      fBProcedureCall0.addInputParam(fBProcedureParam0);
      FBProcedureParam fBProcedureParam1 = fBProcedureCall0.addParam(3, "}8YlRzfDtj");
      fBProcedureCall0.getOutputParam(1);
      FBProcedureParam fBProcedureParam2 = fBProcedureCall0.getOutputParam(0);
      fBProcedureParam1.clone();
      fBProcedureParam1.setType(1742);
      fBProcedureCall0.addInputParam(fBProcedureParam1);
      fBProcedureCall0.addParam(0, "c:;),'tSTxj");
      fBProcedureCall0.addOutputParam(fBProcedureParam2);
      fBProcedureCall0.mapOutParamIndexToPosition(0);
      fBProcedureCall0.mapOutParamIndexToPosition(0);
      // Undeclared exception!
      try { 
        fBProcedureCall0.registerOutParam(0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = new FBProcedureParam();
      fBProcedureCall0.addOutputParam(fBProcedureParam0);
      int int0 = fBProcedureCall0.mapOutParamIndexToPosition(2, true);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = new FBProcedureParam(0, "IN");
      fBProcedureCall0.addInputParam(fBProcedureParam0);
      assertFalse(fBProcedureParam0.isValueSet());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = new FBProcedureParam(1367, "it was not registered as output parameter.");
      fBProcedureCall0.addOutputParam(fBProcedureParam0);
      Object object0 = new Object();
      fBProcedureCall0.equals(object0);
      int int0 = (-1850);
      fBProcedureCall0.getOutputParam((-1850));
      int int1 = 3462;
      fBProcedureCall0.getInputParam(3462);
      int int2 = 349;
      int int3 = (-2787);
      try { 
        fBProcedureCall0.registerOutParam(2347, (-2787));
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // Cannot find parameter with the specified position.
         //
         verifyException("org.firebirdsql.jdbc.FBProcedureCall", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      int int0 = (-1);
      boolean boolean0 = false;
      fBProcedureCall0.getSQL(false);
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.getOutputParam((-1));
      Object object0 = new Object();
      fBProcedureParam0.setType((-562));
      try { 
        fBProcedureParam0.setValue(object0);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot set value of an non-existing parameter.
         //
         verifyException("org.firebirdsql.jdbc.FBProcedureCall$NullParam", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = new FBProcedureParam(1097, "Oj3+");
      fBProcedureCall0.addOutputParam(fBProcedureParam0);
      fBProcedureCall0.getSQL(false);
      try { 
        fBProcedureCall0.mapOutParamIndexToPosition(1097, false);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // Specified parameter does not exist.
         //
         verifyException("org.firebirdsql.jdbc.FBProcedureCall", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      fBProcedureCall0.getOutputParam((-2288));
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(0, ":x?]:1w%H@h0x+");
      assertEquals(0, fBProcedureParam0.getPosition());
      
      String string0 = fBProcedureCall0.getSQL(true);
      assertEquals("SELECT * FROM null(:x?]:1w%H@h0x+)", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureCall fBProcedureCall1 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall1.addParam(3, "gjo2nA*[PW6SC5b&DW}");
      fBProcedureCall0.addInputParam(fBProcedureParam0);
      fBProcedureParam0.clone();
      fBProcedureCall0.getSQL(false);
      fBProcedureParam0.setIndex(0);
      fBProcedureCall0.setName("IN");
      fBProcedureCall0.setName("IN");
      fBProcedureCall1.getSQL(true);
      fBProcedureCall0.mapOutParamIndexToPosition(0);
      fBProcedureCall0.addInputParam(fBProcedureParam0);
      fBProcedureCall0.getInputParam(3);
      fBProcedureCall1.getInputParam(3071);
      fBProcedureCall1.getName();
      fBProcedureCall1.getSQL(false);
      fBProcedureCall0.getSQL(false);
      assertFalse(fBProcedureCall0.equals((Object)fBProcedureCall1));
      
      FBProcedureCall fBProcedureCall2 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam1 = fBProcedureCall2.getOutputParam(0);
      boolean boolean0 = fBProcedureCall1.equals(fBProcedureParam1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.getOutputParam((-171));
      fBProcedureCall0.addOutputParam(fBProcedureParam0);
      Object object0 = fBProcedureCall0.clone();
      assertTrue(object0.equals((Object)fBProcedureCall0));
      assertNotSame(object0, fBProcedureCall0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(2272, "");
      fBProcedureCall0.addOutputParam(fBProcedureParam0);
      fBProcedureParam0.setType(2272);
      fBProcedureParam0.setType(0);
      List<FBProcedureParam> list0 = fBProcedureCall0.getInputParams();
      assertEquals(2273, list0.size());
      
      fBProcedureParam0.setType(2272);
      Object object0 = fBProcedureCall0.clone();
      assertTrue(object0.equals((Object)fBProcedureCall0));
      
      String string0 = fBProcedureCall0.getSQL(true);
      assertEquals("SELECT * FROM null", string0);
      
      fBProcedureCall0.addOutputParam(fBProcedureParam0);
      fBProcedureCall0.setName("Cannot set parameter, since it is constant.");
      assertNotSame(fBProcedureCall0, object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(0, "0k}$7my'9jCj<Ou");
      assertEquals(0, fBProcedureParam0.getPosition());
      
      Object object0 = fBProcedureCall0.clone();
      int int0 = fBProcedureCall0.mapOutParamIndexToPosition(0);
      assertNotSame(fBProcedureCall0, object0);
      assertTrue(fBProcedureCall0.equals((Object)object0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      fBProcedureCall0.getSQL(true);
      fBProcedureCall0.getInputParams();
      fBProcedureCall0.mapOutParamIndexToPosition(3132, true);
      fBProcedureCall0.getSQL(true);
      List<FBProcedureParam> list0 = fBProcedureCall0.getOutputParams();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      Object object0 = fBProcedureCall0.clone();
      String string0 = fBProcedureCall0.getSQL(true);
      assertEquals("SELECT * FROM null", string0);
      
      boolean boolean0 = object0.equals(fBProcedureCall0);
      assertNotSame(object0, fBProcedureCall0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      fBProcedureCall0.getInputParam(4408);
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(4408, "org.firebirdsql.jdbc.FBSQLException");
      assertEquals(4408, fBProcedureParam0.getPosition());
      
      FBProcedureCall fBProcedureCall1 = new FBProcedureCall();
      fBProcedureCall1.setName("cvR~b]{V:S+f*H%");
      boolean boolean0 = fBProcedureCall0.equals(fBProcedureCall1);
      assertFalse(fBProcedureCall1.equals((Object)fBProcedureCall0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(1643, "?Q659");
      fBProcedureCall0.addOutputParam(fBProcedureParam0);
      FBProcedureParam fBProcedureParam1 = new FBProcedureParam();
      fBProcedureParam1.setType((-1175));
      fBProcedureParam0.setType(0);
      fBProcedureCall0.getInputParams();
      fBProcedureParam1.setType(1643);
      Object object0 = fBProcedureCall0.clone();
      fBProcedureCall0.getSQL(true);
      assertTrue(fBProcedureCall0.equals((Object)object0));
      
      fBProcedureCall0.addOutputParam(fBProcedureParam1);
      fBProcedureCall0.setName("c5u5DTF@%|-^");
      assertNotSame(fBProcedureCall0, object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.getOutputParam((-2288));
      fBProcedureCall0.addOutputParam(fBProcedureParam0);
      FBProcedureParam fBProcedureParam1 = fBProcedureCall0.addParam(0, ":x?]:1w%H@h0x+");
      assertEquals(0, fBProcedureParam1.getPosition());
      
      String string0 = fBProcedureCall0.getSQL(true);
      assertEquals("SELECT * FROM null(:x?]:1w%H@h0x+)", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(1643, "?Q659");
      fBProcedureCall0.addOutputParam(fBProcedureParam0);
      FBProcedureParam fBProcedureParam1 = new FBProcedureParam();
      fBProcedureParam0.setIndex(1643);
      fBProcedureCall0.setName(")V");
      FBProcedureCall fBProcedureCall1 = new FBProcedureCall();
      fBProcedureCall1.setName("oj3");
      fBProcedureCall1.getSQL(true);
      int int0 = fBProcedureCall0.mapOutParamIndexToPosition(1308);
      assertEquals(1308, int0);
      
      fBProcedureCall1.addInputParam(fBProcedureParam0);
      fBProcedureCall0.getInputParam(1643);
      fBProcedureCall1.getInputParam(1734);
      FBProcedureCall fBProcedureCall2 = new FBProcedureCall();
      fBProcedureCall2.getName();
      String string0 = fBProcedureCall0.getSQL(false);
      assertEquals("EXECUTE PROCEDURE )V(?Q659)", string0);
      
      fBProcedureCall2.getSQL(false);
      FBProcedureCall fBProcedureCall3 = new FBProcedureCall();
      fBProcedureCall0.getOutputParam(2041);
      boolean boolean0 = fBProcedureCall3.equals("EXECUTE PROCEDURE null");
      assertFalse(boolean0);
      
      FBProcedureParam fBProcedureParam2 = fBProcedureCall1.getInputParam(1308);
      assertEquals((-562), fBProcedureParam2.getType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      fBProcedureCall0.addParam(1, "-r+G^?<=Eh3%797p5");
      fBProcedureCall0.registerOutParam((-1), 3473);
      int int0 = fBProcedureCall0.mapOutParamIndexToPosition((-1));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(1643, "?Q659");
      fBProcedureParam0.setValue(fBProcedureCall0);
      FBProcedureParam fBProcedureParam1 = new FBProcedureParam();
      fBProcedureParam0.setIndex(1643);
      fBProcedureCall0.setName(")V");
      FBProcedureCall fBProcedureCall1 = new FBProcedureCall();
      fBProcedureCall1.setName("oj3");
      fBProcedureParam0.clone();
      fBProcedureCall1.getSQL(true);
      fBProcedureCall0.mapOutParamIndexToPosition(1308);
      fBProcedureCall1.addInputParam(fBProcedureParam0);
      fBProcedureCall1.getInputParam(1734);
      FBProcedureCall fBProcedureCall2 = new FBProcedureCall();
      fBProcedureCall2.getName();
      fBProcedureCall0.getSQL(false);
      fBProcedureCall2.getSQL(false);
      FBProcedureCall fBProcedureCall3 = new FBProcedureCall();
      fBProcedureCall0.getOutputParam(2041);
      boolean boolean0 = FBProcedureCall.OLD_CALLABLE_STATEMENT_COMPATIBILITY;
      fBProcedureCall1.getInputParam(1308);
      fBProcedureCall1.getOutputParam(1308);
      fBProcedureCall2.hashCode();
      fBProcedureCall3.setName("EXECUTE PROCEDURE null");
      assertTrue(fBProcedureCall3.equals((Object)fBProcedureCall2));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(1643, "?Q659");
      fBProcedureCall0.addOutputParam(fBProcedureParam0);
      FBProcedureParam fBProcedureParam1 = new FBProcedureParam();
      fBProcedureParam1.setType((-1175));
      fBProcedureCall0.getInputParams();
      fBProcedureCall0.registerOutParam((-1), (-135));
      assertNull(fBProcedureCall0.getName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(1643, "?Q659");
      Object object0 = new Object();
      fBProcedureParam0.setValue(object0);
      fBProcedureCall0.addOutputParam(fBProcedureParam0);
      FBProcedureParam fBProcedureParam1 = new FBProcedureParam();
      fBProcedureParam1.setType((-1175));
      fBProcedureCall0.getInputParams();
      fBProcedureCall0.registerOutParam((-1), (-135));
      assertTrue(FBProcedureCall.OLD_CALLABLE_STATEMENT_COMPATIBILITY);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      fBProcedureCall0.addParam(1643, "?Q659");
      fBProcedureCall0.getSQL(false);
      FBProcedureParam fBProcedureParam0 = fBProcedureCall0.addParam(1, "k");
      fBProcedureCall0.addInputParam(fBProcedureParam0);
      assertEquals("k", fBProcedureParam0.getParamValue());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      fBProcedureCall0.addParam(245, "iNv5p,V5*H9n#0In");
      fBProcedureCall0.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FBProcedureCall fBProcedureCall0 = new FBProcedureCall();
      int int0 = (-7);
      fBProcedureCall0.setName(" oUtset n ");
      // Undeclared exception!
      try { 
        fBProcedureCall0.addParam((-7), " oUtset n ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -7
         //
         verifyException("java.util.Vector", e);
      }
  }
}
