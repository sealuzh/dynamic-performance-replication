/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:02:29 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.MinimumParameters;
import org.freehep.math.minuit.MinimumState;
import org.freehep.math.minuit.MnCross;
import org.freehep.math.minuit.MnFunctionCross;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.freehep.math.minuit.MnUserTransformation;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnFunctionCross_ESTest extends MnFunctionCross_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MinimumParameters minimumParameters0 = new MinimumParameters(6);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 6, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      double[] doubleArray1 = mnUserTransformation0.errors();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, 0, mnUserTransformation0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setHessianStepTolerance(6);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0, mnStrategy0, 6.0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, 0, (-1074));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MinimumParameters minimumParameters0 = new MinimumParameters(21);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 21, 0);
      double[] doubleArray0 = new double[2];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters0.setLimits(0, 1080.43076, 100.0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      double[] doubleArray1 = mnUserTransformation0.errors();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, 21, mnUserTransformation0);
      MnStrategy mnStrategy0 = new MnStrategy();
      int[] intArray0 = new int[1];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(4.0, 1.0, 1080.43076, 1080.43076, 1080.43076).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 10.0, mnStrategy0, 2.0);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 127.49159, 2125791893);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MinimumParameters minimumParameters0 = new MinimumParameters(6);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 6, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters0.setLimits(0, 1080.43076, 100.0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      double[] doubleArray1 = mnUserTransformation0.errors();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, 1116.6863486109, mnUserTransformation0);
      MnStrategy mnStrategy0 = new MnStrategy();
      int[] intArray0 = new int[1];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2673.093158343299), 10.0, (double)0, 1116.6863486109, 2.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 5.9, mnStrategy0, (-499.039));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 0.1, 0);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 1080.43076, 6);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1.0E-6, 1.0E-6, 1.0E-6, 1.0E-6, 1.0E-6).when(fCNBase0).valueOf(any(double[].class));
      MinimumParameters minimumParameters0 = new MinimumParameters(6);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 6, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters0.setLimits(0, 1080.43076, 100.26892605156905);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      double[] doubleArray1 = mnUserTransformation0.errors();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, 0.05, mnUserTransformation0);
      mnUserParameters0.clone();
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 6, mnStrategy0, 1574.8853110822722);
      int[] intArray0 = new int[1];
      double[] doubleArray2 = new double[13];
      mnUserParameters0.errors();
      doubleArray2[0] = 1080.43076;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray2, 0, 876);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MinimumParameters minimumParameters0 = new MinimumParameters(18);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 18, 0);
      double[] doubleArray0 = new double[1];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      double[] doubleArray1 = mnUserTransformation0.errors();
      mnUserTransformation0.setUpperLimit(0, 18);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, 18, mnUserTransformation0);
      MnStrategy mnStrategy0 = new MnStrategy();
      int[] intArray0 = new int[1];
      mnUserParameterState0.add("", (double) 18);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, 1392.29, (double)0, (double)18, (double)18).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-632.06152041);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-632.06152041), mnStrategy0, 4.0E-7);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, (-1895.83116085), 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-0.10000723897624877), (-0.10000723897624877), (-0.10000723897624877), (-0.10000723897624877), (-0.10000723897624877)).when(fCNBase0).valueOf(any(double[].class));
      MinimumParameters minimumParameters0 = new MinimumParameters(28);
      MinimumState minimumState0 = new MinimumState(28);
      double[] doubleArray0 = new double[1];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters0.setLimits(0, (double) 28, 78.2451541926315);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      mnUserTransformation0.errors();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setMediumStrategy();
      int[] intArray0 = new int[1];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1.0);
      doubleArray1[2] = (double) 28;
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1.0), mnStrategy0, 0.51);
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 0.51, 0);
      mnStrategy0.setGradientTolerance((-0.10000723897624877));
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1.0E-6, 1.0E-6, 1.0E-6, 1.0E-6, 1.0E-6).when(fCNBase0).valueOf(any(double[].class));
      MinimumParameters minimumParameters0 = new MinimumParameters(6);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 6, 0);
      double[] doubleArray0 = new double[1];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters0.setLimits(0, 1080.463440818358, 78.2451541926315);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      mnUserTransformation0.errors();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, (-1.0), mnUserTransformation0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      int[] intArray0 = new int[1];
      MnStrategy mnStrategy1 = new MnStrategy();
      double[] doubleArray1 = new double[11];
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.51, mnStrategy0, 0.0);
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, (-0.5), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MinimumParameters minimumParameters0 = new MinimumParameters(36);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 36, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 36;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters0.setLimits(0, 1080.43076, 100.0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      double[] doubleArray1 = mnUserTransformation0.errors();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, 36, mnUserTransformation0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.add("]j", 100.0);
      mnStrategy0.setMediumStrategy();
      int[] intArray0 = new int[1];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(4.0, 1.0, 1080.43076, 1080.43076, 1080.43076).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 10.0, mnStrategy0, 1080.43076);
      mnUserParameters0.toString();
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, (-2196), 200);
      int[] intArray1 = new int[4];
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray1, doubleArray1, doubleArray0, 1080.43076, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10.0, 10.0, 10.0, 10.0, 702.988145).when(fCNBase0).valueOf(any(double[].class));
      MnStrategy mnStrategy0 = new MnStrategy();
      double[] doubleArray0 = new double[1];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1), mnStrategy0, (-1));
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1.0, 2187);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 10.0, (-1));
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = 10.0;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2372.4179), (-2372.4179), (-1.0), (-2673.093158343299), 10.0).when(fCNBase0).valueOf(any(double[].class));
      MinimumParameters minimumParameters0 = new MinimumParameters(6);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 6, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 6;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters0.setLimits(0, 1080.43076, 100.0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      mnUserTransformation0.errors();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, 6, mnUserTransformation0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 6, mnStrategy0, (-1.0));
      int[] intArray0 = new int[1];
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2.0, 413);
      mnUserTransformation0.errors();
      int int0 = (-4747);
      // Undeclared exception!
      try { 
        mnUserParameterState0.setError((String) null, (-1331.86));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MinimumParameters minimumParameters0 = new MinimumParameters(18);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 18, 0);
      double[] doubleArray0 = new double[1];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      double[] doubleArray1 = mnUserTransformation0.errors();
      mnUserTransformation0.setUpperLimit(0, 18);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, 18, mnUserTransformation0);
      MnStrategy mnStrategy0 = new MnStrategy();
      int[] intArray0 = new int[1];
      mnUserParameterState0.add("", (double) 18);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (-339.970359923098), (-1276.673272603576), 2.0, (double)18).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 4.0E-7, mnStrategy0, 0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-632.06152041);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray2, doubleArray2, (-632.06152041), 3);
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-632.06152041), mnStrategy0, 0.0);
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) 18;
      doubleArray3[1] = 2425.5692338988;
      doubleArray3[2] = (-632.06152041);
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = (-1528.909926);
      doubleArray3[6] = (double) 3;
      doubleArray3[7] = (-339.970359923098);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray3, 0.0, 18);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1.0E-6, 1.0E-6, 1.0E-6, 1.0E-6, 1.0E-6).when(fCNBase0).valueOf(any(double[].class));
      MinimumParameters minimumParameters0 = new MinimumParameters(28);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 0, 0);
      double[] doubleArray0 = new double[1];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters0.setLimits(0, 1079.09, 78.2451541926315);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      mnUserTransformation0.errors();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, 78.2451541926315, mnUserTransformation0);
      MnStrategy mnStrategy0 = new MnStrategy();
      int[] intArray0 = new int[1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.0E-6;
      doubleArray1[1] = 78.2451541926315;
      doubleArray1[2] = (double) 0;
      doubleArray1[4] = 78.2451541926315;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 28;
      doubleArray2[1] = (double) 28;
      doubleArray2[2] = 1.0E-6;
      doubleArray2[3] = (double) 0;
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-122.85501854), mnStrategy0, 0);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray2, 28.0, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1.0E-6, 1.0E-6, 1.0E-6, 1.0E-6, 1.0E-6).when(fCNBase0).valueOf(any(double[].class));
      MinimumParameters minimumParameters0 = new MinimumParameters(6);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 6, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 6;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters0.setLimits(0, 1080.43076, 100.0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      double[] doubleArray1 = mnUserTransformation0.errors();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, 0.05, mnUserTransformation0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 6, mnStrategy0, 1592.0);
      int[] intArray0 = new int[1];
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1080.43076;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray2, 1.0E-6, 0);
      mnFunctionCross0.cross(intArray0, doubleArray2, doubleArray0, 100.0, 0);
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, (-2150.781604281277), (-2122799927));
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray2, 200.968, 2707);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MinimumParameters minimumParameters0 = new MinimumParameters(6);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 6, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters0.setLimits(0, (double) 0, 90.41285398433563);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      double[] doubleArray1 = mnUserTransformation0.errors();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, 2354.61, mnUserTransformation0);
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(minimumState0, 6, mnUserTransformation0);
      MnStrategy mnStrategy0 = new MnStrategy();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      mnUserParameterState1.add("", 5.0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 0.0, mnStrategy0, 0.51);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, (-220.95368622), 6);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, (-829.399048347), 0);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1.0E-6, 1.0E-6, 1.0E-6, 1.0E-6, 1.0E-6).when(fCNBase0).valueOf(any(double[].class));
      MinimumParameters minimumParameters0 = new MinimumParameters(6);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 6, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 6;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters0.setLimits(0, 1080.43076, 100.0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      double[] doubleArray1 = mnUserTransformation0.errors();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      mnUserParameters0.clone();
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 6, mnStrategy0, 1574.8853110822722);
      int[] intArray0 = new int[1];
      double[] doubleArray2 = new double[13];
      doubleArray2[8] = 1080.43076;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray2, 1.0E-6, 0);
      mnFunctionCross0.cross(intArray0, doubleArray2, doubleArray0, 100.0, 0);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray2, 1.0E-6, 0);
      mnUserTransformation0.setLowerLimit(0, 6.0);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, (-2158.579966961203), 0);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-0.10000723897624877), (-0.10000723897624877), (-0.10000723897624877), (-0.10000723897624877), (-0.10000723897624877)).when(fCNBase0).valueOf(any(double[].class));
      MinimumState minimumState0 = new MinimumState(28);
      double[] doubleArray0 = new double[1];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters0.setLimits(0, (double) 28, 78.2451541926315);
      mnUserParameters0.add((String) null, (-1.0));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnUserParameters0.setPrecision((-0.10000723897624877));
      mnStrategy0.setMediumStrategy();
      int[] intArray0 = new int[1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1.0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0, mnStrategy0, 2340.3974896);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, (-0.10000723897624877), (-837));
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, 3163.22848677485, 200);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MinimumParameters minimumParameters0 = new MinimumParameters(21);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 21, 0);
      double[] doubleArray0 = new double[1];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters0.setLimits(0, 1080.43076, 100.0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      mnUserTransformation0.errors();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, 21, mnUserTransformation0);
      MnStrategy mnStrategy0 = new MnStrategy();
      int[] intArray0 = new int[1];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(4.0, 1.0, 1080.43076, 1080.43076, 1080.43076).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 10.0, mnStrategy0, 2.0);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.21951219512195141, 434);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2.0, (-1724));
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MinimumParameters minimumParameters0 = new MinimumParameters(41);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 41, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters0.setLimits(0, 1080.6400198074755, 100.0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      double[] doubleArray1 = mnUserTransformation0.errors();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, 41, mnUserTransformation0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.intOfExt(0);
      mnStrategy0.setHessianGradientNCycles(0);
      int[] intArray0 = new int[1];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, 14.200000000000003, 1080.6400198074755, 1080.6400198074755, 1080.6400198074755).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 10.0, mnStrategy0, 42.007094830746496);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, (-2196), 200);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MinimumParameters minimumParameters0 = new MinimumParameters(21);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 21, 0);
      double[] doubleArray0 = new double[2];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters0.setLimits(0, 1080.43076, 100.0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      mnUserTransformation0.errors();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, 21, mnUserTransformation0);
      MnStrategy mnStrategy0 = new MnStrategy();
      int[] intArray0 = new int[1];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(4.0, 1.0, 1080.43076, 1080.43076, 1080.43076).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 10.0, mnStrategy0, 2.0);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.21951219512195141, 434);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MinimumParameters minimumParameters0 = new MinimumParameters(21);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 21, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters0.setLimits(0, 1080.43076, 100.0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      mnUserTransformation0.errors();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, 21, mnUserTransformation0);
      MnStrategy mnStrategy0 = new MnStrategy();
      int[] intArray0 = new int[1];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.2, (double)21, 1080.43076, (-886.908609), 1592.031029541931).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 10.0, mnStrategy0, (-2372.4179));
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1.0969435751994834E23);
      doubleArray1[1] = 10.0;
      doubleArray1[2] = (-2899.8102403);
      doubleArray1[3] = 0.51;
      doubleArray1[4] = 195.4809941;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 0.51, 124);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MinimumParameters minimumParameters0 = new MinimumParameters(36);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 36, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 36;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters0.setLimits(0, 1080.43076, 100.0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      double[] doubleArray1 = mnUserTransformation0.errors();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.add("]j", 100.0);
      mnStrategy0.setMediumStrategy();
      int[] intArray0 = new int[1];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(4.0, 1.0, 1080.43076, 1080.43076, 1080.43076).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 10.0, mnStrategy0, 2.0);
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, (-2196), 200);
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = (-2196);
      intArray1[2] = 0;
      intArray1[3] = 200;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray0, (-2372.4179), (-1275));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10.0, (-3822.81288176), (-3822.81288176), (-3822.81288176), 10.0).when(fCNBase0).valueOf(any(double[].class));
      MnStrategy mnStrategy0 = new MnStrategy();
      double[] doubleArray0 = new double[1];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.add("", 10.0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy1 = new MnStrategy();
      mnStrategy0.setMediumStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1), mnStrategy1, (-1));
      int[] intArray0 = new int[0];
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 10.0, 1392);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-988.5), 15);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2187, (-2125412901));
      mnStrategy1.setHessianStepTolerance((-3822.81288176));
      mnStrategy0.setHessianGradientNCycles((-2109));
      mnStrategy0.setGradientNCycles((-2109));
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1392, 1392);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.2601, 2419);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      double[] doubleArray0 = new double[1];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.add("", 10.0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy1 = new MnStrategy();
      mnStrategy0.setMediumStrategy();
      int[] intArray0 = new int[0];
      mnStrategy0.setGradientNCycles(376);
      mnStrategy1.setHessianStepTolerance(702.988145);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)1392, (double)2187, 10.0, (-1289.476111427), 702.988145).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1613.08401629189, mnStrategy0, (-1));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 86.8410552914856, (-157));
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 86.8410552914856, 2187);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      double[] doubleArray0 = new double[1];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.add("", 10.0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy1 = new MnStrategy();
      mnStrategy0.setMediumStrategy();
      int[] intArray0 = new int[0];
      mnStrategy0.setGradientNCycles(376);
      mnStrategy1.setHessianStepTolerance(702.988145);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)1392, (double)2187, 10.0, (-3822.81288176), 702.988145).when(fCNBase0).valueOf(any(double[].class));
      MnStrategy mnStrategy2 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 702.988145, mnStrategy2, 1638.2058309084);
      double[] doubleArray1 = new double[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 0.001, (-157));
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, (-988.5), 2187);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 10.0;
      doubleArray2[1] = (double) 2144389238;
      doubleArray2[2] = 0.001;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray2, 339.8232192927877, 2187);
      mnFunctionCross0.cross(intArray0, doubleArray2, doubleArray0, 1920.7730531080538, 376);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray2, doubleArray1, (-157), (-1));
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10.0, (-3822.81288176), (-3822.81288176), (-3822.81288176), 702.988145).when(fCNBase0).valueOf(any(double[].class));
      MnStrategy mnStrategy0 = new MnStrategy();
      double[] doubleArray0 = new double[1];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.add("^", 10.0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy1 = new MnStrategy();
      mnStrategy0.setMediumStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1), mnStrategy1, (-1));
      int[] intArray0 = new int[0];
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 10.0, 1392);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), (-4.886238037171319E79), (-3822.81288176), (-4.886238037171319E79), 1.0).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 746.11866032256, mnStrategy1, (-3822.81288176));
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1), (-4509));
      mnFunctionCross1.cross(intArray0, doubleArray0, doubleArray0, 12.0, 1392);
      mnStrategy0.setGradientTolerance((-1988.42055));
      mnFunctionCross1.cross(intArray0, doubleArray0, doubleArray0, (-1988.42055), 2541);
      mnFunctionCross1.cross(intArray0, doubleArray0, doubleArray0, (-1), 2146741341);
      // Undeclared exception!
      try { 
        mnUserParameters0.setLowerLimit("", 5.454389293461976E43);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-801.1), (-595.0), (-801.1), 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnStrategy mnStrategy0 = new MnStrategy();
      double[] doubleArray0 = new double[1];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy1 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-30), mnStrategy1, (-30));
      int[] intArray0 = new int[0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1700.4906685034357);
      doubleArray1[1] = (-595.0);
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, 10.0, (-30));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 4.0, 743);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1.0, 2187);
      assertNotSame(mnCross1, mnCross0);
  }
}
