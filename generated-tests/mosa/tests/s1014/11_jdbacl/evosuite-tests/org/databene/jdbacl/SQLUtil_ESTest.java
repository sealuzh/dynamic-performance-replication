/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:43:40 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.List;
import java.util.Locale;
import org.apache.derby.catalog.AliasInfo;
import org.apache.derby.catalog.Dependable;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.tools.Recover;
import org.h2.value.ValueDecimal;
import org.hsqldb.rowio.RowOutputTextLog;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "NOSS(_fC\"";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("NOSS(_fC\" = 'NOSS(_fC\"'", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Boolean boolean0 = new Boolean(")IDcW)Z`fI");
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = SQLUtil.normalize("alter materialized viewalter materialized viewq:&vj", true);
      assertEquals("alter materialized viewalter materialized viewq : & vj", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.normalize("yWHTwE!/:- ##>", false);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("yWHTwE!/:- ##>");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "|x|h7B/e|-GA";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "|x|h7B/e|-GA";
      stringArray0[1] = "|x|h7B/e|-GA";
      String string1 = "HjS!T'n]4SSz%";
      SQLUtil.innerJoin("|x|h7B/e|-GA", stringArray0, "|x|h7B/e|-GA", "HjS!T'n]4SSz%", stringArray0);
      SQLUtil.isDML("|x|h7B/e|-GA");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",.ng;a");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(",.ng;a", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("|x|h7B/e|-GA as HjS!T'n]4SSz% on |x|h7B/e|-GA.|x|h7B/e|-GA = HjS!T'n]4SSz%.|x|h7B/e|-GA and |x|h7B/e|-GA.|x|h7B/e|-GA = HjS!T'n]4SSz%.|x|h7B/e|-GA", stringBuilder0);
      int int0 = (-2298);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-2298), 165L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2298
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.typeAndName(dBCatalog0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-205));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-205), "Ex*:s VvtLaU_O_<^iX");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Ex*:s VvtLaU_O_<^iX", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("Ex*:s VvtLaU_O_<^iX EX*:S VVTLAU_O_<^IX(-205) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("execl?un<`**k:");
      assertNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.removeComments("l?un<`**k");
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("drop materialized viewnw");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized viewnw");
      DBDataType dBDataType0 = DBDataType.getInstance((-478), "drop materialized viewnw");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop materialized viewnw", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = SQLUtil.normalize("alter materialized viewalter materialized viewq:&vj", false);
      assertEquals("alter materialized viewalter materialized viewq : & vj", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.renderValue(defaultDBTable0);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.typeAndName(dBCatalog0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("catalog null");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materialized viewl?un<`**k:");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Q_8f3Uj]OSG}", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT Q_8f3Uj]OSG} PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materialized viewl?un<`**k:");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("create materialized viewl?un<`**k:", false, " f", " f");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK  f", string0);
      
      boolean boolean0 = SQLUtil.isDML("create materialized viewl?un<`**k:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(")");
      SQLUtil.addOptionalCondition(",>BK2&:-KU.I3T2iZ$", stringBuilder0);
      stringBuilder0.appendCodePoint(4145);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Qs");
      String[] stringArray0 = new String[4];
      stringArray0[0] = ",>BK2&:-KU.I3T2iZ$";
      stringArray0[1] = "Qs";
      stringArray0[2] = ",>BK2&:-KU.I3T2iZ$";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'Qs' has no foreign key with the columns (,>BK2&:-KU.I3T2iZ$, Qs, ,>BK2&:-KU.I3T2iZ$, )
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil.normalize("Ex*:s VvtLaU_O_<^iX", false);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("Ex * : s VvtLaU_O_ < ^ iX");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(update,";
      stringArray0[1] = "(update,";
      stringArray0[2] = "(update,";
      String string0 = SQLUtil.renderColumnListWithTableName("(update,", stringArray0);
      assertEquals("(update,.(update,, (update,.(update,, (update,.(update,", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLUtil.normalize("getArrayImpl(long,int,Map) with ", true);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("getArrayImpl (long, int, Map) with");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = SQLUtil.normalize("XBM03.D", false);
      assertEquals("XBM03.D", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}Q\"hJDRM8`(oaU3)a");
      String string0 = SQLUtil.normalize("}Q\"hJDRM8`(oaU3)a", true);
      assertEquals("} Q \"hJDRM8`(oaU3)a\"", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-490394649), "N}$~>h");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("N}$~>h", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("N}$~>h N}$~>H NULL", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "N}$~>h", false, (String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLUtil.removeComments("`5edXq;aW]`9Ej9bW[");
      DBSchema dBSchema0 = new DBSchema("truncateon");
      DBPackage dBPackage0 = new DBPackage("cfADK=!_S", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("truncateon", dBPackage0);
      dBProcedure0.equals(dBPackage0);
      CompositeDBObject<?> compositeDBObject0 = dBProcedure0.getOwner();
      String string0 = SQLUtil.ownerDotComponent(compositeDBObject0);
      assertEquals("truncateon.cfADK=!_S", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = SQLUtil.normalize("\\J4'$", true);
      assertEquals("\\ J4 '$'", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("],+y^m");
      assertNull(boolean0);
      
      String string0 = SQLUtil.normalize("],+y^m", false);
      assertEquals("], + y ^ m", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Z4";
      stringArray0[1] = "Z4";
      stringArray0[2] = "SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE";
      stringArray0[3] = "Z4";
      stringArray0[7] = "Z4";
      stringArray0[8] = null;
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materialized viewl?un<`**k:");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Q_8f3Uj]OSG}", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT Q_8f3Uj]OSG} ", string0);
      
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string1);
      assertEquals("table create materialized viewl?un<`**k:", string1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("updatesq");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("yWHTwE!/:- ##>");
      SQLUtil.normalize("yWHTwE!/:- ##>", true);
      String string0 = "select intoywhtwe!/:- ##>";
      String string1 = SchemaDescriptor.STD_DECLARED_GLOBAL_TEMPORARY_TABLES_SCHEMA_NAME;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "SESSION");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("yWHTwE ! / : - # # >", stringBuilder0);
      int int0 = (-3672);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-3672), (float) (-3672));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3672
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "update|4fs}esyo");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      String string1 = SQLUtil.join((String) null, ".HPTB5 |w`_u", stringArray0, "table null", "", stringArray0);
      assertEquals("table null as  on ", string1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
      assertNull(dBUniqueConstraint0.getDoc());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.mutatesDataOrStructure("alter materialized viewq:&vj");
      SQLUtil.mutatesStructure("xR5c=ei(:");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("callywhtwe!/:- ##>", true, "E.n}70JqD", "TYPE4");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"callywhtwe!/:- ##>\" CHECK TYPE4", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(940, "G!:U[PXM(-hm`y");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("G!:U[PXM(-hm`y", defaultDBTable0, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String string0 = Dependable.ALIAS;
      assertEquals("Alias", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      DBSchema dBSchema0 = new DBSchema("insertkr~knhp--%");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("PK", dBSchema0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "PK", false, stringArray0);
      dBPrimaryKeyConstraint0.isIdentical(compositeDBObject0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      Boolean boolean0 = new Boolean(")IDcW)Z`fI");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("insertkr~knhp--%");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("PK", defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("nw");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "table null";
      stringArray0[1] = "table null";
      stringArray0[2] = "table null";
      stringArray0[3] = "table null";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("table null", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("", "ywht", "table null");
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1000), "state");
      Integer integer0 = new Integer((-321699353));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("mI8N'O^-\u00049oTzb", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.typeAndName(defaultDBColumn0);
      assertNotNull(string0);
      assertEquals("column mI8N'O^-\u00049oTzb", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("mI8N'O^-\u00049oTzb", string1);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("state");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("$&wiBH\"pD");
      SQLUtil.normalize("42X56", true);
      SQLUtil.mutatesStructure("B^Z=D6n-{|/iF_O");
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputTextLog0);
      Locale locale0 = Locale.US;
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ONE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "42X56";
      objectArray0[1] = (Object) rowOutputTextLog0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "42X56", objectArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("B^Z=D6n-{|/iF_O", defaultDBTable0, 148, "Column '");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBDataType dBDataType0 = DBDataType.getInstance(3726, "executeb^z=d6n-{|/if_o");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("S!Rerr,8SrA|", defaultDBTable1, dBDataType0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("S!Rerr,8SrA|", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      Integer integer1 = new Integer(2888);
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("Column '", defaultDBTable0, dBDataType0, (Integer) null, integer1);
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn("Column '", defaultDBTable0, dBDataType0, (Integer) 1);
      dBColumnArray0[4] = (DBColumn) defaultDBColumn4;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SQLUtil.typeAndName((DBObject) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materialized viewl?un<`**k:");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "'partit", true, stringArray0);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 'partit UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ONE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("nw");
      DBDataType.getInstance((-268382033), "nw");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = new Integer(3);
      String string0 = AliasInfo.ALIAS_TYPE_FUNCTION_AS_STRING;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "nw";
      stringArray0[1] = "nw";
      SQLUtil.renderColumnNames(stringArray0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, (String) null, "nw");
      SQLUtil.constraintName(dBCheckConstraint0);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ONE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("nw");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      Character character0 = Character.valueOf('c');
      String string0 = SQLUtil.substituteMarkers("exec) expected:", "FbI6)_$P-Zc", character0);
      assertEquals("exec) expected:", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ONE;
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select intoconstraint update primary key (update, z4, )");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "getArrayImpl(long,int,Map) with ";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("getArrayImpl(long,int,Map) with ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"long\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "setTimestamp(Strif,#mestampw";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("setTimestamp(Strif,#mestampw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: setTimestamp(Strif,#mestampw
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "select into";
      SQLUtil.mutatesDataOrStructure("select into");
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("Kxy@Z[", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("h|V@8gCQZ%Ej1b!");
      DBSchema dBSchema0 = new DBSchema("&/U:e=", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("h|V@8gCQZ%Ej1b!", dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("org.hsqldb.CompiledStatementExecutor", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "P)Jc4b_";
      SQLUtil.renderColumnListWithTableName("P)Jc4b_", stringArray0);
      SQLUtil.leftJoin("renamemi8n ", stringArray0, " close", (String) null, stringArray0);
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter materialized viewywhtwe!/:- ##>", defaultDBTable0, (-382), "alter materialized viewywhtwe!/:- ##>");
      genericDescriptorList0.add((Object) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
      assertEquals("alter materialized viewywhtwe!/:- ##>", string0);
  }
}
