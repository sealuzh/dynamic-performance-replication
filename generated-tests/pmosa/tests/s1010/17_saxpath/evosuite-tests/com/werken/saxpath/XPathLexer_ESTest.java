/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 16:39:36 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer0.consume();
      xPathLexer0.and();
      xPathLexer0.and();
      xPathLexer0.div();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(4, int0);
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token2);
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      xPathLexer0.leftBracket();
      xPathLexer0.plus();
      xPathLexer0.comma();
      xPathLexer0.or();
      xPathLexer0.comma();
      xPathLexer0.literal();
      xPathLexer0.operatorName();
      xPathLexer0.literal();
      xPathLexer0.plus();
      xPathLexer0.getPreviousToken();
      xPathLexer0.equals();
      xPathLexer0.hasMoreChars();
      xPathLexer0.consume();
      assertNull(xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.dots();
      xPathLexer0.rightBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.mod();
      xPathLexer0.dots();
      xPathLexer0.consume(0);
      xPathLexer0.and();
      xPathLexer0.equals();
      xPathLexer0.currentPosition();
      xPathLexer0.consume();
      xPathLexer0.setXPath("");
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.setXPath("");
      xPathLexer0.div();
      xPathLexer0.getPreviousToken();
      xPathLexer0.notEquals();
      xPathLexer0.literal();
      xPathLexer0.hasMoreChars();
      xPathLexer0.notEquals();
      xPathLexer0.consume((-1011));
      xPathLexer0.setPreviousToken((Token) null);
      // Undeclared exception!
      try { 
        xPathLexer0.identifier();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftBracket();
      xPathLexer0.slashes();
      xPathLexer0.or();
      xPathLexer0.literal();
      xPathLexer0.or();
      Token token0 = xPathLexer0.slashes();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.mod();
      xPathLexer0.colon();
      xPathLexer0.whitespace();
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.whitespace();
      xPathLexer0.setXPath(") (");
      xPathLexer0.dollar();
      xPathLexer0.rightParen();
      xPathLexer0.notEquals();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.and();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      xPathLexer0.setXPath("");
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      xPathLexer0.not();
      xPathLexer0.pipe();
      xPathLexer0.rightBracket();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.hasMoreChars();
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.star();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('*');
      xPathLexer0.leftParen();
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("");
      xPathLexer0.colon();
      xPathLexer0.and();
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      xPathLexer0.leftParen();
      boolean boolean1 = xPathLexer0.isIdentifierStartChar('C');
      assertFalse(boolean1 == boolean0);
      
      xPathLexer0.and();
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      xPathLexer0.star();
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertNull(token9);
      
      xPathLexer0.setPreviousToken((Token) null);
      Token token10 = xPathLexer0.notEquals();
      assertEquals(22, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.consume();
      xPathLexer0.currentPosition();
      xPathLexer0.dots();
      xPathLexer0.pipe();
      xPathLexer0.operatorName();
      xPathLexer0.plus();
      xPathLexer0.colon();
      xPathLexer0.identifier();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dollar();
      xPathLexer0.div();
      xPathLexer0.leftBracket();
      xPathLexer0.rightBracket();
      xPathLexer0.identifier();
      xPathLexer0.plus();
      xPathLexer0.notEquals();
      xPathLexer0.operatorName();
      xPathLexer0.isIdentifierChar('g');
      xPathLexer0.literal();
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume(1);
      xPathLexer0.endPosition();
      xPathLexer0.or();
      xPathLexer0.star();
      Token token0 = xPathLexer0.plus();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+R-R7H&%}%");
      xPathLexer0.whitespace();
      xPathLexer0.number();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.colon();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      xPathLexer0.rightParen();
      xPathLexer0.dollar();
      xPathLexer0.equals();
      xPathLexer0.colon();
      xPathLexer0.number();
      xPathLexer0.consume();
      xPathLexer0.getXPath();
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.getXPath();
      xPathLexer0.not();
      xPathLexer0.currentPosition();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("");
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      xPathLexer0.endPosition();
      xPathLexer0.or();
      xPathLexer0.notEquals();
      xPathLexer0.number();
      xPathLexer0.dots();
      xPathLexer0.not();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("");
      xPathLexer0.plus();
      xPathLexer0.rightParen();
      xPathLexer0.equals();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.pipe();
      xPathLexer0.pipe();
      xPathLexer0.doubleColon();
      xPathLexer0.setXPath("$dEi-Nad#13");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.equals();
      xPathLexer0.star();
      xPathLexer0.rightParen();
      xPathLexer0.div();
      xPathLexer0.consume(0);
      assertEquals("$dEi-Nad#13", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1xU#5]p]");
      xPathLexer0.operatorName();
      xPathLexer0.at();
      xPathLexer0.literal();
      xPathLexer0.or();
      xPathLexer0.not();
      xPathLexer0.notEquals();
      xPathLexer0.colon();
      xPathLexer0.relationalOperator();
      xPathLexer0.comma();
      xPathLexer0.rightParen();
      xPathLexer0.at();
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.div();
      xPathLexer0.pipe();
      xPathLexer0.rightParen();
      xPathLexer0.comma();
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("4*Rv!D:Bp3Of(0S ");
      xPathLexer0.getXPath();
      xPathLexer0.identifier();
      xPathLexer0.equals();
      xPathLexer0.div();
      xPathLexer0.and();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("(5t");
      xPathLexer0.identifier();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.getXPath();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals("(", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("5", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("t", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("T_eT=fP*lN)0");
      xPathLexer0.and();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.mod();
      xPathLexer0.dollar();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.notEquals();
      xPathLexer0.relationalOperator();
      xPathLexer0.whitespace();
      xPathLexer0.isIdentifierChar('j');
      xPathLexer0.doubleColon();
      xPathLexer0.dollar();
      xPathLexer0.equals();
      xPathLexer0.identifier();
      xPathLexer0.nextToken();
      xPathLexer0.identifier();
      xPathLexer0.leftBracket();
      xPathLexer0.at();
      xPathLexer0.slashes();
      xPathLexer0.star();
      xPathLexer0.mod();
      xPathLexer0.currentPosition();
      xPathLexer0.dots();
      xPathLexer0.dots();
      xPathLexer0.pipe();
      xPathLexer0.hasMoreChars();
      xPathLexer0.mod();
      xPathLexer0.equals();
      xPathLexer0.not();
      xPathLexer0.currentPosition();
      xPathLexer0.rightParen();
      xPathLexer0.currentPosition();
      xPathLexer0.comma();
      String string0 = xPathLexer0.getXPath();
      assertEquals("T_eT=fP*lN)0", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+R-R7H&%}%");
      xPathLexer0.whitespace();
      xPathLexer0.number();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.colon();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      xPathLexer0.rightParen();
      xPathLexer0.dollar();
      xPathLexer0.equals();
      xPathLexer0.colon();
      xPathLexer0.number();
      xPathLexer0.consume();
      xPathLexer0.getXPath();
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.getXPath();
      xPathLexer0.not();
      xPathLexer0.currentPosition();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+R-R7H&%}%");
      Token token0 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(18, token0.getTokenType());
      assertEquals("G", token0.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("R-R7H", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("&%", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.isIdentifierChar('j');
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      assertEquals("%", token4.getTokenText());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      xPathLexer0.equals();
      xPathLexer0.identifier();
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      Token token8 = xPathLexer0.identifier();
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      xPathLexer0.at();
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
      
      Token token11 = xPathLexer0.star();
      assertEquals(20, token11.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.currentPosition();
      xPathLexer0.dots();
      Token token12 = xPathLexer0.dots();
      assertEquals(13, token12.getTokenType());
      
      Token token13 = xPathLexer0.pipe();
      assertEquals(17, token13.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      XPathLexer xPathLexer1 = new XPathLexer("G+R-R7H&%}%");
      xPathLexer1.mod();
      XPathLexer xPathLexer2 = new XPathLexer("G+R-R7H&%}%");
      xPathLexer2.hasMoreChars();
      Token token14 = xPathLexer2.equals();
      assertEquals(21, token14.getTokenType());
      
      Token token15 = xPathLexer2.not();
      assertEquals(23, token15.getTokenType());
      
      xPathLexer2.currentPosition();
      Token token16 = xPathLexer0.rightParen();
      assertEquals(2, token16.getTokenType());
      
      xPathLexer1.currentPosition();
      Token token17 = xPathLexer1.comma();
      assertEquals(32, token17.getTokenType());
      assertEquals("G", token17.getTokenText());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";M_n<UPN<^k*LjZ");
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals(";", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals("M", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("_n<UPN<^k*LjZ", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "N?Ztvv]\\6B_|@";
      XPathLexer xPathLexer0 = new XPathLexer("N?Ztvv]\u0006B_|@");
      xPathLexer0.leftBracket();
      xPathLexer0.at();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.consume((-503));
      // Undeclared exception!
      try { 
        xPathLexer0.dots();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("(5t");
      XPathLexer xPathLexer1 = new XPathLexer("(5t");
      XPathLexer xPathLexer2 = new XPathLexer("(5t");
      xPathLexer2.nextToken();
      Token token0 = xPathLexer1.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("(", token0.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token1 = xPathLexer3.minus();
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer2.comma();
      assertEquals("5", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("(", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+R-R7H&%}%");
      xPathLexer0.whitespace();
      xPathLexer0.number();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume(7);
      xPathLexer1.dots();
      xPathLexer1.dots();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.endPosition();
      xPathLexer1.setXPath("G+R-R7H&%}%");
      xPathLexer0.div();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer2.setXPath("G+R-R7H&%}%");
      xPathLexer0.whitespace();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.operatorName();
      // Undeclared exception!
      try { 
        xPathLexer2.LA(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N?Ztvv]\u0006B_|@");
      xPathLexer0.leftBracket();
      xPathLexer0.at();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.comma();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      xPathLexer0.rightParen();
      xPathLexer0.dollar();
      xPathLexer0.equals();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.number();
      xPathLexer0.consume();
      xPathLexer0.getXPath();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.number();
      xPathLexer0.getXPath();
      xPathLexer2.not();
      xPathLexer2.currentPosition();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer1.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+R-R7H&%}%");
      xPathLexer0.whitespace();
      xPathLexer0.number();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.colon();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      xPathLexer0.identifier();
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.dollar();
      xPathLexer0.equals();
      xPathLexer0.minus();
      xPathLexer0.comma();
      Token token1 = xPathLexer0.nextToken();
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":P@9");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer0.not();
      xPathLexer0.minus();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer1.LA(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("bY$");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("bY", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";M_n<UPN<^k*LjZ");
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(";", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("M", token2.getTokenText());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals("", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("_", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("n<UPN<^k*LjZ", token5.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('o');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("(5t");
      XPathLexer xPathLexer1 = new XPathLexer("(5t");
      XPathLexer xPathLexer2 = new XPathLexer("(5t");
      xPathLexer2.nextToken();
      xPathLexer1.not();
      xPathLexer2.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1931));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("bY$");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("b", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("Y", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('o');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("a=F");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("a", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("=", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.getPreviousToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("F", token2.getTokenText());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";M_n<UPN<^k*LjZ");
      Token token0 = xPathLexer0.slashes();
      assertEquals(";", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("M_n", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("<U", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u");
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("sI");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("sI", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals("", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";M_n<UPN<^k*LjZ");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals(";", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("M_n", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("<", token2.getTokenText());
      assertEquals(7, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[2Lfm{5),0");
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals("2", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(10, int0);
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("Lfm", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("lL8=N4o1pY0pUW?j}UJ");
      xPathLexer1.nextToken();
      xPathLexer0.isIdentifierStartChar('Y');
      xPathLexer1.consume(692);
      assertEquals("lL8=N4o1pY0pUW?j}UJ", xPathLexer1.getXPath());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("O");
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("O");
      assertEquals("O", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("i)");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("i", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%Z4aD");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("%Z", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("4", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("O^x0+ba[A!QvLWRV1");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("O", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("^x0+ba[A!QvLWRV1", token1.getTokenText());
      assertEquals((-1), token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("k]c@ otBdbT");
      xPathLexer0.and();
      Token token0 = xPathLexer0.comma();
      assertEquals("k", token0.getTokenText());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("]c", token2.getTokenText());
      
      xPathLexer0.not();
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.not();
      assertEquals(" ", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("otBdbT", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      
      xPathLexer0.comma();
      xPathLexer0.comma();
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer0.comma();
      assertEquals(32, token7.getTokenType());
      
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      
      xPathLexer0.setXPath("k]c@ otBdbT");
      xPathLexer0.literal();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      Token token9 = xPathLexer0.dots();
      assertEquals(13, token9.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.consume((-306));
      Token token10 = xPathLexer0.leftBracket();
      assertEquals(3, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%Z4aD");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("%", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("Z4", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("aD", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%Z4aD");
      xPathLexer0.whitespace();
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("aV?.Wt");
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("g.Kl8(v^k#QPF`,");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("g.Kl8", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals("(v", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D5A#?h[{0'rJl0");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("D5A", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.dollar();
      assertEquals(")", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(1, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("i/a}rP");
      Token token0 = xPathLexer1.minus();
      xPathLexer1.setPreviousToken(token0);
      assertEquals("i", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals(11, token1.getTokenType());
      assertEquals("/", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("bY8");
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("bY8");
      assertEquals("bY8", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("j[FhjaobssP");
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals("j", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%Z4aD");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("%", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("Z4aD", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%Z4aD");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("%Z4aD", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("x2");
      xPathLexer1.nextToken();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals(3, token1.getTokenType());
      assertEquals("[", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+FM0416gupyK=");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("+", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("3-Tu/i|@ur8(,B~6;");
      xPathLexer0.div();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%Z4aD");
      Token token0 = xPathLexer0.not();
      String string0 = token0.toString();
      assertEquals("[ (23) (%)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      assertEquals("Z4aD", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";M_n<UPN<^k*LjZ");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals(";M", token0.getTokenText());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("<", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("UPN", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("3-Tu/i|@ur8(,B~6;");
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      assertEquals("3-Tu", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("/", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'G9lI.<ww#gNKR^h");
      Token token0 = xPathLexer0.dollar();
      assertEquals("'", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("<", token2.getTokenText());
      
      xPathLexer0.currentPosition();
      xPathLexer0.div();
      Token token3 = xPathLexer0.comma();
      assertEquals("w", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("w", token4.getTokenText());
      
      xPathLexer0.consume();
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("`qlcB{w~RnN3");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.not();
      xPathLexer1.nextToken();
      Token token0 = xPathLexer1.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1`$5Z61\"p=Ac|<iC ");
      xPathLexer0.number();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":\"*OrrP");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(":", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":P@9");
      XPathLexer xPathLexer1 = new XPathLexer(":P@9");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(18, token0.getTokenType());
      assertEquals(":", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals(":", token1.getTokenText());
      
      Token token2 = xPathLexer0.minus();
      assertEquals("P", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      assertEquals("", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("@", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      xPathLexer1.LA(0);
      Token token5 = xPathLexer1.leftBracket();
      assertEquals(3, token5.getTokenType());
      assertEquals("P", token5.getTokenText());
      
      Token token6 = xPathLexer1.pipe();
      assertEquals("", token6.getTokenText());
      assertEquals(17, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("NKT}U");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("N", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("KT", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!5@");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(23, token0.getTokenType());
      assertEquals("!", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ZQ.4BB^p)");
      xPathLexer0.and();
      xPathLexer0.dollar();
      xPathLexer0.relationalOperator();
      xPathLexer0.plus();
      xPathLexer0.number();
      xPathLexer0.dots();
      xPathLexer0.at();
      xPathLexer0.plus();
      int int0 = (-1289);
      xPathLexer0.consume((-1289));
      xPathLexer0.dollar();
      xPathLexer0.plus();
      xPathLexer0.rightParen();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.pipe();
      xPathLexer1.pipe();
      xPathLexer1.setXPath("!dGn}lre[s*4");
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.minus();
      xPathLexer1.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer1.equals();
      xPathLexer0.star();
      xPathLexer1.rightParen();
      // Undeclared exception!
      try { 
        xPathLexer0.div();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("pHqQAo<+fD");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("pHqQAo", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      String string0 = "{IH\"5H\\T([!k~SD3\\u";
      XPathLexer xPathLexer1 = new XPathLexer(string0);
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("<", token1.getTokenText());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("{IH\"5H\\T([!k~SD3\\u", token2.getTokenText());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals("+", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+R-R7H&%}%");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("+", token0.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.minus();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("-", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("R7H", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("&", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("3-Tu/i|@ur8(,B~6;");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("3-Tu/i|@ur8(,B~6;");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("3", token0.getTokenText());
      
      Token token1 = xPathLexer1.dots();
      assertEquals("-", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("Tu/i|@ur8(,B~6;", token2.getTokenText());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      assertEquals("-", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ZQ.4BB^p)");
      xPathLexer0.and();
      xPathLexer0.dollar();
      xPathLexer0.relationalOperator();
      xPathLexer0.plus();
      xPathLexer0.number();
      xPathLexer0.dots();
      xPathLexer0.at();
      xPathLexer0.plus();
      xPathLexer0.consume((-1289));
      xPathLexer0.dollar();
      xPathLexer0.plus();
      xPathLexer0.rightParen();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.identifier();
      xPathLexer1.not();
      XPathLexer xPathLexer2 = new XPathLexer("v|6[t!vUIxv=M3gIyd");
      xPathLexer2.identifier();
      xPathLexer1.number();
      xPathLexer1.currentPosition();
      xPathLexer2.or();
      xPathLexer2.dots();
      xPathLexer2.number();
      xPathLexer1.slashes();
      xPathLexer2.minus();
      xPathLexer0.leftParen();
      xPathLexer0.comma();
      xPathLexer0.hasMoreChars();
      xPathLexer2.and();
      // Undeclared exception!
      try { 
        xPathLexer0.LA(93);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("sI");
      Token token1 = xPathLexer1.pipe();
      assertEquals("s", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("I", token2.getTokenText());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals("", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";M_n<UPN<^k*LjZ");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(";M_n<UPN<^k*LjZ", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals(";", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("M", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      assertEquals("_n", token3.getTokenText());
      
      Token token4 = xPathLexer0.star();
      assertEquals("<", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("*U$- &|4UZuK}Bt");
      Token token5 = xPathLexer1.nextToken();
      assertEquals(20, token5.getTokenType());
      assertEquals("*", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("pHqQAo<+fD");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("pHqQAo", token0.getTokenText());
      
      String string0 = "{IH\"5H\\T([!k~SD3\\u";
      XPathLexer xPathLexer1 = new XPathLexer(string0);
      Token token1 = xPathLexer1.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("{", token1.getTokenText());
      
      Token token2 = xPathLexer1.leftBracket();
      assertEquals("I", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals("H", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer1.slashes();
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer1.leftParen();
      assertEquals(1, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+R-R7H&%}%");
      xPathLexer0.or();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("G", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("&$>Vx[");
      Token token1 = xPathLexer1.not();
      assertEquals("&", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("+", token2.getTokenText());
      
      Token token3 = xPathLexer1.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("$", token3.getTokenText());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals(">", token4.getTokenText());
      assertEquals(9, token4.getTokenType());
      
      Token token5 = xPathLexer1.comma();
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("R-R7H&%}%", token6.getTokenText());
      
      char char0 = xPathLexer1.LA(1);
      assertEquals('x', char0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("qne%<");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("qne", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D5A#?h[{0'rJl0");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("D5", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("A", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("9");
      xPathLexer0.div();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("9", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals(" ", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.setXPath("$dEi-Nad#13");
      XPathLexer xPathLexer1 = new XPathLexer(".p''W PN");
      Token token2 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals("$", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals(27, token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      assertEquals("d", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer(".p''W PN");
      Token token6 = xPathLexer2.equals();
      assertEquals(".", token6.getTokenText());
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer2.star();
      assertEquals("p", token7.getTokenText());
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer1.rightParen();
      assertEquals(2, token8.getTokenType());
      
      xPathLexer1.div();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token9 = xPathLexer3.leftParen();
      assertEquals(1, token9.getTokenType());
      
      Token token10 = xPathLexer1.dollar();
      assertEquals(" ", token10.getTokenText());
      assertEquals(26, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.whitespace();
      String string0 = token0.toString();
      assertEquals("[ (-2) ()", string0);
      
      Token token1 = xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token1);
      assertEquals("(", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D5A#?h[{0'rJl0");
      Token token0 = xPathLexer0.identifier();
      assertEquals("D5A", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("#", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("?h[{0'rJl0", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer(".<l~C^$<GPGJ?+cUh");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(13, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ZQ.4BB^p)");
      XPathLexer xPathLexer1 = new XPathLexer("ZQ.4BB^p)");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("ZQ.4BB", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer1.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("^", token1.getTokenText());
      
      Token token2 = xPathLexer1.leftParen();
      assertEquals(1, token2.getTokenType());
      assertEquals("p", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("Z", token3.getTokenText());
      
      Token token4 = xPathLexer1.rightParen();
      assertEquals(")", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      xPathLexer1.nextToken();
      Token token6 = xPathLexer1.comma();
      assertEquals(32, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(31, token7.getTokenType());
      assertEquals(".4", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("k]c@ otBdbT");
      xPathLexer0.and();
      Token token0 = xPathLexer0.comma();
      assertEquals("k", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("]", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals("c", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      xPathLexer0.rightParen();
      Token token3 = xPathLexer0.minus();
      assertEquals(" ", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      assertEquals("otBdbT", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer1.comma();
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      Token token7 = xPathLexer1.rightParen();
      assertEquals(2, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ZQ.4BB^p)");
      XPathLexer xPathLexer1 = new XPathLexer("ZQ.4BB^p)");
      xPathLexer1.operatorName();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("ZQ", token1.getTokenText());
      
      xPathLexer0.not();
      xPathLexer0.identifierOrOperatorName();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("^", token2.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      Token token3 = xPathLexer0.minus();
      assertEquals("p", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer1.whitespace();
      assertEquals("", token5.getTokenText());
      assertEquals((-2), token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      xPathLexer2.and();
      Token token7 = xPathLexer1.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("Q.4BB", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("bY$");
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(17, token0.getTokenType());
      assertEquals("b", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("Y", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("77aD");
      Token token0 = xPathLexer0.plus();
      assertEquals("7", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("7", token1.getTokenText());
      
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.getPreviousToken();
      assertEquals("aD", token2.getTokenText());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      assertEquals("a", token3.getTokenText());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%Z4a@D");
      Token token0 = xPathLexer0.plus();
      String string0 = token0.toString();
      assertEquals("[ (5) (%)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("Z4a", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("k]c@ otBdbT");
      xPathLexer0.dollar();
      xPathLexer0.and();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.rightParen();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.comma();
      xPathLexer1.rightBracket();
      xPathLexer1.nextToken();
      xPathLexer1.rightParen();
      boolean boolean0 = xPathLexer1.isIdentifierChar('m');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("");
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      xPathLexer0.endPosition();
      xPathLexer0.notEquals();
      xPathLexer0.number();
      xPathLexer0.dots();
      xPathLexer0.not();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("");
      xPathLexer0.plus();
      xPathLexer0.rightParen();
      xPathLexer0.equals();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.pipe();
      xPathLexer0.pipe();
      xPathLexer0.setXPath("$dEi-Nad#13");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.equals();
      xPathLexer0.star();
      xPathLexer0.rightParen();
      xPathLexer0.div();
      xPathLexer0.consume(0);
      assertEquals("$dEi-Nad#13", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D5A#?h[{0'rJl0");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("D", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("5A", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("#?h[{0'rJl0", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("TD[!* N\"_.*Kr");
      xPathLexer0.and();
      Token token0 = xPathLexer0.comma();
      assertEquals("T", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("D", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      assertEquals("[", token2.getTokenText());
      
      xPathLexer0.rightParen();
      Token token3 = xPathLexer0.minus();
      assertEquals("*", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("N\"_.*Kr", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer1.comma();
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      Token token7 = xPathLexer0.rightParen();
      assertEquals("N", token7.getTokenText());
      assertEquals(2, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("k]c@ otBdbT");
      xPathLexer0.and();
      Token token0 = xPathLexer0.comma();
      assertEquals("k", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(4, token1.getTokenType());
      assertEquals("]", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals("c", token2.getTokenText());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals("@ ", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals("o", token4.getTokenText());
      
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      assertEquals("t", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.comma();
      Token token7 = xPathLexer1.comma();
      assertEquals(32, token7.getTokenType());
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      Token token9 = xPathLexer1.rightParen();
      assertEquals(2, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1`$5Z61\"p=Ac|<iC ");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("1", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("w1'+X>");
      Token token1 = xPathLexer0.dots();
      assertEquals("`", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("$", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("");
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.number();
      xPathLexer0.endPosition();
      xPathLexer0.notEquals();
      xPathLexer0.number();
      xPathLexer0.dots();
      xPathLexer0.not();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("");
      xPathLexer0.plus();
      xPathLexer0.rightParen();
      xPathLexer0.equals();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.pipe();
      xPathLexer0.pipe();
      xPathLexer0.setXPath("$dEi-Nad#13");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.equals();
      xPathLexer0.star();
      xPathLexer0.rightParen();
      xPathLexer0.div();
      xPathLexer0.consume(0);
      assertEquals("$dEi-Nad#13", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("k]c@ otBdbT");
      xPathLexer0.and();
      Token token0 = xPathLexer0.comma();
      assertEquals("k", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals("c", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(16, token3.getTokenType());
      assertEquals("@", token3.getTokenText());
      
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("otBdbT", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ZQ.4BB^p)");
      XPathLexer xPathLexer1 = new XPathLexer("ZQ.4BB^p)");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("ZQ.4BB", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer1.dollar();
      assertEquals("^", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer1.leftParen();
      assertEquals("p", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("Z", token3.getTokenText());
      
      Token token4 = xPathLexer1.rightParen();
      assertEquals(")", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer0.dots();
      assertEquals(14, token5.getTokenType());
      assertEquals("Q.", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("4", token6.getTokenText());
      assertEquals(30, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("k]c@ otBdbT");
      XPathLexer xPathLexer1 = new XPathLexer("k]c@ otBdbT");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals("k", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("7a*D");
      Token token0 = xPathLexer0.star();
      String string0 = token0.toString();
      assertEquals("[ (20) (7)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("a", token1.getTokenText());
      
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.slashes();
      assertEquals("*", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("^PfNSD7$r$JT,ex-_/9");
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("^P", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("fNSD7", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%Z4a@D");
      Token token0 = xPathLexer0.leftParen();
      String string0 = token0.toString();
      assertEquals("[ (1) (%)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("Z4a", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y6QH@)n~3V1Vd!c");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("y6QH", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("@", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(")", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals("n", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.whitespace();
      assertEquals("", token4.getTokenText());
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer0.comma();
      assertEquals("3", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("V1Vd!c", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("NKT}U");
      Token token0 = xPathLexer0.leftBracket();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("N", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("KT", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";M_n<UPN<^k*LjZ");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(";M_n<UPN<^k*LjZ", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals(";", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.setPreviousToken(token2);
      assertEquals(2, token2.getTokenType());
      assertEquals("M", token2.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("_n<UPN<^k*LjZ", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1`$5Z61\"p=Ac|<iC ");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("1", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals("`", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("$", token2.getTokenText());
      
      Token token3 = xPathLexer0.minus();
      assertEquals("5", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("Z61\"p=Ac|<iC ", token4.getTokenText());
      
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      assertEquals("Z", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(30, token6.getTokenType());
      assertEquals("61", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".CG*m'r");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("t?v`j%#");
      Token token1 = xPathLexer1.dollar();
      assertEquals("t", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("CG", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("eyP");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("eyP", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+FM0416gupyK=");
      XPathLexer xPathLexer1 = new XPathLexer("0SIUYOoe:_7^T,");
      Token token0 = xPathLexer1.rightBracket();
      assertEquals("0", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("SIUYOoe", token1.getTokenText());
      
      Token token2 = xPathLexer0.minus();
      assertEquals("+", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zWLcV1oAd");
      XPathLexer xPathLexer1 = new XPathLexer("zWLcV1oAd");
      XPathLexer xPathLexer2 = new XPathLexer("zWLcV1oAd");
      Token token0 = xPathLexer2.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("z", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("z", token1.getTokenText());
      
      Token token2 = xPathLexer1.leftParen();
      assertEquals("z", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("WLcV1oAd", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("3-Tu/i|@ur8(,B~6;");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("3", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("-", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("T", token2.getTokenText());
      
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(11, token3.getTokenType());
      assertEquals("/", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      assertEquals("i", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("NKT}U");
      xPathLexer0.rightParen();
      xPathLexer0.equals();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.pipe();
      xPathLexer0.pipe();
      xPathLexer0.setXPath("$dEi-Nad#13");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.equals();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer(">h\t>3:e");
      xPathLexer1.rightParen();
      xPathLexer1.nextToken();
      xPathLexer1.consume();
      assertEquals(">h\t>3:e", xPathLexer1.getXPath());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("3-Tu/i|@ur8(,B~6;");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("-", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("Tu", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(11, token3.getTokenType());
      assertEquals("/", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("i", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(17, token5.getTokenType());
      assertEquals("|", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("");
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer0.number();
      xPathLexer0.rightParen();
      xPathLexer0.endPosition();
      xPathLexer0.notEquals();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("");
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer0.equals();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.pipe();
      xPathLexer0.notEquals();
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      
      xPathLexer0.setXPath("$dEi-Nad#13");
      xPathLexer0.identifierOrOperatorName();
      Token token6 = xPathLexer0.rightBracket();
      assertEquals("$", token6.getTokenText());
      assertEquals(4, token6.getTokenType());
      
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
      assertEquals("d", token7.getTokenText());
      
      Token token8 = xPathLexer0.nextToken();
      Token token9 = xPathLexer0.leftBracket();
      assertEquals("E", token9.getTokenText());
      assertEquals(3, token9.getTokenType());
      
      Token token10 = xPathLexer0.comma();
      assertEquals(32, token10.getTokenType());
      
      Token token11 = xPathLexer0.equals();
      assertEquals(21, token11.getTokenType());
      
      Token token12 = xPathLexer0.star();
      assertEquals("N", token12.getTokenText());
      assertEquals(20, token12.getTokenType());
      
      Token token13 = xPathLexer0.rightParen();
      assertEquals(2, token13.getTokenType());
      assertEquals("a", token13.getTokenText());
      
      Token token14 = xPathLexer0.nextToken();
      assertNotSame(token14, token8);
      
      Token token15 = xPathLexer0.notEquals();
      assertEquals(22, token15.getTokenType());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("3-Tu/)|@ur8(,B~6;");
      Token token0 = xPathLexer0.notEquals();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(22, token0.getTokenType());
      assertEquals("3-", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("Tu", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("qne%<");
      xPathLexer0.setXPath("qne%<");
      char char0 = xPathLexer0.LA(132);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.div();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("q", token0.getTokenText());
      
      xPathLexer0.currentPosition();
      xPathLexer0.pipe();
      xPathLexer0.mod();
      xPathLexer0.mod();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("%", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("<", token2.getTokenText());
      assertEquals(7, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer1.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer1.rightParen();
      assertEquals(2, token7.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer1.leftBracket();
      xPathLexer1.getXPath();
      xPathLexer0.rightBracket();
      xPathLexer0.and();
      xPathLexer0.dots();
      Token token8 = xPathLexer1.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      Token token9 = xPathLexer0.rightBracket();
      assertEquals(4, token9.getTokenType());
      
      xPathLexer0.setXPath("");
      xPathLexer1.operatorName();
      Token token10 = xPathLexer1.star();
      assertEquals(20, token10.getTokenType());
      
      Token token11 = xPathLexer1.pipe();
      assertEquals(17, token11.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('{');
      assertFalse(boolean0);
      
      Token token12 = xPathLexer0.dots();
      assertEquals(13, token12.getTokenType());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.setXPath("70");
      char char0 = xPathLexer0.LA(103);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.slashes();
      assertEquals("7", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("70");
      xPathLexer1.currentPosition();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer2.pipe();
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals("70", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals("0", token4.getTokenText());
      assertEquals(1, token4.getTokenType());
      
      Token token5 = xPathLexer2.rightParen();
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      
      Token token7 = xPathLexer2.nextToken();
      assertEquals((-1), token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("k]c@ otBdbT");
      xPathLexer0.and();
      Token token0 = xPathLexer0.leftParen();
      assertEquals("k", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals("@", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      assertEquals("]", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("otBdbT", token4.getTokenText());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("3-Tu/i|@ur8(,B~6;");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("-", token1.getTokenText());
      
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("T", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("u/i|@ur8(,B~6;", token3.getTokenText());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(12, token4.getTokenType());
      assertEquals("u/", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?mX/vL&vU ZpdZU");
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" e)mK;{&S65CzNv.");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("e", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(")", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("mK;{&S65CzNv.", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'rZ4a@D");
      Token token0 = xPathLexer0.star();
      String string0 = token0.toString();
      assertEquals("[ (20) (')", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("rZ4a", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%Z4a@D");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("%", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(19, token1.getTokenType());
      assertEquals("Z4", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("a", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$= qL*?");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(26, token0.getTokenType());
      assertEquals("$", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals("=", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(" ", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("qL", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zM)VhARz?@oO+K");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("zM", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(")", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals("h", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("24*y|-*UJAAF+Cq");
      Token token3 = xPathLexer1.nextToken();
      assertEquals("24", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c^)g]kt9=6ah");
      xPathLexer0.or();
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.pipe();
      assertEquals("^", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(")g", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("]k", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer(".iuu<5u5b");
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals(".", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer("XJ6h$pT/>)");
      Token token2 = xPathLexer1.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      assertEquals(17, token1.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("XJ6h", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z.4BB^)");
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("F=NRa<10d^[@oN[v9J");
      xPathLexer0.doubleColon();
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.currentPosition();
      xPathLexer0.pipe();
      xPathLexer0.mod();
      xPathLexer0.mod();
      xPathLexer0.consume();
      xPathLexer0.currentPosition();
      xPathLexer0.dots();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c^)g]k,9=6ah");
      xPathLexer0.operatorName();
      xPathLexer0.whitespace();
      xPathLexer0.notEquals();
      xPathLexer0.doubleColon();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.minus();
      xPathLexer1.nextToken();
      xPathLexer1.pipe();
      xPathLexer0.nextToken();
      xPathLexer1.or();
      Token token0 = xPathLexer1.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dp0a+.WZ?[");
      xPathLexer0.operatorName();
      xPathLexer0.whitespace();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer("XJ6h$pT/>)");
      Token token2 = xPathLexer1.rightParen();
      assertEquals("X", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer1.number();
      assertEquals(30, token3.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      assertEquals(17, token1.getTokenType());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("J6h", token4.getTokenText());
      
      boolean boolean0 = xPathLexer1.isIdentifierChar('/');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("0>=rwe]p[lZ");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.slashes();
      assertEquals("0", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(">=", token1.getTokenText());
      assertEquals(10, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertEquals("rwe", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("]", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("xDGEjE>&7oq]+4<");
      Token token0 = xPathLexer0.dots();
      assertEquals("x", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("D", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("GEjE", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(9, token3.getTokenType());
      assertEquals(">", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".5l~C^$<GPGJ?+cUh");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(".5", token0.getTokenText());
      assertEquals(31, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
      
      Token token2 = xPathLexer0.pipe();
      assertEquals("l", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = new Token(25, (String) null, 25, 25);
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".8l~Cc$GP+Uh");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(31, token0.getTokenType());
      assertEquals(".8", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<wQ'RVwF/3'@50%O@");
      xPathLexer0.consume();
      xPathLexer0.identifier();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!.7+p\" ,>\"L&");
      xPathLexer0.leftParen();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("..gCA");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("..gCA");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.number();
      assertEquals(".", token0.getTokenText());
      assertEquals(31, token0.getTokenType());
  }
}
