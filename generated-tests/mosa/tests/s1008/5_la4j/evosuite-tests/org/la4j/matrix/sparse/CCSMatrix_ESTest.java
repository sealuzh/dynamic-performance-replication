/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:41:12 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(44, 44);
      int[] intArray0 = new int[1];
      cCSMatrix0.select(intArray0, intArray0);
      CCSMatrix cCSMatrix1 = new CCSMatrix(44, 44);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      // Undeclared exception!
      try { 
        CCSMatrix.random(0, 0, (-1.0), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1415.5);
      doubleArray0[1] = (double) 638;
      doubleArray0[3] = (-1415.5);
      double[][] doubleArray1 = new double[4][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      assertEquals(12, cCSMatrix0.cardinality());
      assertEquals((-1415.5), cCSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, 2);
      assertEquals(2, cCSMatrix0.cardinality());
      assertEquals(0.5, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(2, cCSMatrix0.rows());
      assertEquals(2, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) cCSMatrix0, (SparseMatrix) cCSMatrix0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(2, cCSMatrix0.cardinality());
      assertEquals(0.5, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(2, cCSMatrix0.rows());
      assertEquals(2, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2.0, cCSMatrix0.max(), 0.01);
      assertEquals(2, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(2, cCSMatrix1.columns());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix1, cCSMatrix1, cCSMatrix1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, 2);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(2, cCSMatrix0.rows());
      assertEquals(2, cCSMatrix0.cardinality());
      assertEquals(0.5, cCSMatrix0.density(), 0.01);
      assertEquals(2.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(2, cCSMatrix0.rows());
      assertEquals(2, cCSMatrix0.cardinality());
      assertEquals(0.5, cCSMatrix0.density(), 0.01);
      assertEquals(2.0, cCSMatrix0.max(), 0.01);
      assertEquals(4.0, cCSMatrix1.max(), 0.01);
      assertEquals(2, cCSMatrix1.columns());
      assertEquals(2, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(2, cCSMatrix1.cardinality());
      assertEquals(0.5, cCSMatrix1.density(), 0.01);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      Matrix matrix0 = null;
      CCSMatrix cCSMatrix2 = CCSMatrix.from1DArray(1745, 1745, (double[]) null);
      CCSMatrix.block(cCSMatrix0, cCSMatrix1, matrix0, cCSMatrix2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 451;
      doubleArray0[1] = (double) 451;
      doubleArray0[2] = (double) 451;
      doubleArray0[3] = (double) 451;
      doubleArray0[4] = (double) 451;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(451, 451, doubleArray0);
      cCSMatrix0.columnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(45, (double) (byte)0, (Random) mockRandom0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(45, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(45, cCSMatrix0.rows());
      assertNotNull(cCSMatrix0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '46' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.random(885, 48, (double) 48, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      cCSMatrix0.setAll(0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0, cCSMatrix1.columns());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 638;
      doubleArray0[3] = (-1415.5);
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(2000, 638, doubleArray0);
      MatrixProcedure matrixProcedure0 = null;
      int int0 = 63;
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix.randomSymmetric(int0, (double) int0, (Random) mockRandom0);
      cCSMatrix0.eachNonZero(matrixProcedure0);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double double0 = cCSMatrix0.foldRow(451, vectorAccumulator0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)cCSMatrix0.rotate();
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      cCSMatrix0.setAll((-249.00466));
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cRSMatrix0, cCSMatrix0);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(8, 8);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(8, cCSMatrix1.rows());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(8, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      cCSMatrix0.setAll(821.7184369007718);
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      
      cCSMatrix1.setAll(Double.NEGATIVE_INFINITY);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(8, cCSMatrix1.rows());
      assertEquals(Double.NEGATIVE_INFINITY, cCSMatrix1.min(), 0.01);
      assertEquals(64, cCSMatrix1.cardinality());
      assertEquals(8, cCSMatrix1.columns());
      assertEquals(1.0, cCSMatrix1.density(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertNotSame(cCSMatrix1, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1628, 0);
      Matrix matrix0 = cCSMatrix0.rotate();
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray(0, 0, (double[]) null);
      CCSMatrix.block(cCSMatrix0, cCSMatrix1, cCSMatrix1, matrix0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.update(matrixFunction0);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 418;
      doubleArray0[1] = (double) 418;
      doubleArray0[2] = (double) 418;
      doubleArray0[3] = (double) 418;
      CCSMatrix.from1DArray(0, 418, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Double double0 = new Double(0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(0, 702, (double) 0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(436, 3);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CCSMatrix cCSMatrix0 = CCSMatrix.zero(38, 38, 38);
          cCSMatrix0.iteratorOfColumn(38);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.min();
      // Undeclared exception!
      try { 
        cCSMatrix0.getOrElse(4, 4, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(160, (-2139.770716));
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, 2);
      cCSMatrix0.toString();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      CCSMatrix cCSMatrix1 = new CCSMatrix(2, 2, 2);
      cCSMatrix1.copyOfRows(2);
      cCSMatrix1.rotate();
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, 2);
      cCSMatrix0.toString();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2, (double)2, (double)2, (double)2).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(2);
      cCSMatrix1.copyOfRows(2);
      cCSMatrix1.rotate();
      Matrix.identity(2);
      cCSMatrix0.max();
      // Undeclared exception!
      try { 
        cCSMatrix1.getColumn(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, 2);
          OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
          Matrix matrix0 = ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
          cCSMatrix0.iteratorOrNonZeroColumns();
          matrix0.toBinary();
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(447);
      cCSMatrix0.maxInColumn(16);
      cCSMatrix0.getRow(447);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1977L);
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)20;
      mockRandom0.nextBytes(byteArray0);
      MockRandom mockRandom1 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal((byte)20, (byte)0);
      cCSMatrix0.maxInColumn((byte)0);
      // Undeclared exception!
      try { 
        CCSMatrix.randomSymmetric((-2157), (double) (byte)0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2157x-2157
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1933, 1933);
      int[] intArray0 = new int[7];
      intArray0[1] = 1933;
      intArray0[3] = 1933;
      intArray0[4] = 1933;
      intArray0[6] = 1933;
      int[] intArray1 = new int[0];
      cCSMatrix0.select(intArray0, intArray1);
      int int0 = 8;
      int int1 = 3;
      int int2 = 3;
      CCSMatrix cCSMatrix1 = new CCSMatrix(int0, int1, int2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, 2);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorAccumulator0).accumulate();
      matrix0.foldColumns(vectorAccumulator0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, cCSMatrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CCSMatrix.diagonal(446, 446);
      byte[] byteArray0 = new byte[1];
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, 2);
      cCSMatrix0.toString();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.rotate();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(966, 0, 0);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(20, 20, 20);
      cCSMatrix0.nonZeroIteratorOfColumn(20);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 17;
      doubleArray0[1] = (double) 17;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(17, 17.0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(17.0, 17.0, 17.0, 17.0, 459.4034).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.rotate();
      int int0 = 15;
      cCSMatrix0.maxInColumn(15);
      int int1 = 16;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(8, 16, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(38, 38);
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.forEach(consumer0);
      Matrix matrix0 = cCSMatrix0.rotate();
      CCSMatrix.block(cCSMatrix0, matrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(430, 430);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, denseMatrix0, cCSMatrix0, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CCSMatrix.zero(2, 2, 2);
      MockRandom mockRandom0 = new MockRandom();
      int int0 = (-685);
      // Undeclared exception!
      try { 
        CCSMatrix.random((-685), 1745, 1.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -685x1745
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Double double0 = new Double(1.0);
      // Undeclared exception!
      CCSMatrix.random(365, 365, 1.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, 2);
      cCSMatrix0.toString();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2, (double)2, (double)2, (double)2).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(matrixFunction1).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          MockRandom mockRandom0 = new MockRandom();
          Double double0 = new Double(1.0);
          // Undeclared exception!
          CCSMatrix.randomSymmetric(160, 1.0, (Random) mockRandom0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2744);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.transformRow(9, vectorFunction0);
      int int0 = 440;
      CCSMatrix.identity(int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 43;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(43, 43);
      Matrix matrix0 = cCSMatrix0.add((double) 43);
      cCSMatrix0.insert(matrix0);
      cCSMatrix0.toRowMajorSparseMatrix();
      cCSMatrix0.manhattanNorm();
      CCSMatrix cCSMatrix1 = new CCSMatrix(int0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2, 2);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(446, 446);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.iteratorOfColumn(32);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(32, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3899, 3899);
      cCSMatrix0.minInColumn(32);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 451;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(451, 451);
      cCSMatrix0.copyOfRows(411);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)451, (double)451, (double)451, (double)451, (double)451).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      CCSMatrix.identity(int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles(5L);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(160, 89, 137);
      cCSMatrix0.copyOfColumns(32);
      SparseMatrix.identity((-2812));
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.rotate();
      int int0 = 104;
      int int1 = (-476);
      int int2 = 101;
      CCSMatrix.zero(int0, int1, int2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(240);
      cCSMatrix0.getRow((byte)72);
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(38, 38);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '39' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.transformColumn(0, vectorFunction0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(451, 451);
      cCSMatrix0.columnMajorIterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(301, vectorFunction0);
      Matrix matrix0 = cCSMatrix0.rotate();
      CCSMatrix.block(matrix0, cCSMatrix0, cCSMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(44, 44);
      cCSMatrix0.removeFirstColumn();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = cCSMatrix0.toBinary();
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 451;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(451, 451);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      cCSMatrix0.columnMajorIterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)int0, (double)int0, (double)int0, (double)int0, (double)int0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(449);
      CCSMatrix.block(cCSMatrix1, cCSMatrix1, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 1135;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1135);
      int int1 = 2;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2554.0137997709153), (-2554.0137997709153), (-2554.0137997709153), Double.NEGATIVE_INFINITY, (double)1135).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cCSMatrix0.transformColumn(2, vectorFunction0);
      cCSMatrix0.copyOfRows(int0);
      int int2 = (-2514);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(int2, int1);
      CCSMatrix cCSMatrix2 = CCSMatrix.block(matrix0, cCSMatrix1, cCSMatrix0, cCSMatrix1);
      Matrix matrix1 = null;
      CCSMatrix.block(matrix1, cCSMatrix1, cCSMatrix2, matrix1);
      int int3 = 227;
      cCSMatrix2.iteratorOfRow(int3);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1952L);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)17;
      mockRandom0.nextBytes(byteArray0);
      CCSMatrix cCSMatrix0 = new CCSMatrix((byte)17, (byte)17);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(byte)17, Double.POSITIVE_INFINITY, (double)(byte)0, (double)(byte)0, (double)1952L).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn((byte)0, vectorFunction0);
      cCSMatrix0.minInColumn((byte)0);
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      Matrix matrix0 = Matrix.fromCSV("");
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1006, 44);
      cCSMatrix0.copyOfColumns(44);
      SparseMatrix.identity(221);
      CCSMatrix cCSMatrix1 = new CCSMatrix(44, 63, 63);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.update(matrixFunction0);
      cCSMatrix1.rotate();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(63, 44);
      Matrix matrix0 = cCSMatrix0.removeFirstColumn();
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(63, (-263.34));
      CCSMatrix cCSMatrix2 = CCSMatrix.block(matrix0, matrix0, matrix0, cCSMatrix0);
      CCSMatrix.block(matrix0, matrix0, matrix0, cCSMatrix2);
      int int0 = 16;
      cCSMatrix1.iteratorOfRow(int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, 2);
      cCSMatrix0.toDenseMatrix();
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZero(matrixProcedure0);
      byte[] byteArray0 = cCSMatrix0.toBinary();
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(446, 446);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfColumns(446);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)445).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.updateAt(445, 445, matrixFunction0);
      cCSMatrix1.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(446, 446);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfColumns(446);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachInRow(445, vectorProcedure0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.updateAt(36, 36, matrixFunction0);
      cCSMatrix1.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(38);
      int[] intArray0 = new int[9];
      Matrix matrix0 = cCSMatrix0.select(intArray0, intArray0);
      CCSMatrix.block(matrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 451;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(451, 451);
      cCSMatrix0.determinant();
      cCSMatrix0.blankOfRows(int0);
      cCSMatrix0.manhattanNorm();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)int0, (double)int0, (double)int0, (double)int0, (double)int0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.rotate();
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, 2);
      cCSMatrix0.product();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      cCSMatrix0.toColumnMajorSparseMatrix();
      ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CCSMatrix cCSMatrix0 = CCSMatrix.zero(38, 38);
          int[] intArray0 = new int[0];
          // Undeclared exception!
          try { 
            cCSMatrix0.select(intArray0, intArray0);
            fail("Expecting exception: IllegalArgumentException");
          
          } catch(IllegalArgumentException e) {
             //
             // No rows or columns selected.
             //
             verifyException("org.la4j.Matrix", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1952L);
      byte byte0 = (byte)17;
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)17;
      mockRandom0.nextBytes(byteArray0);
      CCSMatrix cCSMatrix0 = new CCSMatrix((byte)17, (byte)17);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2576.226416619601), (-2231.992819474), 0.0, 2266.6863187594076, (-1273.9620655)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn((byte)0, vectorFunction0);
      cCSMatrix0.minInColumn((byte)0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '18' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cCSMatrix0.transform(matrixFunction0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cCSMatrix0.toRowMajorSparseMatrix();
      Matrix matrix1 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      CCSMatrix.block(matrix0, matrix1, matrix0, matrix1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = cCSMatrix0.toDenseMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(2, 2);
      ooPlaceMatricesMultiplication0.partiallyApply(rowMajorSparseMatrix0);
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
  }
}
