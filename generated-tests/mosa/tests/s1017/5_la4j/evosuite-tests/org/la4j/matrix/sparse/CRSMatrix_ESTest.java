/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:50:48 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceInnerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(1419, 1419, (double) 1419, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles((long) 0);
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      cRSMatrix0.toColumnMajorSparseMatrix();
      cRSMatrix0.nonZeroIteratorOfRow(0);
      // Undeclared exception!
      try { 
        cRSMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 129
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix((byte)32, (byte)32, 1);
      double double0 = cRSMatrix0.min();
      double double1 = cRSMatrix0.max();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(0, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(13, 13);
      cRSMatrix0.iterator();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldRows(vectorAccumulator0);
      // Undeclared exception!
      try { 
        cRSMatrix0.setRow(20, (double) 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)40;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.randomSymmetric(10, 1.0, (Random) mockRandom0);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0.09, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.9, cRSMatrix1.max(), 0.01);
      assertEquals(10, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(10, cRSMatrix1.columns());
      assertEquals(9, cRSMatrix1.cardinality());
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = cRSMatrix1.foldRows(vectorAccumulator0);
      assertNotNull(doubleArray0);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.09, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.9, cRSMatrix1.max(), 0.01);
      assertEquals(10, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(10, cRSMatrix1.columns());
      assertEquals(9, cRSMatrix1.cardinality());
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cRSMatrix0.toColumnMajorSparseMatrix();
      assertNotNull(columnMajorSparseMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      
      cRSMatrix1.determinant();
      cRSMatrix0.iteratorOfRow((byte)0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(13);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.random(13, 13, (-2252.7754833), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("Unknown symmetry type: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
          assertNotNull(ooPlaceMatrixByItsTransposeMultiplication0);
          
          RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(19, 19);
          assertNotNull(rowMajorSparseMatrix0);
          assertEquals(19, rowMajorSparseMatrix0.rows());
          assertTrue(rowMajorSparseMatrix0.isRowMajor());
          assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
          assertEquals(19, rowMajorSparseMatrix0.cardinality());
          assertEquals(19.0, rowMajorSparseMatrix0.max(), 0.01);
          assertEquals(19, rowMajorSparseMatrix0.columns());
          assertEquals(0.05263157894736842, rowMajorSparseMatrix0.density(), 0.01);
          
          Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
          matrix0.min();
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity((byte)32);
      Matrix matrix0 = cRSMatrix0.transpose();
      CRSMatrix.block(cRSMatrix0, matrix0, matrix0, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)37;
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(270);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInColumn((byte)37, vectorProcedure0);
      cRSMatrix0.maxInRow(2);
      cRSMatrix0.trace();
      Integer integer0 = new Integer((byte)37);
      cRSMatrix0.removeLastColumn();
      int int0 = (-174);
      double double0 = 6.0;
      CRSMatrix.diagonal(int0, double0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero((int) (byte)6, (int) (byte)6);
      cRSMatrix0.toSparseMatrix();
      cRSMatrix0.determinant();
      cRSMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = 1313;
      CRSMatrix.identity(1313);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1313;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(1313, 1313, doubleArray0);
      cRSMatrix0.copyOfRows(int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.update((MatrixFunction) null);
      cRSMatrix0.min();
      cRSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(298, Double.NEGATIVE_INFINITY);
      cRSMatrix0.iteratorOfNonZeroRows();
      cRSMatrix0.min();
      cRSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.transpose();
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow((-1034));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1034
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 1357;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1357, 4, 2);
      cRSMatrix0.minInRow(4);
      Matrix matrix0 = cRSMatrix0.transpose();
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 303;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(303, 303);
      int int1 = 8;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 8;
      SparseMatrix.from1DArray(303, 8, doubleArray0);
      cRSMatrix0.copyOfShape(int1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(323);
      // Undeclared exception!
      CRSMatrix.random(3218, 16, 1.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SparseMatrix.diagonal(348, 303);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix.random(1251, (-155), 0.0, (Random) mockRandom0);
      int int0 = 3;
      int int1 = 2124;
      CRSMatrix.zero(int0, int1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(19, 1510);
      cRSMatrix0.copyOfShape(1510, 19);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1357);
      cRSMatrix0.maxInRow(4);
      cRSMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1357, 1357);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_LU;
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      cRSMatrix0.maxInRow(4);
      cRSMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix1.transpose();
      cRSMatrix0.setAll(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1357, 4, 2);
      cRSMatrix0.minInRow(4);
      cRSMatrix0.copyOfShape(38, 2);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      cRSMatrix0.euclideanNorm();
      cRSMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SparseMatrix.zero(8, 1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)37;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (byte)37;
      doubleArray0[4] = (double) 8;
      doubleArray0[5] = (double) 8;
      doubleArray0[6] = 3086.753384;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 8;
      SparseMatrix.from1DArray(1, 1, doubleArray0);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3381, 37.0);
      Matrix.zero(0, 1);
      cRSMatrix0.copyOfShape(3381, 8);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 298;
      CRSMatrix cRSMatrix0 = new CRSMatrix(298, 298, 298);
      RowMajorSparseMatrix.zero(2672, 298);
      cRSMatrix0.setAll((-1994.8691688));
      CRSMatrix.identity(int0);
      cRSMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1357);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      cRSMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix1 = CRSMatrix.randomSymmetric(10, 1.0, (Random) mockRandom0);
      cRSMatrix1.transpose();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(48, 48);
      cRSMatrix0.setRow(5, (double) 48);
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(270);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      cRSMatrix0.select((int[]) null, (int[]) null);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      cRSMatrix0.setAll(0.0);
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV(")");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 48;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(48, 48);
      cRSMatrix0.setRow(5, (double) 48);
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = cRSMatrix0.removeLastColumn();
      RowMajorSparseMatrix.block(matrix0, matrix0, matrix0, cRSMatrix0);
      int int1 = 8;
      double double0 = (-1018.753346);
      cRSMatrix0.getOrElse(int1, int0, double0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1);
      cRSMatrix0.sum();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(270);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 42;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 42;
      doubleArray2[1] = (double) 42;
      doubleArray0[2] = doubleArray2;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '6' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(303, 303);
      int[] intArray0 = new int[1];
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.select(intArray0, intArray0);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      CRSMatrix cRSMatrix2 = (CRSMatrix)ooPlaceMatrixByItsTransposeMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix1);
      CRSMatrix.block(cRSMatrix2, cRSMatrix1, cRSMatrix1, cRSMatrix0);
      MockRandom mockRandom0 = new MockRandom();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(19, 19, 19);
      ooPlaceMatrixByItsTransposeMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(270, 270);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(19, 19);
      ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      CRSMatrix.diagonal(32, 2.147483647E9);
      rowMajorSparseMatrix0.transpose();
      ((CRSMatrix) rowMajorSparseMatrix0).max();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(270);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1538.34458), (double)270, (-1538.34458), (double)270, (double)270).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity((byte)32);
      int[] intArray0 = new int[0];
      cRSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(65, 0L);
      cRSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 2;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1357, 7, 2);
      cRSMatrix0.minInRow(7);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(2, vectorFunction0);
      cRSMatrix0.min();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-454.50588589);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(2, 2, doubleArray0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, matrix0, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity((byte)32);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(48, 48);
      cRSMatrix0.setRow(5, (double) 48);
      cRSMatrix0.setRow(5, (-1149.01973057));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity((byte)32);
      cRSMatrix0.setRow(1, Double.POSITIVE_INFINITY);
      MockRandom mockRandom0 = new MockRandom();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(296);
      int[] intArray0 = new int[4];
      cRSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3045.7175558;
      doubleArray0[1] = (double) (byte)32;
      doubleArray0[2] = (double) (byte)32;
      doubleArray0[3] = (double) (byte)32;
      doubleArray0[4] = (double) (byte)32;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)32;
      intArray0[1] = 4;
      intArray0[2] = (int) (byte)32;
      intArray0[3] = (int) (byte)32;
      intArray0[4] = (int) (byte)32;
      intArray0[6] = (int) (byte)32;
      CRSMatrix cRSMatrix0 = new CRSMatrix((byte)32, (byte)32, (byte)32, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.update((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
