/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:53:49 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Charset.defaultCharset();
      ByteString.decodeBase64("okxo.BteString");
      // Undeclared exception!
      try { 
        ByteString.decodeHex("okxo.BteString");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: o
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      boolean boolean0 = byteString0.EMPTY.rangeEquals(4347, (byte[]) null, 4347, 4347);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)106;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64Url();
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte) (-32), (int) (byte) (-32));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Pipe pipe0 = new Pipe(2L);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("out == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.hashCode();
      byteString0.startsWith(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.getByte(65280);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-41);
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      byteString0.sha256();
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-41);
      ByteString byteString0 = ByteString.of(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-41);
      byteArray1[1] = (byte) (-42);
      byteArray1[2] = (byte) (-41);
      byteArray1[3] = (byte)0;
      byteString0.EMPTY.sha512();
      byteArray1[4] = (byte)122;
      byteArray1[5] = (byte) (-41);
      byteArray1[6] = (byte) (-41);
      byteArray1[7] = (byte)0;
      int int0 = byteString0.indexOf(byteArray1, (int) (byte)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteString[] byteStringArray0 = new ByteString[3];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)56;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Y[:a*U");
      ByteString byteString0 = ByteString.decodeHex("");
      ByteString byteString1 = byteString0.sha1();
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.equals(buffer0);
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("EkQ$Bu", 0);
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      // Undeclared exception!
      try { 
        ByteString.decodeHex("aMy#qY;\")c *\" %R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: M
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64();
      boolean boolean0 = byteString0.EMPTY.rangeEquals(4347, (byte[]) null, 4347, 4347);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("base64 == null");
      byteString0.toString();
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      HashingSink hashingSink0 = HashingSink.md5(deflaterSink0);
      ByteString byteString0 = hashingSink0.hash();
      String string0 = byteString0.toString();
      assertEquals("[hex=d01d0cd90f00b000e9000990ecf0007e]", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = ByteString.encodeUtf8("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString0.toString();
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 10, 4844);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=10 byteCount=4844
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteString.decodeBase64("W5Sx}HG ");
      ByteString byteString0 = ByteString.decodeBase64("");
      byteString0.EMPTY.toString();
      byteString0.utf8();
      ByteString.decodeHex("");
      byteString0.base64();
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)62;
      byte byte0 = (byte)20;
      byteArray0[2] = (byte)20;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.indexOf(byteArray0);
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        byteString0.EMPTY.lastIndexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(hashingSource0, inflater0);
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      HashingSource hashingSource1 = HashingSource.sha1(gzipSource0);
      ByteString byteString0 = hashingSource1.hash();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("Failed to close timed out socket ");
      byteString0.base64();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        byteString0.substring(25, 25);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(20)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSource0);
      ByteString byteString0 = hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      int int0 = byteString0.lastIndexOf(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha256(inflaterSource0);
      ByteString byteString0 = hashingSource0.hash();
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString byteString1 = ByteString.of(byteBuffer0);
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("CRC");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("Failed to close timed out socket ");
      assertNotNull(byteString0);
      
      byteString0.utf8();
      byteString0.base64();
      ByteString byteString1 = ByteString.encodeUtf8("\u0015\uFFFD\uFFFDy\uFFFDhrZ,z\u0626y\uFFFD.\uFFFD\uFFFD\u001C\uFFFD\uFFFD");
      assertEquals(36, byteString1.size());
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString2 = byteString0.toAsciiLowercase();
      assertNotSame(byteString2, byteString0);
      assertFalse(byteString2.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)9;
      // Undeclared exception!
      try { 
        ByteString.decodeHex(">p0(W495A'!-Y[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: >
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = ByteString.decodeBase64("Failed to close timed out socket ");
      byteString0.base64();
      byteString0.utf8();
      Buffer buffer0 = new Buffer();
      byteString0.write(buffer0);
      // Undeclared exception!
      try { 
        byteString0.substring(504);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)8;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString0.startsWith(byteString1);
      byteString0.hmacSha256(byteString1);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("U cJW.W^mOjd.");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.rangeEquals((-1303), byteString1, 4, 7);
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.md5();
      boolean boolean0 = byteString0.endsWith(byteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      GzipSink gzipSink0 = new GzipSink(buffer0);
      HashingSink hashingSink0 = HashingSink.sha512(gzipSink0);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.base64();
      byteString0.indexOf(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      assertEquals(32, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Charset.defaultCharset();
      ByteString byteString0 = ByteString.decodeBase64("RfT");
      byteString0.utf8();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("E\uFFFD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: \uFFFD
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      String string0 = "data == null";
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      byteArrayInputStream0.close();
      int int0 = 224;
      try { 
        ByteString.read(byteArrayInputStream0, 224);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.indexOf(byteArray0, 0);
      byteString0.toByteArray();
      // Undeclared exception!
      try { 
        byteString0.substring(2427, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteString byteString0 = ByteString.decodeHex("");
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      // Undeclared exception!
      try { 
        byteString0.substring(1957);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("base64 == null");
      byteString0.utf8();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)117;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Charset.defaultCharset();
      String string0 = byteString0.base64();
      assertEquals("YmFzZTY0ID09IG51bGw=", string0);
      
      Inflater inflater0 = new Inflater(false);
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      byteBuffer0.clear();
      charset0.decode(byteBuffer0);
      ByteString byteString0 = ByteString.encodeString("RfT", charset0);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[1] = byteString0;
      byteStringArray0[1] = byteString0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)56;
      ByteString byteString1 = byteString0.hmacSha256(byteString0);
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        ByteString.decodeHex("5I2A}s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: I
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("endIndex > length(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: n
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.equals(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.indexOf(byteString0, 64);
      byteString1.EMPTY.hashCode = 52;
      ByteString byteString2 = ByteString.decodeBase64("tFZlmU4d`k^oNtP'{");
      assertNull(byteString2);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = ByteString.encodeUtf8("base64 == null");
      byteString0.endsWith(byteArray0);
      byteString0.toString();
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (int) (byte)0, 56);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=0 byteCount=56
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.asByteBuffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      hashingSink0.hash();
      ByteString byteString1 = ByteString.encodeUtf8("g");
      byteString1.utf8();
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, 111);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      byteString0.EMPTY.string(charset0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString1 = ByteString.decodeBase64("tFZlmU4d`k^oNtP'{");
      assertNull(byteString1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.readByteString();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      HashingSink.sha512(buffer0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString1.toAsciiLowercase();
      // Undeclared exception!
      try { 
        byteString1.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-9223372036854775808");
      ByteString.decodeBase64("-9223372036854775808");
      String string0 = "C";
      // Undeclared exception!
      try { 
        ByteString.decodeHex("-9223372036854775808");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: -
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)15;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)12, 101);
      // Undeclared exception!
      try { 
        ByteString.read(byteArrayInputStream0, (-36));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -36
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)76;
      ByteString byteString0 = ByteString.decodeBase64("Failed to close timed out socket ");
      byteString0.toString();
      byteString0.base64();
      byteString0.utf8();
      byteString0.lastIndexOf(byteString0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      ByteString byteString1 = ByteString.read(byteArrayInputStream0, 0);
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)110;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteString0);
      byteString0.base64Url();
      String string0 = null;
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)17;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hex();
      byteString0.asByteBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        byteString0.write(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ByteString.decodeBase64("T0rdj]`;+|T6PAN$=r");
      ByteString.decodeBase64("T0rdj]`;+|T6PAN$=r");
      ByteString byteString0 = ByteString.decodeHex("");
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((ByteString) null, (int) (byte)9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteString byteString0 = new ByteString((byte[]) null);
      int int0 = 538;
      byteString0.EMPTY.hashCode = 538;
      int int1 = (-91);
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, (-91), (-2681));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      byteString0.base64();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.EMPTY.rangeEquals((-4384), byteArray0, 296, 0);
      byteString0.EMPTY.startsWith(byteString1);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString2 = ByteString.encodeString("v4b,j<<.", charset0);
      assertNotSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("base64 == nuwl");
      byteString0.hashCode();
      assertEquals(14, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      byteString0.base64();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Charset charset0 = null;
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "base64 == null";
      Charset charset0 = null;
      // Undeclared exception!
      try { 
        ByteString.encodeString("base64 == null", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)46;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("qY=wQwr0t{");
      ByteString byteString0 = ByteString.encodeString("qY=wQwr0t{", charset0);
      byteString0.toString();
      byteString0.toAsciiUppercase();
      Sink sink0 = null;
      RealBufferedSink realBufferedSink0 = null;
      try {
        realBufferedSink0 = new RealBufferedSink((Sink) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = ByteString.encodeUtf8("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString0.hex();
      byteString0.EMPTY.hashCode();
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 10, 4844);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=10 byteCount=4844
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ByteString byteString1 = byteString0.substring(0);
      byteString0.asByteBuffer();
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.md5();
      ByteString byteString2 = byteString1.toAsciiUppercase();
      byteString1.hmacSha1(byteString2);
      assertSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      Charset.defaultCharset();
      int int0 = 5;
      byteString1.substring(5);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString1.endsWith(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      // Undeclared exception!
      try { 
        byteString1.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      Charset.defaultCharset();
      ByteString byteString2 = byteString1.substring(5);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = byteString1.endsWith(byteArray0);
      assertTrue(boolean0);
      
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
      
      int int1 = byteString2.compareTo(byteString0);
      assertEquals(3, byteString2.size());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)8;
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      int int0 = byteString1.indexOf(byteString0, (int) (byte)8);
      int int1 = byteString1.compareTo(byteString0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)53;
      byteArray0[0] = (byte)6;
      byteArray0[4] = (byte)6;
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      int int0 = byteString1.indexOf(byteString0, (int) (byte)108);
      int int1 = byteString1.compareTo(byteString0);
      assertTrue(int1 == int0);
      
      String string0 = byteString1.base64();
      assertEquals("Bkw1AAYAAAA=", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      Charset.defaultCharset();
      ByteString byteString2 = byteString1.substring(5);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = byteString1.endsWith(byteArray0);
      assertTrue(boolean0);
      
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(0, int0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=dddddddddddddddd]", string0);
      
      int int1 = byteString2.lastIndexOf(byteArray0, 0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)101;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[8];
      ByteString byteString0 = ByteString.decodeBase64("Failed to close timed out socket ");
      String string0 = byteString0.toString();
      assertEquals("[hex=55d0d5b010d0b15d1bbd10ddb01d1d0dbd5b05d0]", string0);
      
      byteString0.hex();
      byteString0.utf8();
      Charset.defaultCharset();
      ByteString byteString1 = byteString0.substring(5);
      byteString1.endsWith(byteArray1);
      byteString1.lastIndexOf(byteArray1);
      int int0 = byteString1.compareTo(byteString0);
      assertEquals(1, int0);
      assertEquals(15, byteString1.size());
      
      ByteString.codePointIndexToCharIndex("", 270);
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString1;
      byteStringArray0[4] = byteString1;
      byteStringArray0[5] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      ByteString byteString2 = options0.get(5);
      int int1 = byteString2.indexOf(byteArray1, (-844));
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("base64 == null");
      byteString0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString0.equals(byteString0);
      Charset.defaultCharset();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byteString0.base64();
      Inflater inflater0 = new Inflater(true);
      assertTrue(inflater0.needsInput());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[14];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      Charset.defaultCharset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ByteString byteString2 = ByteString.of(byteArray0);
      ByteString byteString3 = ByteString.encodeUtf8("[text=");
      int int1 = byteString2.EMPTY.indexOf(byteArray0);
      assertEquals((-1), int1);
      
      byteString3.base64Url();
      boolean boolean0 = byteString2.equals(byteString0);
      assertTrue(boolean0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byteString0.endsWith(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=dddddddddddddddddddddddddddd]", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("Failed to close timed out socket ");
      String string0 = byteString0.toString();
      assertEquals("[hex=55d0d5b010d0b15d1bbd10ddb01d1d0dbd5b05d0]", string0);
      
      byteString0.base64();
      byteString0.utf8();
      Buffer buffer0 = new Buffer();
      byteString0.write(buffer0);
      ByteString byteString1 = buffer0.readByteString();
      HashingSink.sha512(buffer0);
      ByteString byteString2 = byteString0.toAsciiUppercase();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = byteString2.asByteBuffer();
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertEquals("\u0015\uFFFD\uFFFDY\uFFFDHRZ,Z\uFFFD\uFFFDY\uFFFD.\uFFFD\uFFFD\u001C\uFFFD\uFFFD", charBuffer0.toString());
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString3 = ByteString.of(byteBuffer0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = byteString2.compareTo(byteString3);
      assertEquals(1, int0);
      
      Deflater deflater0 = new Deflater(1);
      byteString1.hashCode();
      assertFalse(byteString1.equals((Object)byteString2));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("Failed to close timed out socket ");
      byteString0.utf8();
      Buffer buffer0 = new Buffer();
      byteString0.write(buffer0);
      ByteString[] byteStringArray0 = new ByteString[8];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[7] = byteString0;
      byteStringArray0[3] = byteString0;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = byteString0.rangeEquals((-1), byteString0, 3, (-4754));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      byteString0.write(buffer0);
      ByteString byteString1 = buffer0.readByteString();
      HashingSink.sha512(buffer0);
      ByteString byteString2 = byteString1.toAsciiUppercase();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      buffer0.read(byteArray0);
      ByteString byteString3 = byteString2.hmacSha512(byteString1);
      byteString0.asByteBuffer();
      byteString3.base64Url();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "akELWpkqYTo-eR3DNozdYYyNbkdAvH8YekXnsoO3Mv_vW9VsmXnk4btC923odoikjWKfu-jnA6yBmVMlR_Amfg==");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-122);
      byteArray1[1] = (byte) (-122);
      byteArray1[2] = (byte) (-90);
      byteArray1[3] = (byte)19;
      byteArray1[4] = (byte)113;
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "akELWpkqYTo-eR3DNozdYYyNbkdAvH8YekXnsoO3Mv_vW9VsmXnk4btC923odoikjWKfu-jnA6yBmVMlR_Amfg==");
      HashingSink.hmacSha512(buffer0, byteString0);
      String string0 = byteString3.toString();
      assertEquals("[hex=dd05d05d001dd50d0db051b00d0b11d50b01dd0b0d0bbd50bd05db01000b01dddd5015db00b0d0d50001dbd1d0bd00d001d10d00d0dbd0db050050150bdd1dbd]", string0);
      
      ByteString byteString4 = ByteString.decodeHex("");
      realBufferedSource0.indexOfElement(byteString4);
      byteString4.write(realBufferedSource0.buffer);
      ByteString byteString5 = byteString2.substring(0);
      ByteString byteString6 = ByteString.encodeUtf8("akELWpkqYTo-eR3DNozdYYyNbkdAvH8YekXnsoO3Mv_vW9VsmXnk4btC923odoikjWKfu-jnA6yBmVMlR_Amfg==");
      String string1 = byteString1.toString();
      assertEquals("[hex=dddddddddddddddd]", string1);
      
      realBufferedSource0.readByteString();
      byteString5.toByteArray();
      assertSame(byteString5, byteString1);
      
      String string2 = byteString6.toString();
      assertEquals("[size=88 text=akELWpkqYTo-eR3DNozdYYyNbkdAvH8YekXnsoO3Mv_vW9VsmXnk4btC923odoik\u2026]", string2);
      
      ByteString byteString7 = new ByteString(byteArray0);
      assertTrue(byteString7.equals((Object)byteString2));
  }
}
