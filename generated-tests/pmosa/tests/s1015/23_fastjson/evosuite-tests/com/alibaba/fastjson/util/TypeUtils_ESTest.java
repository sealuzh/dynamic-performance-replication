/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 07:07:52 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.RenderingHints;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.LongBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CodingErrorAction;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.DoubleBinaryOperator;
import java.util.function.ToDoubleFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      TypeUtils.unwrapOptional(class0);
      Class<SQLWarning> class1 = SQLWarning.class;
      TypeUtils.getSerializeFeatures(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : class java.sql.SQLWarning
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Exception> class0 = Exception.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.loadClass("]#i)qru&SzUVQce");
      Locale locale0 = Locale.ROOT;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class0;
      dateFormatSymbols0.getZoneStrings();
      typeArray0[1] = (Type) class0;
      Locale.getISOCountries();
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, (Type) null);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.setAutoTypeSupport(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) dateFormatSymbols0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@5f47d5ec
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) null;
      typeArray0[1] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[1]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@e1781
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("<Em<&pogMjbxb_", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. <Em<&pogMjbxb_
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : class com.alibaba.fastjson.parser.deserializer.NumberDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      Class<Byte> class1 = Byte.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0, true);
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(stackOverflowError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.StackOverflowError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Class<Float> class0 = Float.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TypeUtils.loadClass("getgetCause");
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      assertNotNull(type0);
      
      boolean boolean0 = TypeUtils.isNumber("<Em<&pogMjbxb_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      TypeUtils.isPath(class0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      TypeUtils.clearClassMapping();
      TypeUtils.isNumber("Tml}");
      Class<MessageFormat> class1 = MessageFormat.class;
      String string0 = "";
      ThreadGroup threadGroup0 = new ThreadGroup("");
      threadGroup0.getParent();
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "{");
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup1, mockThread0);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      classLoader0.setDefaultAssertionStatus(true);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      parserConfig0.createJavaBeanDeserializer(class0, class0);
      TypeUtils.cast((Object) null, class1, parserConfig0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.parser.ParserConfig@99
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<Long> class0 = Long.class;
      TypeUtils.isProxy(class0);
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "zkCPDQsQ4vV]PI", fieldArray0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<OutOfMemoryError> class0 = OutOfMemoryError.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      int int0 = Calendar.FEBRUARY;
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("unzip bytes error.");
      String string0 = TypeUtils.castToString(noSuchMethodError0);
      assertNotNull(string0);
      
      String string1 = TypeUtils.decapitalize("java.lang.NoSuchMethodError@0000000001");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      ParserConfig parserConfig0 = new ParserConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      parserConfig0.setDefaultClassLoader(classLoader0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, false, propertyNamingStrategy0);
      ClassLoader.getSystemClassLoader();
      Class<MockMinguoDate> class1 = MockMinguoDate.class;
      InstantiationException instantiationException0 = new InstantiationException();
      Class<MockMinguoDate> class2 = MockMinguoDate.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) instantiationException0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.isGenericParamType(class0);
      TypeUtils.decapitalize((String) null);
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      TypeUtils.getRawClass(class0);
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      int int0 = TypeUtils.getParserFeatures(class1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("~[Rd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : ~[Rd
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("java.util.Collections$UnmodifiableMap", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.util.Collections$UnmodifiableMap -> com.alibaba.fastjson.parser.deserializer.NumberDeserializer
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte) (-101);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class [D
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, true);
      String string0 = null;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) sQLRecoverableException0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLNonTransientConnectionException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "field not found. ";
      String string1 = "Ljava.util.concurrent.ConcurrentSkipListMap";
      ThreadGroup threadGroup0 = new ThreadGroup("Ljava.util.concurrent.ConcurrentSkipListMap");
      String string2 = "Gj13";
      MockThread mockThread0 = new MockThread("Gj13");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "Gj13", 478L);
      MockThread mockThread2 = new MockThread(mockThread1, "");
      MockThread mockThread3 = new MockThread(threadGroup0, mockThread2, "aGzCE0uQ3*:}V_:O");
      ClassLoader classLoader0 = mockThread3.getContextClassLoader();
      TypeUtils.loadClass("field not found. ", classLoader0, true);
      String string3 = "unclosed.str";
      TypeUtils.loadClass("unclosed.str", classLoader0);
      String string4 = null;
      Class<InterruptedException> class0 = InterruptedException.class;
      TypeUtils.loadClass((String) null, classLoader0);
      Class<JobAttributes> class1 = JobAttributes.class;
      String string5 = "p/AIQ^GQ9";
      Field[] fieldArray0 = new Field[8];
      Map<String, Field> map0 = null;
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("getSuppressed", (Map<String, Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      TypeUtils.getParserFeatures(class0);
      BigDecimal bigDecimal0 = new BigDecimal(2278L);
      BigDecimal.valueOf((long) 0, 0);
      TypeUtils.castToSqlTime(bigDecimal0);
      TypeUtils.loadClass("Yu", (ClassLoader) null, false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Negative initial size: ");
      sQLTimeoutException0.printStackTrace();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("Negative initial size: ", "N3", 0);
      sQLTimeoutException0.setNextException(sQLTimeoutException1);
      SQLTransientException sQLTransientException0 = new SQLTransientException("Negative initial size: ", sQLTimeoutException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.sql.SQLTransientException: Negative initial size: 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.isPath(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class com.alibaba.fastjson.parser.deserializer.EnumDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getSuppressed();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      ClassLoader classLoader0 = null;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      parserConfig0.compatibleWithJavaBean = true;
      parserConfig0.addDeny("java.util.OptionalInt");
      parserConfig0.setAutoTypeSupport(true);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) hashtable0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, public com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer(com.alibaba.fastjson.parser.ParserConfig,java.lang.Class<?>)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      assertNotNull(type0);
      
      long long0 = TypeUtils.fnv1a_64("L");
      assertEquals((-5808516191223665813L), long0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils.getCollectionItemType(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : class com.alibaba.fastjson.parser.deserializer.NumberDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(0L);
      atomicLong0.getAndDecrement();
      atomicLong0.decrementAndGet();
      atomicLong0.getAndIncrement();
      TypeUtils.castToLong(atomicLong0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      TypeUtils.getParserFeatures(class0);
      Class<Jdk8DateCodec> class1 = Jdk8DateCodec.class;
      TypeUtils.getSerializeFeatures(class1);
      TypeUtils.loadClass("Ljava.awt.Point");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte)111;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Float float0 = TypeUtils.castToFloat(bigInteger0);
      assertEquals(2.02147686E14F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<OutOfMemoryError> class0 = OutOfMemoryError.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(treeSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      ConcurrentHashMap<SQLException, NoSuchMethodException> concurrentHashMap0 = new ConcurrentHashMap<SQLException, NoSuchMethodException>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      Class<MockCalendar> class0 = MockCalendar.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("Lorg.springframework.util.LinkedMultiValueMap", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. Lorg.springframework.util.LinkedMultiValueMap
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<HttpCookie> class0 = HttpCookie.class;
      int int0 = Opcodes.POP;
      Class<OptionalCodec> class1 = OptionalCodec.class;
      int int1 = TypeUtils.getSerializeFeatures(class1);
      assertEquals(0, int1);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      TypeUtils.getClass(type0);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("=`:7HQ7f&\"]Dh'w");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(illegalThreadStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.IllegalThreadStateException: =`:7HQ7f&\"]Dh'w
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals("class java.lang.Object", class1.toString());
      assertNotNull(class1);
      
      boolean boolean1 = TypeUtils.isProxy(class0);
      assertTrue(boolean1 == boolean0);
      
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TypeUtils.isNumber("f");
      Locale locale0 = Locale.GERMANY;
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(decimalFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.text.DecimalFormatSymbols@10782
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put((String) null, (String) null);
      BiConsumer<Object, String> biConsumer0 = (BiConsumer<Object, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      identityHashMap0.forEach(biConsumer0);
      identityHashMap0.values();
      identityHashMap0.put("X0Xq}", "!{8mHp");
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      TypeUtils.isGenericParamType(class0);
      TypeUtils.clearClassMapping();
      Class<Method> class1 = Method.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) list0, class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.reflect.Method
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, false);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Locale> class0 = Locale.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      Locale locale0 = Locale.ITALY;
      MockThread mockThread0 = new MockThread("fastjson.parser.deny");
      MockThread mockThread1 = new MockThread(mockThread0);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      parserConfig0.setDefaultClassLoader(classLoader0);
      ParserConfig.global = parserConfig0;
      Class<PropertyProcessableDeserializer> class1 = PropertyProcessableDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(3089);
      identityHashMap0.replace((String) null, "fastjson.parser.autoTypeSupport");
      parserConfig0.addAccept("Ljava.awt.Rectangle");
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) null, true, (PropertyNamingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<Object> class0 = Object.class;
      TypeUtils.computeGetters(class0, map0, false);
      Class<Long> class1 = Long.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class long
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) null, true, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.isNumber("9Z)N6U|wa");
      MockThread mockThread0 = new MockThread((Runnable) null, ", minimumCapacity=");
      MockThread.getAllStackTraces();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.setPackageAssertionStatus("Ljava.awt.Rectangle", false);
      TypeUtils.loadClass(", minimumCapacity=", classLoader0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(mockThaiBuddhistDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@79af1cfb
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      TypeUtils.isProxy(class0);
      TypeUtils.getCollectionItemType(class0);
      TypeUtils.getClass((Type) class0);
      Class<AtomicInteger> class1 = AtomicInteger.class;
      TypeUtils.isProxy(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils.castToDate((Object) null);
      TypeUtils.castToByte((Object) null);
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.getClass((Type) genericArrayType0);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) propertyNamingStrategy0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Type type1 = TypeUtils.getGenericParamType(type0);
      TypeUtils.getClass(type1);
      Class<NoSuchFieldError> class0 = NoSuchFieldError.class;
      TypeUtils.isKotlin(class0);
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      SQLTransientException sQLTransientException0 = new SQLTransientException("Ljava.awt.Color", "|lW45k)'_zr(~x");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("xRi~756=q[Kti}hslW", "|lW45k)'_zr(~x", (-750), sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLSyntaxErrorException0);
      InternalError internalError0 = new InternalError("Ljava.awt.Color", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Ljava.awt.Color", internalError0);
      concurrentHashMap0.replace("xRi~756=q[Kti}hslW", (Object) sQLFeatureNotSupportedException0, (Object) "|lW45k)'_zr(~x");
      JSONObject jSONObject0 = new JSONObject(concurrentHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "osm(", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.castToString(class0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(1596);
      identityHashMap0.put("java.lang.Class@0000000001", "list_item_value");
      identityHashMap0.put("java.lang.Class@0000000001", "java.lang.Class@0000000001");
      identityHashMap0.put("j", "getDeclaringClass");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, false, propertyNamingStrategy0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(true);
      Class<?> class2 = TypeUtils.loadClass("java.util.Optional", classLoader0, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : class java.util.Optional
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      ThreadGroup threadGroup0 = new ThreadGroup("com.alibaba.fastjson.util.IOUtils");
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, "javax.persistence.OneToMany", 1L);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.util.IOUtils", classLoader0, false);
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<TypeNotPresentException> class0 = TypeNotPresentException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, map0, (Map<String, Field>) linkedHashMap0, true, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ConcurrentHashMap<SQLException, NoSuchMethodException> concurrentHashMap0 = new ConcurrentHashMap<SQLException, NoSuchMethodException>();
      boolean boolean0 = new Boolean("4Z");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<IllegalStateException> class0 = IllegalStateException.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(type0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"$ja\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Locale> class0 = Locale.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.util.Locale
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Type type0 = null;
      TypeUtils.unwrapOptional((Type) null);
      TypeUtils.isHibernateInitialized((Object) null);
      Class<Exception> class0 = Exception.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceKeys(7179336928365889465L, biFunction0);
      ToDoubleFunction<String> toDoubleFunction0 = (ToDoubleFunction<String>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(toDoubleFunction0).applyAsDouble(anyString());
      concurrentHashMap0.put("Dx5!gXd/G", "5&TN1QE3oaYWJ");
      DoubleBinaryOperator doubleBinaryOperator0 = mock(DoubleBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(doubleBinaryOperator0).applyAsDouble(anyDouble() , anyDouble());
      concurrentHashMap0.reduceValuesToDouble(7179336928365889465L, toDoubleFunction0, 0.0, doubleBinaryOperator0);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0, false);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TypeUtils.isNumber("+``t9`@P]bo&l#-J1");
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(type0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass(genericArrayType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.getKoltinConstructorParameters(class0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(1596);
      String string0 = "j";
      String string1 = "getDeclaringClass";
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, false, propertyNamingStrategy0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) identityHashMap0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TypeUtils.isNumber("+``t9`@P]bo&l#-J1");
      System.setCurrentTimeMillis(978L);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("+``t9`@P]bo&l#-J1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.isNumber("9Z)N6U|wa");
      MockThread mockThread0 = new MockThread((Runnable) null, ", minimumCapacity=");
      MockThread.getAllStackTraces();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.setPackageAssertionStatus("Ljava.awt.Rectangle", false);
      TypeUtils.loadClass(", minimumCapacity=", classLoader0);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)111;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("Ljava.awt.Rectangle");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      JSON.DEFAULT_GENERATE_FEATURE = 56;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, map0, (Map<String, Field>) linkedHashMap0, true, propertyNamingStrategy0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "V\"L");
      byteArray0[1] = (byte) (-79);
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(bitSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 15}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TypeUtils.toLocale("3W?}<k");
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("3W?}<k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 3W?}<k
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put((String) null, "([C)Z");
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Class<StackTraceElementDeserializer> class1 = StackTraceElementDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      Class<SQLException> class2 = SQLException.class;
      boolean boolean0 = TypeUtils.isKotlin(class2);
      assertFalse(boolean0);
      
      Class class3 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals("class java.lang.Object", class3.toString());
      assertNotNull(class3);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "LYu";
      stringArray0[1] = ",__W;;";
      stringArray0[2] = "com.google.common.collect.";
      stringArray0[3] = "getDeclaringClass";
      stringArray0[4] = ".O B:hW$^?JD##$";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      Locale locale0 = Locale.PRC;
      MessageFormat messageFormat0 = new MessageFormat("com.google.common.collect.", locale0);
      simplePropertyPreFilter0.apply((JSONSerializer) null, messageFormat0, "0001-01-01T00:00:00+08:00");
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Type type1 = TypeUtils.getGenericParamType(type0);
      TypeUtils.getClass(type1);
      Class<NoSuchFieldError> class2 = NoSuchFieldError.class;
      TypeUtils.isKotlin(class2);
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      Point point0 = new Point(55232, (-1490));
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("Ljava.awt.Color", (ClassLoader) aSMClassLoader0);
      InstantiationException instantiationException0 = new InstantiationException("Ljava.awt.Color");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) instantiationException0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"@type\":\"java.lang.InstantiationException\",\"localizedMessage\":\"Ljava.awt.Color\",\"message\":\"Ljava.awt.Color\",\"stackTrace\":[{\"className\":\"sun.reflect.GeneratedConstructorAccessor70\",\"lineNumber\":-1,\"methodName\":\"newInstance\",\"nativeMethod\":false},{\"className\":\"sun.reflect.DelegatingConstructorAccessorImpl\",\"fileName\":\"DelegatingConstructorAccessorImpl.java\",\"lineNumber\":45,\"methodName\":\"newInstance\",\"nativeMethod\":false},{\"className\":\"java.lang.reflect.Constructor\",\"fileName\":\"Constructor.java\",\"lineNumber\":423,\"methodName\":\"newInstance\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.statements.ConstructorStatement$1\",\"fileName\":\"ConstructorStatement.java\",\"lineNumber\":233,\"methodName\":\"execute\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.statements.AbstractStatement\",\"fileName\":\"AbstractStatement.java\",\"lineNumber\":169,\"methodName\":\"exceptionHandler\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.statements.ConstructorStatement\",\"fileName\":\"ConstructorStatement.java\",\"lineNumber\":188,\"methodName\":\"execute\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.execution.TestRunnable\",\"fileName\":\"TestRunnable.java\",\"lineNumber\":307,\"methodName\":\"executeStatements\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.execution.TestRunnable\",\"fileName\":\"TestRunnable.java\",\"lineNumber\":213,\"methodName\":\"call\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.execution.TestRunnable\",\"fileName\":\"TestRunnable.java\",\"lineNumber\":55,\"methodName\":\"call\",\"nativeMethod\":false},{\"className\":\"java.util.concurrent.FutureTask\",\"fileName\":\"FutureTask.java\",\"lineNumber\":266,\"methodName\":\"run\",\"nativeMethod\":false},{\"className\":\"java.util.concurrent.ThreadPoolExecutor\",\"fileName\":\"ThreadPoolExecutor.java\",\"lineNumber\":1142,\"methodName\":\"runWorker\",\"nativeMethod\":false},{\"className\":\"java.util.concurrent.ThreadPoolExecutor$Worker\",\"fileName\":\"ThreadPoolExecutor.java\",\"lineNumber\":617,\"methodName\":\"run\",\"nativeMethod\":false},{\"className\":\"java.lang.Thread\",\"fileName\":\"Thread.java\",\"lineNumber\":745,\"methodName\":\"run\",\"nativeMethod\":false}]}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      String string0 = "9Z)N6U|wa";
      TypeUtils.isNumber("9Z)N6U|wa");
      Locale.getISOCountries();
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], typeArray0[3]);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.setAutoTypeSupport(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) ", minimumCapacity=", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TypeUtils.isNumber("+``t9`@P]bo&l#-J1");
      Class<Float> class0 = Float.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.Float
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(gridBagConstraints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.awt.GridBagConstraints@3a1f850b
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      MockThread.getAllStackTraces();
      ThreadGroup threadGroup0 = new ThreadGroup("l");
      ThreadGroup threadGroup1 = new ThreadGroup("5t8F8v");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Ljava.util.concurrent.ConcurrentSkipListMap", "Ljava.util.concurrent.ConcurrentSkipListMap");
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : class [B
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Class<DataTruncation> class0 = DataTruncation.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(serializeBeanInfo0);
      Class<?> class1 = javaBeanSerializer0.getType();
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class2).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(type0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"$ja\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, true);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.sql.SQLTimeoutException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class [B", class1.toString());
      
      MockThread.getAllStackTraces();
      ThreadGroup threadGroup0 = new ThreadGroup("l");
      long long0 = TypeUtils.fnv1a_64_lower("NULL");
      assertEquals(6601085983368743140L, long0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.getClass((Type) genericArrayType0);
      ArrayList<OptionalCodec> arrayList0 = new ArrayList<OptionalCodec>();
      long long0 = TypeUtils.fnv1a_64_lower("");
      assertEquals((-3750763034362895579L), long0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      MockDate mockDate0 = new MockDate();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      long long0 = TypeUtils.fnv1a_64_lower(",ko,z");
      assertEquals((-1996408777216141637L), long0);
      
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Class<Float> class0 = Float.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<SecurityException> class1 = SecurityException.class;
      parserConfig0.checkAutoType("<2;P ]", class1);
      Class class2 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertFalse(class2.isInterface());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Uxje~N0}Ds~4Y}uC");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : class [Z
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.isNumber("9Z)N6U|wa");
      MockThread mockThread0 = new MockThread((Runnable) null, ", minimumCapacity=");
      MockThread.getAllStackTraces();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.clearAssertionStatus();
      classLoader0.setPackageAssertionStatus("gU%|G'u[tHT~wR", true);
      TypeUtils.loadClass(", minimumCapacity=", classLoader0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      TypeUtils.isGenericParamType((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(", minimumCapacity=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : , minimumCapacity=
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getCollectionItemType(type0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : float
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      System.setCurrentTimeMillis(982L);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils.toLocale("*Fh,Xlyg5_cb\"zSUKky");
      TimeZone.getAvailableIDs();
      Date date0 = null;
      try {
        date0 = new MockDate((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("m,SO,mXbv");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      TypeUtils.toLocale("*Fh,Xlyg5_cb\"zSUKky");
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Class<IllegalStateException> class0 = IllegalStateException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      WeakHashMap<PageAttributes, GridBagConstraints> weakHashMap0 = new WeakHashMap<PageAttributes, GridBagConstraints>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      MockMinguoDate mockMinguoDate0 = TypeUtils.castToJavaBean((Object) map0, class0);
      assertNotNull(mockMinguoDate0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "unsupported array put operation. ";
      TypeUtils.isNumber("unsupported array put operation. ");
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class long
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      int int0 = Calendar.FEBRUARY;
      Class<IndexOutOfBoundsException> class1 = IndexOutOfBoundsException.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("getgetCausRe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : getgetCausRe
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      TypeUtils.getParserFeatures(class1);
      TypeUtils.isGenericParamType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : class com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("evalSize error : ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"evalSize error : \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("}`XrcuqV+OXc");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"}`XrcuqV+OXc\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("sm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : sm
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "unsupported array put operation. ", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<NumberFormat> class0 = NumberFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "osm(", (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.NumberFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e.<Ih{\u0004!IDg3'*:p- ");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("unsupported array put operation. ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"unsupported array put operation. \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(parameterizedTypeImpl0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(756);
      TypeUtils.castToBoolean(atomicInteger0);
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.isPath(class0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte)41;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Boolean boolean0 = TypeUtils.castToBoolean(bigInteger0);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      long long0 = TypeUtils.fnv1a_64_lower("can not cast oracle.sql.DATE to Date");
      assertEquals(921507904421891818L, long0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Boolean boolean0 = Boolean.FALSE;
      ParserConfig parserConfig0 = new ParserConfig(true);
      SecurityException securityException0 = new SecurityException("fastjson.parser.autoTypeAccept");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.deny", securityException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLTimeoutException0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      Class<NumberFormatException> class1 = NumberFormatException.class;
      TypeUtils.getSerializeFeatures(class1);
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[2]);
      parameterizedTypeImpl0.getTypeName();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.isProxy(class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Type type0 = TypeUtils.unwrapOptional(class0);
      TypeUtils.unwrapOptional(type0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.unwrapOptional(class0);
      Charset charset0 = Charset.defaultCharset();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      ByteBuffer byteBuffer0 = charset0.encode("getClass");
      CharBuffer charBuffer0 = uTF8Decoder0.decode(byteBuffer0);
      CodingErrorAction codingErrorAction0 = CodingErrorAction.IGNORE;
      uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      LongBuffer longBuffer0 = byteBuffer1.asLongBuffer();
      BitSet bitSet0 = BitSet.valueOf(longBuffer0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(bitSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {0, 1, 4, 5, 6, 8, 9, 12, 13, 14, 16, 21, 22, 26, 27, 29, 30, 32, 33, 38, 42, 44, 45, 46, 48, 50, 53, 54, 56, 57, 58, 61, 62}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedHashMap<NoClassDefFoundError, SqlDateDeserializer> linkedHashMap0 = new LinkedHashMap<NoClassDefFoundError, SqlDateDeserializer>();
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError(";09;j");
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer();
      linkedHashMap0.put(noClassDefFoundError0, sqlDateDeserializer0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(linkedHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<MapDeserializer> class0 = MapDeserializer.class;
      TypeUtils.isKotlin(class0);
      String[] stringArray0 = ParserConfig.DENYS;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("~[Rd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : ~[Rd
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "unsupported array put operation. ";
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.getKoltinConstructorParameters(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("unsupported array put operation. ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : unsupported array put operation. 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "4Z", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.DataTruncation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("4Z");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"4Z\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      Class<Integer> class0 = Integer.TYPE;
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertSame(type0, parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      TypeUtils.isKotlin(class0);
      Class<Collator> class1 = Collator.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      Float float0 = new Float(54.53462174042);
      TypeUtils.castToSqlDate(float0);
      ThreadGroup threadGroup0 = new ThreadGroup("c;XRN-o^4s!IYgr");
      Class<?> class2 = TypeUtils.getCollectionItemClass(class0);
      Class<?> class3 = TypeUtils.getCollectionItemClass(class0);
      Class<?> class4 = TypeUtils.getCollectionItemClass(class3);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap1 = new ConcurrentHashMap<String, String>();
      Class<BufferCapabilities> class5 = BufferCapabilities.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class5, (Map<String, String>) hashMap0, false);
      TypeUtils.getKoltinConstructorParameters(class3);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException((Throwable) null);
      Type[] typeArray0 = new Type[5];
      Class<?> class6 = TypeUtils.getClass((Type) class2);
      typeArray0[0] = (Type) class6;
      typeArray0[1] = (Type) class2;
      typeArray0[2] = (Type) class4;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class4;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class3);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockIllegalStateException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. org.evosuite.runtime.mock.java.lang.MockIllegalStateException
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TypeUtils.decapitalize("#mux#pR^~0~@");
      System.setCurrentTimeMillis(2278L);
      TypeUtils.isHibernateInitialized((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("#mux#pR^~0~@");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "osm(";
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("osm(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TypeUtils.isNumber("+``t9`@P]bo&l#-J1");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Float float0 = new Float(2143.5F);
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(float0);
      assertEquals((byte)95, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TypeUtils.isNumber("+``t9`@P]bo&l#-J1");
      Class<Float> class0 = Float.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      Hashtable<Long, MockDate> hashtable0 = new Hashtable<Long, MockDate>();
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      MockSimpleDateFormat mockSimpleDateFormat0 = TypeUtils.castToJavaBean((Object) hashtable0, class1);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "osm(";
      Class<Integer> class0 = Integer.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "osm(", (Type) class1, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"osm(\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.castToInt("");
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TypeUtils.castToJavaBean((Map<String, Object>) linkedHashMap0, class0, parserConfig0);
      Class<?> class1 = TypeUtils.loadClass("fastjson.parser.deny");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TypeUtils.isNumber("+``t9`@P]bo&l#-J1");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("+``t9`@P]bo&l#-J1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : +``t9`@P]bo&l#-J1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(renderingHints_Key0).toString();
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      RenderingHints renderingHints0 = new RenderingHints(renderingHints_Key0, linkedHashSet0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(renderingHints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {null=[]}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.fnv1a_64_lower("s@ 7_x`x=!ahp8^y9+%");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger("s@ 7_x`x=!ahp8^y9+%");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Q_q|$kja@OapB,z&:");
      AtomicInteger atomicInteger0 = new AtomicInteger(1);
      Timestamp timestamp0 = TypeUtils.castToTimestamp(atomicInteger0);
      assertEquals(1000000, timestamp0.getNanos());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : double
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      RenderingHints renderingHints0 = new RenderingHints(renderingHints_Key0, linkedHashSet0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Boolean boolean0 = Boolean.valueOf(false);
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) boolean0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : false
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      InstantiationException instantiationException0 = new InstantiationException("osm(");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : com.alibaba.fastjson.parser.ParserConfig@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "[boolean", fieldArray0);
      hashMap0.put("#@@p95-~aYE6Zn;m5v.", (Field) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<MockSimpleDateFormat> class2 = MockSimpleDateFormat.class;
      TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) hashtable0, false);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters(class1, (Map<String, String>) identityHashMap0, false);
      boolean boolean0 = TypeUtils.isGenericParamType(class2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ClassLoader.getSystemClassLoader();
      InstantiationException instantiationException0 = new InstantiationException("fYm@Gb& z#w:fzY:");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"asmEnable\":true,\"autoTypeSupport\":false,\"compatibleWithJavaBean\":true,\"deserializers\":{},\"fieldBased\":false,\"symbolTable\":{}}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TypeUtils.isNumber("0");
      TypeUtils.castToDate("0");
      ThreadGroup threadGroup0 = new ThreadGroup("0");
      MockThread mockThread0 = new MockThread(threadGroup0, "_X%5L)MloeVx+d/u");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "_X%5L)MloeVx+d/u");
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1, "parent", (-4605L));
      MockThread.getAllStackTraces();
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      TypeUtils.loadClass("_X%5L)MloeVx+d/u", classLoader0);
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : com.alibaba.fastjson.parser.ParserConfig@95
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("k-S1@p-t.51:Gvz3F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : k-S1@p-t.51:Gvz3F
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Locale locale0 = JSON.defaultLocale;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      Class<Byte> class0 = Byte.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) numberFormat0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.text.DecimalFormat@67580
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
