/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:29:21 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StreamTokenizer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSListAxioms;
import umd.cs.shop.JSListSubstitution;
import umd.cs.shop.JSOperator;
import umd.cs.shop.JSPlan;
import umd.cs.shop.JSPlanningDomain;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSState;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTaskAtom;
import umd.cs.shop.JSTasks;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSState_ESTest extends JSState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JSState jSState0 = null;
      try {
        jSState0 = new JSState((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      JSTasks jSTasks0 = new JSTasks();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      Function<JSPredicateForm, String> function0 = (Function<JSPredicateForm, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super JSPredicateForm, ? extends String>) function0);
      jSState0.satisfies(jSTasks0, jSSubstitution0, jSListAxioms0);
      Object object0 = new Object();
      jSTerm0.add(object0);
      jSTasks0.add((Object) "+:");
      jSState0.addElementsToState(jSTasks0);
      JSPlan jSPlan0 = new JSPlan();
      JSPlan jSPlan1 = new JSPlan();
      // Undeclared exception!
      try { 
        jSState0.satisfiesTAm(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPredicateForm
         //
         verifyException("umd.cs.shop.JSState", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSPlan jSPlan0 = new JSPlan();
      JSTasks jSTasks0 = jSPlan0.applySubstitutionTasks((JSSubstitution) null);
      jSTasks0.add((Object) jSState0);
      jSTasks0.add((Object) jSPlan0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-----------");
      jSState0.addElementsToState(jSTasks0);
      jSState0.addElementsToState(jSTasks0);
      assertEquals("[[(this Collection), []], []]", jSTasks0.toString());
      assertEquals(2, jSState0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSTerm jSTerm0 = new JSTerm();
      JSTasks jSTasks0 = new JSTasks();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      jSState0.addElementsToState(jSTasks0);
      JSOperator jSOperator0 = new JSOperator();
      JSPlan jSPlan0 = new JSPlan();
      jSState0.satisfiesAll(jSState0, jSSubstitution0, jSListAxioms0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSTerm0.removeAll(jSTasks0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSJshopVars.flagLevel = 51;
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSListAxioms0.add((Object) jSState0);
      JSPlan jSPlan1 = new JSPlan();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.clear();
      System.setCurrentTimeMillis((-1L));
      jSState0.satisfiesTAm(jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution0.print();
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      JSPlanningDomain jSPlanningDomain1 = new JSPlanningDomain();
      PipedReader pipedReader0 = new PipedReader(51);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      JSState jSState0 = new JSState();
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      SystemInUtil.addInputLine("<STAT`>.apply(<JSPlan\") n]t implmented Det");
      Function<String, JSPredicateForm> function0 = (Function<String, JSPredicateForm>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super String, ? extends JSPredicateForm>) function0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSOperator jSOperator0 = new JSOperator();
      JSPlan jSPlan0 = new JSPlan();
      jSTerm0.add((Object) "<STAT`>.apply(<JSPlan\") n]t implmented Det");
      jSState0.addElement(jSTerm0);
      JSPlan jSPlan1 = new JSPlan();
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      jSPlan1.add((Object) jSTaskAtom0);
      jSState0.satisfiesTAm(jSTaskAtom0, jSSubstitution1);
      jSState0.addElementsToState(jSPlan1);
      PipedWriter pipedWriter0 = null;
      try {
        pipedWriter0 = new PipedWriter((PipedReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      JSState jSState0 = new JSState();
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.iterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      Function<String, JSPredicateForm> function0 = (Function<String, JSPredicateForm>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super String, ? extends JSPredicateForm>) function0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSState0.replaceAll(unaryOperator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSPlan jSPlan0 = new JSPlan();
      Object object0 = new Object();
      jSTerm0.add((Object) "<STAT`>.apply(JSPlan\") n]t mplmented DDt");
      jSState0.addElement(jSTerm0);
      JSPlan jSPlan1 = new JSPlan();
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      jSPlan1.add((Object) jSTaskAtom0);
      jSState0.satisfiesTAm(jSTerm0, jSSubstitution0);
      jSState0.addElementsToState(jSPlan0);
      JSSubstitution jSSubstitution2 = jSState0.satisfies(jSPlan0, jSSubstitution1, jSListAxioms0);
      JSListSubstitution jSListSubstitution0 = jSState0.satisfiesAll(jSPlan0, jSSubstitution1, jSListAxioms0);
      JSListSubstitution jSListSubstitution1 = jSState0.satisfiesTAm(jSTerm0, jSSubstitution1);
      assertTrue(jSListSubstitution1.equals((Object)jSListSubstitution0));
      
      JSState jSState1 = jSState0.apply(jSPlan1);
      JSSubstitution jSSubstitution3 = jSState1.satisfies(jSState0, jSSubstitution2, jSListAxioms0);
      JSSubstitution jSSubstitution4 = jSState1.satisfies(jSPlan0, jSSubstitution3, jSListAxioms0);
      assertEquals(0, jSSubstitution2.capacity());
      assertTrue(jSSubstitution4.fail());
      
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      System.setCurrentTimeMillis((-4069L));
      jSState0.addElementsToState(jSPlan0);
      jSState1.satisfies(jSPlan0, jSSubstitution5, jSListAxioms0);
      assertNotSame(jSState0, jSState1);
  }
}
