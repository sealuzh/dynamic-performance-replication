/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:18:48 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.Locale;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Pipe pipe0 = new Pipe(306L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.exhausted();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.indexOf(byteString0);
      // Undeclared exception!
      try { 
        buffer0.snapshot(1186);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1186
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      try { 
        buffer0.skip(2131L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Pipe pipe0 = new Pipe(429L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(20);
      buffer1.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer1.readByteString((-749L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-749
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      Buffer buffer1 = buffer0.write(byteString0);
      Charset.defaultCharset();
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer1, byteString0);
      HashingSource.md5(hashingSource0);
      hashingSource0.close();
      hashingSink0.hash();
      hashingSink0.hash();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffffcf
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Pipe pipe0 = new Pipe(922L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.readUtf8Line();
      Buffer buffer1 = pipe0.buffer;
      buffer1.readAndWriteUnsafe();
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Pipe pipe0 = new Pipe(2552L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer1.readUtf8(8L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=8
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Pipe pipe0 = new Pipe(60L);
      pipe0.sourceClosed = false;
      Pipe pipe1 = new Pipe(60L);
      Buffer buffer0 = pipe1.buffer;
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.buffer.readUtf8();
      BufferedSink bufferedSink0 = realBufferedSink0.writeShortLe(1122);
      buffer0.readAll(bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeShort((-1));
      buffer_UnsafeCursor0.buffer.toString();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(1349L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=1349 > size=2
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      try { 
        realBufferedSink0.buffer.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000L);
      pipe0.sinkClosed = true;
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeInt(11);
      try { 
        buffer1.require(1000000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      long long0 = (-503L);
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)4, (-503L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-503 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Pipe pipe0 = new Pipe(9165L);
      Buffer buffer0 = pipe0.buffer;
      byte byte0 = (byte)81;
      boolean boolean0 = true;
      pipe0.sourceClosed = true;
      pipe0.sourceClosed = false;
      buffer0.indexOf((byte)81, 9165L);
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4l~>GMCZJ+S");
      Charset.defaultCharset();
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)0);
      buffer0.writeByte(248);
      buffer0.writeDecimalLong(5L);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      try { 
        buffer0.readUtf8LineStrict(1000000000000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Buffer buffer0 = new Buffer();
      buffer0.readFrom((InputStream) sequenceInputStream0);
      // Undeclared exception!
      try { 
        buffer0.writeString("eg~[3", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      HashingSink hashingSink1 = HashingSink.md5(hashingSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink1);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.size();
      // Undeclared exception!
      try { 
        buffer1.writeString("", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.outputStream();
      buffer0.readUtf8();
      buffer0.inputStream();
      buffer0.sha256();
      buffer0.writeLongLe(2147483647L);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-1832L));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)0;
      byte byte0 = (byte) (-128);
      byteArray0[4] = (byte) (-128);
      buffer1.readUtf8Line(0L);
      byteArray0[5] = (byte)56;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      buffer0.toString();
      buffer1.hashCode();
      // Undeclared exception!
      try { 
        Charset.forName("[text=ffffffffffff8d8]");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // [text=ffffffffffff8d8]
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer2.hashCode();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      HashingSink.hmacSha256(buffer0, byteString0);
      HashingSink.md5(buffer0);
      buffer0.readAll(hashingSink0);
      // Undeclared exception!
      try { 
        buffer0.getByte(0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      HashingSink.hmacSha256(buffer0, byteString0);
      HashingSink.md5(buffer0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]59`:", false);
      long long0 = 0L;
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = new Buffer();
      buffer0.readUnsafe();
      Buffer buffer3 = new Buffer();
      // Undeclared exception!
      try { 
        buffer3.indexOf((byte) (-112), 0L, (-1592L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=0 toIndex=-1592
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      Buffer buffer1 = buffer0.write(byteString0);
      Charset.defaultCharset();
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer1, byteString0);
      hashingSource0.close();
      HashingSink.hmacSha512(buffer1, byteString0);
      HashingSink.sha256(buffer1);
      buffer0.indexOf(byteString0);
      // Undeclared exception!
      try { 
        buffer0.snapshot((-3652));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=64 offset=0 byteCount=-3652
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      HashingSink.hmacSha256(buffer0, byteString0);
      HashingSink.md5(buffer0);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)125;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)125;
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      buffer0.close();
      buffer0.hmacSha256(byteString1);
      buffer0.toString();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Pipe pipe0 = new Pipe(1095216660480L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Pipe pipe0 = new Pipe(852L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha256(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readFully(realBufferedSource0.buffer, 1743L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      long long0 = 2750L;
      try { 
        buffer0.readFully(buffer1, 2750L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long long0 = 628L;
      Pipe pipe0 = new Pipe(628L);
      Buffer buffer0 = pipe0.buffer;
      Object object0 = new Object();
      buffer0.equals(object0);
      // Undeclared exception!
      try { 
        buffer0.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer0.writeAll(buffer1);
      try { 
        buffer0.require(1026L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-32);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("YIK4s)FX?H");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      HashingSource.md5(buffer1);
      HashingSink.hmacSha512(buffer0, byteString0);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer2 = realBufferedSink0.buffer;
      hashingSink0.write(buffer2, 0L);
      realBufferedSource0.buffer.rangeEquals(0L, byteString0);
      HashingSink.sha512(hashingSink0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(0L);
      realBufferedSource0.buffer.require((-1L));
      // Undeclared exception!
      try { 
        buffer0.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("");
      buffer1.readAndWriteUnsafe();
      String string0 = "m8:QeCV~hC/";
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(0L);
      HashingSink.sha256(buffer0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte) (-1);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("in == null", (int) (byte) (-1), (int) (byte)106);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.hmacSha512(byteString0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(32L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      buffer0.toString();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("l.ak(I;>");
      ((RealBufferedSink) bufferedSink0).timeout();
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      HashingSink.hmacSha512(buffer0, byteString0);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      realBufferedSource0.buffer.rangeEquals(0L, byteString0);
      realBufferedSource0.buffer.indexOf(byteString0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer1.readUtf8CodePoint();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      buffer0.equals(buffer1);
      buffer1.writeIntLe(65536);
      buffer1.buffer();
      realBufferedSource0.buffer.equals(hashingSink0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0L);
      buffer1.readUtf8();
      ByteString[] byteStringArray0 = new ByteString[2];
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      hashingSource0.close();
      byteStringArray0[0] = byteString0;
      buffer0.flush();
      buffer0.toString();
      buffer1.writeIntLe((byte)73);
      Pipe pipe0 = new Pipe((byte)53);
      Buffer buffer2 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer3 = realBufferedSink0.buffer();
      buffer1.equals(buffer3);
      buffer2.indexOfElement(byteString0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(60L);
      Buffer buffer0 = pipe0.buffer;
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]59`:");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]59`:");
      MockFile mockFile0 = new MockFile("]59`:", "]59`:");
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer2 = new Buffer();
      BufferedSink bufferedSink0 = realBufferedSink0.emitCompleteSegments();
      realBufferedSink0.buffer.writableSegment(2590);
      Buffer buffer3 = realBufferedSink0.buffer();
      Buffer buffer4 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]59`:");
      ((RealBufferedSink) bufferedSink0).buffer.equals(buffer4);
      buffer3.size();
      buffer0.outputStream();
      buffer4.flush();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Pipe pipe0 = new Pipe(4823L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.resizeBuffer(4823L);
      // Undeclared exception!
      try { 
        buffer1.writeTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Pipe pipe0 = new Pipe(4823L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(4823L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 1610612736;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("", 1, (-102));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -102 < 1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.utf8();
      Pipe pipe0 = new Pipe(238L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.hmacSha512(byteString1);
      buffer0.clear();
      buffer0.writeIntLe((-2009));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      int int0 = (-619);
      buffer0.writeByte((-619));
      Charset.defaultCharset();
      buffer0.sha256();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffff95
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.readAll(buffer_UnsafeCursor0.buffer);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ByteString byteString0 = new ByteString((byte[]) null);
      HashingSource.md5(buffer_UnsafeCursor0.buffer);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.hmacSha1(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      buffer0.writeDecimalLong((-1592L));
      Buffer buffer2 = new Buffer();
      buffer0.readDecimalLong();
      Charset.defaultCharset();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.md5();
      buffer0.writableSegment(210);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0L);
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      HashingSource.md5(buffer1);
      HashingSink.hmacSha512(buffer0, byteString0);
      HashingSink.sha256(buffer0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-8);
      byteArray0[0] = (byte) (-8);
      ByteString byteString1 = new ByteString(byteArray0);
      buffer1.indexOfElement(byteString1, 190L);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        buffer1.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(4823L);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      hashingSink0.hash();
      Integer integer0 = new Integer((byte)74);
      // Undeclared exception!
      try { 
        buffer1.getByte(100000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=100000000 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = buffer0.writeDecimalLong(255L);
      buffer1.readHexadecimalUnsignedLong();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSource0.readByteString();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Pipe pipe0 = new Pipe(429L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = false;
      buffer0.skip(0L);
      Buffer buffer1 = buffer0.writeLongLe(100000000016L);
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x10
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Pipe pipe0 = new Pipe(429L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.readUtf8Line();
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte)7;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-41);
      byte byte0 = (byte)43;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)43;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("t*{5CM5z,IhIJkh", (int) (byte)0, (int) (byte)43);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 43 > 15
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Pipe pipe0 = new Pipe(4823L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Charset.defaultCharset();
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(4823L);
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ((RealBufferedSink) bufferedSink0).buffer.readFully(byteArray0);
      realBufferedSink0.buffer.flush();
      byteString1.utf8();
      ((RealBufferedSink) bufferedSink0).buffer.indexOf(byteString1, 4823L);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]59`:", false);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-927));
      buffer0.sha256();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)52;
      try { 
        buffer1.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]59`:");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]59`:");
      MockFile mockFile0 = new MockFile("]59`:", "]59`:");
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]59`:");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString1 = new ByteString(byteArray0);
      Buffer buffer1 = buffer0.writeDecimalLong((byte)43);
      buffer1.hmacSha256(byteString1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = new ByteString((byte[]) null);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      hashingSource0.hash();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong(2976L);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      long long0 = 4823L;
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(4823L);
      // Undeclared exception!
      try { 
        buffer0.write((Source) buffer1, 4823L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = 922L;
      Pipe pipe0 = new Pipe(922L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteString byteString0 = new ByteString(byteArray0);
      try { 
        buffer0.write((Source) buffer0, 922L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(4823L);
      buffer1.readUtf8();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      Buffer buffer3 = buffer_UnsafeCursor0.buffer.writeLongLe((-922337203685477580L));
      buffer3.readDecimalLong();
      buffer_UnsafeCursor0.buffer.indexOf(byteString0);
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      Buffer buffer5 = buffer2.writeHexadecimalUnsignedLong(4823L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer5.indexOfElement(byteString0);
      // Undeclared exception!
      try { 
        buffer4.read((byte[]) null, 1862, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(4823L);
      buffer1.readUtf8();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      Buffer buffer3 = buffer_UnsafeCursor0.buffer.writeLongLe((-922337203685477580L));
      buffer3.readDecimalLong();
      buffer_UnsafeCursor0.buffer.indexOf(byteString0);
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      Buffer buffer5 = buffer2.writeHexadecimalUnsignedLong((-981L));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer5.indexOfElement(byteString0);
      // Undeclared exception!
      try { 
        buffer4.read((byte[]) null, 1862, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.next();
      buffer1.writeAll(buffer0);
      buffer_UnsafeCursor0.buffer.readUtf8Line();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.emitCompleteSegments();
      // Undeclared exception!
      try { 
        buffer0.writableSegment((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(4823L);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      hashingSink0.hash();
      Integer integer0 = new Integer((byte)74);
      try { 
        buffer0.skip(100000000000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("v]Jy.0tNN-Qh.mJa)~V");
      MockPrintStream mockPrintStream0 = new MockPrintStream("v]Jy.0tNN-Qh.mJa)~V");
      buffer1.writeTo((OutputStream) mockPrintStream0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-2105L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("v]Jy.0tNN-Qh.mJa)~V");
      MockPrintStream mockPrintStream0 = new MockPrintStream("v]Jy.0tNN-Qh.mJa)~V");
      buffer0.writeTo((OutputStream) mockPrintStream0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(1000000000000L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.toString();
      Charset charset0 = Charset.defaultCharset();
      hashingSink0.close();
      buffer0.readString(charset0);
      HashingSink.hmacSha1(hashingSink0, byteString0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = buffer0.writeLongLe((-2291L));
      try { 
        buffer1.readUtf8LineStrict(1L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=1 content=0df7ffffffffffff\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.size();
      buffer1.exhausted();
      buffer0.clone();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = "";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)13;
      buffer0.write(byteArray0);
      Buffer buffer1 = new Buffer();
      buffer1.readByteString();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("", 2206, 1927);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 1927 < 2206
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Pipe pipe0 = new Pipe(426L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer1, byteString0);
      HashingSink.hmacSha1(buffer0, byteString0);
      hashingSink0.delegate();
      HashingSink.sha256(hashingSink0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      Buffer buffer3 = buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((-1L));
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer3.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x66
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.hash();
      hashingSource0.close();
      buffer0.skip(0L);
      Buffer buffer1 = buffer0.writeLongLe((-4134L));
      buffer0.writeHexadecimalUnsignedLong(33L);
      // Undeclared exception!
      try { 
        buffer1.writeAll(buffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = 1026L;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.size = 1026L;
      // Undeclared exception!
      try { 
        buffer0.writeAll(buffer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(4823L);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeLongLe((-922337203685477580L));
      buffer1.readDecimalLong();
      buffer_UnsafeCursor0.buffer.indexOf(byteString0);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      ByteString[] byteStringArray0 = new ByteString[9];
      byteStringArray0[0] = byteString0;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      try { 
        realBufferedSource0.readByteString(3770L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      buffer1.writeDecimalLong((-1592L));
      Buffer buffer2 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Pipe pipe0 = new Pipe(429L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = false;
      buffer0.skip(0L);
      Buffer buffer1 = buffer0.writeLongLe((-1100L));
      buffer1.writeHexadecimalUnsignedLong((-3020L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      buffer0.writeAll(buffer0);
      buffer0.writeDecimalLong(4276L);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      Buffer buffer1 = buffer0.write(byteString0);
      Charset charset0 = Charset.defaultCharset();
      buffer1.readString(charset0);
      HashingSink.hmacSha1(buffer1, byteString0);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString1 = hashingSource0.hash();
      HashingSource hashingSource1 = HashingSource.hmacSha1(buffer1, byteString1);
      HashingSource.md5(hashingSource1);
      HashingSink.hmacSha512(buffer1, byteString1);
      HashingSink.sha256(buffer1);
      buffer1.rangeEquals((-2291L), byteString0);
      HashingSink.sha512(buffer1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(918L);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Pipe pipe0 = new Pipe(429L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(8);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      Buffer buffer3 = new Buffer();
      realBufferedSource0.buffer.segmentSizes();
      // Undeclared exception!
      try { 
        buffer0.read(realBufferedSource0.buffer, (-1701L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1701
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset.defaultCharset();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      String string0 = byteString0.utf8;
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong(2147483647L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-1692L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -1692
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(4823L);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      hashingSink0.hash();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeLongLe((-922337203685477580L));
      buffer1.readDecimalLong();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(48234333333L);
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.readFully(realBufferedSink0.buffer, (-922337203685477580L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      HashingSink.sha256(hashingSink0);
      hashingSink0.hash();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.readFully(byteArray0);
      buffer0.skip((-23L));
      realBufferedSource0.buffer.writeLongLe(100000000016L);
      Buffer buffer2 = realBufferedSource0.buffer.writeLongLe((-23L));
      realBufferedSource0.buffer.writeHexadecimalUnsignedLong((-23L));
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      realBufferedSource1.readByteString();
      buffer0.writeAll(realBufferedSource1);
      buffer1.writeDecimalLong(100000000016L);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      Buffer buffer1 = buffer0.write(byteString0);
      HashingSink.sha256(buffer1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("o", true);
      buffer0.copyTo((OutputStream) mockFileOutputStream0);
      // Undeclared exception!
      try { 
        buffer0.writeString("%H.C}@)jy=~J9x:BK", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(4804L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeByte(1932735274);
      pipe0.sourceClosed = true;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer2 = buffer0.writeLongLe((-1342L));
      buffer1.readShortLe();
      buffer0.write((Source) buffer2, (-2706L));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      pipe0.sinkClosed = false;
      buffer0.read(byteArray0);
      buffer1.readUtf8CodePoint();
      buffer2.exhausted();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long long0 = 922L;
      Pipe pipe0 = new Pipe(922L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      realBufferedSink0.buffer.writeByte((-1));
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer2.toString();
      Buffer buffer3 = realBufferedSink0.buffer;
      buffer3.writeDecimalLong(10000000L);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readUtf8LineStrict((long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Pipe pipe0 = new Pipe(922L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      realBufferedSink0.buffer.writeByte((-1));
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer2.toString();
      Buffer buffer3 = realBufferedSink0.buffer;
      Buffer buffer4 = realBufferedSink0.buffer.writeDecimalLong(65536L);
      long long0 = 0L;
      // Undeclared exception!
      try { 
        buffer4.readUtf8LineStrict((-1491L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1491
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(2147483647L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=2147483647 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Pipe pipe0 = new Pipe(922L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      Buffer buffer2 = pipe0.buffer;
      buffer2.readAll(buffer0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      hashingSource0.hash();
      Buffer buffer3 = pipe0.buffer;
      HashingSource.md5(buffer3);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "AttOc/k`^Z5J&1I\"C");
      hashingSource0.hash();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      realBufferedSink1.writeHexadecimalUnsignedLong(0L);
      Buffer buffer4 = realBufferedSink1.buffer();
      buffer4.readDecimalLong();
      // Undeclared exception!
      try { 
        buffer3.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Pipe pipe0 = new Pipe(60L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      pipe0.sourceClosed = true;
      Buffer buffer0 = realBufferedSource0.buffer();
      HashingSink hashingSink0 = HashingSink.sha256(realBufferedSource0.buffer);
      hashingSink0.hash();
      Buffer buffer1 = buffer0.writeLongLe(60L);
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x3c
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Pipe pipe0 = new Pipe(922L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer1 = new Buffer();
      buffer1.writeUtf8("YIK4s)FX?H");
      MockFile mockFile0 = new MockFile("YIK4s)FX?H");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString1;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer1.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(4823L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink0.writeString("#Ar", charset0);
      realBufferedSink0.writeDecimalLong(1902L);
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSink0.buffer.select(options0);
      realBufferedSink0.buffer.close();
      buffer0.hmacSha256(byteString1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString2 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.indexOf(byteString2, 10L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      buffer0.readByteString();
      Buffer buffer2 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeLong(1957L);
      realBufferedSink1.buffer.readLong();
      Charset.defaultCharset();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.writeShortLe((-1));
      boolean boolean0 = realBufferedSink1.closed;
      Buffer buffer3 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.sha1();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Pipe pipe0 = new Pipe(60L);
      Buffer buffer0 = pipe0.buffer;
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]59`:");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]59`:");
      MockFile mockFile0 = new MockFile("]59`:", "]59`:");
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer2 = new Buffer();
      buffer0.writeLongLe(1L);
      buffer1.readShortLe();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(60L);
      buffer0.readLongLe();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer1.writeString("]59`:", (int) (byte)16, 1, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 1 < 16
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(4817L);
      HashingSink.sha256(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer1.readDecimalLong();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSink.sha256(buffer_UnsafeCursor0.buffer);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer0.writeIntLe(3);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer3 = realBufferedSource0.buffer;
      ByteString byteString0 = new ByteString((byte[]) null);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteString1.toAsciiUppercase();
      realBufferedSink0.buffer.indexOfElement(byteString1, 234L);
      buffer3.writeShortLe(1234);
      try { 
        buffer_UnsafeCursor0.buffer.readFully(buffer3, 234L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Pipe pipe0 = new Pipe(4823L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeByte(1932735274);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.writeDecimalLong(4823L);
      String string0 = "^LkU";
      try { 
        buffer1.write((Source) realBufferedSink0.buffer, 4823L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[1];
      Options.of(byteStringArray0);
      Charset.defaultCharset();
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)1;
      byteArray0[1] = (byte)122;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      Options.of(byteStringArray0);
      buffer0.toString();
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString1, (-2154L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]59`:");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]59`:");
      MockFile mockFile0 = new MockFile("]59`:", "]59`:");
      Buffer buffer0 = new Buffer();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer_UnsafeCursor0.buffer.clone();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.indexOf(byteString0, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(4804L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8CodePoint(1610612736);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 60000000
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(1947);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-3L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      hashingSource0.close();
      HashingSink.sha256(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer1.readUtf8CodePoint();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong(922L);
      MockFile mockFile0 = new MockFile("(_'zJK`uF#", "");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      realBufferedSink0.buffer.readShortLe();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      realBufferedSink0.writeInt(524);
      realBufferedSink0.buffer.readDecimalLong();
      realBufferedSink0.buffer.segmentSizes();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long long0 = 922L;
      Pipe pipe0 = new Pipe(922L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      buffer0.writeUtf8("YIK4s)FX?H");
      MockFile mockFile0 = new MockFile("YIK4s)FX?H");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString1;
      buffer0.rangeEquals(922L, byteString0, (-1905), 8192);
      // Undeclared exception!
      try { 
        buffer0.write((Source) buffer0, 922L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Pipe pipe0 = new Pipe(60L);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Z8NT-/:#T_I:x");
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer1.writeTo((OutputStream) mockPrintStream0);
      buffer2.segmentSizes();
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = new Buffer();
      Pipe pipe0 = new Pipe(9223372036854775788L);
      Buffer buffer2 = pipe0.buffer;
      Buffer buffer3 = buffer2.writeDecimalLong(100000L);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)22;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      buffer0.close();
      buffer1.writeLongLe((byte)22);
      Options.of(byteStringArray0);
      buffer1.select(options0);
      buffer3.close();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      // Undeclared exception!
      try { 
        buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      hashingSink0.hash();
      Buffer buffer1 = buffer0.writeInt(12);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, buffer_UnsafeCursor0.data);
      ByteString byteString0 = new ByteString(buffer_UnsafeCursor0.data);
      buffer_UnsafeCursor0.buffer.readIntLe();
      Charset.defaultCharset();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(buffer_UnsafeCursor0.data);
      byteArrayInputStream0.reset();
      buffer_UnsafeCursor0.buffer.writeUtf8CodePoint(4);
      buffer1.clone();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0L);
      buffer0.readUtf8();
      ByteString[] byteStringArray0 = new ByteString[2];
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byteStringArray0[0] = byteString0;
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      byteStringArray0[1] = byteString1;
      HashingSink.sha256(buffer0);
      buffer0.emitCompleteSegments();
      buffer1.readUtf8Line();
      buffer1.indexOf((byte)27, 0L);
      ByteString byteString2 = buffer1.readByteString();
      buffer1.snapshot();
      Buffer buffer2 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.writeLong(0L);
      realBufferedSink0.buffer.rangeEquals((long) (byte)52, byteString2);
      Options options0 = Options.of(byteStringArray0);
      buffer2.selectPrefix(options0);
      // Undeclared exception!
      try { 
        buffer2.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.write(byteString0);
      buffer0.readUnsafe();
      Buffer buffer1 = new Buffer();
      buffer0.readIntLe();
      RealBufferedSink realBufferedSink0 = null;
      try {
        realBufferedSink0 = new RealBufferedSink((Sink) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSink.sha256(buffer0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      Buffer buffer3 = buffer_UnsafeCursor0.buffer.writeDecimalLong(1000000000000L);
      // Undeclared exception!
      try { 
        buffer3.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4l~>GMCZJ+S");
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      hashingSink0.hash();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = realBufferedSink0.buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer2 = realBufferedSink0.buffer.writeString("4l~>GMCZJ+S", charset0);
      buffer1.sha256();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      buffer2.readHexadecimalUnsignedLong();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-7L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      // Undeclared exception!
      try { 
        realBufferedSource1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x2d
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = new Buffer();
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer2 = pipe0.buffer;
      Buffer buffer3 = buffer2.writeDecimalLong(100000L);
      buffer1.readUtf8();
      HashingSource hashingSource0 = HashingSource.sha256(buffer3);
      hashingSource0.hash();
      HashingSink.sha256(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer3.readUnsafe();
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Pipe pipe0 = new Pipe(922L);
      Buffer buffer0 = pipe0.buffer;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer1.writeUtf8("YIK4s)FX?H");
      MockFile mockFile0 = new MockFile("YIK4s)FX?H", "YIK4s)FX?H");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      buffer2.flush();
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options.of(byteStringArray0);
      Options options0 = Options.of(byteStringArray0);
      buffer2.selectPrefix(options0);
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      HashingSink.sha512(buffer0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      long long0 = (-1L);
      buffer_UnsafeCursor0.seek((-1L));
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) pipedInputStream0, (-134L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -134
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      HashingSink.sha256(hashingSink0);
      HashingSink.sha256(hashingSink0);
      HashingSource.md5(buffer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      String string0 = "l.ak(I;>";
      Charset.defaultCharset();
      buffer0.sha256();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer1 = new Buffer();
      // Undeclared exception!
      try { 
        buffer1.writableSegment(1908874353);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0L);
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      hashingSource0.close();
      HashingSink.sha256(buffer0);
      buffer0.readAndWriteUnsafe();
      buffer0.writeHexadecimalUnsignedLong(19327352L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.readHexadecimalUnsignedLong();
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = 9223372036854775807L;
      Buffer buffer1 = buffer0.writeDecimalLong(9223372036854775807L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      Buffer buffer2 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      // Undeclared exception!
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Number too large: 92233720368547758
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.request(9223372L);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      Buffer buffer1 = buffer0.write(byteString0);
      Charset charset0 = Charset.defaultCharset();
      buffer1.readString(charset0);
      HashingSink.hmacSha1(buffer1, byteString0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer1.writeLongLe((-2291L));
      Buffer buffer2 = new Buffer();
      buffer0.indexOf((byte) (-1), 1302L);
      try { 
        buffer0.readUtf8LineStrict(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=0df7ffffffffffff\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(60L);
      Buffer buffer0 = pipe0.buffer;
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer2 = new Buffer();
      BufferedSink bufferedSink0 = realBufferedSink0.emitCompleteSegments();
      buffer0.writeUtf8CodePoint(2590);
      ByteString byteString0 = new ByteString((byte[]) null);
      Buffer buffer3 = realBufferedSink0.buffer();
      Buffer buffer4 = new Buffer();
      ((RealBufferedSink) bufferedSink0).buffer.equals(buffer4);
      buffer3.indexOfElement(byteString0);
      buffer0.outputStream();
      // Undeclared exception!
      try { 
        buffer2.rangeEquals(60L, byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      Buffer buffer1 = buffer0.writeInt(12);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, buffer_UnsafeCursor0.data);
      ByteString byteString1 = new ByteString(buffer_UnsafeCursor0.data);
      buffer_UnsafeCursor0.buffer.readIntLe();
      Charset.defaultCharset();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(buffer_UnsafeCursor0.data);
      byteArrayInputStream0.reset();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      buffer_UnsafeCursor0.buffer.readFrom((InputStream) bufferedInputStream0, 0L);
      buffer0.indexOfElement(byteString0, (long) 0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.sha1();
      buffer0.readFrom((InputStream) bufferedInputStream0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(9223372036854775807L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      HashingSink.sha256(realBufferedSource0.buffer);
      Segment segment0 = buffer0.writableSegment(1684);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SegmentPool.next = segment0;
      Buffer buffer2 = buffer0.writeLongLe(9223372036854775807L);
      buffer2.readDecimalLong();
      buffer2.sha1();
      buffer1.readUtf8CodePoint();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Pipe pipe0 = new Pipe(429L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.resizeBuffer(429L);
      ByteString byteString0 = new ByteString((byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.writeLongLe((-1L));
      Buffer buffer2 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.copyTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(4823L);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[4] = byteString0;
      ByteString byteString1 = hashingSink0.hash();
      byteStringArray0[5] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer1.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = new Buffer();
      Pipe pipe0 = new Pipe(9223372036854775788L);
      Buffer buffer2 = pipe0.buffer;
      long long0 = 100000L;
      Buffer buffer3 = buffer2.writeDecimalLong(100000L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)22;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      buffer0.close();
      buffer1.writeLongLe(1000000000000000L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      Buffer buffer4 = realBufferedSink0.buffer();
      buffer3.indexOf((byte)2, 4L);
      buffer0.clear();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer4);
      Buffer buffer5 = realBufferedSource0.buffer();
      buffer4.equals(buffer3);
      realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer5.readUtf8Line((long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      HashingSink.sha256(buffer0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("o", false);
      buffer1.copyTo((OutputStream) mockFileOutputStream0);
      Buffer buffer2 = new Buffer();
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      byteString0.sha256();
      buffer0.rangeEquals(0L, byteString0);
      Charset.defaultCharset();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Pipe pipe0 = new Pipe(922L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer1 = new Buffer();
      buffer1.writeUtf8("YIK4s)FX?H");
      MockFile mockFile0 = new MockFile("YIK4s)FX?H", "YIK4s)FX?H");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer;
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString1;
      byteString1.write(buffer2);
      byteStringArray0[4] = byteString1;
      byteStringArray0[5] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      buffer2.selectPrefix(options0);
      Buffer buffer3 = realBufferedSink0.buffer;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Pipe pipe0 = new Pipe(60L);
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("M4");
      HashingSink hashingSink0 = HashingSink.sha512(bufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      HashingSink.hmacSha256(hashingSink0, byteString0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]59`:", false);
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "M4");
      Buffer buffer1 = realBufferedSink0.buffer.write(byteString0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString1 = hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      byteString1.write(buffer2);
      byteString0.compareTo(byteString1);
      Buffer buffer3 = buffer1.writeUtf8CodePoint((-927));
      buffer0.sha256();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      buffer1.readFully(byteArray0);
      buffer3.request((byte)11);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(4823L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer3 = realBufferedSink0.buffer.writeByte((-1));
      Buffer buffer4 = realBufferedSink0.buffer();
      buffer3.toString();
      Buffer buffer5 = buffer1.writeDecimalLong(100000000000000000L);
      HashingSink.sha1(buffer5);
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer4.readAndWriteUnsafe();
      buffer_UnsafeCursor1.buffer.indexOf((byte)99);
      buffer_UnsafeCursor0.seek((-1));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)98;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.indexOfElement(byteString0, (-1857L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer0.sha256();
      buffer_UnsafeCursor0.seek((-1L));
      long long0 = (-134L);
      buffer_UnsafeCursor0.offset = (-1L);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      String string0 = "nV7]hF)ZD3gy";
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.write((byte[]) null, (-1), 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      Buffer buffer1 = buffer0.write(byteString0);
      buffer1.readByte();
      Charset charset0 = Charset.defaultCharset();
      buffer1.readString(charset0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0L);
      buffer1.indexOf((byte)34);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer2);
      hashingSink0.hash();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.readByte();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readUnsafe();
      buffer_UnsafeCursor0.next();
      realBufferedSource0.buffer.emitCompleteSegments();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer3 = realBufferedSink0.buffer;
      buffer_UnsafeCursor0.buffer.md5();
      buffer2.md5();
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        buffer1.writeString((String) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      buffer0.read(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Pipe pipe0 = new Pipe(60L);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Z8NT-/:#T_I:x");
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer1.writeTo((OutputStream) mockPrintStream0);
      buffer2.segmentSizes();
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.writeDecimalLong(92233720368547758L);
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer2.sha256();
      buffer2.writeLongLe((-1L));
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readFrom((InputStream) null, 9223L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      Buffer buffer1 = buffer0.writeDecimalLong(193273527L);
      HashingSink.sha256(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer3 = realBufferedSink0.buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer4 = realBufferedSink0.buffer;
      Buffer buffer5 = buffer4.writeByte((-1));
      Buffer buffer6 = realBufferedSource0.buffer;
      buffer1.segmentSizes();
      realBufferedSource0.readByteString();
      realBufferedSink0.buffer();
      realBufferedSink0.buffer.toString();
      byteString0.base64();
      Buffer buffer7 = realBufferedSink0.buffer;
      long long0 = 100000000000000000L;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer5);
      Buffer buffer8 = realBufferedSink1.buffer;
      buffer8.writeDecimalLong(100000000000000000L);
      try { 
        buffer3.readUtf8LineStrict(21L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=1 content=ff\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      Buffer buffer1 = buffer0.write(byteString0);
      Charset charset0 = Charset.defaultCharset();
      buffer1.readString(charset0);
      Buffer buffer2 = buffer1.writeInt(12);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ByteString byteString1 = new ByteString(buffer_UnsafeCursor0.data);
      buffer0.writeDecimalLong(4);
      try { 
        buffer2.readFully(buffer_UnsafeCursor0.data);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000000L);
      pipe0.sinkClosed = true;
      pipe0.sinkClosed = false;
      pipe0.sourceClosed = true;
      Buffer buffer0 = pipe0.buffer;
      String string0 = "oe_\\h0L>MyvtKh&Dc";
      int int0 = (-945);
      pipe0.sourceClosed = false;
      Charset.defaultCharset();
      Charset.defaultCharset();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.copyTo((Buffer) null, 10000000L, 92233L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(13L);
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      HashingSource.md5(buffer1);
      HashingSink.sha256(buffer0);
      long long0 = 100000000000L;
      buffer1.rangeEquals(100000000000L, byteString0);
      buffer0.indexOf(byteString0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer0.readUtf8CodePoint();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "k1@?-");
      buffer_UnsafeCursor0.buffer.equals((Object) null);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer1.writeString(")N]yZZ6`-(fG9T>(h", (-1672), (-2040109464), charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -1672
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(4823L);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer1.readAll(hashingSink0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)81;
      byteArray0[0] = (byte) (-8);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)113;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer0.writeIntLe((byte)113);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong((byte)113);
      HashingSink hashingSink0 = HashingSink.sha1(realBufferedSource0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      HashingSink hashingSink1 = HashingSink.hmacSha512(buffer1, byteString0);
      hashingSink1.hash();
      String string0 = byteString0.utf8;
      bufferedSink0.writeLong((-478L));
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.base64();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer2 = realBufferedSink1.buffer;
      realBufferedSink1.buffer.segmentSizes();
      buffer2.writeShort((byte)119);
      buffer0.completeSegmentByteCount();
      ((RealBufferedSink) bufferedSink0).buffer.readUtf8Line(1L);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(0L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      realBufferedSource0.buffer.writeLongLe((-9L));
      Buffer buffer1 = new Buffer();
      byte byte0 = (byte) (-1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wD;z6!O,/m6_B'~#w8Q");
      realBufferedSource0.buffer.indexOf((byte) (-1), 0L);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readUtf8LineStrict((-3909L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -3909
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Pipe pipe0 = new Pipe(71L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.readUnsafe();
      Buffer buffer1 = new Buffer();
      buffer1.segmentSizes();
      HashingSink.sha512(buffer1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Pipe pipe0 = new Pipe(429L);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "FJM[H");
      buffer1.readAll(buffer0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ByteString byteString0 = new ByteString((byte[]) null);
      HashingSource.md5(hashingSource0);
      hashingSource0.hash();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeHexadecimalUnsignedLong(429L);
      realBufferedSink0.writeDecimalLong(1000000000000000L);
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      Buffer buffer1 = buffer0.write(byteString0);
      Charset.defaultCharset();
      buffer0.indexOf(byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      ByteString byteString1 = hashingSink0.hash();
      realBufferedSink0.emitCompleteSegments();
      Buffer buffer3 = new Buffer();
      buffer3.equals(hashingSink0);
      Buffer buffer4 = realBufferedSink0.buffer();
      Buffer buffer5 = realBufferedSink0.buffer.buffer();
      realBufferedSink0.writeIntLe((-162));
      buffer4.toString();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      long long0 = 1124L;
      byteString1.toString();
      buffer1.readUtf8(10L);
      // Undeclared exception!
      try { 
        buffer4.copyTo(buffer5, 1095216660480L, 1095216660480L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=1095216660480 byteCount=1095216660480
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(60L);
      Buffer buffer0 = pipe0.buffer;
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]59`:");
      MockFile mockFile0 = new MockFile("]59`:", "]59`:");
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      realBufferedSink0.buffer.writeDecimalLong(100000000000000L);
      Buffer buffer2 = realBufferedSink0.buffer;
      BufferedSink bufferedSink0 = realBufferedSink0.emitCompleteSegments();
      realBufferedSink0.buffer.writableSegment(2600);
      ByteString byteString0 = new ByteString((byte[]) null);
      SegmentPool.byteCount = (long) 2600;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]59`:");
      ((RealBufferedSink) bufferedSink0).buffer.equals(buffer1);
      buffer0.indexOfElement(byteString0, 100000000000000L);
      buffer0.writeLongLe(10000000000000000L);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SHA-512");
      realBufferedSink0.buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink1.write(byteString1);
      HashingSink.hmacSha1(bufferedSink0, byteString0);
      Buffer buffer2 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.readAll(bufferedSink0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)23;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      realBufferedSink1.buffer.readShort();
      ByteString byteString2 = new ByteString(byteArray0);
      buffer0.writeDecimalLong(92233720368547L);
      realBufferedSink1.buffer.readFully(byteArray0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeLongLe((-922337203685477580L));
      buffer1.readDecimalLong();
      HashingSink.sha256(buffer_UnsafeCursor0.buffer);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      HashingSink.md5(buffer_UnsafeCursor0.buffer);
      buffer2.rangeEquals(208L, byteString0);
      Integer integer0 = new Integer((-1));
      ByteString byteString1 = new ByteString((byte[]) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      buffer_UnsafeCursor0.next();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writeString("EmlUZ ", 8, 8, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 8 > 6
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(4804L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeByte(1932735274);
      MockFile mockFile0 = new MockFile("l.ak(I;>", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Buffer buffer2 = buffer0.writeLongLe((-1342L));
      buffer1.readShortLe();
      buffer1.writeUtf8("size=%s fromIndex=%s toIndex=%s");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-16);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 44, 44);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      try { 
        buffer2.readFrom((InputStream) bufferedInputStream0, (long) 44);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Pipe pipe0 = new Pipe(429L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte)7;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)43;
      HashingSource.sha1(buffer0);
      ByteString[] byteStringArray0 = new ByteString[3];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = pipe0.buffer;
      buffer0.indexOfElement(byteStringArray0[0]);
      buffer2.readAndWriteUnsafe();
      buffer2.writeShortLe((byte)43);
      buffer0.readShort();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      HashingSink.hmacSha1(buffer0, byteString0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = new Buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      realBufferedSink0.write(byteString0);
      HashingSink.sha1(realBufferedSink0);
      realBufferedSink0.buffer.readShortLe();
      Buffer buffer3 = new Buffer();
      buffer3.write((Source) buffer1, (-2466L));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      realBufferedSink0.buffer.readUtf8CodePoint();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Buffer buffer4 = realBufferedSink2.buffer;
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writableSegment(65533);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Charset.defaultCharset();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteString0.write(realBufferedSink0.buffer);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      realBufferedSink0.buffer.readUtf8CodePoint();
      Buffer buffer1 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer1.readUtf8((long) 8230);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=62 offset=0 byteCount=8230
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Pipe pipe0 = new Pipe(46L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(realBufferedSource0.buffer);
      buffer0.size = 46L;
      ByteString byteString0 = hashingSink0.hash();
      byte[] byteArray0 = new byte[0];
      buffer0.readFully(byteArray0);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      String string0 = ",";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",");
      realBufferedSink0.buffer.indexOf(byteString0);
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = realBufferedSink0.buffer;
      buffer0.writeUtf8CodePoint((-927));
      ByteString byteString1 = new ByteString(byteArray0);
      buffer0.indexOfElement(byteString0, 46L);
      Buffer buffer4 = new Buffer();
      buffer3.writeByte(1851);
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Pipe pipe0 = new Pipe(410L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(410L);
      ByteString byteString0 = new ByteString((byte[]) null);
      byte[] byteArray0 = new byte[3];
      buffer_UnsafeCursor0.start = (int) (byte)64;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)90;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      buffer_UnsafeCursor0.seek((byte)64);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      buffer_UnsafeCursor0.seek((byte)64);
      HashingSource.md5(hashingSource0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeShort(410);
      Buffer buffer1 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer1.read(realBufferedSink0.buffer, (-507L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -507
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.sha256();
      HashingSource.md5(buffer1);
      HashingSink.hmacSha512(buffer0, byteString0);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      realBufferedSource0.buffer.rangeEquals(0L, byteString0);
      HashingSink.sha512(hashingSink0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.offset = 3L;
      buffer_UnsafeCursor0.resizeBuffer(0L);
      buffer0.emit();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("v]Jy.0tNN-Qh.mJa)~V");
      MockPrintStream mockPrintStream0 = new MockPrintStream("v]Jy.0tNN-Qh.mJa)~V");
      Buffer buffer2 = buffer0.writeTo((OutputStream) mockPrintStream0);
      HashingSink.sha512(buffer1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer3 = buffer2.writeLongLe((-922337203685477580L));
      buffer3.readDecimalLong();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.writeDecimalLong(4333333L);
      buffer2.sha1();
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      buffer4.md5();
      Charset charset0 = Charset.defaultCharset();
      buffer3.writeString("zVj9,+.xgoppfeO'", charset0);
      buffer_UnsafeCursor0.buffer.sha256();
      PipedInputStream pipedInputStream1 = new PipedInputStream(3196);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream1);
      buffer0.copyTo((OutputStream) mockPrintStream0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer5 = realBufferedSource0.buffer();
      buffer5.writeShort(520);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Pipe pipe0 = new Pipe(410L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(410L);
      ByteString byteString0 = new ByteString((byte[]) null);
      byte[] byteArray0 = new byte[3];
      buffer_UnsafeCursor0.start = (int) (byte)64;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)90;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      buffer_UnsafeCursor0.seek((byte)64);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      buffer_UnsafeCursor0.seek((byte)64);
      HashingSource hashingSource1 = HashingSource.md5(hashingSource0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeDecimalLong(410L);
      Pipe pipe1 = new Pipe(3284L);
      Buffer buffer2 = pipe1.buffer;
      buffer2.write((Source) hashingSource1, 32L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer1.read(buffer_UnsafeCursor0.data);
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(9223372036854775807L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      HashingSink.sha256(buffer0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      realBufferedSource0.buffer.emitCompleteSegments();
      buffer2.indexOf((byte)27, 9223372036854775807L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer2.writeLongLe(1L);
      Buffer buffer3 = new Buffer();
      Buffer buffer4 = realBufferedSource0.buffer();
      Buffer buffer5 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "psXe<K9Ka");
      MockFile mockFile0 = new MockFile("]LYiN");
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5sPv\"8_VH*+ryO<^");
      Buffer buffer6 = realBufferedSource1.buffer;
      buffer2.writableSegment(111);
      Buffer buffer7 = new Buffer();
      buffer2.segmentSizes();
      buffer4.writeUtf8CodePoint((-251));
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer4);
      buffer7.writeShortLe((-251));
      realBufferedSource0.buffer.readFully(buffer0, 1L);
      buffer0.emitCompleteSegments();
      // Undeclared exception!
      try { 
        Charset.forName("]LYiN");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ]LYiN
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      hashingSink0.hash();
      Buffer buffer1 = buffer0.writeInt(12);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, buffer_UnsafeCursor0.data);
      ByteString byteString0 = new ByteString(buffer_UnsafeCursor0.data);
      buffer_UnsafeCursor0.buffer.readIntLe();
      Charset.defaultCharset();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(buffer_UnsafeCursor0.data);
      byteArrayInputStream0.reset();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.readFrom((InputStream) bufferedInputStream0, 0L);
      buffer2.exhausted();
      buffer2.indexOfElement(byteString0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(4817L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(4817L);
      ByteString byteString0 = new ByteString((byte[]) null);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      buffer_UnsafeCursor0.seek(992L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      buffer_UnsafeCursor0.seek((byte)90);
      HashingSource.md5(hashingSource0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      long long0 = 3284L;
      Pipe pipe0 = new Pipe((byte)64);
      realBufferedSink0.writeHexadecimalUnsignedLong(992L);
      Pipe pipe1 = null;
      try {
        pipe1 = new Pipe((-902890L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -902890
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Pipe pipe0 = new Pipe(426L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer1, byteString0);
      HashingSink.hmacSha1(buffer0, byteString0);
      hashingSink0.delegate();
      HashingSink.sha256(hashingSink0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((-1L));
      Charset.defaultCharset();
      long long0 = new Integer((-1));
      buffer2.indexOf(byteString0);
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0L);
      buffer0.readHexadecimalUnsignedLong();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      HashingSource.md5(buffer1);
      HashingSink.hmacSha512(buffer0, byteString0);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      realBufferedSource0.buffer.rangeEquals(0L, byteString0);
      HashingSink.sha512(hashingSink0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(0L);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      HashingSink.md5(buffer0);
      Buffer buffer1 = buffer0.write(byteString0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset charset0 = Charset.defaultCharset();
      buffer1.readString(charset0);
      HashingSink.hmacSha1(buffer1, byteString0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null, 2542, 255);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("v]Jy.0tNN-Qh.mJa)~V");
      MockPrintStream mockPrintStream0 = new MockPrintStream("v]Jy.0tNN-Qh.mJa)~V");
      buffer0.writeTo((OutputStream) mockPrintStream0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.readByteString(0L);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      HashingSink.hmacSha256(buffer0, byteString0);
      HashingSink.hmacSha512(hashingSink0, byteString0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readString(0L, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Pipe pipe0 = new Pipe(429L);
      Buffer buffer0 = pipe0.buffer;
      Segment segment0 = new Segment();
      buffer0.head = segment0;
      GzipSource gzipSource0 = new GzipSource(buffer0);
      // Undeclared exception!
      try { 
        buffer0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeLongLe((-922337203685477580L));
      buffer1.readDecimalLong();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSink.sha256(buffer_UnsafeCursor0.buffer);
      HashingSink.sha256(realBufferedSink0);
      realBufferedSink0.buffer.rangeEquals(753L, byteString0);
      realBufferedSink0.buffer.indexOf(byteString0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // size < 4: 1 (to read code point prefixed 0xfffffff3)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = 0L;
      Buffer buffer1 = buffer0.writeDecimalLong(0L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = new Buffer();
      HashingSink.sha256(buffer0);
      HashingSink.sha256(buffer0);
      Buffer buffer3 = new Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("o", true);
      Buffer buffer4 = buffer3.copyTo((OutputStream) mockFileOutputStream0);
      // Undeclared exception!
      try { 
        buffer4.read((Buffer) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(9223372036854775807L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      HashingSink.sha256(buffer0);
      realBufferedSource0.buffer.emitCompleteSegments();
      buffer2.indexOf((byte)27, 9223372036854775807L);
      boolean boolean0 = realBufferedSource0.closed;
      buffer2.writeLongLe((byte)27);
      Buffer buffer3 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      realBufferedSource0.inputStream();
      Buffer buffer4 = buffer3.writeLongLe(2L);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)27;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer2.readFully(byteArray0);
      Buffer buffer5 = buffer4.writeDecimalLong(1127L);
      buffer5.writeHexadecimalUnsignedLong(9223372036854775807L);
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer6 = pipe0.buffer;
      Buffer buffer7 = new Buffer();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4, (byte)0);
      byteArrayInputStream0.reset();
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer4.rangeEquals((-72057594037927936L), byteString0);
      HashingSink.sha512(buffer5);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer5.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(4);
      buffer1.require((-1L));
      buffer_UnsafeCursor0.close();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(9223372036854775781L);
      HashingSink.sha256(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer1.readUtf8CodePoint();
      Buffer buffer2 = new Buffer();
      Buffer buffer3 = buffer2.writeLongLe((byte)27);
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)27;
      MockFile mockFile0 = new MockFile("", "");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer3.rangeEquals(92233L, byteString0, 1320, (-1708));
      try { 
        buffer2.readFully(buffer0, 9223372036854775781L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeUtf8("l.ak(I;>");
      Buffer buffer1 = realBufferedSink1.buffer;
      Charset.defaultCharset();
      buffer0.sha256();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer2 = buffer1.writeShortLe(8192);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RJN[cQ?;]Z51'5S9HW>");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      buffer2.readUtf8CodePoint();
      buffer0.equals(pipedInputStream0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer3 = realBufferedSource0.buffer();
      buffer3.writeInt(2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink0);
      boolean boolean0 = realBufferedSink0.closed;
      // Undeclared exception!
      try { 
        buffer1.write((Buffer) null, (long) 8192);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      Buffer buffer1 = buffer0.writeLongLe(100000000016L);
      Buffer buffer2 = buffer1.writeLongLe(100000000016L);
      Buffer buffer3 = new Buffer();
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)95;
      buffer0.readFully(byteArray0);
      buffer2.writeLongLe((byte)95);
      Buffer buffer4 = buffer2.writeDecimalLong((byte)16);
      hashingSink0.timeout();
      ByteString byteString1 = buffer4.hmacSha1(byteString0);
      buffer1.indexOf(byteString1, (long) (byte)16);
      buffer4.writeLong((-1L));
      byteString0.compareTo(byteString1);
      buffer4.write(byteArray0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe();
      buffer_UnsafeCursor1.buffer.indexOfElement(byteString1, (long) (byte)16);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.sha512(buffer0);
      Buffer buffer1 = buffer0.writeInt(12);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, buffer_UnsafeCursor0.data);
      ByteString byteString0 = new ByteString(buffer_UnsafeCursor0.data);
      buffer_UnsafeCursor0.buffer.readIntLe();
      Charset.defaultCharset();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(buffer_UnsafeCursor0.data);
      byteString0.hex();
      byteArrayInputStream0.reset();
      Integer integer0 = new Integer(12);
      ByteString byteString1 = new ByteString(buffer_UnsafeCursor0.data);
      buffer_UnsafeCursor0.buffer.indexOfElement(byteString0, (long) 4);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }
}
