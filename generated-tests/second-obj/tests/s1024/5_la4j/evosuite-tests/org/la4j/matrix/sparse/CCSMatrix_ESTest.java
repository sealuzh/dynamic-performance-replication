/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:35:33 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.iterator.MatrixIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      cCSMatrix0.iteratorOrNonZeroColumns();
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      mockRandom0.nextDouble();
      ColumnMajorSparseMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3, 3);
      cCSMatrix0.setAll(3);
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(2045, (-4228), (double) 2045, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(9, 9);
      cCSMatrix0.setAll(9);
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 9;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int int1 = 1809;
      cCSMatrix0.minInRow(1809);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt(10, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 1092;
      Matrix.from1DArray(1092, 630, doubleArray0);
      int int0 = 1858;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 8;
      doubleArray1[1] = (double) 1092;
      doubleArray1[0] = (-84.3742794);
      CCSMatrix.from1DArray(799, 1858, doubleArray1);
      int int1 = (-2244);
      int int2 = 1072;
      CCSMatrix.zero(int1, int0, int2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 7;
      int int1 = 1;
      CCSMatrix cCSMatrix0 = new CCSMatrix(7, 7, 1);
      assertNotNull(cCSMatrix0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(7, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(7, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = cCSMatrix0.columnMajorIterator();
      assertNotNull(columnMajorMatrixIterator0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(7, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(7, (-892.0));
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertNotNull(cCSMatrix1);
      assertEquals(7, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(7, cCSMatrix1.cardinality());
      assertEquals(0.14285714285714285, cCSMatrix1.density(), 0.01);
      assertEquals(7, cCSMatrix1.columns());
      assertEquals((-892.0), cCSMatrix1.min(), 0.01);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      
      // Undeclared exception!
      try { 
        cCSMatrix1.mkString((NumberFormat) null, "Sides of block are ncompatible!", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0);
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      
      MatrixIterator matrixIterator0 = cCSMatrix0.nonZeroIterator();
      assertNotNull(matrixIterator0);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      
      CompressedVector compressedVector0 = (CompressedVector)cCSMatrix0.getRow(0);
      assertNotNull(compressedVector0);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1559.503;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 1559.503;
      doubleArray0[7] = (double) 630;
      doubleArray0[8] = (double) 630;
      Matrix matrix0 = Matrix.from1DArray(0, 0, doubleArray0);
      assertNotNull(matrix0);
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertArrayEquals(new double[] {0.0, 1559.503, 0.0, 0.0, 0.0, 0.0, 1559.503, 630.0, 630.0}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[6][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      assertNotNull(cCSMatrix0);
      assertEquals(24, cCSMatrix0.cardinality());
      assertEquals(0.4444444444444444, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(9, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(1559.503, cCSMatrix0.max(), 0.01);
      
      CompressedVector compressedVector0 = (CompressedVector)cCSMatrix0.getRow(2692);
      assertNotNull(compressedVector0);
      assertEquals(24, cCSMatrix0.cardinality());
      assertEquals(0.4444444444444444, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(9, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(1559.503, cCSMatrix0.max(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.iteratorOfColumn(3174);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3174
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 898;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(898, 898);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      CCSMatrix cCSMatrix2 = CCSMatrix.diagonal(898, (-1980.59));
      cCSMatrix0.toRowVector();
      cCSMatrix0.get(898, 898);
      int[] intArray0 = new int[5];
      intArray0[0] = int0;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      int int1 = 141;
      cCSMatrix2.nonZeroAt(int1, int1);
      cCSMatrix0.iteratorOfColumn(int1);
      cCSMatrix0.toRowVector();
      cCSMatrix2.getRow(intArray0[0]);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2398;
      doubleArray0[2] = (double) 0;
      double[][] doubleArray1 = new double[8][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      assertNotNull(cCSMatrix0);
      assertEquals(0.1111111111111111, cCSMatrix0.density(), 0.01);
      assertEquals(8, cCSMatrix0.rows());
      assertEquals(9, cCSMatrix0.columns());
      assertEquals(2398.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(8, cCSMatrix0.cardinality());
      
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(2398);
      cCSMatrix1.nonZeroAt(16, 2055);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.updateAt(2055, 6, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0);
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      
      byte[] byteArray0 = new byte[1];
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.transformColumn(0, vectorFunction0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertNotNull(cCSMatrix1);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1, 7);
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '8' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-13);
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1, 7);
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.rows());
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)cCSMatrix0.multiplyByItsTranspose();
      assertNotNull(cRSMatrix0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        CCSMatrix.zero((-29), 7, (-29));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -29x7
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3273, 3273, 478);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(Double.POSITIVE_INFINITY).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumn(478, vectorAccumulator0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal((-2087831323), 3273);
      double double0 = 1.0;
      cCSMatrix1.setAll(double0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3273, 3273, 478);
      assertNotNull(cCSMatrix1);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(Double.POSITIVE_INFINITY).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumn(478, vectorAccumulator0);
      cCSMatrix0.maxInColumn(0);
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 898;
      intArray0[1] = 898;
      intArray0[2] = 898;
      intArray0[3] = 898;
      intArray0[4] = 898;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(2, 6, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 2045;
      DenseVector denseVector0 = DenseVector.random(2045, mockRandom0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2046
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3273, 3273, 478);
      Double double0 = new Double(Double.POSITIVE_INFINITY);
      cCSMatrix0.maxInColumn(0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      MockRandom mockRandom0 = new MockRandom(3077L);
      cCSMatrix0.getColumn(891);
      cCSMatrix0.iteratorOfColumn(32);
      cCSMatrix0.nonZeroIteratorOfColumn(3273);
      cCSMatrix0.update((MatrixFunction) null);
      int int0 = 2259;
      cCSMatrix0.minInColumn(int0);
      cCSMatrix0.minInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 4022.75;
      doubleArray0[1] = 3030.649241883;
      doubleArray0[2] = 0.0;
      int int0 = 1855;
      CCSMatrix cCSMatrix0 = new CCSMatrix(2, 1855, 2);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 1855);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(7, 7, 1);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cCSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      Matrix matrix0 = cCSMatrix0.to(matrixFactory0);
      matrix0.setAll((-1.0));
      MockRandom mockRandom0 = new MockRandom(4519L);
      CCSMatrix.random(867, 7, 0.0, (Random) mockRandom0);
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 11;
      doubleArray0[1] = (double) 11;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 11;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 11;
      doubleArray0[8] = (double) 11;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(11, 0, doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn(11, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      double[][] doubleArray0 = new double[5][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = (-605.158518751);
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[3] = 0;
      intArray0[5] = 0;
      cCSMatrix0.iteratorOrNonZeroColumns();
      int int0 = 891;
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray(0, 4, doubleArray1);
      // Undeclared exception!
      try { 
        cCSMatrix1.getColumn(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 7;
      CCSMatrix cCSMatrix0 = new CCSMatrix(7, 7);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      cCSMatrix0.columnMajorIterator();
      SparseVector sparseVector0 = SparseVector.zero(1723, 1);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      sparseVector0.to(vectorFactory0);
      // Undeclared exception!
      try { 
        cCSMatrix0.setColumn(903, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(400, 400);
      cCSMatrix0.nonZeroIteratorOfColumn(202);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1092;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1092);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      cCSMatrix0.columnMajorIterator();
      int int0 = 424;
      CCSMatrix cCSMatrix1 = new CCSMatrix(int0, int0);
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure1);
      int[] intArray0 = new int[1];
      intArray0[0] = int0;
      Matrix matrix0 = cCSMatrix0.select(intArray0, intArray0);
      CCSMatrix cCSMatrix2 = CCSMatrix.block(cCSMatrix0, matrix0, cCSMatrix0, cCSMatrix0);
      int int1 = 137;
      cCSMatrix2.getRow(int1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 3;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      byte byte0 = (byte)49;
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3273, 3273, 478);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.iteratorOrNonZeroColumns();
      MockRandom mockRandom0 = new MockRandom(3077L);
      CCSMatrix cCSMatrix1 = CCSMatrix.random(1376, 1376, 0.0, (Random) mockRandom0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZero(matrixProcedure0);
      cCSMatrix0.getOrElse(2972, 3273, (-3782.405508365));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 7;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.randomSymmetric(7, (double) 1, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        CCSMatrix.diagonal((-4154), (-1398.095));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2398;
      doubleArray0[1] = 1558.6257082640566;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 2398;
      doubleArray0[6] = 1558.6257082640566;
      doubleArray0[7] = (double) 630;
      doubleArray0[8] = (double) 630;
      Matrix.from1DArray(0, 2398, doubleArray0);
      double[][] doubleArray1 = new double[6][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CCSMatrix.from2DArray(doubleArray1);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2398);
      cCSMatrix0.nonZeroAt((-1021), 6);
      NumberFormat.getIntegerInstance();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 630;
      intArray0[2] = 630;
      intArray0[3] = 630;
      Matrix matrix0 = cCSMatrix0.select(intArray0, intArray0);
      matrix0.shuffle();
      matrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int int0 = 0;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.setAll(0);
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(7, 7, 7);
      double[] doubleArray0 = new double[4];
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cCSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      Matrix matrix0 = cCSMatrix0.to(matrixFactory0);
      matrix0.setAll((-1.0));
      doubleArray0[1] = (double) 7;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      matrix0.forEach(consumer0);
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.blankOfRows(0);
      cCSMatrix1.setAll(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.updateColumn(0, vectorFunction0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      cCSMatrix1.columnMajorIterator();
      MockRandom mockRandom0 = new MockRandom();
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (-605.158518751);
      doubleArray1[5] = (double) 0;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix2 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix2.copyOfShape(0, 2);
      cCSMatrix1.nonZeroIteratorOfColumn(0);
      CCSMatrix.from1DArray(1355, 32, doubleArray1);
      int int0 = 7;
      int int1 = 32;
      int int2 = 678;
      CCSMatrix.zero(int0, int1, int2);
      int int3 = (-1);
      int int4 = 1346;
      cCSMatrix0.nonZeroAt(int3, int4);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(7, 3132.3427932022614);
      int int0 = 17;
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(2062, mockRandom0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, cCSMatrix0, cCSMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(7, 7, 1);
      double[] doubleArray0 = new double[4];
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cCSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      Matrix matrix0 = cCSMatrix0.to(matrixFactory0);
      matrix0.setAll((-24.28144796773686));
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SQUARE_ROOT;
      cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      doubleArray0[1] = (double) 7;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      matrix0.setAll((-24.28144796773686));
      CCSMatrix.diagonal(1, (-146.0));
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 7;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) (byte)40;
      CCSMatrix.from1DArray(1118, 1118, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3273, 3273, 2522);
      Double double0 = new Double(Double.POSITIVE_INFINITY);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      cCSMatrix0.nonZeroAt((-1232), 6);
      NumberFormat.getIntegerInstance();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3273, 3273, 2522);
      Double double0 = new Double(Double.POSITIVE_INFINITY);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.getColumn(891);
      double double1 = new Double(891);
      cCSMatrix0.minInColumn(2259);
      CCSMatrix.fromCSV("RH?t,YCjm{g");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 630;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1559.503;
      doubleArray0[2] = (double) 0;
      doubleArray0[8] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 1559.503;
      doubleArray0[8] = (double) 630;
      Matrix.from1DArray(0, 0, doubleArray0);
      double[][] doubleArray1 = new double[6][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfColumns(630);
      cCSMatrix0.min();
      cCSMatrix0.toBinary();
      int int1 = 2569;
      int int2 = (-1251);
      cCSMatrix0.minInColumn(630);
      int int3 = 48;
      cCSMatrix1.nonZeroIteratorOfColumn(int3);
      cCSMatrix0.maxInColumn(int2);
      MockRandom mockRandom0 = new MockRandom(int0);
      double double0 = 3017.4652;
      CCSMatrix.randomSymmetric(int1, double0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(3, 3);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-32.28032040637551)).when(matrixAccumulator0).accumulate();
      sparseMatrix0.foldNonZero(matrixAccumulator0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)49;
      double[] doubleArray0 = new double[0];
      Matrix matrix0 = Matrix.from1DArray(2143, 2143, doubleArray0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(sparseMatrix0, sparseMatrix0, matrix0, sparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.setAll(0);
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure1);
      cCSMatrix0.equals((Object) cCSMatrix0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      ColumnMajorSparseMatrix.block(rowMajorSparseMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      MatrixProcedure matrixProcedure2 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure2);
      int[] intArray0 = new int[1];
      intArray0[0] = (-78);
      cCSMatrix0.max();
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 1657;
      MockRandom mockRandom0 = new MockRandom(1000L);
      // Undeclared exception!
      CCSMatrix.random(1657, 7, 1.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 258;
      doubleArray0[1] = (double) 50;
      doubleArray0[2] = (double) 50;
      doubleArray0[3] = (double) 258;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.toColumnMajorSparseMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.removeColumn(3793);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (-605.158518751);
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      Matrix.constant(0, 0, 0.0);
      cCSMatrix0.copyOfShape(0, 2);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      Matrix.identity(2);
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2065);
      cCSMatrix0.trace();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.maxInColumn(803);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.columnMajorIterator();
      double double0 = cCSMatrix0.min();
      cCSMatrix0.iteratorOrNonZeroColumns();
      Matrix matrix0 = cCSMatrix0.copyOfShape(2065, 1480);
      int[] intArray0 = new int[5];
      intArray0[0] = (-7101);
      int int0 = (-293);
      intArray0[1] = (-293);
      intArray0[2] = (-1);
      intArray0[3] = 803;
      intArray0[4] = 803;
      cCSMatrix0.select(intArray0, intArray0);
      int int1 = (-1222);
      double double1 = (-771.890570212746);
      matrix0.set(intArray0[2], intArray0[4], double1);
      matrix0.toBinary();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = double0;
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray(int1, int0, doubleArray0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix1.max();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(7, 7, 1);
      cCSMatrix0.rank();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cCSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      Matrix matrix0 = cCSMatrix0.to(matrixFactory0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, (-1398.095), Double.NEGATIVE_INFINITY, 2.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      matrix0.updateColumn(0, vectorFunction0);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      matrix0.min();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix1.getOrElse(1376, (-1313), 3026.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1376' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2398;
      doubleArray0[1] = 1558.6257082640566;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 1558.6257082640566;
      doubleArray0[7] = (double) 638;
      doubleArray0[8] = (double) 638;
      Matrix.from1DArray(0, 2398, doubleArray0);
      double[][] doubleArray1 = new double[6][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CCSMatrix.from2DArray(doubleArray1);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2398);
      cCSMatrix0.nonZeroAt(638, 6);
      NumberFormat.getIntegerInstance();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 638;
      intArray0[2] = 638;
      intArray0[3] = 638;
      Matrix matrix0 = cCSMatrix0.select(intArray0, intArray0);
      SparseMatrix.from1DArray(2398, (-1), doubleArray0);
      matrix0.shuffle();
      matrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      double[][] doubleArray0 = new double[11][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      Matrix.constant(0, 0, 0.0);
      cCSMatrix0.copyOfShape(0, 2);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      Matrix.identity(2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 2041;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2041);
      cCSMatrix0.add(1875.92496);
      double double0 = new Integer(2041);
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.forEach(consumer0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      int int1 = 3309;
      double[] doubleArray0 = null;
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray(int0, int1, doubleArray0);
      MatrixFactory<CCSMatrix> matrixFactory0 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix2 = cCSMatrix1.to(matrixFactory0);
      int int2 = (-127);
      CCSMatrix.zero(int1, int1);
      cCSMatrix2.getRow(int0);
      int int3 = 1495;
      int int4 = Integer.MAX_VALUE;
      int int5 = 1000;
      cCSMatrix0.copyOfShape(int4, int5);
      int int6 = 983;
      int int7 = 1361;
      CCSMatrix.from1DArray(int7, int2, doubleArray0);
      int int8 = 7;
      CCSMatrix.zero(int8, int6, int8);
      int int9 = (-1374);
      cCSMatrix1.nonZeroAt(int3, int9);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 2059;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2059);
      cCSMatrix0.add((double) 2059);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int int1 = 0;
      cCSMatrix0.minInColumn(0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      int int2 = 803;
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(0, vectorProcedure1);
      Matrix matrix0 = cCSMatrix0.copyOfRows((-1166));
      cCSMatrix0.columnMajorIterator();
      double double0 = (-1150.127);
      cCSMatrix0.setAll(double0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cCSMatrix0.toRowMajorSparseMatrix();
      ColumnMajorSparseMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, cCSMatrix0, matrix0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, matrix0, cCSMatrix0, matrix0);
      cCSMatrix1.each(matrixProcedure0);
      cCSMatrix1.nonZeroAt(int1, int2);
      int int3 = 1686;
      cCSMatrix0.nonZeroAt(int3, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2398;
      doubleArray0[1] = 1559.503;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 2398;
      doubleArray0[6] = 1559.503;
      doubleArray0[7] = (double) 630;
      doubleArray0[8] = (double) 630;
      Matrix.from1DArray(0, 2398, doubleArray0);
      double[][] doubleArray1 = new double[6][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.copyOfShape(3174, 10);
      cCSMatrix0.max();
      cCSMatrix0.blankOfShape(8, 1115);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 3;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(3, 3);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(1.1102230246251565E-14).when(matrixAccumulator0).accumulate();
      double double0 = sparseMatrix0.foldNonZero(matrixAccumulator0);
      byte byte0 = (byte)49;
      NumberFormat.getInstance();
      int int1 = 30;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(30);
      int int2 = 5;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumn(5, vectorAccumulator0);
      int[] intArray0 = new int[0];
      cCSMatrix0.select(intArray0, intArray0);
      int int3 = 5658;
      double[] doubleArray0 = new double[7];
      double double1 = 0.8;
      doubleArray0[0] = double1;
      doubleArray0[1] = (double) int2;
      double double2 = 4905.47495609945;
      doubleArray0[2] = double2;
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = double0;
      doubleArray0[5] = (double) int1;
      doubleArray0[6] = (double) int0;
      CCSMatrix.from1DArray(byte0, int3, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int int0 = 3;
      Matrix matrix0 = cCSMatrix0.blankOfRows(0);
      cCSMatrix0.equals(matrix0, (double) (byte)49);
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1361.3696871238267);
      doubleArray1[1] = (-605.158518751);
      doubleArray1[2] = (double) 0;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray0);
      int int1 = 2130;
      Matrix.constant(2130, 3, 2686.183);
      CCSMatrix cCSMatrix2 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix2.copyOfShape((byte)49, 2130);
      cCSMatrix2.copyOfColumns(2);
      int[] intArray0 = new int[4];
      intArray0[0] = 2130;
      intArray0[1] = 2;
      intArray0[2] = (-1862);
      intArray0[3] = 0;
      cCSMatrix0.select(intArray0, intArray0);
      cCSMatrix1.removeFirstRow();
      Matrix.identity(int0);
      MockRandom mockRandom0 = new MockRandom(int1);
      int int2 = 2027;
      Matrix.random(int2, intArray0[0], mockRandom0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 0;
      int int1 = 2398;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 630;
      doubleArray0[1] = 1559.503;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[5] = (double) 2398;
      doubleArray0[6] = 1559.503;
      double[][] doubleArray1 = new double[5][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      int int2 = 0;
      Matrix.constant(0, 0, 0);
      // Undeclared exception!
      try { 
        cCSMatrix0.copyOfShape(2, 630);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 1;
      CCSMatrix cCSMatrix0 = new CCSMatrix(7, 7, 1);
      cCSMatrix0.rank();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-3096.997962451464), (double)1, (-1470.485), (double)7, (-3096.997962451464)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cCSMatrix0.transformRow(0, vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, (-1398.095), Double.NEGATIVE_INFINITY, 2.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      matrix0.updateColumn(0, vectorFunction1);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      cCSMatrix0.iteratorOfColumn(7);
      int int1 = (-4154);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = (-4154);
      MockRandom mockRandom0 = new MockRandom(2549L);
      // Undeclared exception!
      try { 
        CCSMatrix.random((-1252), 16, (double) (-1252), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 2064;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2064);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(8, vectorFunction0);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)cCSMatrix0.add((double) 2064);
      cCSMatrix0.trace();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      int int1 = 803;
      cCSMatrix0.maxInColumn(803);
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(0, vectorProcedure1);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(2064, 803, 2064);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      ooPlaceMatrixByItsTransposeMultiplication0.apply((DenseMatrix) basic2DMatrix0);
      cCSMatrix1.add((Matrix) basic2DMatrix0);
      cCSMatrix1.iteratorOrNonZeroColumns();
      cCSMatrix1.columnMajorIterator();
      cCSMatrix0.min();
      int int2 = (-460);
      cCSMatrix1.eachNonZeroInColumn(int2, vectorProcedure0);
      int int3 = 1808;
      VectorProcedure vectorProcedure2 = null;
      cCSMatrix1.eachInColumn(int3, vectorProcedure2);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-30);
      byteArray0[0] = byte0;
      byte byte1 = (byte)42;
      byteArray0[1] = byte1;
      CCSMatrix cCSMatrix2 = CCSMatrix.fromBinary(byteArray0);
      int int4 = 631;
      int int5 = 2019;
      cCSMatrix2.insert((Matrix) basic2DMatrix0, int4, int1, int0, int5);
      org.evosuite.runtime.Random.setNextRandom(byteArray0[1]);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2064);
      cCSMatrix0.add((double) 2064);
      cCSMatrix0.trace();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.minInColumn(0);
      cCSMatrix0.maxInColumn(803);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.columnMajorIterator();
      cCSMatrix0.min();
      cCSMatrix0.eachNonZeroInColumn(803, vectorProcedure0);
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(796, vectorProcedure1);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)2;
      byteArray0[1] = (byte) (-91);
      byteArray0[4] = (byte) (-1);
      CCSMatrix.fromBinary(byteArray0);
      org.evosuite.runtime.Random.setNextRandom(byteArray0[0]);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2064);
      cCSMatrix0.add((double) 2064);
      cCSMatrix0.trace();
      cCSMatrix0.minInColumn(2039);
      cCSMatrix0.iteratorOrNonZeroColumns();
      MockRandom mockRandom0 = new MockRandom();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInRow(2054, vectorProcedure0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(48, vectorFunction0);
      org.evosuite.runtime.Random.setNextRandom((-2196));
      cCSMatrix0.maxInColumn(4);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      int int0 = 2051;
      int int1 = (-659);
      cCSMatrix0.getRow(int1);
      int int2 = 1816;
      double double0 = 0.0;
      cCSMatrix0.getOrElse(int0, int2, double0);
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.each(matrixProcedure1);
      cCSMatrix0.min();
      int int3 = 147;
      cCSMatrix1.minInColumn(int3);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2398;
      doubleArray0[1] = 1558.6257082640566;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 2398;
      doubleArray0[6] = 1558.6257082640566;
      doubleArray0[7] = (double) 630;
      doubleArray0[8] = (double) 630;
      Matrix.from1DArray(0, 2398, doubleArray0);
      double[][] doubleArray1 = new double[6][4];
      doubleArray1[1] = doubleArray1[0];
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(2398);
      cCSMatrix0.rank();
      cCSMatrix1.getOrElse((-37), 5, 1101.0);
      int int0 = (-1);
      cCSMatrix0.minInColumn(int0);
  }
}
