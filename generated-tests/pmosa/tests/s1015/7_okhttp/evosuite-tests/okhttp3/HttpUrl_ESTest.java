/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 06:28:13 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownHostException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import okhttp3.HttpUrl;
import okio.Buffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUrl_ESTest extends HttpUrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("7Bw6");
      httpUrl_Builder1.encodedFragment = "7Bw6";
      String string0 = "@#";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("", "@#");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.password("7Bw6");
      String string1 = "iwDKnt*:>r";
      httpUrl_Builder0.host("7Bw6");
      httpUrl_Builder0.setQueryParameter("iwDKnt*:>r", "");
      httpUrl_Builder3.encodedPassword = "s.limit == s.pos";
      // Undeclared exception!
      try { 
        httpUrl_Builder3.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.password((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // password == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(3672, "h`");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3672, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedFragment(":");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removePathSegment(1023);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1023, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedQuery("%40");
      httpUrl_Builder0.removeAllQueryParameters(":");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addPathSegment("?");
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(255, ":");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 255, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addQueryParameter((String) null, "{ZH/6{hz,T[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setQueryParameter((String) null, "::ald hst: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("\r");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("\r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: \r
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("\r", (String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedUsername = "";
      httpUrl_Builder0.addQueryParameter("", (String) null);
      String string0 = "::";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("8[)x/m;t");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(18, " h");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("na*D7:G3/B:73-m8");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("d?QTf(30B");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("r:j");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("Jx5dFko~5VvWN>f`NhN");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.setPathSegment(1939, "mIo9yN^qr[g;>7");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1939, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.fragment(":");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockURL.getHttpExample();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(48, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("/&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: /&
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "GhOt~\\`";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("GhOt~`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: GhOt~`
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("5rwpIgHDJF\"9HmZ  ");
      // Undeclared exception!
      try { 
        HttpUrl.get((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "u8S";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("u8S");
      String string1 = "t('=KH2x3;wyN;";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters("t('=KH2x3;wyN;");
      httpUrl_Builder2.addPathSegment("t('=KH2x3;wyN;");
      String string2 = "";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addQueryParameter("", "");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.encodedPath("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addPathSegments("");
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("okhttp3.HttpUrl");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment(")lsUcEgX9)qGe'sUG");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegments("http");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.password("");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.encodedFragment("(2d9oMi*q;10");
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("-GD");
      httpUrl_Builder1.encodedQuery("-GD");
      httpUrl_Builder1.setEncodedPathSegment(0, "timeout < 0: ");
      String string0 = "*+#9mM";
      try { 
        HttpUrl.getChecked("*+#9mM");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for *+#9mM
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(1268, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      try { 
        HttpUrl.getChecked("t4QZD-n!eaf5>o,");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for t4QZD-n!eaf5>o,
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "aXw";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedPathSegment(0, "aXw");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.query((String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("o%60_", "HvEyIB]>", true, true, true, true);
      assertEquals("o%60_", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedQueryParameter("W4d", "encodedName == null");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("");
      httpUrl_Builder1.removeAllEncodedQueryParameters("");
      httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("");
      httpUrl_Builder2.query("");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = HttpUrl.decodeHexDigit('1');
      assertEquals(1, int0);
      
      int int1 = HttpUrl.defaultPort("");
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("[\u0000-\u001F-\u009Fp{javaWhitespace}]", (-403), (-403));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("username == null", 5, 90);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("\r");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port((-1467));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -1467
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("HmacSHA1", "");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(2851);
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.username(")AZr!x0b");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.host(")AZr!x0b");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.port(2048);
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removePathSegment(1332);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1332, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.username((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // username == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "encodedPathSegment == null";
      HttpUrl.percentDecode("encodedPathSegment == null", false);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("encodedPathSegment == null", "encodedPathSegment == null");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setEncodedPathSegment(37, "encodedPathSegment == null");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 37, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "/&";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPath("/&");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("/&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: /&
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      try { 
        HttpUrl.getChecked("http:/");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:/
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.port(5);
      String string0 = "=";
      httpUrl_Builder0.host("=");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("gzbdbQBI}=']O");
      // Undeclared exception!
      try { 
        HttpUrl.pathSegmentsToString((StringBuilder) null, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("\r");
      httpUrl_Builder1.port(39);
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/fooexample");
      httpUrl0.encodedFragment();
      URL uRL0 = MockURL.getHttpExample();
      MockURL.getAuthority(uRL0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue((-1284));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("Invalid host: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: Invalid host: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :@
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("<Z$W9miO", "");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("<Z$W9miO");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "UEs88uoQXw-";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("UEs88uoQXw-");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("UEs88uoQXw-");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setQueryParameter("\u2026]", "");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.fragment("UEs88uoQXw-");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.setEncodedPathSegment((-3538), "\u2026]");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "\u2026";
      httpUrl_Builder0.encodedUsername("\u2026");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "%2B";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("%2B");
      String string1 = "B,D 7a}Diy{9Ne";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.encodedPath("B,D 7a}Diy{9Ne");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: B,D 7a}Diy{9Ne
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("1E7;O{r-P#w");
      httpUrl_Builder0.addEncodedPathSegment("._X%7D$:N");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("1E7;O{r-P#w", "?kZl");
      httpUrl_Builder1.addPathSegments("-");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedQuery("scheme == null");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("encodedName == null");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment("encodedName == null");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("encodedName == null");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedUsername("MISSING_SCHEME");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.host("encodedName == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addPathSegment("%2e");
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("%2B");
      String string0 = "B,D 7a}Diy{9Ne";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.encodedPath("B,D 7a}Diy{9Ne");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: B,D 7a}Diy{9Ne
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwelformedurl.org/fooexample");
      httpUrl0.queryParameterNames();
      String string0 = "\\n not found: size=";
      try { 
        MockURL.URL("https:/www.somefakebutwelformedurl.org/fooexample", "Expected leading [0-9a-fA-F] character but was %#x", 33, "\n not found: size=");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: https:/www.somefakebutwelformedurl.org/fooexample
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("@/?#", "d(h![An! U");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment("d(h![An! U");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("&+");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedQueryParameter("}lT~R.Yxp$KMH?", "}lT~R.Yxp$KMH?");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.removeAllQueryParameters("");
      httpUrl_Builder5.setPathSegment(0, "J?Ts\"X#f*VrC+tAf");
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameterNames();
      httpUrl0.encodedFragment();
      int int0 = httpUrl0.port();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "lV";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.parse((HttpUrl) null, "lV");
      int int0 = 1375;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removePathSegment(1375);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1375, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(".%2e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: .%2e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/fooexample");
      String string0 = httpUrl0.encodedUsername();
      assertEquals("", string0);
      
      httpUrl0.queryParameterValues("https:/www.somefakebutwellformedurl.org/fooexample");
      assertEquals(443, httpUrl0.port());
      assertEquals("https://www.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("mIo9yN%5C%5Eqr[g;%3E7");
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterName(974);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":");
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder(":");
      assertNotNull(httpUrl_Builder0);
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/ww.somefaebutwellformedurl.org/fooexample");
      httpUrl0.encodedPathSegments();
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = "https:/www.somefakebutwellformedurl.org/fooexample";
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/fooexample");
      httpUrl0.encodedPath();
      String string1 = "";
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removePathSegment(128);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 128, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HttpUrl.parse("d*QTf(301");
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, "d*QTf(301", 123, 123, false);
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "%2e.";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("%2e.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: %2e.
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/fooexample");
      httpUrl0.equals((Object) null);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName((-3549));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "1E7;O{\\N-#w";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("1E7;O{N-#w");
      httpUrl_Builder1.addEncodedQueryParameter("1E7;O{N-#w", "?kZl");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query("1E7;O{N-#w");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("FHCRC");
      linkedList0.add(locale_LanguageRange0);
      httpUrl_Builder2.removeAllEncodedQueryParameters("(3");
      httpUrl_Builder2.reencodeForUri();
      StringBuilder stringBuilder0 = new StringBuilder("I");
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "?kZl");
      int int0 = (-1032);
      // Undeclared exception!
      try { 
        stringBuilder1.replace((-1032), (-1032), "I");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1032
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedQuery("zY)-<*%-");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(36);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("http:");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllQueryParameters("http:");
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "XM,%]Bdd{Y[|h$r+<";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("XM,%]Bdd{Y[|h$r+<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: XM,%]Bdd{Y[|h$r+<
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HttpUrl.percentDecode("@bu+J", true);
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize((String) null, 2083, 2083, (String) null, true, true, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "d*QTq(301";
      HttpUrl.percentDecode("d*QTq(301", false);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("d*QTq(301");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("\"+TY ", "d*QTq(301");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.setPathSegment((-1130), "9Yi<&93X1?%Z(qA/");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "d*QTq(301";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string1 = "v)HQZ$Qa(U(4XP`u?";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("v)HQZ$Qa(U(4XP`u?", (String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery((String) null);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("+", (String) null);
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("9yi%3c&93x1%3f%25z(qa%2f");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "d*QTq(301";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedPassword = "E";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("&-Pj%3CJLrFvVi%7DS%3E");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.port((-1688));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -1688
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HttpUrl.percentDecode("encodedName == null", true);
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "encodedName == null", uRLStreamHandler0);
      URL uRL2 = MockURL.URL(uRL1, "encodedName == null");
      HttpUrl httpUrl0 = HttpUrl.get(uRL2);
      assertNotNull(httpUrl0);
      
      httpUrl0.scheme();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/encodedName%20==%20null", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpUrl.parse("t4QZD-n!eaf5>o,");
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/.");
      assertNotNull(httpUrl0);
      
      int int0 = httpUrl0.pathSize();
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("in");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("[size=", "data == null");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setQueryParameter("[size=", "data == null");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      try { 
        HttpUrl.getChecked("Y1V`TcNs.[c|-^}TB");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for Y1V`TcNs.[c|-^}TB
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      String string0 = "https:/www.somefakebutwellformedurl.org/encodedname == null";
      httpUrl_Builder0.encodedUsername("https:/www.somefakebutwellformedurl.org/encodedname == null");
      HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/encodedname == null");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.removePathSegment((-1548));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("yKs<u5Z8dV.z gtMr");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedUsername("encodedName == null");
      httpUrl_Builder2.addPathSegment("encodedName == null");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedFragment("http:/");
      String string0 = "{.%5R1ZQe";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addPathSegment("{.%5R1ZQe");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.reencodeForUri();
      httpUrl_Builder5.fragment((String) null);
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder1.addQueryParameter("https:mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/", "Expected leading [0-9] or '-' character but was %#x");
      // Undeclared exception!
      try { 
        httpUrl_Builder6.encodedPath("http:/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: http:/
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "encodedName == null";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery(">+%Kd)nLCa.|WU-)i2u");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment("encodedName == null");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.port(847);
      httpUrl_Builder2.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder3.encodedPath("-GD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: -GD
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.password();
      assertEquals("", string0);
      
      httpUrl0.newBuilder();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:e");
      httpUrl0.newBuilder();
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName((-1698));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/fooexample");
      httpUrl0.encodedQuery();
      httpUrl0.queryParameter("OK'l`<jW_^");
      httpUrl0.queryParameterValues("@/bq#LU*");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameterNames();
      String string0 = httpUrl0.encodedFragment();
      assertNull(string0);
      
      String string1 = httpUrl0.encodedPath();
      assertEquals("/fooExample", string1);
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery(">+%Kd)nLCa.|WU-)i2u");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment("encodedName == null");
      httpUrl_Builder2.port(847);
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("E:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: E:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "::ald hst: ";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("::ald hst: ");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(65535);
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host("::ald hst: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ::ald hst: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "EP:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("EP:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: EP:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      httpUrl_Builder1.addPathSegment("https:/www.somefakebutwellformedurl.org/encodedname == null");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/encodedname == null");
      httpUrl0.encodedPassword();
      assertEquals("https://www.somefakebutwellformedurl.org/encodedname%20==%20null", httpUrl0.toString());
      
      int int0 = HttpUrl.decodeHexDigit(':');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("-GD");
      httpUrl_Builder1.encodedQuery("-GD");
      httpUrl_Builder1.setEncodedPathSegment(0, "-GD");
      String string0 = "*+#9mM";
      int int0 = 974;
      try { 
        HttpUrl.getChecked("https:");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: https:
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("XM,%]Bdd{Y[|h$r+<");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("XM,%]Bdd{Y[|h$r+<");
      httpUrl_Builder0.password("^q9%8Ex]C5Gp\"LB");
      httpUrl_Builder2.encodedPassword("KW~t#l`;)nR2H7g0 dr");
      httpUrl_Builder2.reencodeForUri();
      // Undeclared exception!
      try { 
        HttpUrl.get((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      httpUrl_Builder1.addPathSegment("https:/www.somefakebutwellformedurl.org/encodedname == null");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/encodedname == null");
      httpUrl0.encodedPassword();
      httpUrl0.isHttps();
      URI uRI0 = httpUrl0.uri();
      URI uRI1 = MockURI.normalize(uRI0);
      HttpUrl.get(uRI1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("3");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("d*QTf(301");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.query("3");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedQuery("j*]-E4]-ytR% k ,");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.removeAllQueryParameters("3");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.setQueryParameter("d*QTf(301", "d*QTf(301");
      httpUrl_Builder6.reencodeForUri();
      httpUrl_Builder5.encodedFragment("d*QTf(301");
      // Undeclared exception!
      try { 
        httpUrl_Builder6.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, "%20%22'%3C%3E%23", (-1503), (-1503), true);
      httpUrl0.url();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment((String) null);
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.query((String) null);
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedQuery("wwI*:Px'vo]V&+_y?GG");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.host("('iC3.n.h~ty");
      try { 
        HttpUrl.getChecked("v:$*Fs6'k^");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for v:$*Fs6'k^
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.pathSegments();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "}S}lvc6B";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(8, "}S}lvc6B");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("..");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("*v9f-V<=.i5=", "*v9f-V<=.i5=");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedPath("/Content-Length (");
      httpUrl_Builder2.addPathSegment("%7Co%7D0gd(SB(");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.somefakebutwellformedurl.org/fooexample");
      httpUrl0.query();
      httpUrl0.queryParameterNames();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)14;
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)3;
      byte byte1 = (byte) (-61);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)59;
      byte byte2 = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte)97;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      try { 
        HttpUrl.getChecked("WBb+G}% U##");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for WBb+G}% U##
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "..";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("..");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("_Mi/W4_)(vEz%QPSj5I");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter("..", "..");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegments("..");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.encodedPath("])V\"|-[t+a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: ])V\"|-[t+a
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedPath("/..");
      String string0 = "9::";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("9::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", "https");
      URL uRL1 = MockURL.URL(uRL0, ".gdylz=[Cn0t4Kg", (URLStreamHandler) null);
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      httpUrl0.queryParameterValues("\u2026]");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ",29DdFS#yXm.!LG9");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue((-1132515245));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("yOtcN*Ynp.y5^2o");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("Content-Length (");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("o@d&j");
      String string0 = "`6l'n~j^Nf";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.password("o@d&j");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.setEncodedQueryParameter("`6l'n~j^Nf", "jKsZ~77X4^>|;57");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.password("o@d&j");
      httpUrl_Builder4.removeAllEncodedQueryParameters("Content-Length (");
      URL uRL1 = MockURL.getHttpExample();
      HttpUrl httpUrl1 = HttpUrl.get(uRL1);
      httpUrl1.url();
      httpUrl0.query();
      HttpUrl.defaultPort("%40");
      httpUrl0.encodedPathSegments();
      httpUrl0.encodedQuery();
      httpUrl1.password();
      httpUrl_Builder6.parse(httpUrl1, "R3CQJQ&utM=/XZ#gd9");
      httpUrl_Builder3.query("3S=p'N7t`q@;7;");
      httpUrl1.fragment();
      String string1 = "_Mi%2FW4_)(vEz%QPSj5I";
      // Undeclared exception!
      try { 
        HttpUrl.get((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("Zb{ji2weJaw?");
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterName(974);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1948, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/fooexample");
      HttpUrl httpUrl1 = httpUrl0.resolve("@/?#");
      httpUrl1.queryParameterValues("https:/www.somefakebutwellformedurl.org/fooexample");
      httpUrl1.hashCode();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:cd?u5thsgment80==%20nmll#g%23h<mjc'%202%z%28d6'op");
      httpUrl0.queryParameterValues("https:cd?u5thsgment80==%20nmll#g%23h<mjc'%202%z%28d6'op");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/fooexample");
      httpUrl0.newBuilder("");
      try { 
        HttpUrl.getChecked("");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = "9:";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedUsername = "9:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = " j/9*\"t(";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query(" j/9*\"t(");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      httpUrl_Builder2.addEncodedQueryParameter(" j/9*\"t(", "source == this");
      httpUrl_Builder0.encodedUsername("source == this");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.resolve("\n");
      try { 
        HttpUrl.getChecked("\n");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("..");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("_Mi/W4_)(vEz%QPSj5I");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("..");
      httpUrl_Builder3.addEncodedPathSegments("..");
      try { 
        HttpUrl.getChecked("_Mi/W4_)(vEz%QPSj5I");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for _Mi/W4_)(vEz%QPSj5I
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.queryParameterNames();
      httpUrl0.username();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.queryParameterNames();
      MockURL.toString(uRL0);
      httpUrl0.redact();
      httpUrl0.scheme();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "[:@";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[:@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [:@
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removePathSegment(0);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      try { 
        HttpUrl.getChecked("http:encoddpathsegment%0==%20null#g%23hq8jc]w%202%23%228d62op");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:encoddpathsegment%0==%20null#g%23hq8jc]w%202%23%228d62op
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.queryParameterNames();
      MockURL.toString(uRL0);
      httpUrl0.host();
      httpUrl0.encodedFragment();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HttpUrl.parse("https:/www.somefak\butwellformedurs.org/fooexample");
      HttpUrl.parse("https:/www.somefak\butwellformedurs.org/fooexample");
      try { 
        HttpUrl.getChecked("@/?#");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for @/?#
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/fooexample");
      httpUrl0.url();
      httpUrl0.equals(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = "\r";
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = true;
      HttpUrl.percentDecode("\r", true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("\r");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("\r");
      int int0 = (-182);
      httpUrl_Builder0.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder2.removePathSegment((-182));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = " j/9*\"t(";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query(" j/9*\"t(");
      httpUrl_Builder1.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("\"bVfY;`>4q^%^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: \"bVfY;`>4q^%^
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwelformedurl.org/fooexample");
      httpUrl0.resolve("%2e.");
      try { 
        HttpUrl.getChecked("%2e.");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for %2e.
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/fooexample");
      HttpUrl httpUrl1 = httpUrl0.resolve("@/?#");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl1.newBuilder();
      HttpUrl.parse("Lu1QS8cniuQ");
      httpUrl_Builder0.build();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "\r";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query("\r");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("K_l9~K*;Ny9(#u");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.port(2677);
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedPassword("\r");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.setPathSegment(101, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 101, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/fooexample");
      httpUrl0.url();
      HttpUrl httpUrl1 = httpUrl0.resolve("https:/www.somefakebutwellformedurl.org/fooexample");
      httpUrl0.equals(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/fooexample");
      httpUrl0.scheme();
      httpUrl0.querySize();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.smefakebutwelformedurl.org/fRoexample");
      httpUrl0.resolve("%2e.");
      httpUrl0.resolve("%2e.");
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/fooexample");
      String string0 = "@/\\?#";
      HttpUrl httpUrl1 = httpUrl0.resolve("@/?#");
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterValue(4294);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8589, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/fooexample");
      httpUrl0.resolve(".%2e");
      try { 
        HttpUrl.getChecked("byteString == null");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for byteString == null
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "%W6}Lp)a/92vcZRM";
      String string1 = ".";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(4274, ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = 0;
      httpUrl_Builder0.addEncodedPathSegments(" \"':;<=>@[]^`{}|/?#&!$(),~");
      httpUrl_Builder0.removePathSegment(0);
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:encod?Uathsegment80==%20null#g%23hq8jc]w%202%23%328d62op");
      httpUrl0.uri();
      httpUrl0.resolve("Expected leading [0-9] or '-' character but was %#x");
      httpUrl0.queryParameterNames();
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("}Vu|VYs4+;bkN~", (-44), (-44), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:cd?u5thsgment80==%20nmll#g%23hq8jc'%202%z%28d6'op");
      httpUrl0.queryParameterNames();
      httpUrl0.username();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:encod?Uathsegment80==%20null#g%23hq8jc]w%202%23%328d62op");
      httpUrl0.query();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "http:encod?Uathsegment80==%20null#g%23hq8jc]w%202%23%328d62op", uRLStreamHandler0);
      URL uRL2 = MockURL.URL(uRL1, "Uathsegment80== null");
      HttpUrl.get(uRL2);
      HttpUrl.percentEncoded("Uathsegment80== null", 22, 2);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:encod?Uathsegment80==%20null#g%23hq8jc]w%202%23%328d62op");
      httpUrl0.queryParameter("Invalid host: ");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpUrl httpUrl0 = HttpUrl.parse("https:cd?u5thsgment80==%20nmll#g%23h<mjc'%202%z%28d6'op");
      httpUrl0.queryParameter("https:cd?u5thsgment80==%20nmll#g%23h<mjc'%202%z%28d6'op");
      httpUrl0.host();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("5.:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 5.:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "::d.h`}t: ";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::d.h`}t: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ::d.h`}t: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(0, "%2e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: %2e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HttpUrl.parse("https:ncod%3fuathsGgm'nR80==%2|20null%23g%-,23hq8jc]%2520;%2523%2532,IV2op");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("}~6");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("-p#bdw1Vn(,aR/TTs");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.password("@vA");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.username("-p#bdw1Vn(,aR/TTs");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedPathSegments("http:encod%3fuathsegment80==%20null%23g%23hq8jc]w%202%2u%328d62op");
      httpUrl_Builder5.encodedFragment("/");
      httpUrl_Builder5.reencodeForUri();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "\n";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0=;dX&V,iM~PV?534");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("0=;dX&V,iM~PV?534", "\n");
      int int0 = 791;
      // Undeclared exception!
      try { 
        httpUrl_Builder1.removePathSegment(791);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 791, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("6.Q77A-2k:8.m&)/I");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("6.Q77A-2k:8.m&)/I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 6.Q77A-2k:8.m&)/I
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HttpUrl.percentEncoded("source exhausted prematurely", 11, 63);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("source exhausted prematurely");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HttpUrl.parse("http:encod?U5thsegment80==%20null#g%23hq8jc0w%202%U%328d62op");
      HttpUrl.parse("size < 8: ");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ":g@HY4YC+U%5Ezk%60m%25";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("'P5?2khCn-vm", ":g@HY4YC+U%5Ezk%60m%25");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.username("http:encod?U5thsegment80==%20null#g%23hq8jc0w%202%U%328d62op");
      httpUrl_Builder2.removeAllEncodedQueryParameters("http:encod?U5thsegment80==%20null#g%23hq8jc0w%202%U%328d62op");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllEncodedQueryParameters(":g@hy4yc+u%5ezk%60m%25");
      httpUrl_Builder3.addEncodedQueryParameter("http:encod?U5thsegment80==%20null#g%23hq8jc0w%202%U%328d62op", "%40");
      try { 
        HttpUrl.getChecked("https:/http:76http");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: INVALID_PORT for https:/http:76http
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      URL uRL0 = MockURL.URL("http", "", 73, "");
      HttpUrl.get(uRL0);
      try { 
        HttpUrl.getChecked("http");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for http
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", ":", ":");
      HttpUrl.get(uRL0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.parse("9::");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("https", "9::", 65533, "https", uRLStreamHandler0);
      URL uRL1 = MockURL.URL(uRL0, ")/>fn\"JVGRJA", (URLStreamHandler) null);
      // Undeclared exception!
      try { 
        HttpUrl.get(uRL1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.parse("$");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("https", "https", 65547, "$");
      URL uRL1 = MockURL.URL(uRL0, ")/>fn\"JVGRJA", (URLStreamHandler) null);
      HttpUrl.get(uRL1);
      try { 
        HttpUrl.getChecked(")/>fn\"JVGRJA");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for )/>fn\"JVGRJA
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("9:F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 9:F
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }
}
