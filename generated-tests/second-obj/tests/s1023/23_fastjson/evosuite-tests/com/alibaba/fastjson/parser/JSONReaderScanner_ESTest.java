/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:20:15 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.math.BigDecimal;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONReaderScanner_ESTest extends JSONReaderScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[16];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 83);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(9999999, 9999999, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("`R[0!=t oj+");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.addSymbol(26, 0, 26, (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[16];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal state, textLength is zero");
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Q.:Iz26Z6");
      jSONReaderScanner0.nextIdent();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString(3829, (-315));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -315
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[16];
      charArray0[2] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+5h-QE");
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      boolean boolean1 = jSONReaderScanner0.isEOF();
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[16];
      charArray0[3] = 'N';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Z");
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.numberString();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+5h-QE");
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      assertFalse(boolean0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals("", string0);
      
      jSONReaderScanner0.sub_chars(70, 34);
      assertEquals('+', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      char char0 = jSONReaderScanner0.charAt(15);
      assertEquals('\u001A', char0);
      
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[16];
      charArray0[2] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertTrue(boolean0);
      
      jSONReaderScanner0.subString(1695, 1695);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 999999999);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSONReaderScanner0;
      objectArray0[1] = (Object) charArray0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      jSONReaderScanner0.scanFieldLong(charArray0);
      char char0 = jSONReaderScanner0.next();
      assertEquals('\u001A', char0);
      
      int int0 = jSONReaderScanner0.indexOf('\u001A', 1469);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(1469, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[16];
      charArray0[2] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+5h-QE");
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      assertFalse(boolean0);
      
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.close();
      assertEquals('+', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 899, (-2787));
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertFalse(boolean0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[16];
      charArray0[2] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("wD+");
      byte[] byteArray0 = jSONReaderScanner0.bytesValue();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals('w', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1xtN^tC)");
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('K');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 73, (-2787));
      Locale locale0 = new Locale("", "");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[16];
      charArray0[2] = '\u0018';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("HGk<s'%:8Y1*", 65279);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars(65279, (-1572));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1572
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1DblN'|vB~7OLzs", 1077);
      jSONReaderScanner0.subString(1077, 1077);
      assertEquals('1', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Q.:I>z26Z6");
      jSONReaderScanner0.nextIdent();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.indexOf('8', 234);
      assertEquals(18, jSONReaderScanner0.token());
      
      String string0 = jSONReaderScanner0.numberString();
      assertEquals(".", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SymbolTable symbolTable0 = new SymbolTable('');
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '');
      boolean boolean0 = jSONReaderScanner0.hasSpecial;
      System.setCurrentTimeMillis(277L);
      BigDecimal bigDecimal0 = new BigDecimal((int) '');
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.indexOf('0', 70);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      int int0 = 3426;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3426);
      jSONReaderScanner0.matchField(charArray0);
      int int1 = 16384;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(3426, charArray0, 16384, (-36));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "Q.:I>z26Z6";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      int int0 = 28;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 613, 28);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[16];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("wD+");
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(" ");
      jSONReaderScanner1.isBlankInput();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("DisableCheckSpecialChar");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.numberString();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      char[] charArray0 = new char[11];
      charArray0[0] = '3';
      int int0 = (-163);
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-163), (-163));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("wD+");
      jSONReaderScanner0.scanLong('P');
      jSONReaderScanner0.scanIdent();
      int int0 = 83;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("wD+", 83);
      jSONReaderScanner1.indexOf('a', 2718);
      jSONReaderScanner1.scanNumber();
      jSONReaderScanner0.numberString();
      jSONReaderScanner1.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SymbolTable symbolTable0 = new SymbolTable(64);
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 's');
      jSONReaderScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0, (-1));
      jSONReaderScanner1.scanIdent();
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner1.scanIdent();
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner1.charAt(64);
      char[] charArray0 = new char[6];
      charArray0[0] = '\u001A';
      charArray0[1] = 'N';
      charArray0[2] = '\u001A';
      charArray0[3] = '\u001A';
      charArray0[4] = '\u001A';
      charArray0[5] = '\u001A';
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 241);
      jSONReaderScanner2.scanFieldLong(charArray0);
      jSONReaderScanner2.stringVal();
      jSONReaderScanner2.isBlankInput();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 88;
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      int int1 = 66;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66, 88);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.isBlankInput();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("xD");
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charAt(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }
}
