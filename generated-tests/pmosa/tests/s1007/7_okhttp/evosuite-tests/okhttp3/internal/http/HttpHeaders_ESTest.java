/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 10:25:12 GMT 2018
 */

package okhttp3.internal.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import okhttp3.Challenge;
import okhttp3.CookieJar;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.internal.http.HttpHeaders;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpHeaders_ESTest extends HttpHeaders_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn((Headers) null).when(response0).headers();
      // Undeclared exception!
      try { 
        HttpHeaders.hasVaryAll(response0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "";
      HttpHeaders.skipWhitespace("", 0);
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      HttpUrl.parse("");
      // Undeclared exception!
      try { 
        HttpHeaders.varyHeaders((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("?PhG9/y9.{42-i", "?PhG9/y9.{42-i");
      hashMap0.put("*", "p4l");
      hashMap0.put("*", "\"([^\"]*)\"");
      hashMap0.put("Transfer-Encoding", "\"([^\"]*)\"");
      hashMap0.put("HEAD", "P. ;UcJ");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      headers0.names();
      headers0.values("HEAD");
      boolean boolean0 = HttpHeaders.hasVaryAll(headers0);
      assertFalse(boolean0);
      
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      HttpHeaders.receiveHeaders(cookieJar0, (HttpUrl) null, headers0);
      Headers.of((Map<String, String>) hashMap0);
      headers0.names();
      int int0 = HttpHeaders.skipUntil("", 0, (String) null);
      assertEquals(0, int0);
      
      int int1 = HttpHeaders.parseSeconds("\"([^\"]*)\"", (-361));
      assertEquals((-361), int1);
      
      HttpHeaders.varyFields(headers0);
      HttpHeaders.parseChallenges(headers0, "");
      Set<String> set0 = HttpHeaders.varyFields(headers0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = HttpHeaders.skipWhitespace("PUT", 1344);
      assertEquals(1344, int0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      boolean boolean0 = HttpHeaders.hasVaryAll(headers0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      HttpHeaders.receiveHeaders(cookieJar0, (HttpUrl) null, headers0);
      assertEquals(0, headers0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "L#0}.N85gw|Qr";
      stringArray0[1] = "L#0}.N85gw|Qr";
      Headers headers0 = Headers.of(stringArray0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertEquals(0, headers1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = HttpHeaders.skipWhitespace("([^ ,=]})", 0);
      int int1 = HttpHeaders.parseSeconds("([^ ,=]})", 0);
      assertEquals(0, int1);
      
      int int2 = HttpHeaders.skipUntil("([^ ,=]})", 0, "([^ ,=]})");
      assertTrue(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HttpHeaders.skipWhitespace("([^ ,=]})", 0);
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      HttpHeaders.parseSeconds("([^ ,=]})", (-1612));
      // Undeclared exception!
      try { 
        HttpHeaders.contentLength((Headers) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.contentLength((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HttpHeaders.parseSeconds("http/1.1", 6);
      HttpHeaders.skipUntil("0[!Q/YG$7^< ", 6, "http/1.1");
      HttpHeaders.skipWhitespace("http/1.1", 6);
      String string0 = "source == null";
      HttpHeaders.parseSeconds("source == null", 6);
      HttpHeaders.skipWhitespace("0[!Q/YG$7^< ", 0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "0[!Q/YG$7^< ";
      stringArray0[1] = "0[!Q/YG$7^< ";
      stringArray0[2] = "source == null";
      stringArray0[3] = "source == null";
      stringArray0[4] = "http/1.1";
      // Undeclared exception!
      try { 
        Headers.of(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected alternating header names and values
         //
         verifyException("okhttp3.Headers", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers1, "+&");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      hashMap0.put("?phg9/y9.{42-i", (String) null);
      long long0 = HttpHeaders.contentLength(headers0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("bab&eRD", ", code=");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "bab&eRD");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "code=";
      stringArray0[1] = "P0Kp\"K3&2>K>$kPkp2";
      stringArray0[2] = "Content-Length";
      stringArray0[3] = "https:";
      stringArray0[4] = "";
      stringArray0[5] = "Xg]o_3aq>C_T4J,eZje";
      stringArray0[6] = "l-o";
      stringArray0[7] = "okhttp3.internal.http.HttpHeaders";
      // Undeclared exception!
      try { 
        Headers.of(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected header: : Xg]o_3aq>C_T4J,eZje
         //
         verifyException("okhttp3.Headers", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      int int0 = HttpHeaders.skipWhitespace(" +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)", 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = HttpHeaders.parseSeconds("38", (-833));
      assertEquals(38, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("vary", "884d+cfe");
      hashMap0.put("vary", "iu 7]luqa\u0001-n");
      hashMap0.put("POST", "POST");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      headers0.toString();
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertEquals(0, headers1.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("vary", "884d+cfe");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      HttpHeaders.skipWhitespace("vary", 32);
      // Undeclared exception!
      try { 
        HttpHeaders.varyMatches((Response) null, headers1, (Request) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("vary", "vary");
      hashMap0.put("Vary", ";z?>,'}BTS.{S;+");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertEquals(1, headers1.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = HttpHeaders.parseSeconds("; realm,t=uttz", 12);
      int int1 = HttpHeaders.skipWhitespace("; realm,t=uttz", 12);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "; realm,t=uttz";
      stringArray0[1] = "; realm,t=uttz";
      stringArray0[2] = "; realm,t=uttz";
      stringArray0[3] = "; realm,t=uttz";
      stringArray0[4] = "; realm,t=uttz";
      stringArray0[5] = "5-2fX";
      stringArray0[6] = "; realm,t=uttz";
      stringArray0[7] = "; realm,t=uttz";
      Headers headers0 = Headers.of(stringArray0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "; realm,t=uttz");
      assertTrue(list0.isEmpty());
  }
}
