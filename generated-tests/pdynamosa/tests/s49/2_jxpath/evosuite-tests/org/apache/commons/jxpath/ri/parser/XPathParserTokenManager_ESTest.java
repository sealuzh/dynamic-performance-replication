/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 14:46:12 GMT 2019
 */

package org.apache.commons.jxpath.ri.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.util.Enumeration;
import org.apache.commons.jxpath.ri.parser.SimpleCharStream;
import org.apache.commons.jxpath.ri.parser.Token;
import org.apache.commons.jxpath.ri.parser.XPathParserTokenManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathParserTokenManager_ESTest extends XPathParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager((SimpleCharStream) null);
      assertNotNull(xPathParserTokenManager0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(xPathParserTokenManager0.debugStream);
      assertNotNull(mockPrintStream0);
      
      xPathParserTokenManager0.setDebugStream(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      xPathParserTokenManager0.ReInit(simpleCharStream0, 0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager((SimpleCharStream) null);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit((SimpleCharStream) null, 48);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 48. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 30, 30, 43);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(42, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals("", token0.toString());
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, 43);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 43. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QwyA%u");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      simpleCharStream0.adjustBeginLineColumn((-1260), (-2717));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals((-1259), simpleCharStream0.getBeginLine());
      assertEquals((-2717), simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals((-1259), simpleCharStream0.getBeginLine());
      assertEquals((-2717), simpleCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, (-3700));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -3700. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager((SimpleCharStream) null);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.ReInit((SimpleCharStream) null);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 33, 43, 43);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(42, simpleCharStream0.bufpos);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals("", token0.toString());
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(42, simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QwyA%u");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1812), (-1371), 1635);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals((-1812), token0.endLine);
      assertEquals((-1371), token0.beginColumn);
      assertEquals((-1368), token0.endColumn);
      assertEquals((-1812), token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals((-1371), simpleCharStream0.getBeginColumn());
      assertEquals((-1368), simpleCharStream0.getEndColumn());
      assertEquals((-1368), simpleCharStream0.getColumn());
      assertEquals((-1812), simpleCharStream0.getLine());
      assertEquals((-1812), simpleCharStream0.getBeginLine());
      assertEquals((-1812), simpleCharStream0.getEndLine());
      assertEquals("QwyA", token0.toString());
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals((-1371), simpleCharStream0.getBeginColumn());
      assertEquals((-1368), simpleCharStream0.getEndColumn());
      assertEquals((-1368), simpleCharStream0.getColumn());
      assertEquals((-1812), simpleCharStream0.getLine());
      assertEquals((-1812), simpleCharStream0.getBeginLine());
      assertEquals((-1812), simpleCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jxpath.ri.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"following-sibling::\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      int[] intArray0 = new int[3];
      simpleCharStream0.bufcolumn = intArray0;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.jxpath.ri.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager((SimpleCharStream) null);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.SwitchTo(0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_L&]~QP");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 64, 0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo(64);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 64. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("`anwMgy}Yer4");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1347), 0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, 0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo((-974));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -974. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("subistring");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 61, (byte)15);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(9, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(24, token0.endColumn);
      assertEquals(61, token0.beginLine);
      assertEquals(61, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(15, token0.beginColumn);
      assertEquals(61, simpleCharStream0.getLine());
      assertEquals(24, simpleCharStream0.getEndColumn());
      assertEquals(61, simpleCharStream0.getBeginLine());
      assertEquals(24, simpleCharStream0.getColumn());
      assertEquals(61, simpleCharStream0.getEndLine());
      assertEquals(15, simpleCharStream0.getBeginColumn());
      assertEquals("subistring", token0.toString());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-123);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)67, (byte) (-41), (byte) (-123)}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (-841), 204, (byte)67);
      assertNotNull(simpleCharStream0);
      assertEquals(3, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)67, (byte) (-41), (byte) (-123)}, byteArray0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(3, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)67, (byte) (-41), (byte) (-123)}, byteArray0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals((-841), token0.endLine);
      assertEquals(204, token0.beginColumn);
      assertEquals(204, token0.endColumn);
      assertEquals((-841), token0.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-841), simpleCharStream0.getEndLine());
      assertEquals(204, simpleCharStream0.getColumn());
      assertEquals((-841), simpleCharStream0.getBeginLine());
      assertEquals((-841), simpleCharStream0.getLine());
      assertEquals(204, simpleCharStream0.getEndColumn());
      assertEquals(204, simpleCharStream0.getBeginColumn());
      assertEquals("C", token0.toString());
      assertArrayEquals(new byte[] {(byte)67, (byte) (-41), (byte) (-123)}, byteArray0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -841, column 206.  Encountered: <EOF> after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-12);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte) (-12)}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertNotNull(simpleCharStream0);
      assertEquals(3, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte) (-12)}, byteArray0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(3, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte) (-12)}, byteArray0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("44", token0.toString());
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte) (-12)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-41);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)67, (byte) (-41), (byte)0}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (-841), 204, (byte)67);
      assertNotNull(simpleCharStream0);
      assertEquals(3, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)67, (byte) (-41), (byte)0}, byteArray0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(3, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)67, (byte) (-41), (byte)0}, byteArray0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-841), token0.endLine);
      assertEquals(204, token0.beginColumn);
      assertEquals(204, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals((-841), token0.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-841), simpleCharStream0.getLine());
      assertEquals((-841), simpleCharStream0.getBeginLine());
      assertEquals(204, simpleCharStream0.getEndColumn());
      assertEquals(204, simpleCharStream0.getBeginColumn());
      assertEquals((-841), simpleCharStream0.getEndLine());
      assertEquals(204, simpleCharStream0.getColumn());
      assertEquals("C", token0.toString());
      assertArrayEquals(new byte[] {(byte)67, (byte) (-41), (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -841, column 205.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("string-length");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(115, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 115, 115);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      xPathParserTokenManager0.jjround = (-1);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(117, token0.endColumn);
      assertEquals(115, token0.endLine);
      assertEquals(115, token0.beginLine);
      assertEquals(115, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(115, simpleCharStream0.getBeginLine());
      assertEquals(117, simpleCharStream0.getEndColumn());
      assertEquals(115, simpleCharStream0.getLine());
      assertEquals(115, simpleCharStream0.getBeginColumn());
      assertEquals(117, simpleCharStream0.getColumn());
      assertEquals(115, simpleCharStream0.getEndLine());
      assertEquals("tri", token0.toString());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("string-length");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1962, 1962, 117);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(12, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1974, token0.endColumn);
      assertEquals(1962, token0.beginColumn);
      assertEquals(1962, token0.beginLine);
      assertEquals(1962, token0.endLine);
      assertEquals(63, token0.kind);
      assertEquals(1974, simpleCharStream0.getEndColumn());
      assertEquals(1962, simpleCharStream0.getBeginColumn());
      assertEquals(1974, simpleCharStream0.getColumn());
      assertEquals(1962, simpleCharStream0.getLine());
      assertEquals(1962, simpleCharStream0.getEndLine());
      assertEquals(1962, simpleCharStream0.getBeginLine());
      assertEquals("string-length", token0.toString());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("following::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(10, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(11, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(42, token0.kind);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(11, simpleCharStream0.getColumn());
      assertEquals(11, simpleCharStream0.getEndColumn());
      assertEquals("following::", token0.toString());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("substring-after");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(14, simpleCharStream0.bufpos);
      assertEquals(61, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(15, token0.endColumn);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(15, simpleCharStream0.getEndColumn());
      assertEquals("substring-after", token0.toString());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ceiling");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, token0.endColumn);
      assertEquals(75, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("ceiling", token0.toString());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("string-lengt");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(11, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(12, token0.endColumn);
      assertEquals(12, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(12, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("string-lengt", token0.toString());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 105, 1514);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(1514, token0.beginColumn);
      assertEquals(105, token0.endLine);
      assertEquals(105, token0.beginLine);
      assertEquals(1518, token0.endColumn);
      assertEquals(69, token0.kind);
      assertEquals(1514, simpleCharStream0.getBeginColumn());
      assertEquals(105, simpleCharStream0.getLine());
      assertEquals(105, simpleCharStream0.getEndLine());
      assertEquals(1518, simpleCharStream0.getColumn());
      assertEquals(1518, simpleCharStream0.getEndColumn());
      assertEquals(105, simpleCharStream0.getBeginLine());
      assertEquals("false", token0.toString());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("round");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(76, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals("round", token0.toString());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("normalize-space");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1517, 89);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(14, simpleCharStream0.bufpos);
      assertEquals(103, token0.endColumn);
      assertEquals(89, token0.beginColumn);
      assertEquals(1517, token0.beginLine);
      assertEquals(1517, token0.endLine);
      assertEquals(64, token0.kind);
      assertEquals(1517, simpleCharStream0.getBeginLine());
      assertEquals(103, simpleCharStream0.getColumn());
      assertEquals(89, simpleCharStream0.getBeginColumn());
      assertEquals(103, simpleCharStream0.getEndColumn());
      assertEquals(1517, simpleCharStream0.getEndLine());
      assertEquals(1517, simpleCharStream0.getLine());
      assertEquals("normalize-space", token0.toString());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"null\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(70, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("null", token0.toString());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"comment\"");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 255, (byte)52);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertEquals(58, token0.endColumn);
      assertEquals(255, token0.endLine);
      assertEquals(255, token0.beginLine);
      assertEquals(52, token0.beginColumn);
      assertEquals(33, token0.kind);
      assertEquals(58, simpleCharStream0.getEndColumn());
      assertEquals(255, simpleCharStream0.getLine());
      assertEquals(58, simpleCharStream0.getColumn());
      assertEquals(52, simpleCharStream0.getBeginColumn());
      assertEquals(255, simpleCharStream0.getEndLine());
      assertEquals(255, simpleCharStream0.getBeginLine());
      assertEquals("comment", token0.toString());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("number");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals(6, token0.endColumn);
      assertEquals(72, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("number", token0.toString());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(67, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals("not", token0.toString());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cewling");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(7, token0.endColumn);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals("cewling", token0.toString());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("count");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(5, token0.endColumn);
      assertEquals(50, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("count", token0.toString());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("attribute::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (byte)6, (-2473), 121);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(10, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-2463), token0.endColumn);
      assertEquals(39, token0.kind);
      assertEquals(6, token0.endLine);
      assertEquals(6, token0.beginLine);
      assertEquals((-2473), token0.beginColumn);
      assertEquals((-2473), simpleCharStream0.getBeginColumn());
      assertEquals((-2463), simpleCharStream0.getColumn());
      assertEquals(6, simpleCharStream0.getLine());
      assertEquals((-2463), simpleCharStream0.getEndColumn());
      assertEquals(6, simpleCharStream0.getEndLine());
      assertEquals(6, simpleCharStream0.getBeginLine());
      assertEquals("attribute::", token0.toString());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("position");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(49, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(8, token0.endColumn);
      assertEquals(8, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(8, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("position", token0.toString());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("boolean");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("boolean", token0.toString());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lang");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1198, 115, 23);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(118, token0.endColumn);
      assertEquals(71, token0.kind);
      assertEquals(1198, token0.endLine);
      assertEquals(1198, token0.beginLine);
      assertEquals(115, token0.beginColumn);
      assertEquals(118, simpleCharStream0.getColumn());
      assertEquals(1198, simpleCharStream0.getBeginLine());
      assertEquals(1198, simpleCharStream0.getEndLine());
      assertEquals(115, simpleCharStream0.getBeginColumn());
      assertEquals(118, simpleCharStream0.getEndColumn());
      assertEquals(1198, simpleCharStream0.getLine());
      assertEquals("lang", token0.toString());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"following-sibling::\"");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 13, 13);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(18, simpleCharStream0.bufpos);
      assertEquals(31, token0.endColumn);
      assertEquals(13, token0.beginColumn);
      assertEquals(13, token0.endLine);
      assertEquals(13, token0.beginLine);
      assertEquals(45, token0.kind);
      assertEquals(13, simpleCharStream0.getBeginColumn());
      assertEquals(13, simpleCharStream0.getBeginLine());
      assertEquals(13, simpleCharStream0.getLine());
      assertEquals(31, simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getEndLine());
      assertEquals(31, simpleCharStream0.getEndColumn());
      assertEquals("following-sibling::", token0.toString());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("preceding::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(10, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(41, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(11, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(11, simpleCharStream0.getColumn());
      assertEquals(11, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("preceding::", token0.toString());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("translate");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 116, 116);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(8, simpleCharStream0.bufpos);
      assertEquals(116, token0.endLine);
      assertEquals(124, token0.endColumn);
      assertEquals(65, token0.kind);
      assertEquals(116, token0.beginLine);
      assertEquals(116, token0.beginColumn);
      assertEquals(124, simpleCharStream0.getColumn());
      assertEquals(116, simpleCharStream0.getBeginColumn());
      assertEquals(116, simpleCharStream0.getEndLine());
      assertEquals(116, simpleCharStream0.getBeginLine());
      assertEquals(116, simpleCharStream0.getLine());
      assertEquals(124, simpleCharStream0.getEndColumn());
      assertEquals("translate", token0.toString());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("id");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(51, token0.kind);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("id", token0.toString());
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, 110);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 110. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("noc");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(3, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("noc", token0.toString());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)108;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)108, (byte)108, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 42);
      assertNotNull(pushbackInputStream0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)108, (byte)108, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, 45, (-1012), 122);
      assertNotNull(simpleCharStream0);
      assertEquals(9, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)108, (byte)108, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(9, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)108, (byte)108, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(9, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(45, token0.beginLine);
      assertEquals(45, token0.endLine);
      assertEquals((-1011), token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals((-1012), token0.beginColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1011), simpleCharStream0.getColumn());
      assertEquals(45, simpleCharStream0.getLine());
      assertEquals(45, simpleCharStream0.getEndLine());
      assertEquals((-1011), simpleCharStream0.getEndColumn());
      assertEquals((-1012), simpleCharStream0.getBeginColumn());
      assertEquals(45, simpleCharStream0.getBeginLine());
      assertEquals("ll", token0.toString());
      assertArrayEquals(new byte[] {(byte)108, (byte)108, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">=");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(16, token0.kind);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(">=", token0.toString());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("..");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(83, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("..", token0.toString());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{fEHz,Y");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1635, 1635, 1635);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1635, column 1635.  Encountered: \"{\" (123), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Uy\"kxzz>fI_");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals('U', char0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals("y", token0.toString());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x8aBzqI");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 61, (byte)15);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertEquals(61, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(15, token0.beginColumn);
      assertEquals(61, token0.beginLine);
      assertEquals(21, token0.endColumn);
      assertEquals(61, simpleCharStream0.getEndLine());
      assertEquals(61, simpleCharStream0.getLine());
      assertEquals(15, simpleCharStream0.getBeginColumn());
      assertEquals(21, simpleCharStream0.getColumn());
      assertEquals(21, simpleCharStream0.getEndColumn());
      assertEquals(61, simpleCharStream0.getBeginLine());
      assertEquals("x8aBzqI", token0.toString());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("normalize-space");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(110, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1), 43);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(13, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), token0.endLine);
      assertEquals(43, token0.beginColumn);
      assertEquals(56, token0.endColumn);
      assertEquals((-1), token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(56, simpleCharStream0.getColumn());
      assertEquals((-1), simpleCharStream0.getEndLine());
      assertEquals((-1), simpleCharStream0.getBeginLine());
      assertEquals(56, simpleCharStream0.getEndColumn());
      assertEquals(43, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.getLine());
      assertEquals("ormalize-space", token0.toString());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("EmRz9Z-(CkRf3#1L");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(69, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 3299, 3299, 46);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(3299, token0.beginLine);
      assertEquals(3299, token0.beginColumn);
      assertEquals(3299, token0.endLine);
      assertEquals(3304, token0.endColumn);
      assertEquals(3299, simpleCharStream0.getBeginColumn());
      assertEquals(3299, simpleCharStream0.getEndLine());
      assertEquals(3304, simpleCharStream0.getColumn());
      assertEquals(3299, simpleCharStream0.getBeginLine());
      assertEquals(3304, simpleCharStream0.getEndColumn());
      assertEquals(3299, simpleCharStream0.getLine());
      assertEquals("mRz9Z-", token0.toString());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ukdA");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(117, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("kdA", token0.toString());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j@LE$P@U");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (byte)6, 115, (byte)6);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(115, token0.endColumn);
      assertEquals(6, token0.beginLine);
      assertEquals(115, token0.beginColumn);
      assertEquals(115, simpleCharStream0.getBeginColumn());
      assertEquals(115, simpleCharStream0.getColumn());
      assertEquals(6, simpleCharStream0.getBeginLine());
      assertEquals(6, simpleCharStream0.getLine());
      assertEquals(115, simpleCharStream0.getEndColumn());
      assertEquals(6, simpleCharStream0.getEndLine());
      assertEquals("j", token0.toString());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.jxpath.ri.parser.XPathParserConstants");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[8];
      int int0 = stringReader0.read(charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, int0);
      assertArrayEquals(new char[] {'o', 'r', 'g', '.', 'a', 'p', 'a', 'c'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 13, (-765), 8);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(47, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(13, token0.beginLine);
      assertEquals((-765), token0.beginColumn);
      assertEquals((-718), token0.endColumn);
      assertEquals(13, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(13, simpleCharStream0.getEndLine());
      assertEquals((-718), simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getLine());
      assertEquals((-765), simpleCharStream0.getBeginColumn());
      assertEquals((-718), simpleCharStream0.getEndColumn());
      assertEquals(13, simpleCharStream0.getBeginLine());
      assertEquals("he.commons.jxpath.ri.parser.XPathParserConstants", token0.toString());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("subistring");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[9];
      int int0 = stringReader0.read(charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(9, int0);
      assertArrayEquals(new char[] {'s', 'u', 'b', 'i', 's', 't', 'r', 'i', 'n'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 30, 6, 576);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, token0.beginColumn);
      assertEquals(6, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(30, token0.endLine);
      assertEquals(30, token0.beginLine);
      assertEquals(30, simpleCharStream0.getEndLine());
      assertEquals(30, simpleCharStream0.getBeginLine());
      assertEquals(30, simpleCharStream0.getLine());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(6, simpleCharStream0.getBeginColumn());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals("g", token0.toString());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ceiig");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals('c', char0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("eiig", token0.toString());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 33, 43, 43);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(43, token0.beginColumn);
      assertEquals(33, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(43, token0.endColumn);
      assertEquals(33, token0.endLine);
      assertEquals(43, simpleCharStream0.getBeginColumn());
      assertEquals(33, simpleCharStream0.getEndLine());
      assertEquals(43, simpleCharStream0.getColumn());
      assertEquals(33, simpleCharStream0.getBeginLine());
      assertEquals(33, simpleCharStream0.getLine());
      assertEquals(43, simpleCharStream0.getEndColumn());
      assertEquals("d", token0.toString());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("and");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-2260), 12);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-2260), token0.beginLine);
      assertEquals(28, token0.kind);
      assertEquals(12, token0.beginColumn);
      assertEquals(14, token0.endColumn);
      assertEquals((-2260), token0.endLine);
      assertEquals((-2260), simpleCharStream0.getEndLine());
      assertEquals((-2260), simpleCharStream0.getBeginLine());
      assertEquals(12, simpleCharStream0.getBeginColumn());
      assertEquals((-2260), simpleCharStream0.getLine());
      assertEquals(14, simpleCharStream0.getEndColumn());
      assertEquals(14, simpleCharStream0.getColumn());
      assertEquals("and", token0.toString());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("`Y<tP|`HvD:)eQGZCT");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 3529, 51, 51);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 3529, column 51.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iK8R`|?5Q_#[S");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(105, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 105, 1514);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      char[] charArray0 = new char[8];
      int int1 = stringReader0.read(charArray0);
      assertFalse(int1 == int0);
      assertEquals(8, charArray0.length);
      assertEquals(8, int1);
      assertArrayEquals(new char[] {'K', '8', 'R', '`', '|', '?', '5', 'Q'}, charArray0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1514, token0.beginColumn);
      assertEquals(1514, token0.endColumn);
      assertEquals(105, token0.endLine);
      assertEquals(105, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(105, simpleCharStream0.getEndLine());
      assertEquals(105, simpleCharStream0.getBeginLine());
      assertEquals(105, simpleCharStream0.getLine());
      assertEquals(1514, simpleCharStream0.getEndColumn());
      assertEquals(1514, simpleCharStream0.getColumn());
      assertEquals(1514, simpleCharStream0.getBeginColumn());
      assertEquals("_", token0.toString());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Xb[^L=");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1247, 1247, 1247);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1247, token0.beginColumn);
      assertEquals(1248, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1247, token0.endLine);
      assertEquals(1247, token0.beginLine);
      assertEquals(1247, simpleCharStream0.getEndLine());
      assertEquals(1247, simpleCharStream0.getBeginLine());
      assertEquals(1248, simpleCharStream0.getEndColumn());
      assertEquals(1247, simpleCharStream0.getLine());
      assertEquals(1247, simpleCharStream0.getBeginColumn());
      assertEquals(1248, simpleCharStream0.getColumn());
      assertEquals("Xb", token0.toString());
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(1249, token1.endColumn);
      assertEquals(84, token1.kind);
      assertEquals(1249, token1.beginColumn);
      assertEquals(1247, token1.beginLine);
      assertEquals(1247, token1.endLine);
      assertEquals(1249, simpleCharStream0.getColumn());
      assertEquals(1247, simpleCharStream0.getEndLine());
      assertEquals(1247, simpleCharStream0.getBeginLine());
      assertEquals(1249, simpleCharStream0.getBeginColumn());
      assertEquals(1249, simpleCharStream0.getEndColumn());
      assertEquals(1247, simpleCharStream0.getLine());
      assertEquals("[", token1.toString());
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("EmRz9Z-(CkRf3#1L");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[5];
      int int0 = stringReader0.read(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, int0);
      assertArrayEquals(new char[] {'E', 'm', 'R', 'z', '9'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 5, (-1368));
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1367), token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(5, token0.beginLine);
      assertEquals((-1368), token0.beginColumn);
      assertEquals(5, token0.endLine);
      assertEquals((-1368), simpleCharStream0.getBeginColumn());
      assertEquals(5, simpleCharStream0.getLine());
      assertEquals((-1367), simpleCharStream0.getColumn());
      assertEquals(5, simpleCharStream0.getEndLine());
      assertEquals((-1367), simpleCharStream0.getEndColumn());
      assertEquals(5, simpleCharStream0.getBeginLine());
      assertEquals("Z-", token0.toString());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y-08\"y:k4w}hOf");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (byte) (-24), (byte)116);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(116, token0.beginColumn);
      assertEquals(119, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals((-24), token0.endLine);
      assertEquals((-24), token0.beginLine);
      assertEquals((-24), simpleCharStream0.getEndLine());
      assertEquals(119, simpleCharStream0.getEndColumn());
      assertEquals((-24), simpleCharStream0.getBeginLine());
      assertEquals(116, simpleCharStream0.getBeginColumn());
      assertEquals(119, simpleCharStream0.getColumn());
      assertEquals((-24), simpleCharStream0.getLine());
      assertEquals("Y-08", token0.toString());
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -24, column 130.  Encountered: <EOF> after : \"\\\"y:k4w}hOf\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sWtring-lengt");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals('s', char0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(12, simpleCharStream0.bufpos);
      assertEquals(13, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals("Wtring-lengt", token0.toString());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("V?,.x8:v");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("V", token0.toString());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Uy\"kxzz>fI_");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals("Uy", token0.toString());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("To~JGvEQ1[uh0N");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("To", token0.toString());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)115, 1635, (byte)83);
      assertNotNull(simpleCharStream0);
      assertEquals(8, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(8, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(115, token0.endLine);
      assertEquals(1635, token0.beginColumn);
      assertEquals(1635, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(115, token0.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(115, simpleCharStream0.getBeginLine());
      assertEquals(115, simpleCharStream0.getEndLine());
      assertEquals(1635, simpleCharStream0.getEndColumn());
      assertEquals(1635, simpleCharStream0.getBeginColumn());
      assertEquals(115, simpleCharStream0.getLine());
      assertEquals(1635, simpleCharStream0.getColumn());
      assertEquals("S", token0.toString());
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("EmRz9Z-(CkRf3#1L");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[2];
      int int0 = stringReader0.read(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'E', 'm'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 996, 49, 2);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(996, token0.beginLine);
      assertEquals(49, token0.beginColumn);
      assertEquals(53, token0.endColumn);
      assertEquals(996, token0.endLine);
      assertEquals(996, simpleCharStream0.getLine());
      assertEquals(996, simpleCharStream0.getEndLine());
      assertEquals(53, simpleCharStream0.getEndColumn());
      assertEquals(53, simpleCharStream0.getColumn());
      assertEquals(49, simpleCharStream0.getBeginColumn());
      assertEquals(996, simpleCharStream0.getBeginLine());
      assertEquals("Rz9Z-", token0.toString());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("P9#&[Ye*!4s=Y4;");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("P", token0.toString());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("OI{}Uuo%ub?VMw<l");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("OI", token0.toString());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("YM$(");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 64, 7, 2586);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      char char0 = simpleCharStream0.readChar();
      assertEquals('Y', char0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(64, simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(64, simpleCharStream0.getEndLine());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(64, simpleCharStream0.getLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(64, simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(64, simpleCharStream0.getEndLine());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(64, simpleCharStream0.getLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(64, token0.endLine);
      assertEquals(64, token0.beginLine);
      assertEquals(8, token0.endColumn);
      assertEquals(8, token0.beginColumn);
      assertEquals(64, simpleCharStream0.getBeginLine());
      assertEquals(8, simpleCharStream0.getColumn());
      assertEquals(64, simpleCharStream0.getEndLine());
      assertEquals(8, simpleCharStream0.getEndColumn());
      assertEquals(8, simpleCharStream0.getBeginColumn());
      assertEquals(64, simpleCharStream0.getLine());
      assertEquals("M", token0.toString());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)76, (byte)0}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertNotNull(simpleCharStream0);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)76, (byte)0}, byteArray0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)76, (byte)0}, byteArray0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("L", token0.toString());
      assertArrayEquals(new byte[] {(byte)76, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3uKd@C4ucDycJ");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-101), 4237, 110);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[2];
      int int0 = stringReader0.read(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'3', 'u'}, charArray0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(4237, token0.beginColumn);
      assertEquals((-101), token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(4238, token0.endColumn);
      assertEquals((-101), token0.beginLine);
      assertEquals(4238, simpleCharStream0.getEndColumn());
      assertEquals(4237, simpleCharStream0.getBeginColumn());
      assertEquals((-101), simpleCharStream0.getBeginLine());
      assertEquals((-101), simpleCharStream0.getLine());
      assertEquals(4238, simpleCharStream0.getColumn());
      assertEquals((-101), simpleCharStream0.getEndLine());
      assertEquals("Kd", token0.toString());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Jj5C@.}fwViUA");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(4, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals("Jj5C", token0.toString());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GoDS^\"*qLB63e");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals("GoDS", token0.toString());
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 5.  Encountered: \"^\" (94), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F8hW%");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 3529, 51, 2273);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(54, token0.endColumn);
      assertEquals(51, token0.beginColumn);
      assertEquals(3529, token0.beginLine);
      assertEquals(3529, token0.endLine);
      assertEquals(3529, simpleCharStream0.getLine());
      assertEquals(54, simpleCharStream0.getColumn());
      assertEquals(51, simpleCharStream0.getBeginColumn());
      assertEquals(3529, simpleCharStream0.getBeginLine());
      assertEquals(3529, simpleCharStream0.getEndLine());
      assertEquals(54, simpleCharStream0.getEndColumn());
      assertEquals("F8hW", token0.toString());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("EP9-e8WM");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (byte) (-9), (byte)6, 6);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-9), token0.beginLine);
      assertEquals(6, token0.beginColumn);
      assertEquals((-9), token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(11, token0.endColumn);
      assertEquals((-9), simpleCharStream0.getBeginLine());
      assertEquals((-9), simpleCharStream0.getLine());
      assertEquals(6, simpleCharStream0.getBeginColumn());
      assertEquals(11, simpleCharStream0.getColumn());
      assertEquals((-9), simpleCharStream0.getEndLine());
      assertEquals(11, simpleCharStream0.getEndColumn());
      assertEquals("EP9-e8", token0.toString());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'D^3Mc8V6");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 51, 284);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      int int0 = stringReader0.read();
      assertEquals(39, int0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(284, token0.endColumn);
      assertEquals(284, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(51, token0.endLine);
      assertEquals(51, token0.beginLine);
      assertEquals(51, simpleCharStream0.getBeginLine());
      assertEquals(51, simpleCharStream0.getLine());
      assertEquals(284, simpleCharStream0.getColumn());
      assertEquals(284, simpleCharStream0.getBeginColumn());
      assertEquals(284, simpleCharStream0.getEndColumn());
      assertEquals(51, simpleCharStream0.getEndLine());
      assertEquals("D", token0.toString());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)66;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)66, (byte)0, (byte)0}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)7, 532, (-1012));
      assertNotNull(simpleCharStream0);
      assertEquals(3, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)66, (byte)0, (byte)0}, byteArray0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(3, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)66, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(532, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(7, token0.endLine);
      assertEquals(7, token0.beginLine);
      assertEquals(532, token0.beginColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(532, simpleCharStream0.getBeginColumn());
      assertEquals(532, simpleCharStream0.getEndColumn());
      assertEquals(532, simpleCharStream0.getColumn());
      assertEquals(7, simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.getLine());
      assertEquals(7, simpleCharStream0.getEndLine());
      assertEquals("B", token0.toString());
      assertArrayEquals(new byte[] {(byte)66, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ABZ/pQ<_sk[`sUg@5");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 82, 82);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(84, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(82, token0.beginColumn);
      assertEquals(82, token0.beginLine);
      assertEquals(82, token0.endLine);
      assertEquals(82, simpleCharStream0.getLine());
      assertEquals(84, simpleCharStream0.getEndColumn());
      assertEquals(82, simpleCharStream0.getBeginLine());
      assertEquals(82, simpleCharStream0.getEndLine());
      assertEquals(84, simpleCharStream0.getColumn());
      assertEquals(82, simpleCharStream0.getBeginColumn());
      assertEquals("ABZ", token0.toString());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H1@vG(,X.xUYW.?Eao");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1018), (-1018), 3529);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1018), token0.beginLine);
      assertEquals((-1018), token0.beginColumn);
      assertEquals((-1018), token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals((-1017), token0.endColumn);
      assertEquals((-1017), simpleCharStream0.getEndColumn());
      assertEquals((-1018), simpleCharStream0.getBeginLine());
      assertEquals((-1018), simpleCharStream0.getEndLine());
      assertEquals((-1018), simpleCharStream0.getLine());
      assertEquals((-1018), simpleCharStream0.getBeginColumn());
      assertEquals((-1017), simpleCharStream0.getColumn());
      assertEquals("H1", token0.toString());
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(86, token1.kind);
      assertEquals((-1016), token1.beginColumn);
      assertEquals((-1016), token1.endColumn);
      assertEquals((-1018), token1.endLine);
      assertEquals((-1018), token1.beginLine);
      assertEquals((-1016), simpleCharStream0.getBeginColumn());
      assertEquals((-1016), simpleCharStream0.getEndColumn());
      assertEquals((-1018), simpleCharStream0.getBeginLine());
      assertEquals((-1016), simpleCharStream0.getColumn());
      assertEquals((-1018), simpleCharStream0.getEndLine());
      assertEquals((-1018), simpleCharStream0.getLine());
      assertEquals("@", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals((-1018), token2.beginLine);
      assertEquals((-1018), token2.endLine);
      assertEquals(78, token2.kind);
      assertEquals((-1014), token2.endColumn);
      assertEquals((-1015), token2.beginColumn);
      assertEquals((-1015), simpleCharStream0.getBeginColumn());
      assertEquals((-1014), simpleCharStream0.getEndColumn());
      assertEquals((-1018), simpleCharStream0.getBeginLine());
      assertEquals((-1018), simpleCharStream0.getEndLine());
      assertEquals((-1014), simpleCharStream0.getColumn());
      assertEquals((-1018), simpleCharStream0.getLine());
      assertEquals("vG", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(u_.=]pOAr\u0001j^");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(40, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (byte)6, (byte)6, (byte)6);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(6, token0.beginColumn);
      assertEquals(6, token0.beginLine);
      assertEquals(6, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(8, token0.endColumn);
      assertEquals(6, simpleCharStream0.getBeginLine());
      assertEquals(6, simpleCharStream0.getLine());
      assertEquals(8, simpleCharStream0.getColumn());
      assertEquals(6, simpleCharStream0.getBeginColumn());
      assertEquals(6, simpleCharStream0.getEndLine());
      assertEquals(8, simpleCharStream0.getEndColumn());
      assertEquals("u_.", token0.toString());
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(6, token1.beginLine);
      assertEquals(9, token1.beginColumn);
      assertEquals(9, token1.endColumn);
      assertEquals(11, token1.kind);
      assertEquals(6, token1.endLine);
      assertEquals(9, simpleCharStream0.getBeginColumn());
      assertEquals(6, simpleCharStream0.getBeginLine());
      assertEquals(6, simpleCharStream0.getLine());
      assertEquals(9, simpleCharStream0.getColumn());
      assertEquals(9, simpleCharStream0.getEndColumn());
      assertEquals(6, simpleCharStream0.getEndLine());
      assertEquals("=", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, token2.endLine);
      assertEquals(6, token2.beginLine);
      assertEquals(85, token2.kind);
      assertEquals(10, token2.endColumn);
      assertEquals(10, token2.beginColumn);
      assertEquals(10, simpleCharStream0.getBeginColumn());
      assertEquals(6, simpleCharStream0.getBeginLine());
      assertEquals(6, simpleCharStream0.getLine());
      assertEquals(10, simpleCharStream0.getEndColumn());
      assertEquals(6, simpleCharStream0.getEndLine());
      assertEquals(10, simpleCharStream0.getColumn());
      assertEquals("]", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = xPathParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertNotNull(token3);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(14, token3.endColumn);
      assertEquals(6, token3.endLine);
      assertEquals(6, token3.beginLine);
      assertEquals(78, token3.kind);
      assertEquals(11, token3.beginColumn);
      assertEquals(6, simpleCharStream0.getBeginLine());
      assertEquals(11, simpleCharStream0.getBeginColumn());
      assertEquals(6, simpleCharStream0.getLine());
      assertEquals(14, simpleCharStream0.getColumn());
      assertEquals(14, simpleCharStream0.getEndColumn());
      assertEquals(6, simpleCharStream0.getEndLine());
      assertEquals("pOAr", token3.toString());
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 6, column 15.  Encountered: \"\\u0001\" (1), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rjR;c/%P<;");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 5, 104);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(106, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(104, token0.beginColumn);
      assertEquals(5, token0.beginLine);
      assertEquals(5, token0.endLine);
      assertEquals(106, simpleCharStream0.getEndColumn());
      assertEquals(5, simpleCharStream0.getLine());
      assertEquals(5, simpleCharStream0.getBeginLine());
      assertEquals(5, simpleCharStream0.getEndLine());
      assertEquals(106, simpleCharStream0.getColumn());
      assertEquals(104, simpleCharStream0.getBeginColumn());
      assertEquals("rjR", token0.toString());
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 5, column 107.  Encountered: \";\" (59), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)58;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)58}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (-1368), (byte)58, (-1368));
      assertNotNull(simpleCharStream0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)58}, byteArray0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)58}, byteArray0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(79, token0.kind);
      assertEquals(58, token0.endColumn);
      assertEquals(58, token0.beginColumn);
      assertEquals((-1368), token0.endLine);
      assertEquals((-1368), token0.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1368), simpleCharStream0.getLine());
      assertEquals((-1368), simpleCharStream0.getBeginLine());
      assertEquals(58, simpleCharStream0.getEndColumn());
      assertEquals(58, simpleCharStream0.getBeginColumn());
      assertEquals((-1368), simpleCharStream0.getEndLine());
      assertEquals(58, simpleCharStream0.getColumn());
      assertEquals(":", token0.toString());
      assertArrayEquals(new byte[] {(byte)58}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iK8R`|?5Q_#[S");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(105, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals('K', char0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, 0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(20, token0.kind);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("8", token0.toString());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7yVY`V");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("7", token0.toString());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("bB/p6*pijdr@nf");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[2];
      int int0 = stringReader0.read(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'b', 'B'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 43, 43, 43);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      int int1 = stringReader0.read(charArray0);
      assertTrue(int1 == int0);
      assertEquals(2, charArray0.length);
      assertEquals(2, int1);
      assertArrayEquals(new char[] {'/', 'p'}, charArray0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(43, token0.beginLine);
      assertEquals(43, token0.beginColumn);
      assertEquals(43, token0.endLine);
      assertEquals(20, token0.kind);
      assertEquals(43, token0.endColumn);
      assertEquals(43, simpleCharStream0.getColumn());
      assertEquals(43, simpleCharStream0.getBeginLine());
      assertEquals(43, simpleCharStream0.getEndColumn());
      assertEquals(43, simpleCharStream0.getEndLine());
      assertEquals(43, simpleCharStream0.getBeginColumn());
      assertEquals(43, simpleCharStream0.getLine());
      assertEquals("6", token0.toString());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5?uRkx8");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("5", token0.toString());
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"?\" (63), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3uKd@C4ucDycJ");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 115, 0, 430);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(115, token0.beginLine);
      assertEquals(20, token0.kind);
      assertEquals(115, token0.endLine);
      assertEquals(115, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(115, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(115, simpleCharStream0.getBeginLine());
      assertEquals("3", token0.toString());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2^J&:Nx6yS,x5y(J;");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals("2", token0.toString());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H1@vG(,|.xUYW.?Eao");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(72, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1018), (-1018), 3529);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1018), token0.beginLine);
      assertEquals((-1018), token0.beginColumn);
      assertEquals((-1018), token0.endLine);
      assertEquals(20, token0.kind);
      assertEquals((-1018), token0.endColumn);
      assertEquals((-1018), simpleCharStream0.getEndColumn());
      assertEquals((-1018), simpleCharStream0.getBeginLine());
      assertEquals((-1018), simpleCharStream0.getBeginColumn());
      assertEquals((-1018), simpleCharStream0.getLine());
      assertEquals((-1018), simpleCharStream0.getEndLine());
      assertEquals((-1018), simpleCharStream0.getColumn());
      assertEquals("1", token0.toString());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0000");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 112, 121);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(20, token0.kind);
      assertEquals(112, token0.beginLine);
      assertEquals(124, token0.endColumn);
      assertEquals(121, token0.beginColumn);
      assertEquals(112, token0.endLine);
      assertEquals(112, simpleCharStream0.getLine());
      assertEquals(112, simpleCharStream0.getBeginLine());
      assertEquals(124, simpleCharStream0.getEndColumn());
      assertEquals(124, simpleCharStream0.getColumn());
      assertEquals(121, simpleCharStream0.getBeginColumn());
      assertEquals(112, simpleCharStream0.getEndLine());
      assertEquals("0000", token0.toString());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-5|4ETuT*Nps1K");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (byte)108, (-1711));
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals((-1711), token0.endColumn);
      assertEquals(108, token0.beginLine);
      assertEquals(108, token0.endLine);
      assertEquals(10, token0.kind);
      assertEquals((-1711), token0.beginColumn);
      assertEquals(108, simpleCharStream0.getLine());
      assertEquals(108, simpleCharStream0.getEndLine());
      assertEquals((-1711), simpleCharStream0.getBeginColumn());
      assertEquals(108, simpleCharStream0.getBeginLine());
      assertEquals((-1711), simpleCharStream0.getColumn());
      assertEquals((-1711), simpleCharStream0.getEndColumn());
      assertEquals("-", token0.toString());
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(108, token1.beginLine);
      assertEquals(108, token1.endLine);
      assertEquals(20, token1.kind);
      assertEquals((-1710), token1.endColumn);
      assertEquals((-1710), token1.beginColumn);
      assertEquals((-1710), simpleCharStream0.getEndColumn());
      assertEquals(108, simpleCharStream0.getLine());
      assertEquals(108, simpleCharStream0.getEndLine());
      assertEquals((-1710), simpleCharStream0.getColumn());
      assertEquals(108, simpleCharStream0.getBeginLine());
      assertEquals((-1710), simpleCharStream0.getBeginColumn());
      assertEquals("5", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(108, token2.endLine);
      assertEquals((-1709), token2.endColumn);
      assertEquals(108, token2.beginLine);
      assertEquals(8, token2.kind);
      assertEquals((-1709), token2.beginColumn);
      assertEquals((-1709), simpleCharStream0.getEndColumn());
      assertEquals(108, simpleCharStream0.getLine());
      assertEquals(108, simpleCharStream0.getEndLine());
      assertEquals(108, simpleCharStream0.getBeginLine());
      assertEquals((-1709), simpleCharStream0.getBeginColumn());
      assertEquals((-1709), simpleCharStream0.getColumn());
      assertEquals("|", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",Pf3PopkQ;-k@d0");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(87, token0.kind);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(",", token0.toString());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("bB/p6*pijdr@nf");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[2];
      int int0 = stringReader0.read(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'b', 'B'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 43, (-377), 6);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(43, token0.endLine);
      assertEquals((-377), token0.endColumn);
      assertEquals(43, token0.beginLine);
      assertEquals((-377), token0.beginColumn);
      assertEquals(6, token0.kind);
      assertEquals(43, simpleCharStream0.getLine());
      assertEquals(43, simpleCharStream0.getBeginLine());
      assertEquals(43, simpleCharStream0.getEndLine());
      assertEquals((-377), simpleCharStream0.getBeginColumn());
      assertEquals((-377), simpleCharStream0.getEndColumn());
      assertEquals((-377), simpleCharStream0.getColumn());
      assertEquals("/", token0.toString());
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-376), token1.beginColumn);
      assertEquals((-375), token1.endColumn);
      assertEquals(78, token1.kind);
      assertEquals(43, token1.beginLine);
      assertEquals(43, token1.endLine);
      assertEquals((-375), simpleCharStream0.getColumn());
      assertEquals(43, simpleCharStream0.getLine());
      assertEquals(43, simpleCharStream0.getBeginLine());
      assertEquals((-375), simpleCharStream0.getEndColumn());
      assertEquals(43, simpleCharStream0.getEndLine());
      assertEquals((-376), simpleCharStream0.getBeginColumn());
      assertEquals("p6", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-374), token2.endColumn);
      assertEquals(43, token2.beginLine);
      assertEquals(88, token2.kind);
      assertEquals(43, token2.endLine);
      assertEquals((-374), token2.beginColumn);
      assertEquals(43, simpleCharStream0.getLine());
      assertEquals(43, simpleCharStream0.getBeginLine());
      assertEquals((-374), simpleCharStream0.getColumn());
      assertEquals((-374), simpleCharStream0.getEndColumn());
      assertEquals(43, simpleCharStream0.getEndLine());
      assertEquals((-374), simpleCharStream0.getBeginColumn());
      assertEquals("*", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1812), (-1368), 43);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals((-1368), token0.endColumn);
      assertEquals((-1812), token0.beginLine);
      assertEquals(81, token0.kind);
      assertEquals((-1812), token0.endLine);
      assertEquals((-1368), token0.beginColumn);
      assertEquals((-1368), simpleCharStream0.getEndColumn());
      assertEquals((-1812), simpleCharStream0.getEndLine());
      assertEquals((-1812), simpleCharStream0.getLine());
      assertEquals((-1368), simpleCharStream0.getColumn());
      assertEquals((-1368), simpleCharStream0.getBeginColumn());
      assertEquals((-1812), simpleCharStream0.getBeginLine());
      assertEquals(")", token0.toString());
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, (-1368));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1368. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("('5dW4#\u0003");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(80, token0.kind);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("(", token0.toString());
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 9.  Encountered: <EOF> after : \"\\'5dW4#\\u0003\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z>&j=5");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1711), (byte)116);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(116, token0.endColumn);
      assertEquals(116, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals((-1711), token0.endLine);
      assertEquals((-1711), token0.beginLine);
      assertEquals(116, simpleCharStream0.getBeginColumn());
      assertEquals((-1711), simpleCharStream0.getBeginLine());
      assertEquals((-1711), simpleCharStream0.getLine());
      assertEquals(116, simpleCharStream0.getColumn());
      assertEquals((-1711), simpleCharStream0.getEndLine());
      assertEquals(116, simpleCharStream0.getEndColumn());
      assertEquals("z", token0.toString());
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(117, token1.endColumn);
      assertEquals(15, token1.kind);
      assertEquals((-1711), token1.endLine);
      assertEquals((-1711), token1.beginLine);
      assertEquals(117, token1.beginColumn);
      assertEquals((-1711), simpleCharStream0.getBeginLine());
      assertEquals((-1711), simpleCharStream0.getLine());
      assertEquals(117, simpleCharStream0.getColumn());
      assertEquals((-1711), simpleCharStream0.getEndLine());
      assertEquals(117, simpleCharStream0.getBeginColumn());
      assertEquals(117, simpleCharStream0.getEndColumn());
      assertEquals(">", token1.toString());
      assertNotSame(token1, token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1711, column 118.  Encountered: \"&\" (38), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fEdHz%Y");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1653, 1653, 1653);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1653, token0.beginColumn);
      assertEquals(1653, token0.endLine);
      assertEquals(1653, token0.beginLine);
      assertEquals(1657, token0.endColumn);
      assertEquals(1657, simpleCharStream0.getColumn());
      assertEquals(1657, simpleCharStream0.getEndColumn());
      assertEquals(1653, simpleCharStream0.getBeginColumn());
      assertEquals(1653, simpleCharStream0.getEndLine());
      assertEquals(1653, simpleCharStream0.getBeginLine());
      assertEquals(1653, simpleCharStream0.getLine());
      assertEquals("fEdHz", token0.toString());
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1653, column 1658.  Encountered: \"%\" (37), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" $w[;`5(@}mM%m7NN");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-306), (-1043), 24);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(17, token0.kind);
      assertEquals((-1042), token0.beginColumn);
      assertEquals((-1042), token0.endColumn);
      assertEquals((-306), token0.endLine);
      assertEquals((-306), token0.beginLine);
      assertEquals((-1042), simpleCharStream0.getBeginColumn());
      assertEquals((-1042), simpleCharStream0.getEndColumn());
      assertEquals((-306), simpleCharStream0.getEndLine());
      assertEquals((-1042), simpleCharStream0.getColumn());
      assertEquals((-306), simpleCharStream0.getBeginLine());
      assertEquals((-306), simpleCharStream0.getLine());
      assertEquals("$", token0.toString());
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-306), token1.endLine);
      assertEquals((-1041), token1.endColumn);
      assertEquals(78, token1.kind);
      assertEquals((-1041), token1.beginColumn);
      assertEquals((-306), token1.beginLine);
      assertEquals((-1041), simpleCharStream0.getBeginColumn());
      assertEquals((-1041), simpleCharStream0.getEndColumn());
      assertEquals((-306), simpleCharStream0.getEndLine());
      assertEquals((-1041), simpleCharStream0.getColumn());
      assertEquals((-306), simpleCharStream0.getBeginLine());
      assertEquals((-306), simpleCharStream0.getLine());
      assertEquals("w", token1.toString());
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iK8R`|?5Q_#[S");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 105, 1514);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      char[] charArray0 = new char[8];
      int int0 = stringReader0.read(charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, int0);
      assertArrayEquals(new char[] {'i', 'K', '8', 'R', '`', '|', '?', '5'}, charArray0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(105, token0.beginLine);
      assertEquals(105, token0.endLine);
      assertEquals(1514, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1515, token0.endColumn);
      assertEquals(105, simpleCharStream0.getLine());
      assertEquals(1515, simpleCharStream0.getEndColumn());
      assertEquals(1514, simpleCharStream0.getBeginColumn());
      assertEquals(105, simpleCharStream0.getBeginLine());
      assertEquals(105, simpleCharStream0.getEndLine());
      assertEquals(1515, simpleCharStream0.getColumn());
      assertEquals("Q_", token0.toString());
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 105, column 1516.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Nb!jz//9f7d;5");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 51, 30, 51);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(51, token0.endLine);
      assertEquals(51, token0.beginLine);
      assertEquals(31, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(30, token0.beginColumn);
      assertEquals(30, simpleCharStream0.getBeginColumn());
      assertEquals(51, simpleCharStream0.getEndLine());
      assertEquals(31, simpleCharStream0.getColumn());
      assertEquals(51, simpleCharStream0.getBeginLine());
      assertEquals(31, simpleCharStream0.getEndColumn());
      assertEquals(51, simpleCharStream0.getLine());
      assertEquals("Nb", token0.toString());
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 51, column 33.  Encountered: \"j\" (106), after : \"!\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("stri&g-l-ngth");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals("stri", token0.toString());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("st`i&g-l-ngth");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals("st", token0.toString());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<Number>");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(13, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals("<", token0.toString());
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".  Encountered: ");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 51, 61, 51);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(61, token0.beginColumn);
      assertEquals(61, token0.endColumn);
      assertEquals(51, token0.endLine);
      assertEquals(51, token0.beginLine);
      assertEquals(82, token0.kind);
      assertEquals(51, simpleCharStream0.getBeginLine());
      assertEquals(51, simpleCharStream0.getLine());
      assertEquals(51, simpleCharStream0.getEndLine());
      assertEquals(61, simpleCharStream0.getEndColumn());
      assertEquals(61, simpleCharStream0.getBeginColumn());
      assertEquals(61, simpleCharStream0.getColumn());
      assertEquals(".", token0.toString());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader("substring");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(8, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(62, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(9, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(9, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(9, simpleCharStream0.getEndColumn());
      assertEquals("substring", token0.toString());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("subistring");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-2625), 4237, 4237);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      char[] charArray0 = new char[4];
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, int0);
      assertArrayEquals(new char[] {'s', 'u', 'b', 'i'}, charArray0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4242, token0.endColumn);
      assertEquals(56, token0.kind);
      assertEquals((-2625), token0.beginLine);
      assertEquals(4237, token0.beginColumn);
      assertEquals((-2625), token0.endLine);
      assertEquals(4237, simpleCharStream0.getBeginColumn());
      assertEquals((-2625), simpleCharStream0.getLine());
      assertEquals(4242, simpleCharStream0.getColumn());
      assertEquals(4242, simpleCharStream0.getEndColumn());
      assertEquals((-2625), simpleCharStream0.getEndLine());
      assertEquals((-2625), simpleCharStream0.getBeginLine());
      assertEquals("string", token0.toString());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ceilig");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals(6, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals("ceilig", token0.toString());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ceil'nog");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("ceil", token0.toString());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ceig");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("ceig", token0.toString());
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(78, token1.kind);
      assertEquals(4, token1.endColumn);
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("ceig", token1.toString());
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ting");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(4, token0.endColumn);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals("ting", token0.toString());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+fyNL?W");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(9, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("+", token0.toString());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"namespace-urM\"");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 34, 34);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(12, simpleCharStream0.bufpos);
      assertEquals(34, token0.endLine);
      assertEquals(34, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(46, token0.endColumn);
      assertEquals(34, token0.beginColumn);
      assertEquals(34, simpleCharStream0.getLine());
      assertEquals(46, simpleCharStream0.getEndColumn());
      assertEquals(34, simpleCharStream0.getBeginColumn());
      assertEquals(46, simpleCharStream0.getColumn());
      assertEquals(34, simpleCharStream0.getEndLine());
      assertEquals(34, simpleCharStream0.getBeginLine());
      assertEquals("namespace-urM", token0.toString());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"comment\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 255, (byte)52);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(8, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(255, token0.endLine);
      assertEquals(255, token0.beginLine);
      assertEquals(60, token0.endColumn);
      assertEquals(18, token0.kind);
      assertEquals(52, token0.beginColumn);
      assertEquals(60, simpleCharStream0.getEndColumn());
      assertEquals(255, simpleCharStream0.getBeginLine());
      assertEquals(255, simpleCharStream0.getEndLine());
      assertEquals(52, simpleCharStream0.getBeginColumn());
      assertEquals(255, simpleCharStream0.getLine());
      assertEquals(60, simpleCharStream0.getColumn());
      assertEquals("\"comment\"", token0.toString());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"namespace-uri\"");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 34, 34);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(12, simpleCharStream0.bufpos);
      assertEquals(54, token0.kind);
      assertEquals(34, token0.beginLine);
      assertEquals(34, token0.beginColumn);
      assertEquals(46, token0.endColumn);
      assertEquals(34, token0.endLine);
      assertEquals(34, simpleCharStream0.getEndLine());
      assertEquals(34, simpleCharStream0.getLine());
      assertEquals(34, simpleCharStream0.getBeginLine());
      assertEquals(46, simpleCharStream0.getColumn());
      assertEquals(34, simpleCharStream0.getBeginColumn());
      assertEquals(46, simpleCharStream0.getEndColumn());
      assertEquals("namespace-uri", token0.toString());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ceiig");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = null;
      try {
        xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, 1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager((SimpleCharStream) null);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.setDebugStream((PrintStream) null);
  }
}
