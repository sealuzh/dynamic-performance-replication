/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:33:57 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Locale;
import java.util.Properties;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.ClassCache;
import weka.core.ClassDiscovery;
import weka.core.FindWithCapabilities;
import weka.core.Instances;
import weka.core.SingleIndex;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.handles(capabilities_Capability1);
      findWithCapabilities0.find();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("-1");
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getClassIndex();
      int int0 = (-914);
      findWithCapabilities0.m_Filename = "-1";
      // Undeclared exception!
      try { 
        ClassDiscovery.clearClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      findWithCapabilities0.getRevision();
      stringArray0[0] = "\"8Klio";
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setFilename("https://");
      stringArray0[1] = "-not-nominal-atts";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Packages = vector0;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability2);
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      hashtable0.put("", findWithCapabilities0.m_Packages);
      ClassDiscovery.m_Cache = hashtable0;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability3);
      findWithCapabilities0.enableNot(capabilities_Capability3);
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      capabilities0.toString();
      findWithCapabilities0.find();
      String[] stringArray0 = new String[2];
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Filename = "multi-instance";
      findWithCapabilities0.m_Superclass = ":caIa";
      findWithCapabilities0.m_Superclass = "multi-instance";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      findWithCapabilities0.getHandler();
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      findWithCapabilities1.setFilename("kgHbA?");
      findWithCapabilities1.m_Packages = vector0;
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.find();
      findWithCapabilities1.listOptions();
      findWithCapabilities1.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities1.setOptions(stringArray0);
      assertEquals("multi-instance", findWithCapabilities1.getFilename());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.find();
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.find();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      findWithCapabilities0.find();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getMisses();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities1.getNotCapabilities();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.getHandler();
      assertNull(capabilitiesHandler0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.find();
      String string0 = "\nSearching for the following Capabilities:";
      findWithCapabilities0.setClassIndex("\nSearching for the following Capabilities:");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setClassIndex("L^HyWn*u,`Cuj");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getRevision();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.listOptions();
      findWithCapabilities0.getMatches();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities3);
      findWithCapabilities2.setCapabilities(capabilities0);
      try { 
        findWithCapabilities3.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities1.m_Superclass = "8034";
      Locale.getISOCountries();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities1.find();
      findWithCapabilities1.getMatches();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.find();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities2.setClassIndex("-not-no-class");
      findWithCapabilities1.find();
      findWithCapabilities0.getMisses();
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "only-multiinstance";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      Capabilities capabilities1 = new Capabilities((CapabilitiesHandler) null);
      System.setCurrentTimeMillis((-1837L));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities1);
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.m_Misses = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities1.setNotCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities1.m_Superclass = "8034";
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getMatches();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex();
      findWithCapabilities3.m_ClassIndex = singleIndex0;
      findWithCapabilities2.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      Vector<String> vector0 = findWithCapabilities1.find();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      Vector<String> vector1 = findWithCapabilities0.getMisses();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities.main(stringArray1);
      Random.setNextRandom((-904));
      findWithCapabilities1.getMatches();
      System.setCurrentTimeMillis(0L);
      Vector<String> vector2 = findWithCapabilities1.getMatches();
      assertEquals("", findWithCapabilities1.getFilename());
      assertSame(vector2, vector0);
      assertTrue(vector2.equals((Object)vector1));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.listOptions();
      findWithCapabilities1.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setFilename("8034");
      findWithCapabilities0.getMisses();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      assertEquals("8034", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.find();
      findWithCapabilities0.enable(capabilities_Capability1);
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      Vector<String> vector0 = findWithCapabilities0.find();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Vector<String> vector1 = findWithCapabilities0.getMisses();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities.main(stringArray0);
      Random.setNextRandom((-904));
      Vector<String> vector2 = findWithCapabilities0.getMatches();
      assertTrue(vector2.equals((Object)vector1));
      assertSame(vector2, vector0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[6];
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Packages = vector0;
      stringArray0[0] = "^g6;*h/Q4Zy#";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      stringArray0[3] = "\tThe Capabilities handler to base the dataset on.\n\tThe other parameters can be used to override the ones\n\tdetermined from the handler. Additional parameters for\n\thandler can be passed on after the '--'.";
      stringArray0[4] = "B'$";
      stringArray0[5] = "bw";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.handles(capabilities_Capability2);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.find();
      findWithCapabilities0.handles(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability3);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String string0 = TechnicalInformationHandlerJavadoc.PLAINTEXT_ENDTAG;
      findWithCapabilities0.getRevision();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities0.find();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.find();
      Hashtable<String, Vector<String>> hashtable1 = new Hashtable<String, Vector<String>>();
      findWithCapabilities1.find();
      findWithCapabilities1.find();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<!-- technical-plaintext-end -->");
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.setFilename("<!-- technical-plaintext-end -->");
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities5.getMisses();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities5.getNotCapabilities();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities4.find();
      findWithCapabilities4.setFilename("jT4!");
      try { 
        findWithCapabilities6.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities1.m_Superclass = "only-multiinstance";
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities1.find();
      Vector<String> vector0 = findWithCapabilities1.m_Packages;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "only-multiinstance";
      stringArray0[1] = "only-multiinstance";
      stringArray0[2] = "only-multiinstance";
      stringArray0[3] = "8034";
      stringArray0[4] = "8034";
      stringArray0[5] = "only-multiinstance";
      findWithCapabilities0.getMatches();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setFilename("B{b,-]Z");
      findWithCapabilities0.getMisses();
      findWithCapabilities1.getNotCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.handles(capabilities_Capability2);
      assertEquals("B{b,-]Z", findWithCapabilities0.getFilename());
      
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getOptions();
      Vector<String> vector1 = findWithCapabilities1.find();
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities1.m_Superclass = "only-multiinstance";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities1.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability1);
      Vector<String> vector0 = findWithCapabilities1.find();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.enableNot(capabilities_Capability2);
      findWithCapabilities1.getOptions();
      findWithCapabilities2.setFilename("\nClass is numeric: ");
      assertEquals("\nClass is numeric: ", findWithCapabilities2.getFilename());
      
      Vector<String> vector1 = findWithCapabilities0.getMisses();
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getOptions();
      findWithCapabilities1.getOptions();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.find();
      findWithCapabilities3.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities1.setFilename("0BET[\"+>T/=*0K>\"_w");
      findWithCapabilities0.enableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      findWithCapabilities7.getNotCapabilities();
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities1.m_Superclass = "8034";
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.find();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.setClassIndex("+b:Ef=GZ=X}ob%qI");
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities4.getOptions();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      String[] stringArray1 = new String[1];
      stringArray1[0] = "+b:Ef=GZ=X}ob%qI";
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities0.getMatches();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities2);
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      try { 
        findWithCapabilities4.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      Vector<String> vector0 = findWithCapabilities1.find();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      findWithCapabilities1.getMatches();
      hashtable0.put("options differ in length", vector0);
      findWithCapabilities1.find();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities1.setFilename("only-multiinstance");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getMisses();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities2.getNotCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray0);
      Vector<String> vector1 = findWithCapabilities2.m_Misses;
      findWithCapabilities3.setNotCapabilities(capabilities0);
      findWithCapabilities0.disable(capabilities_Capability0);
      assertFalse(findWithCapabilities0.equals((Object)findWithCapabilities2));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities1.m_Superclass = "8034";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7}");
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities1.enable(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities1.m_Matches;
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      Vector<String> vector1 = findWithCapabilities1.getMatches();
      hashtable0.put("8034", vector1);
      ClassDiscovery.m_Cache = hashtable0;
      findWithCapabilities1.find();
      findWithCapabilities1.setFilename("8034");
      findWithCapabilities1.getMisses();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities2.disable(capabilities_Capability2);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setFilename("7}");
      findWithCapabilities2.getMisses();
      findWithCapabilities1.getRevision();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities2.disable(capabilities_Capability3);
      findWithCapabilities0.getFilename();
      assertEquals("7}", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities1.find();
      findWithCapabilities0.getMatches();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.find();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.setFilename("b.");
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities2.getNotCapabilities();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities4.getMatches();
      findWithCapabilities1.disableNot(capabilities_Capability0);
      assertFalse(findWithCapabilities1.equals((Object)findWithCapabilities3));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      TestInstances testInstances0 = new TestInstances();
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      Instances instances0 = testInstances0.generate("pV')K");
      Capabilities capabilities0 = Capabilities.forInstances(instances0, true);
      findWithCapabilities0.m_Capabilities = capabilities0;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.find();
      Capabilities capabilities1 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      capabilities1.createMessage("8034");
      capabilities1.disableAllClassDependencies();
      findWithCapabilities0.setCapabilities(capabilities1);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability2);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      String string0 = "-not-no-class";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-not-no-class";
      stringArray0[1] = "-not-no-class";
      stringArray0[2] = "-not-no-class";
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\tMust handle multi-instance data.";
      stringArray0[2] = "true";
      stringArray0[3] = "-1";
      stringArray0[4] = "W=I|+oJ!8LKfg<?8";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "-no-class";
      stringArray1[1] = "-no-class";
      stringArray1[2] = "true";
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.find();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      hashtable0.put("", vector0);
      ClassDiscovery.m_Cache = hashtable0;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities1.getMisses();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities3.getNotCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities2.disableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities5.disable(capabilities_Capability2);
      assertEquals("", findWithCapabilities5.getFilename());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities1.find();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities1.enable(capabilities_Capability2);
      findWithCapabilities0.getMisses();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      findWithCapabilities0.find();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      Vector<String> vector0 = new Vector<String>();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Capabilities capabilities0 = findWithCapabilities2.getNotCapabilities();
      capabilities0.getOtherCapabilities();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities1.getHandler();
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.find();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      findWithCapabilities1.find();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities3.enable(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities3.getOptions();
      findWithCapabilities0.getMisses();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities1.getNotCapabilities();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities4.enable(capabilities_Capability0);
      assertFalse(findWithCapabilities4.equals((Object)findWithCapabilities0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities1.m_Superclass = "8034";
      Locale.getISOLanguages();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities1.find();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.find();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.setHandler(findWithCapabilities3);
      findWithCapabilities0.setFilename("only-multiinstance");
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities3.getMatches();
      findWithCapabilities0.find();
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      String[] stringArray1 = new String[2];
      stringArray1[0] = "8034";
      stringArray1[1] = "only-multiinstance";
      findWithCapabilities1.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities1.getMisses();
      Capabilities capabilities0 = findWithCapabilities2.m_Capabilities;
      findWithCapabilities3.isEnabledNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      assertEquals("only-multiinstance", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.m_Superclass = "only-multiinstance";
      String[] stringArray0 = Locale.getISOLanguages();
      findWithCapabilities1.getOptions();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.find();
      findWithCapabilities1.getMatches();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities1.find();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      findWithCapabilities2.getCapabilities();
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities1.getMatches();
      String string0 = "not-missing-att-values";
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities1.enable(capabilities_Capability1);
      findWithCapabilities0.setFilename("\nSearching for the following Capabilities:");
      FindWithCapabilities.main((String[]) null);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities1.setFilename("\nSearching for the following Capabilities:");
      findWithCapabilities0.getMisses();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability2);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      capabilities0.getClassCapabilities();
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-2);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      // Undeclared exception!
      try { 
        instances0.resampleWithWeights((java.util.Random) mockRandom0, doubleArray0, booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weights.length != numInstances.
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.m_Superclass = "only-multiinstance";
      findWithCapabilities0.getOptions();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.m_Capabilities = capabilities0;
      findWithCapabilities1.getMatches();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities1.enableNot(capabilities_Capability0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities1.setFilename("igIj&+\"uiS/&Wgv<_");
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities1.find();
      findWithCapabilities4.setFilename("weka/core/Capabilities.props");
      try { 
        findWithCapabilities2.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities1.m_Superclass = "8034";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = Locale.getISOCountries();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities1.setFilename("8034");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities4.m_Misses;
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities6.getNotCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      String[] stringArray2 = TestInstances.DEFAULT_WORDS;
      FindWithCapabilities findWithCapabilities8 = new FindWithCapabilities();
      findWithCapabilities1.disable(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities9 = new FindWithCapabilities();
      findWithCapabilities7.setOptions(stringArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.m_Superclass = "only-multiinstance";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      String[] stringArray1 = findWithCapabilities1.getOptions();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      findWithCapabilities1.getMatches();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      String[] stringArray2 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.setFilename("WI]");
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities2.m_Misses;
      findWithCapabilities4.getNotCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      Locale.getISOLanguages();
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      findWithCapabilities3.disable(capabilities_Capability0);
      findWithCapabilities1.setOptions(stringArray2);
      findWithCapabilities6.listOptions();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities5.getHandler();
      assertNull(capabilitiesHandler0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Taxicab geometry";
      stringArray0[1] = "Fk2rWi-mVD";
      stringArray0[2] = "Cannot handle binary ";
      stringArray0[3] = "-only-multiinstance";
      stringArray0[4] = "-1";
      stringArray0[5] = "&*B,ZZ;_(6,Lu%_";
      stringArray0[6] = " class that didn't match the criteria:\n";
      stringArray0[7] = "F";
      stringArray0[8] = "not-missing-att-values";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.m_Superclass = "only-multiinstance";
      findWithCapabilities0.getOptions();
      findWithCapabilities1.getOptions();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      findWithCapabilities1.getMatches();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("not-date-atts");
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities1.m_Superclass = "8034";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities1.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities0.find();
      findWithCapabilities1.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability0);
      Locale.getISOLanguages();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "keyword @relation expected");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("8034");
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(87);
      Properties properties0 = Capabilities.PROPERTIES;
      FindWithCapabilities.main(stringArray1);
      Vector<String> vector0 = findWithCapabilities2.m_Misses;
      assertTrue(vector0.equals((Object)vector1));
      
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      Capabilities capabilities1 = findWithCapabilities1.getNotCapabilities();
      findWithCapabilities2.setNotCapabilities(capabilities1);
      assertEquals("", findWithCapabilities1.getFilename());
      assertSame(capabilities1, capabilities0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      capabilities0.enableAllClasses();
      findWithCapabilities2.setNotCapabilities(capabilities0);
      findWithCapabilities1.setHandler(findWithCapabilities2);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities2.enable(capabilities_Capability0);
      findWithCapabilities2.find();
      findWithCapabilities1.getMatches();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.find();
      findWithCapabilities2.find();
      String[] stringArray1 = findWithCapabilities2.getOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities2.getMisses();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities5.disable(capabilities_Capability1);
      findWithCapabilities2.find();
      findWithCapabilities3.getNotCapabilities();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities6.find();
      Capabilities capabilities1 = new Capabilities(findWithCapabilities6);
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities8 = new FindWithCapabilities();
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities1.m_Superclass = "8034";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = Locale.getISOCountries();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      String[] stringArray1 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.setFilename("-num-instances <num>");
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities2.m_Misses;
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      findWithCapabilities5.getNotCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities8 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities9 = new FindWithCapabilities();
      String[] stringArray2 = TestInstances.DEFAULT_WORDS;
      FindWithCapabilities findWithCapabilities10 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities8.disable(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities11 = new FindWithCapabilities();
      try { 
        findWithCapabilities3.setOptions(stringArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".*.");
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "weka/core/Capabilities.props");
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.getFilename();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".*.";
      stringArray0[1] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      findWithCapabilities0.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities1.m_Superclass = "8034";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = Locale.getISOCountries();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String[] stringArray1 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.getNotCapabilities();
      String[] stringArray2 = new String[4];
      stringArray2[0] = "!LE*=p\"~]m|]6[P";
      stringArray2[1] = "weka/core/Capabilities.props";
      stringArray2[2] = "8034";
      stringArray2[3] = "-binary-atts";
      FindWithCapabilities.main(stringArray2);
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray2);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      String[] stringArray3 = TestInstances.DEFAULT_WORDS;
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities2.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      try { 
        findWithCapabilities7.setOptions(stringArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.m_Superclass = "only-multiinstance";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities1.getOptions();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      findWithCapabilities1.getMatches();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability2);
      String[] stringArray1 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities2.setFilename("weka/core/Capabilities.props");
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities5.m_Misses;
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      String[] stringArray2 = TestInstances.DEFAULT_WORDS;
      FindWithCapabilities findWithCapabilities8 = new FindWithCapabilities();
      findWithCapabilities5.disable(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities9 = new FindWithCapabilities();
      findWithCapabilities7.setOptions(stringArray1);
      findWithCapabilities9.getCapabilities();
      FindWithCapabilities findWithCapabilities10 = new FindWithCapabilities();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities3.getHandler();
      assertNull(capabilitiesHandler0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities1.m_Superclass = "8034";
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      findWithCapabilities0.setHandler(findWithCapabilities1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      String[] stringArray1 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities3.setFilename("8034");
      findWithCapabilities4.enableNot(capabilities_Capability0);
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities1.m_Superclass = "8034";
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      String[] stringArray1 = findWithCapabilities1.getOptions();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.getMatches();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      TestInstances.listToArray("8034");
      findWithCapabilities2.setFilename("8034");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities2.enableNot(capabilities_Capability0);
      String[] stringArray2 = findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray1);
      String[] stringArray3 = TestInstances.DEFAULT_WORDS;
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.disable(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      String string0 = TestInstances.DEFAULT_SEPARATORS;
      FindWithCapabilities findWithCapabilities8 = new FindWithCapabilities();
      findWithCapabilities8.find();
      FindWithCapabilities.main(stringArray2);
      FindWithCapabilities findWithCapabilities9 = new FindWithCapabilities();
      boolean boolean0 = findWithCapabilities9.isEnabled(capabilities_Capability2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities1.m_Superclass = "8034";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      String[] stringArray1 = findWithCapabilities1.getOptions();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities1.find();
      findWithCapabilities1.getMatches();
      findWithCapabilities1.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities1.setFilename("only-multiinstance");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities5.m_Misses;
      findWithCapabilities2.setHandler(findWithCapabilities5);
      findWithCapabilities0.getOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities3.getOptions();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String[] stringArray2 = findWithCapabilities1.getOptions();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray2);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities1.m_Superclass = "8034";
      findWithCapabilities0.getOptions();
      findWithCapabilities1.getOptions();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities1.find();
      findWithCapabilities1.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities1.enable(capabilities_Capability0);
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      findWithCapabilities1.find();
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getMisses();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities3.m_Misses;
      findWithCapabilities2.setHandler(findWithCapabilities3);
      findWithCapabilities2.getOptions();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      findWithCapabilities2.getOptions();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities1.isEnabled(capabilities_Capability1);
      findWithCapabilities4.getRevision();
      findWithCapabilities4.setClassIndex("<A>");
      assertFalse(findWithCapabilities4.equals((Object)findWithCapabilities0));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.m_Superclass = "only-multiinstance";
      findWithCapabilities0.getOptions();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities1.getMatches();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      String[] stringArray1 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.setFilename("only-multiinstance");
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities5.getNotCapabilities();
      FindWithCapabilities.main((String[]) null);
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      SingleIndex singleIndex0 = findWithCapabilities5.m_ClassIndex;
      Locale.getISOLanguages();
      FindWithCapabilities findWithCapabilities8 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities7.disable(capabilities_Capability1);
      try { 
        findWithCapabilities4.setOptions((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }
}
