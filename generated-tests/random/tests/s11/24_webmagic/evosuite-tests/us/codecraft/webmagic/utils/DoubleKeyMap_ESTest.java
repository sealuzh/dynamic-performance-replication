/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 19:46:13 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Map<Object, Object>> hashMap0 = new HashMap<HashMap<Object, Object>, Map<Object, Object>>();
      DoubleKeyMap<HashMap<Object, Object>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Object, Object>(hashMap0);
      Map<Integer, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, String>(map0, class0);
      Integer integer0 = new Integer((-975));
      String string0 = doubleKeyMap1.remove(integer0, (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(class0);
      Object object0 = doubleKeyMap0.remove((Object) null, "bt7\"bc$;]R8MWW(");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Object, Map<String, Object>> hashMap0 = new HashMap<Object, Map<String, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(hashMap0, class0);
      Map<String, Object> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-975));
      HashMap<Integer, Map<Integer, String>> hashMap0 = new HashMap<Integer, Map<Integer, String>>();
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>(hashMap0);
      String string0 = doubleKeyMap0.put(integer0, integer0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Map<Object, Map<Object, String>>> hashMap0 = new HashMap<String, Map<Object, Map<Object, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<String, Object, Map<Object, String>>(hashMap0, class0);
      DoubleKeyMap<Map<Object, String>, Object, String> doubleKeyMap1 = new DoubleKeyMap<Map<Object, String>, Object, String>();
      Map<Object, String> map0 = doubleKeyMap1.newMap();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put("us.codecraft.webmagic.utils.DoubleKeyMap", (Object) class0, map0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Object>, HashMap<Object, Object>, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, HashMap<Object, Object>, String>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Map<HashMap<Object, Object>, String> map0 = doubleKeyMap0.get(hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Object, Map<Object, HashMap<String, Object>>> hashMap0 = new HashMap<Object, Map<Object, HashMap<String, Object>>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>(class0);
      Map<Object, Map<String, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(map0, class0);
      String string0 = doubleKeyMap1.put((Object) hashMap0, "", "bt7\"bc$;]R8MWW(");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Object, Map<Object, HashMap<String, Object>>> hashMap0 = new HashMap<Object, Map<Object, HashMap<String, Object>>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>(class0);
      Map<Object, HashMap<String, Object>> map0 = doubleKeyMap0.newMap();
      hashMap0.put("", map0);
      DoubleKeyMap<Object, Object, HashMap<String, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, HashMap<String, Object>>(hashMap0, class0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      HashMap<String, Object> hashMap2 = doubleKeyMap1.put((Object) "", (Object) "", hashMap1);
      assertNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Map<Object, Map<HashMap<Object, Object>, HashMap<Object, String>>>, HashMap<Object, Map<Object, String>>> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Object, Map<HashMap<Object, Object>, HashMap<Object, String>>>, HashMap<Object, Map<Object, String>>>();
      Map<Object, Map<HashMap<Object, Object>, HashMap<Object, String>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, HashMap<Object, Object>, HashMap<Object, String>> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Object, Object>, HashMap<Object, String>>(map0, class0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      HashMap<Object, String> hashMap1 = doubleKeyMap1.get((Object) null, hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Integer, Map<HashMap<String, Integer>, Integer>> hashMap0 = new HashMap<Integer, Map<HashMap<String, Integer>, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, HashMap<String, Integer>, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<String, Integer>, Integer>(hashMap0, class0);
      Integer integer0 = new Integer(0);
      HashMap<HashMap<String, Integer>, Integer> hashMap1 = new HashMap<HashMap<String, Integer>, Integer>(0);
      hashMap0.put(integer0, hashMap1);
      HashMap<String, Integer> hashMap2 = new HashMap<String, Integer>();
      Integer integer1 = doubleKeyMap0.get(integer0, hashMap2);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<HashMap<String, Object>, Map<Map<Integer, String>, Object>> hashMap0 = new HashMap<HashMap<String, Object>, Map<Map<Integer, String>, Object>>();
      DoubleKeyMap<HashMap<String, Object>, Map<Integer, String>, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Map<Integer, String>, Object>(hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      DoubleKeyMap<String, Integer, String> doubleKeyMap1 = new DoubleKeyMap<String, Integer, String>((Map<String, Map<Integer, String>>) null);
      Map<Map<Integer, String>, Object> map0 = doubleKeyMap1.newMap();
      hashMap0.put(hashMap1, map0);
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      doubleKeyMap0.remove(hashMap1, (Map<Integer, String>) hashMap2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Object, Object, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Map<Object, String>>();
      DoubleKeyMap<Map<Object, String>, Object, String> doubleKeyMap1 = new DoubleKeyMap<Map<Object, String>, Object, String>();
      Map<Integer, Map<Integer, HashMap<Object, Integer>>> map0 = doubleKeyMap1.newMap();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      doubleKeyMap0.put((Object) map0, (Object) doubleKeyMap1, (Map<Object, String>) hashMap0);
      Map<HashMap<Object, Integer>, Map<Integer, HashMap<Object, Integer>>> map1 = doubleKeyMap1.newMap();
      Integer integer0 = new Integer(0);
      Map<Object, String> map2 = doubleKeyMap0.remove((Object) map1, (Object) integer0);
      assertNull(map2);
  }
}
