/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 17:05:45 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Float float0 = new Float(1.0F);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.put("Ugp*;[>j4A ", (-3430));
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean(".qY? 8<BN3<y~", false);
      jSONObject0.names();
      try { 
        jSONObject0.getDouble("6A~0CkC</");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"6A~0CkC<\\/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Float float0 = new Float(316.57F);
      Float.max((-2795.4783F), 626.42F);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "[";
      Float.isFinite(0.0F);
      String string1 = "tr";
      Float.sum((-4322.1265F), 626.42F);
      jSONObject0.optDouble("tr", 0.0);
      long long0 = (-2138L);
      JSONObject jSONObject1 = jSONObject0.put("[", (-2138L));
      jSONObject1.getInt("[");
      try { 
        jSONObject1.put((String) null, (Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Double double0 = new Double(302.8629041);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("OtZv{5S?@hU", double0);
      try { 
        jSONObject1.getBoolean("wEeO+0TP=+?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wEeO+0TP=+?\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      jSONObject0.optInt("@0GH2Q(Lr'c;XM]Cm%j", 46);
      Collection<Double> collection0 = hashMap0.values();
      JSONObject jSONObject1 = jSONObject0.put("@0GH2Q(Lr'c;XM]Cm%j", collection0);
      jSONObject0.optJSONObject("3");
      try { 
        jSONObject1.getJSONArray("3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"3\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("q8lXTQ<LCyIGC(", "q8lXTQ<LCyIGC(");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject1.put("q8lXTQ<LCyIGC(", (Collection) linkedList0);
      jSONObject1.getJSONArray("q8lXTQ<LCyIGC(");
      String string0 = JSONObject.doubleToString(2201.58753);
      Float float0 = new Float(0.0);
      JSONObject.getNames((Object) float0);
      jSONObject1.optString("null");
      String string1 = JSONObject.valueToString(jSONObject1, 48, 2234);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("0.0", "0.0");
      jSONObject1.getInt("0.0");
      JSONObject jSONObject2 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject.valueToString(jSONObject2);
      Double double0 = new Double((-451.990950448));
      JSONObject jSONObject3 = jSONObject2.put("g$]FvWU", true);
      assertSame(jSONObject3, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(125, (-62353088));
      Long long0 = Long.getLong("?fJ", 1L);
      Long.compareUnsigned((-448L), (-1L));
      Long.getLong("SK[=aOy");
      JSONObject.valueToString(long0, 2662, (-62353088));
      jSONObject0.optDouble("A JSONArray text must start with '['");
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", (-62353088));
      JSONObject.valueToString("{}", (-64089270), (-1631));
      jSONObject1.optLong("A JSONArray text must start with '['");
      try { 
        jSONObject1.getLong("wheel.json.JSONObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("GJ;\"M$[z+{Z#[");
      assertEquals(0, int0);
      
      boolean boolean0 = jSONObject0.isNull("toH");
      assertTrue(boolean0);
      
      JSONObject jSONObject1 = jSONObject0.put(">e$2^@~Brm", 0L);
      jSONObject1.getLong(">e$2^@~Brm");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("", (-2455.18576240552));
      Float float0 = new Float((-3786.3784F));
      Float.max(1.0F, 1.0F);
      Double double0 = new Double(1.0F);
      JSONObject jSONObject1 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(1L);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("=z", (double) 1L);
      jSONObject1.getDouble("=z");
      JSONObject.valueToString(object0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("] is not a Boolean.");
      jSONObject0.put("", 0L);
      Boolean boolean0 = Boolean.valueOf("] is not a Boolean.");
      JSONObject.valueToString(boolean0, (-1), 55);
      jSONObject0.toString(22, 4);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", 144.3272);
      try { 
        jSONObject1.getString("isjoin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isjoin\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "BN9RO&,r";
      JSONTokener jSONTokener0 = new JSONTokener("{b\"qyu4[D,");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{i #pz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 6 of {i #pz
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("0.0", "0.0");
      JSONObject jSONObject2 = jSONObject0.putOpt("qk[SC~?01X*_V[Ftz", jSONObject1);
      JSONObject jSONObject3 = new JSONObject(jSONObject1);
      jSONObject2.getJSONObject("qk[SC~?01X*_V[Ftz");
      jSONObject1.optBoolean("0.0", false);
      jSONObject0.keys();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      jSONObject1.put("0.0", 1L);
      jSONObject2.keys();
      jSONObject0.optJSONArray("0.0");
      String string0 = "c$1j";
      String string1 = null;
      try { 
        jSONObject1.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt(",");
      assertEquals(0, int0);
      
      jSONObject0.put(",", (-1L));
      double double0 = jSONObject0.getDouble(",");
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>();
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject(linkedList0);
      jSONObject1.toString();
      jSONObject0.put("in", (Collection) linkedList0);
      Integer.divideUnsigned((-1768), 53);
      HashMap<String, Double> hashMap2 = new HashMap<String, Double>();
      BiFunction<Object, Double, Double> biFunction0 = (BiFunction<Object, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap2.replaceAll(biFunction0);
      Double.min((-97.36258), 81037085);
      JSONObject.doubleToString(81037085);
      jSONObject0.append("to", linkedList0);
      Boolean boolean1 = new Boolean("to");
      JSONObject.valueToString((Object) null);
      Integer integer0 = new Integer(53);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = new JSONObject();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONObject2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = new String[7];
      Object object0 = JSONObject.NULL;
      Integer integer0 = new Integer(215);
      String string0 = jSONObject0.toString(215, 215);
      JSONObject jSONObject1 = jSONObject0.put(string0, 62);
      JSONObject jSONObject2 = jSONObject0.put(string0, 215);
      Object object1 = new Object();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.toJSONArray(jSONArray0);
      jSONObject0.names();
      jSONObject1.optBoolean(string0);
      jSONObject2.names();
      JSONObject jSONObject3 = new JSONObject((Object) jSONObject1, stringArray0);
      Integer integer1 = new Integer(62);
      JSONObject jSONObject4 = new JSONObject(integer1, stringArray0);
      jSONObject4.optLong(string0, (long) 62);
      Integer integer2 = Integer.getInteger(string0, integer0);
      jSONObject4.optLong("] is not a JSONArray.", 0L);
      JSONObject jSONObject5 = new JSONObject(string0);
      jSONObject5.put("wheel.json.JSONException", (double) 0L);
      JSONObject.numberToString(integer2);
      jSONObject3.optJSONArray(string0);
      JSONObject jSONObject6 = new JSONObject();
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      jSONObject0.put("] is not a JSONArray.", (Map) hashMap0);
      JSONObject jSONObject7 = jSONObject2.put("% *p0ISz", (Map) hashMap0);
      jSONObject7.optJSONObject("] is not a JSONArray.");
      assertEquals(6, jSONObject2.length());
      assertEquals(6, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.length();
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("{", (double) 0);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Integer integer0 = new Integer(0);
      HashMap<JSONObject, JSONArray> hashMap1 = new HashMap<JSONObject, JSONArray>();
      JSONObject jSONObject2 = jSONObject1.put("", (Map) hashMap1);
      JSONObject jSONObject3 = jSONObject1.put("{", (Map) hashMap0);
      HashMap<String, Byte> hashMap2 = new HashMap<String, Byte>();
      JSONObject jSONObject4 = new JSONObject((Object) "{");
      assertEquals(3, jSONObject4.length());
      
      jSONObject1.names();
      Boolean boolean0 = new Boolean("{");
      Boolean boolean1 = Boolean.valueOf(false);
      String[] stringArray0 = JSONObject.getNames((Object) boolean1);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject5 = jSONObject3.put("isintern", 1127.39);
      Boolean boolean2 = new Boolean("{");
      jSONObject2.toString();
      jSONObject5.put("isintern", true);
      jSONObject2.getJSONObject("");
      JSONObject jSONObject6 = jSONObject2.put("isintern", 0);
      JSONObject.numberToString(integer0);
      long long0 = jSONObject6.optLong("{");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = new String[7];
      Object object0 = JSONObject.NULL;
      Integer integer0 = new Integer(215);
      String string0 = jSONObject0.toString(215, 215);
      JSONObject jSONObject1 = jSONObject0.put(string0, 62);
      JSONObject jSONObject2 = jSONObject0.put(string0, 215);
      Object object1 = new Object();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.toJSONArray(jSONArray0);
      JSONArray jSONArray1 = jSONObject0.names();
      jSONObject1.optBoolean("mT");
      jSONObject2.names();
      JSONObject jSONObject3 = new JSONObject((Object) jSONObject1, stringArray0);
      Integer integer1 = new Integer(62);
      JSONObject jSONObject4 = new JSONObject(integer1, stringArray0);
      Integer.getInteger("mT", integer0);
      jSONObject4.optLong("] is not a JSONArray.", 0L);
      JSONObject jSONObject5 = new JSONObject(string0);
      jSONObject5.keys();
      jSONObject5.put("wheel.json.JSONException", (double) 0L);
      Long long0 = new Long(215);
      JSONObject.valueToString(long0);
      jSONObject3.put("mT", (Object) integer1);
      jSONObject0.optString("mT");
      jSONObject0.toJSONArray(jSONArray1);
      jSONObject3.getLong("mT");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray2 = new JSONArray((Collection) linkedList0);
      jSONObject3.append("java.lang.Long@0000000031", jSONArray2);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = new String[7];
      Object object0 = JSONObject.NULL;
      Integer integer0 = new Integer(215);
      String string0 = jSONObject0.toString(215, 215);
      JSONObject jSONObject1 = jSONObject0.put(string0, 62);
      JSONObject jSONObject2 = jSONObject0.put(string0, 215);
      Object object1 = new Object();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.toJSONArray(jSONArray0);
      JSONArray jSONArray1 = jSONObject0.names();
      jSONObject1.optBoolean(string0);
      jSONObject2.names();
      JSONObject jSONObject3 = new JSONObject((Object) jSONObject1, stringArray0);
      Integer integer1 = new Integer(62);
      JSONObject jSONObject4 = new JSONObject(integer1, stringArray0);
      Integer.getInteger(string0, integer0);
      jSONObject4.optLong("] is not a JSONArray.", 0L);
      JSONObject jSONObject5 = new JSONObject(string0);
      jSONObject5.put("wheel.json.JSONException", (double) 0L);
      Long long0 = new Long(215);
      JSONObject.valueToString(long0);
      jSONObject0.optString(string0);
      jSONObject0.toJSONArray(jSONArray1);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "{{$ALc{%9";
      JSONTokener jSONTokener0 = new JSONTokener("{{$ALc{%9");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {{$ALc{%9
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>();
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.toJSONObject(jSONArray0);
      String string0 = "in";
      jSONObject0.put("in", (Collection) linkedList0);
      int int0 = 4;
      linkedList0.offer(jSONArray0);
      jSONArray0.put(4, (Object) hashMap0);
      jSONArray0.toString();
      linkedList0.stream();
      jSONObject0.optJSONArray("in");
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject();
      try { 
        jSONObject2.getString("Null key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Null key.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.length();
      Integer.valueOf(0);
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("#:", (double) 0);
      Integer integer0 = new Integer(0);
      HashMap<JSONObject, JSONArray> hashMap0 = new HashMap<JSONObject, JSONArray>();
      JSONObject jSONObject2 = jSONObject1.put("", (Map) hashMap0);
      JSONObject.getNames(jSONObject1);
      HashMap<String, Byte> hashMap1 = new HashMap<String, Byte>();
      JSONObject jSONObject3 = new JSONObject((Object) "#:");
      jSONObject3.names();
      jSONObject3.optInt("");
      Object object0 = JSONObject.NULL;
      jSONObject3.append("oxpe]ted a ':' atera key", object0);
      jSONObject1.optLong("JSONArray[");
      jSONObject2.getDouble("#:");
      JSONObject jSONObject4 = jSONObject0.put("", 0.0);
      jSONObject2.optLong("sub");
      Float float0 = new Float((double) 0L);
      jSONObject2.optInt("getjoin", 0);
      JSONObject jSONObject5 = new JSONObject((Map) hashMap1);
      jSONObject5.optLong("getjoin");
      jSONObject2.put("oxpe]ted a ':' atera key", (Object) jSONObject5);
      Float float1 = new Float(0.0);
      Double double0 = new Double((-1.0));
      JSONObject.valueToString(float0);
      Object object1 = new Object();
      jSONObject4.optJSONObject("sub");
      JSONObject jSONObject6 = jSONObject1.optJSONObject("9qc,$}&");
      assertNull(jSONObject6);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      String string0 = "{";
      boolean boolean0 = true;
      HashMap<JSONObject, JSONArray> hashMap1 = new HashMap<JSONObject, JSONArray>();
      HashMap<String, Byte> hashMap2 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Object) "toS");
      String string1 = "8<]o ";
      jSONObject0.optInt("toS");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.append("toS", object0);
      JSONObject jSONObject2 = new JSONObject(object0);
      jSONObject2.optLong("{", (long) 0);
      jSONObject2.names();
      Object object1 = new Object();
      short short0 = (short)110;
      Short.valueOf((short)110);
      Boolean boolean1 = Boolean.valueOf(true);
      jSONObject0.append("toS", boolean1);
      try { 
        jSONObject1.getString("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Float.sum(2073.8152F, (-2737.0F));
      Short.toUnsignedInt((short)4);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Object object0 = new Object();
      Boolean boolean0 = new Boolean("");
      Boolean.logicalAnd(true, false);
      hashMap0.put(object0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put(jSONObject0, (Boolean) null);
      JSONObject jSONObject1 = new JSONObject();
      HashMap<JSONObject, JSONArray> hashMap1 = new HashMap<JSONObject, JSONArray>();
      Integer integer0 = new Integer(8);
      Float float0 = new Float(1737.5F);
      Float.isFinite((short)4);
      JSONObject.numberToString(float0);
      jSONObject0.optJSONArray((String) null);
      try { 
        jSONObject1.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = new String[7];
      Object object0 = new Object();
      Integer integer0 = new Integer(215);
      JSONObject jSONObject1 = new JSONObject(integer0);
      JSONObject.valueToString(object0, 215, 215);
      JSONObject jSONObject2 = jSONObject0.put(" ", 62);
      Object object1 = new Object();
      JSONObject jSONObject3 = jSONObject1.put(" ", 105);
      Object object2 = new Object();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject2.toJSONArray(jSONArray0);
      jSONObject1.names();
      jSONObject2.optBoolean("mT");
      jSONObject3.names();
      JSONObject jSONObject4 = new JSONObject((Object) jSONObject2, stringArray0);
      Integer integer1 = new Integer(62);
      JSONObject jSONObject5 = new JSONObject(integer1, stringArray0);
      jSONObject1.optDouble("getrotateLeft", (double) 215);
      Integer integer2 = new Integer(105);
      JSONObject jSONObject6 = jSONObject3.putOpt("issum", integer2);
      jSONObject6.optInt("issum");
      JSONObject jSONObject7 = jSONArray0.toJSONObject(jSONArray0);
      assertNull(jSONObject7);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Double double0 = new Double(2614.52262);
      String[] stringArray0 = new String[21];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "gettoLowerCase";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.has("");
      String string0 = JSONObject.valueToString(jSONObject0);
      jSONObject0.keys();
      Short.toUnsignedInt((short)1050);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("", (-1844));
      jSONObject0.optLong("gettoLowerCase", (long) (-1844));
      jSONObject0.names();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject1.put("wheel.json.JSONObject@0000000001", (Collection) linkedList0);
      jSONObject1.toString(17);
      Object object0 = new Object();
      JSONObject.valueToString(jSONObject1);
      Short short0 = new Short((short)963);
      Boolean.valueOf(true);
      JSONObject jSONObject2 = jSONObject0.append("gettoLowerCase", double0);
      jSONObject0.getLong("");
      JSONObject jSONObject3 = new JSONObject(jSONObject2);
      jSONObject3.put("", 1050);
      jSONObject3.optLong("");
      Boolean.logicalAnd(false, true);
      String string1 = jSONObject2.optString("Zpg.x63)[$Aq<");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "0z4Y0");
      Object object0 = new Object();
      Short short0 = new Short((short)128);
      JSONObject jSONObject1 = jSONObject0.putOpt("[]", short0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      jSONObject1.optLong("D5oPme3,CB8xuI", 0L);
      jSONObject1.toString((-4507));
      Short short1 = new Short((short)652);
      Object object1 = new Object();
      jSONObject1.append("<", "[]");
      jSONObject1.has("[]");
      assertEquals(5, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      hashMap0.clone();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Double double0 = new Double(1.0);
      HashMap<String, Double> hashMap1 = new HashMap<String, Double>();
      hashMap1.clear();
      hashMap1.replace("49jg4 &^", (Double) null);
      Short short0 = new Short((short)19);
      JSONObject jSONObject1 = jSONObject0.putOpt("P\"Mc", linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      jSONObject0.optLong("toO", 0L);
      jSONObject0.toString(69);
      jSONObject1.toString(1215);
      Short short1 = new Short((short)652);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject1.put("{\"java.lang.String@0000000002\": []}", (Object) null);
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      jSONArray0.optJSONObject(12);
      JSONObject jSONObject3 = jSONObject2.append("{\"java.lang.String@0000000002\": []}", (Object) null);
      boolean boolean0 = jSONObject3.has("kZ:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.append("0.0", jSONObject0);
      jSONObject0.length();
      Integer integer0 = new Integer(0);
      jSONObject1.keys();
      jSONObject0.isNull("0.0");
      jSONObject2.toString();
      JSONArray jSONArray0 = jSONObject1.getJSONArray("0.0");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject.doubleToString(1110.1);
      JSONObject jSONObject0 = new JSONObject((Object) "1110.1");
      JSONObject jSONObject1 = jSONObject0.put("1110.1", 33);
      JSONArray jSONArray0 = jSONObject1.names();
      jSONObject0.length();
      jSONObject0.optDouble("Substring bounds error");
      jSONObject0.optInt("Substring bounds error");
      jSONObject0.optBoolean("1110.1");
      JSONTokener jSONTokener0 = new JSONTokener("Substring bounds error");
      StringWriter stringWriter0 = new StringWriter(0);
      JSONObject jSONObject2 = jSONObject1.put("YXkz`@3,2g*MM", false);
      jSONObject2.optLong("YXkz`@3,2g*MM", (long) 4);
      jSONObject0.optDouble("1110.1", 1110.1);
      JSONObject jSONObject3 = new JSONObject((Map) null);
      jSONObject0.keys();
      String string0 = "] is not a JSONArray.";
      JSONObject jSONObject4 = jSONObject0.put("] is not a JSONArray.", false);
      jSONObject2.optDouble(":A5'i@d,");
      jSONObject1.optJSONObject("[");
      jSONObject2.optInt("isspliterator", 18);
      jSONObject4.getBoolean("YXkz`@3,2g*MM");
      jSONObject2.isNull("1110.1");
      jSONObject0.toString();
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONObject.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Double double0 = new Double(2614.52262);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "gettoLowerCase";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.has("");
      JSONObject.valueToString(jSONObject0);
      jSONObject0.keys();
      Short.toUnsignedInt((short)1050);
      Boolean boolean0 = new Boolean(true);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean boolean1 = Boolean.valueOf(false);
      Boolean boolean2 = Boolean.TRUE;
      Boolean boolean3 = new Boolean(true);
      Boolean boolean4 = Boolean.TRUE;
      hashMap0.replace("/", boolean1, boolean4);
      Float.valueOf(805.3718F);
      JSONObject.numberToString(double0);
      JSONObject jSONObject1 = jSONObject0.put("", false);
      JSONObject.valueToString((Object) null);
      JSONObject.getNames((Object) jSONObject1);
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.optLong("MSKH%v");
      try { 
        jSONObject1.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = new String[7];
      Object object0 = new Object();
      Float.min(0.0F, 1576.9F);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      StringWriter stringWriter1 = new StringWriter();
      int int0 = 44;
      jSONObject0.toString(44);
      jSONObject0.optInt("Ib@xwu2.;VW", 44);
      JSONObject.quote(":@T?>C0");
      JSONObject jSONObject2 = new JSONObject(stringWriter1);
      Float float1 = new Float(Double.NaN);
      try { 
        jSONObject0.accumulate("get", float1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Short short0 = new Short((short) (-2241));
      Double double0 = new Double((short) (-2241));
      hashMap0.put((String) null, double0);
      Double double1 = new Double((-689.77123880209));
      Double.isFinite((-1851.0));
      Object object0 = new Object();
      Short short1 = new Short((short)128);
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-351.25F));
      JSONObject jSONObject1 = jSONObject0.putOpt("-dQt7)1", float0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.optInt("-dQt7)1");
      jSONObject0.write(stringWriter0);
      jSONObject1.toString(8192);
      Short short2 = new Short((short)652);
      Object object1 = new Object();
      try { 
        jSONObject1.append((String) null, object1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Double double0 = new Double(2614.52262221);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "int";
      Integer integer0 = new Integer(2156);
      HashMap<JSONObject, JSONArray> hashMap0 = new HashMap<JSONObject, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Object) "int");
      HashMap<Boolean, Short> hashMap1 = new HashMap<Boolean, Short>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap1);
      HashMap<String, Byte> hashMap2 = new HashMap<String, Byte>();
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      jSONObject2.optInt("mL|m=wXJ2&]8@{h)M");
      jSONObject1.toString((-17), (-1635));
      JSONObject jSONObject3 = jSONObject0.put("{\n\"java.lang.String@0000000016\": {},\n\"java.lang.String@0000000004\": [\njava.lang.Byte@0000000030,\njava.lang.Byte@0000000031,\njava.lang.Byte@0000000032\n],\n\"java.lang.String@0000000013\": \"java.lang.Class@0000000014\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}", (-17));
      JSONArray jSONArray0 = jSONObject3.names();
      Object object0 = new Object();
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject.valueToString(boolean0);
      String string0 = "false";
      Boolean boolean1 = new Boolean("false");
      Object object1 = new Object();
      JSONObject.valueToString(jSONObject1);
      try { 
        jSONArray0.getJSONObject(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] is not a JSONObject.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Double double0 = new Double(2615.0);
      String[] stringArray0 = new String[20];
      stringArray0[0] = "";
      stringArray0[1] = "int";
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      Integer integer0 = new Integer(215);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.optInt("true");
      jSONObject0.toString(48, 0);
      JSONObject jSONObject1 = jSONObject0.put("pKkc", 62);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject0.put(" of ", object0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject2.toJSONArray(jSONArray0);
      jSONObject1.toString();
      JSONArray jSONArray1 = jSONObject2.names();
      jSONObject2.optInt("", 44);
      jSONObject1.isNull(" of ");
      jSONObject0.toString();
      try { 
        jSONArray1.getJSONObject(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONObject.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Double double0 = new Double(2615.0);
      String[] stringArray0 = new String[20];
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject0.putOpt("myW", jSONObject1);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject2.write(stringWriter0);
      jSONObject2.toString(23);
      Short short0 = new Short((short)1130);
      Integer integer0 = new Integer(1073);
      jSONObject2.append("Missing value", integer0);
      assertEquals(5, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("0q0", "0q0");
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      JSONObject.getNames(jSONObject2);
      Double double0 = new Double(112);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      jSONObject1.optInt("0q0");
      Double double1 = new Double(112);
      hashMap0.replace("0q0", double1);
      JSONObject jSONObject3 = new JSONObject(double1);
      Object object0 = new Object();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "' and instead saw '";
      JSONObject jSONObject4 = new JSONObject("' and instead saw '", stringArray0);
      jSONObject2.putOpt("' and instead saw '", jSONObject4);
      String string0 = jSONObject2.toString(0);
      Short short0 = new Short((short) (-1679));
      jSONObject2.append("{\n\"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n\"java.lang.String@0000000015\": {}\n}", object0);
      assertEquals(3, jSONObject2.length());
      
      String string1 = jSONObject0.optString("{\n\"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n\"java.lang.String@0000000015\": {}\n}");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Float.sum(2073.8152F, 2073.8152F);
      JSONObject jSONObject0 = new JSONObject((Object) "0z4Y0");
      String[] stringArray0 = new String[3];
      stringArray0[1] = "0z4Y0";
      stringArray0[2] = "min";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.putOpt("VHosQ8Fmgy{nh", object0);
      jSONObject2.toString(1315);
      Short short0 = new Short((short)55);
      JSONObject jSONObject3 = new JSONObject("{\"java.lang.String@0000000020\": null}");
      assertFalse(jSONObject3.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "\\u";
      jSONObject0.optBoolean(string0, true);
      jSONObject0.names();
      Double double0 = new Double(111.830812401);
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>();
      Boolean boolean0 = Boolean.valueOf(" at character ");
      Boolean boolean1 = new Boolean(true);
      hashMap1.remove((Object) boolean0, (Object) boolean1);
      Boolean boolean2 = new Boolean(true);
      boolean boolean3 = new Boolean(string0);
      hashMap1.getOrDefault(string0, boolean2);
      Boolean boolean4 = Boolean.valueOf(true);
      hashMap1.put(double0, boolean4);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("4~#o-Jr)cp#byx").when(biFunction0).apply(any() , any());
      hashMap0.compute(double0, biFunction0);
      jSONObject0.toString(1296, 2);
      Short short0 = new Short((short)61);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      String string1 = jSONTokener0.nextTo("{");
      JSONObject jSONObject1 = new JSONObject("{}");
      jSONObject1.optJSONObject("iscopyValueOf");
      jSONObject0.optInt(">G~lhV-1i>f3", 1296);
      Byte byte0 = new Byte((byte)1);
      String string2 = JSONObject.valueToString(byte0, (short)61, 8);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.length();
      Integer.valueOf(0);
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("0.0", (double) 0);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject2 = jSONObject0.put("{", true);
      jSONObject1.put("2:%L*5~|aX9h.CW>?t", true);
      double double0 = jSONObject0.optDouble("2:%L*5~|aX9h.CW>?t", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      HashMap<JSONObject, JSONArray> hashMap1 = new HashMap<JSONObject, JSONArray>();
      JSONObject jSONObject3 = jSONObject1.put("0.0", (Map) hashMap0);
      HashMap<String, Byte> hashMap2 = new HashMap<String, Byte>();
      JSONObject jSONObject4 = new JSONObject((Object) "0.0");
      jSONObject4.optInt(" of ");
      jSONObject3.toString(0, (-24));
      int int0 = jSONObject3.optInt("S5");
      assertEquals(0, int0);
      
      jSONObject0.optJSONObject("2:%L*5~|aX9h.CW>?t");
      boolean boolean0 = jSONObject4.optBoolean("{");
      assertEquals(3, jSONObject4.length());
      
      jSONObject2.optInt("is", 88);
      Integer integer0 = new Integer(88);
      boolean boolean1 = jSONObject1.getBoolean("2:%L*5~|aX9h.CW>?t");
      assertFalse(boolean1 == boolean0);
      
      Boolean boolean2 = Boolean.FALSE;
      String[] stringArray0 = JSONObject.getNames((Object) boolean2);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.accumulate("va", jSONObject0);
      JSONObject jSONObject2 = jSONObject0.put("wheel.json.JSONTokener", 813.408);
      Double double0 = new Double(0.0);
      Short short0 = new Short((short)20);
      JSONObject.numberToString(short0);
      jSONObject2.getInt("wheel.json.JSONTokener");
      JSONObject.doubleToString((short)20);
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject3.opt("java.lang.Short@0000000006");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(1.0);
      jSONObject0.has((String) null);
      Boolean boolean0 = new Boolean((String) null);
      JSONObject.valueToString("{");
      jSONObject0.keys();
      Short.toUnsignedInt((short)1050);
      Boolean boolean1 = new Boolean(true);
      HashMap<String, Boolean> hashMap1 = new HashMap<String, Boolean>();
      Boolean.valueOf(true);
      Boolean boolean2 = Boolean.TRUE;
      Boolean.compare(false, false);
      Boolean.logicalOr(false, false);
      Boolean boolean3 = new Boolean(false);
      hashMap1.replace("] is not a Boolean.", boolean2, boolean3);
      Float.valueOf((-1.0F));
      JSONObject.numberToString(double0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", true);
      jSONObject0.names();
      Integer integer0 = new Integer(756);
      JSONObject.getNames((Object) integer0);
      jSONObject1.optLong("\"java.lang.String@0000000002\"");
      try { 
        jSONObject0.getLong("va");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"va\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject1 = jSONObject0.put("2EQQ#s)PsMFn", (Collection) linkedList0);
      jSONObject0.length();
      jSONObject0.toString();
      JSONObject jSONObject2 = jSONObject1.put("{\"java.lang.String@0000000003\":wheel.json.JSONArray@0000000002}", 1641L);
      assertEquals(2, jSONObject1.length());
      
      jSONObject2.put("`X=::*N4c{{6$1lY@P?", 0.0);
      try { 
        jSONObject2.getDouble("2EQQ#s)PsMFn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"2EQQ#s)PsMFn\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("0z4Y0", jSONObject0);
      String string0 = jSONObject0.optString("0z4Y0", ",:]}/\"[{;=#");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Float.sum(2073.8152F, (-2737.0F));
      Short short0 = new Short((short)4);
      Short.toUnsignedInt((short)4);
      JSONObject.numberToString(short0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Object object0 = new Object();
      Boolean boolean0 = new Boolean("");
      boolean boolean1 = new Boolean("java.lang.Short@0000000001");
      hashMap0.put(object0, boolean0);
      Boolean boolean2 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put(jSONObject0, (Boolean) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "java.lang.Short@0000000001";
      stringArray0[1] = "lis";
      stringArray0[2] = "";
      jSONObject0.toString(45);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optInt("}bxZ%", 45);
      jSONObject0.isNull("");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "0.0";
      jSONObject0.length();
      Integer.valueOf(0);
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("0.0", (double) 0);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      jSONObject0.put("{", true);
      Double double0 = new Double(0.0);
      hashMap0.put("G)|$^hN~Qz", double0);
      jSONObject0.optBoolean("{");
      JSONObject.numberToString(double0);
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>();
      Object object0 = JSONObject.NULL;
      Boolean.valueOf("java.lang.Double@0000000006");
      try { 
        jSONObject1.getJSONObject("0.0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0.0\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Short short0 = new Short((short)39);
      Double double0 = new Double((short)39);
      JSONObject jSONObject0 = new JSONObject();
      Double double1 = new Double(Double.NaN);
      String[] stringArray0 = JSONObject.getNames((Object) double1);
      JSONObject jSONObject1 = new JSONObject(double1);
      JSONObject.doubleToString((short)39);
      jSONObject1.optString("39");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('q');
      stringWriter1.append((CharSequence) "39");
      StringWriter stringWriter2 = new StringWriter();
      stringWriter1.append((CharSequence) "");
      StringWriter stringWriter3 = stringWriter1.append('q');
      stringWriter3.close();
      stringWriter3.append((CharSequence) "39");
      jSONObject0.write(stringWriter1);
      Boolean boolean0 = new Boolean(false);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean boolean1 = Boolean.valueOf(false);
      Boolean boolean2 = Boolean.FALSE;
      hashMap0.replace("39", boolean0, boolean1);
      Float.valueOf(1600.6F);
      JSONObject.numberToString(double0);
      jSONObject0.put("sb6=t5PbLJ>KH", false);
      JSONObject jSONObject2 = new JSONObject("sb6=t5PbLJ>KH", stringArray0);
      jSONObject2.names();
      JSONObject.getNames((Object) boolean2);
      jSONObject2.optLong("sb6=t5PbLJ>KH");
      try { 
        jSONObject2.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Float.sum(2073.8152F, (-2737.0F));
      Short short0 = new Short((short)4);
      Short.toUnsignedInt((short)4);
      JSONObject.numberToString(short0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Object object0 = new Object();
      Boolean boolean0 = new Boolean("");
      Boolean.logicalXor(false, false);
      hashMap0.put(object0, boolean0);
      Boolean boolean1 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put(jSONObject0, (Boolean) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "java.lang.Short@0000000001";
      stringArray0[1] = "lis";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.optJSONObject("wheel.json.JSONObject$Null");
      boolean boolean2 = jSONObject1.optBoolean("");
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Short short0 = new Short((short)39);
      Double double0 = new Double((short)39);
      JSONObject jSONObject0 = new JSONObject();
      Double double1 = new Double(Double.NaN);
      JSONObject.getNames((Object) double1);
      JSONObject jSONObject1 = new JSONObject(double1);
      JSONObject.doubleToString((short)39);
      jSONObject1.optString("39");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('q');
      stringWriter1.append((CharSequence) "39");
      StringWriter stringWriter2 = new StringWriter();
      stringWriter1.append((CharSequence) "");
      StringWriter stringWriter3 = stringWriter1.append('q');
      stringWriter3.close();
      stringWriter3.append((CharSequence) "39");
      jSONObject0.write(stringWriter1);
      jSONObject1.optJSONArray("");
      Short short1 = new Short((short)2809);
      jSONObject1.opt("");
      try { 
        Short.valueOf("=^?05SZB18G1&O@E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"=^?05SZB18G1&O@E\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject(linkedList0);
      String string0 = "in";
      JSONObject jSONObject2 = jSONObject0.put("in", (Collection) linkedList0);
      try { 
        jSONObject2.put((String) null, (-1.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.length();
      Integer.valueOf(0);
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("0.0", (double) 0);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      jSONObject0.optBoolean("G)|$^hN~Qz", true);
      jSONObject1.keys();
      JSONObject jSONObject2 = jSONObject1.put("G)|$^hN~Qz", (-588.1541424326375));
      Double double0 = new Double(0);
      hashMap0.put("`8GgsTjjQ,ol@", double0);
      jSONObject2.names();
      jSONObject1.optLong("oyAH", (-275L));
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject3 = jSONObject0.put("oyAH", (Collection) linkedList0);
      JSONObject.doubleToString((-275L));
      String string0 = jSONObject3.optString((String) null, "{6FBFp#5+k`&}-*FU2");
      assertEquals("{6FBFp#5+k`&}-*FU2", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Short short0 = new Short((short)39);
      Double double0 = new Double((short)39);
      JSONObject jSONObject0 = new JSONObject();
      Double double1 = new Double(Double.NaN);
      String[] stringArray0 = JSONObject.getNames((Object) double1);
      Boolean boolean0 = new Boolean(false);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean.valueOf(true);
      Boolean boolean1 = Boolean.FALSE;
      Boolean boolean2 = new Boolean(true);
      HashMap<String, Boolean> hashMap1 = new HashMap<String, Boolean>();
      Boolean boolean3 = Boolean.valueOf("\t");
      Boolean boolean4 = Boolean.TRUE;
      hashMap1.replace("\t", boolean3, boolean4);
      Float float0 = Float.valueOf(0.0F);
      JSONObject.numberToString(float0);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Float@0000000002", true);
      jSONObject1.names();
      JSONObject.getNames((Object) float0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = new JSONObject(boolean3, stringArray0);
      jSONObject1.optLong("] is not a number.");
      JSONObject jSONObject3 = new JSONObject();
      try { 
        jSONObject2.getLong("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("0.0", "0.0");
      JSONObject.valueToString("0.0", 25, 9);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.optDouble("0.0");
      JSONObject.doubleToString(0.0);
      JSONObject.quote("0.0");
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean boolean0 = new Boolean(true);
      linkedList0.add(boolean0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject2.toJSONArray(jSONArray0);
      jSONObject1.append("y`9j3[ ]1$b`vEx8", "\"java.lang.String@0000000002\"");
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float.sum(2073.8152F, (-2737.0F));
      Short short0 = new Short((short)4);
      Short.toUnsignedInt((short)4);
      JSONObject.numberToString(short0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Object object0 = new Object();
      Boolean boolean0 = new Boolean("");
      JSONObject.valueToString("java.lang.Short@0000000002");
      jSONObject0.keys();
      Boolean boolean1 = new Boolean(false);
      HashMap<String, Boolean> hashMap1 = new HashMap<String, Boolean>();
      Boolean.valueOf(true);
      Boolean boolean2 = Boolean.FALSE;
      Boolean boolean3 = Boolean.valueOf(false);
      Boolean boolean4 = new Boolean("\"java.lang.String@0000000003\"");
      hashMap1.replace("java.lang.Short@0000000002", boolean3, boolean4);
      Float float0 = Float.valueOf((float) (short)4);
      JSONObject.numberToString(float0);
      JSONObject jSONObject1 = jSONObject0.put("_^", true);
      jSONObject1.names();
      JSONObject.getNames((Object) boolean3);
      jSONObject1.optLong("_^");
      try { 
        jSONObject1.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
      
      JSONObject.quote((String) null);
      String string1 = JSONObject.valueToString(jSONObject0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "ha";
      JSONObject jSONObject1 = new JSONObject();
      int int0 = 306;
      jSONObject1.put("ha", 306);
      jSONObject1.optInt("ha", 128);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "ha");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "0.0";
      JSONObject jSONObject1 = jSONObject0.putOpt("0.0", "0.0");
      jSONObject0.length();
      Integer integer0 = new Integer(1);
      jSONObject1.keys();
      jSONObject0.isNull("0.0");
      jSONObject1.optJSONObject("0.0");
      try { 
        jSONObject0.getBoolean("0.0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0.0\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      JSONObject jSONObject0 = new JSONObject();
      Float.sum(2073.8152F, (-2737.0F));
      Short short0 = new Short((short)4);
      Short short1 = new Short((short)4);
      Integer integer0 = new Integer(119);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) integer0);
      JSONObject jSONObject2 = new JSONObject(short1);
      jSONObject2.optLong("A JSONArray text must start with '['", 372L);
      jSONObject2.names();
      String string0 = "getgetBoolean";
      try { 
        jSONObject1.getJSONArray("getgetBoolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getgetBoolean\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optBoolean(1128);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.put(2830, (double) 2830);
      JSONArray jSONArray2 = new JSONArray();
      JSONObject jSONObject1 = new JSONObject();
      String string0 = "-!DCUBxx'+6N_R";
      jSONObject1.length();
      jSONObject0.optString("set");
      try { 
        jSONObject1.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject.doubleToString(1110.1);
      JSONObject jSONObject0 = new JSONObject((Object) "1110.1");
      JSONObject jSONObject1 = jSONObject0.put("1110.1", 33);
      jSONObject1.names();
      jSONObject0.length();
      jSONObject0.optDouble("Substring bounds error");
      jSONObject0.optInt("Substring bounds error");
      jSONObject0.optBoolean("1110.1");
      JSONTokener jSONTokener0 = new JSONTokener("Substring bounds error");
      StringWriter stringWriter0 = new StringWriter(0);
      JSONObject jSONObject2 = jSONObject1.put("YXkz`@3,2g*MM", false);
      jSONObject0.optDouble("1110.1", 1110.1);
      HashMap<JSONObject, JSONArray> hashMap0 = new HashMap<JSONObject, JSONArray>();
      JSONObject jSONObject3 = new JSONObject((Map) null);
      jSONObject0.toString(32, 97);
      jSONObject2.optDouble(":A5'i@d,");
      jSONObject3.optInt("toS");
      jSONObject1.optJSONObject("[");
      int int0 = jSONObject2.optInt("isspliterator", 18);
      assertEquals(5, jSONObject1.length());
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      jSONObject0.isNull("0.0");
      JSONObject.doubleToString(0.0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject1 = new JSONObject();
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>();
      HashMap<JSONObject, JSONArray> hashMap2 = new HashMap<JSONObject, JSONArray>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap2);
      jSONObject0.optBoolean("0", true);
      jSONObject2.toString((int) (short) (-25));
      JSONObject jSONObject3 = jSONObject2.put("t", false);
      jSONObject1.optDouble("Expected '", (double) (short) (-25));
      HashMap<JSONObject, JSONArray> hashMap3 = new HashMap<JSONObject, JSONArray>();
      HashMap<String, Byte> hashMap4 = new HashMap<String, Byte>();
      JSONObject jSONObject4 = new JSONObject((Map) hashMap1);
      jSONObject2.toString((-24), (int) (short) (-25));
      jSONObject2.optInt("p$fyM;+r");
      String string0 = null;
      jSONObject3.optJSONObject((String) null);
      jSONObject2.optInt("0", 0);
      try { 
        jSONObject4.get("has");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"has\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float.sum(2073.8152F, (-2737.0F));
      Short short0 = new Short((short)4);
      Short.toUnsignedInt((short)4);
      JSONObject.numberToString(short0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Object object0 = new Object();
      Boolean boolean0 = new Boolean("");
      JSONObject.valueToString("java.lang.Short@0000000002");
      jSONObject0.keys();
      Short.compare((short)160, (short)4);
      Boolean boolean1 = new Boolean(true);
      HashMap<String, Boolean> hashMap1 = new HashMap<String, Boolean>();
      Boolean boolean2 = Boolean.valueOf(true);
      Boolean boolean3 = Boolean.FALSE;
      hashMap1.replace("java.lang.Short@0000000002", boolean2, boolean3);
      Float.valueOf(0.0F);
      JSONObject.numberToString(short0);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Short@0000000002", true);
      jSONObject1.put("", 156);
      jSONObject0.toString((int) (short)4, (int) (short)160);
      jSONObject1.optLong("");
      try { 
        jSONObject1.getLong("java.lang.Short@0000000002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Short@0000000002\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      JSONObject jSONObject0 = new JSONObject();
      Float.sum(2073.8152F, (-2737.0F));
      Short short0 = new Short((short)4);
      Short.toUnsignedInt((short)4);
      JSONObject.numberToString(short0);
      HashMap<Object, Boolean> hashMap2 = new HashMap<Object, Boolean>();
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = new Boolean("");
      String string0 = jSONObject0.toString(6);
      assertEquals("{}", string0);
      
      jSONObject0.put("java.lang.Short@0000000002.", true);
      JSONObject jSONObject1 = new JSONObject((Object) "] is not a number.");
      JSONObject jSONObject2 = new JSONObject((Object) "java.lang.Short@0000000002.");
      boolean boolean1 = jSONObject1.optBoolean((String) null);
      assertFalse(boolean1);
      
      jSONObject0.put("", (double) (short)4);
      jSONObject1.optInt("] is not a number.", 6);
      assertEquals(3, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optInt(9, 9);
      jSONArray0.optBoolean(1128);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.optLong(2329);
      jSONArray0.put(2818, (double) 2818);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray2, 9, 12);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      JSONObject jSONObject0 = new JSONObject();
      Float.sum(2073.8152F, (-2737.0F));
      Short short0 = new Short((short)4);
      Short.toUnsignedInt((short)4);
      JSONObject.numberToString(short0);
      HashMap<Object, Boolean> hashMap2 = new HashMap<Object, Boolean>();
      Object object0 = new Object();
      Boolean boolean0 = new Boolean("");
      JSONObject.valueToString("java.lang.Short@0000000002");
      jSONObject0.keys();
      Boolean boolean1 = new Boolean(true);
      HashMap<String, Boolean> hashMap3 = new HashMap<String, Boolean>();
      Boolean boolean2 = Boolean.valueOf(true);
      Boolean boolean3 = Boolean.FALSE;
      hashMap3.replace("java.lang.Short@0000000002", boolean2, boolean3);
      Float.valueOf(0.0F);
      JSONObject.numberToString(short0);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Short@0000000002", true);
      jSONObject1.optLong("");
      try { 
        jSONObject1.getLong("java.lang.Short@0000000002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Short@0000000002\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Float.sum(2073.8152F, (-2737.0F));
      Short short0 = new Short((short)4);
      Short.toUnsignedInt((short)4);
      JSONObject.numberToString(short0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Object object0 = new Object();
      Boolean boolean0 = new Boolean("");
      hashMap0.put(object0, boolean0);
      Boolean boolean1 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put(jSONObject0, (Boolean) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "java.lang.Short@0000000001";
      stringArray0[1] = "lis";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      JSONObject jSONObject1 = new JSONObject("java.lang.Short@0000000001", stringArray0);
      StringWriter stringWriter0 = new StringWriter(54);
      StringWriter stringWriter1 = stringWriter0.append('@');
      Writer writer0 = jSONObject1.write(stringWriter1);
      jSONObject0.write(writer0);
      jSONObject1.optJSONArray("");
      Short short1 = new Short((short)4);
      jSONObject0.accumulate("", "java.lang.Short@0000000001");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "\\u";
      boolean boolean0 = jSONObject0.optBoolean(string0, true);
      assertTrue(boolean0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      Double double0 = new Double(111.830812401);
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>();
      Boolean boolean1 = Boolean.valueOf(true);
      hashMap1.put(double0, boolean1);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.compute(double0, biFunction0);
      String string1 = jSONObject0.toString(1296, 2);
      assertEquals("{}", string1);
      
      Short short0 = new Short((short)61);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      jSONTokener0.nextTo("{");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      jSONObject1.putOpt(">G~lhV-1i>f3", "Substring bounds error");
      Object object0 = JSONObject.NULL;
      String string2 = JSONObject.valueToString(object0);
      assertEquals("null", string2);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.length();
      Integer.valueOf(0);
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("toS", (double) 0);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject2 = jSONObject0.put("{", true);
      Integer integer0 = new Integer(0);
      HashMap<JSONObject, JSONArray> hashMap1 = new HashMap<JSONObject, JSONArray>();
      JSONObject jSONObject3 = jSONObject1.put("toS", (Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertNotNull(stringArray0);
      
      HashMap<String, Byte> hashMap2 = new HashMap<String, Byte>();
      JSONObject jSONObject4 = new JSONObject((Object) "toS");
      jSONObject4.optInt(" of ");
      String string0 = jSONObject1.toString(0, 0);
      Object object0 = JSONObject.NULL;
      String string1 = jSONObject2.toString(12);
      assertFalse(string1.equals((Object)string0));
      
      jSONObject4.toString(0);
      assertEquals(3, jSONObject4.length());
      
      Short short0 = new Short((short)652);
      Object object1 = new Object();
      Float float0 = new Float((double) 0);
      jSONObject3.put("istoBinaryString", (Object) float0);
      Object object2 = new Object();
      jSONObject1.append("Expected a ':' after a key", object2);
      JSONObject jSONObject5 = new JSONObject("{\n\"java.lang.String@0000000002\": {},\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005\n}");
      jSONObject5.has("H!(i1:.<q4");
      double double0 = jSONObject5.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject.valueToString(linkedList0);
      String string0 = "'KA>e+<7w<Zf:,5oi";
      JSONObject jSONObject1 = jSONObject0.accumulate("'KA>e+<7w<Zf:,5oi", hashMap0);
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      try { 
        jSONObject1.getInt("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Nh^**y n8;|Tx`\"Lv$w";
      JSONObject.quote("Nh^**y n8;|Tx`\"Lv$w");
      JSONObject.valueToString(jSONObject0);
      String string1 = ">m6;<O,c$T/C`)!+y<";
      Collection<Double> collection0 = null;
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONObject jSONObject1 = jSONObject0.accumulate(">m6;<O,c$T/C`)!+y<", jSONArray0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      try { 
        jSONObject1.getInt("000");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"000\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean boolean0 = new Boolean("RS~+ lE");
      Boolean.logicalOr(false, false);
      hashMap0.put("KVJPvN10]3|NdX'8", boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.length();
      JSONObject.quote(",\n");
      JSONObject.valueToString(hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("{\"java.lang.String@0000000003\":java.lang.Boolean@0000000004}", hashMap0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      linkedList1.iterator();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.keys();
      Byte byte0 = new Byte((byte)34);
      JSONObject.valueToString(byte0);
      jSONObject0.keys();
      Float float0 = Float.valueOf(0.0F);
      JSONObject.numberToString(float0);
      JSONArray jSONArray1 = jSONObject1.names();
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      jSONArray0.put(5770, (Map) hashMap0);
      jSONArray0.put(2818, (double) 2818);
      jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.getJSONObject("^+MGe,X0WT~mwk 1Hu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"^+MGe,X0WT~mwk 1Hu\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Float.sum(2073.8152F, (-2737.0F));
      Short short0 = new Short((short)4);
      Short.toUnsignedInt((short)4);
      JSONObject.numberToString(short0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Object object0 = new Object();
      HashMap<String, Double> hashMap1 = new HashMap<String, Double>();
      Double double0 = new Double((-3135.2));
      hashMap1.getOrDefault(double0, double0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("D8`&$", (String) null);
      try { 
        jSONObject0.put((String) null, (-2275));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Float.sum(2073.8152F, (-2737.0F));
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String string0 = "in";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("", (Collection) linkedList0);
      String string1 = "v<";
      jSONObject0.remove((String) null);
      String string2 = "[]";
      JSONTokener jSONTokener0 = new JSONTokener("get");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of get
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Float.sum(2073.8152F, (-2737.0F));
      Short short0 = new Short((short)4);
      Short.toUnsignedInt((short)4);
      JSONObject.numberToString(short0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Object object0 = new Object();
      Boolean boolean0 = new Boolean("");
      hashMap0.put(object0, boolean0);
      Boolean boolean1 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optString("");
      try { 
        jSONObject0.getJSONArray("39.0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"39.0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("0.0", "0.0");
      jSONObject0.length();
      Integer integer0 = new Integer(1);
      jSONObject1.keys();
      jSONObject0.isNull("0.0");
      jSONObject0.remove("0.0");
      jSONObject0.append("v;&bTCV]RSu &", "v;&bTCV]RSu &");
      try { 
        jSONObject1.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean boolean0 = new Boolean("RS~+ lE");
      hashMap0.put("KVJPvN10]3|NdX'8", boolean0);
      Integer integer0 = new Integer(5);
      JSONTokener jSONTokener0 = new JSONTokener("~;kO,\"[H/");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~;kO,\"[H/
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("0.0", "0.0");
      jSONObject0.length();
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      int int0 = new Integer(1);
      JSONObject.quote("*f -h3xOj^|Xc0y");
      Float float0 = new Float((float) 1);
      JSONObject.valueToString(float0);
      jSONObject0.accumulate("0.0", hashMap0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      Iterator<Boolean> iterator0 = linkedList1.iterator();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      JSONObject jSONObject0 = new JSONObject();
      Float.sum(2073.8152F, (-2737.0F));
      Short short0 = new Short((short)4);
      Short.toUnsignedInt((short)4);
      JSONObject.numberToString(short0);
      HashMap<Object, Boolean> hashMap2 = new HashMap<Object, Boolean>();
      Object object0 = new Object();
      JSONObject.doubleToString(4);
      Integer integer0 = new Integer(23);
      JSONObject jSONObject1 = jSONObject0.accumulate("uVy_.xlgz>5}7", "");
      jSONObject0.optString("Opd59^^LDOEJU>W");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.lang.Short@0000000002";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.optJSONArray("istoString");
      JSONObject.getNames(jSONObject1);
      boolean boolean0 = jSONObject2.optBoolean("", false);
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("0.0", "0.0");
      Double.min((-1754.82194), (-1754.82194));
      jSONObject0.toString();
      Float float0 = new Float((-1754.82194));
      jSONObject1.append("JSONArray[", float0);
      jSONObject1.names();
      Boolean boolean0 = new Boolean("JSONArray[");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "WfI}#X";
      stringArray0[1] = "KWQU~5d9^/@'";
      stringArray0[2] = "{\"java.lang.String@0000000002\":\"java.lang.String@0000000002\"}";
      stringArray0[3] = "WfI}#X";
      stringArray0[4] = "0.0";
      stringArray0[5] = "{\"java.lang.String@0000000002\":\"java.lang.String@0000000002\"}";
      stringArray0[6] = "{\"java.lang.String@0000000002\":\"java.lang.String@0000000002\"}";
      stringArray0[7] = "JSONArray[";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.toString(23);
      jSONObject0.put("{\"java.lang.String@0000000002\":\"java.lang.String@0000000002\"}", false);
      jSONObject1.optJSONObject("JSONArray[");
      Short short0 = new Short((short)70);
      JSONTokener jSONTokener0 = new JSONTokener("mQi`@<l=H[u=:");
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of mQi`@<l=H[u=:
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.isFinite(995.766438);
      Double.min((-1162.389938673945), (-1162.389938673945));
      String[] stringArray0 = new String[1];
      jSONObject0.toString();
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONArray0);
      
      String[] stringArray1 = new String[3];
      stringArray1[0] = stringArray0[0];
      stringArray1[1] = "KWQU~5d9^/@'";
      stringArray1[2] = "{\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}";
      JSONObject jSONObject1 = new JSONObject();
      int int0 = jSONObject1.optInt("java.lang.Short@0000000002.");
      assertEquals(0, int0);
      
      boolean boolean0 = jSONObject1.isNull((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Float.sum(2073.8152F, (-2737.0F));
      Short short0 = new Short((short)4);
      Short.toUnsignedInt((short)4);
      JSONObject.numberToString(short0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Object object0 = new Object();
      Boolean boolean0 = new Boolean("");
      hashMap0.put(object0, boolean0);
      Boolean boolean1 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put(jSONObject0, (Boolean) null);
      JSONObject jSONObject1 = new JSONObject();
      HashMap<JSONObject, JSONArray> hashMap1 = new HashMap<JSONObject, JSONArray>();
      jSONObject0.toString(0, (-2059));
      jSONObject0.optInt("java.lang.Short@0000000001");
      try { 
        jSONObject1.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float((-2850.0F));
      Float float1 = new Float((-2850.0F));
      Float.min((-2850.0F), (-1374.66F));
      hashMap0.put(float0, float1);
      jSONObject0.optBoolean((String) null);
      jSONObject0.isNull(":");
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.accumulate("\f", object0);
      jSONObject0.isNull("cop");
      JSONObject jSONObject2 = jSONObject1.put("?pOK", (double) (-2850.0F));
      JSONObject jSONObject3 = jSONObject0.put("ry8Uq_j/WNy,J4~v", (Object) "cop");
      jSONObject1.opt("\f");
      Integer integer0 = new Integer((-1791));
      JSONObject jSONObject4 = new JSONObject(integer0);
      JSONObject.testValidity(jSONObject4);
      jSONObject2.has("java.lang.Short@00000000070");
      String string0 = jSONObject3.toString((-1791));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.min((-1162.389938673945), (-1162.389938673945));
      String[] stringArray0 = new String[1];
      jSONObject0.toString();
      stringArray0[0] = "WfI}#X";
      JSONObject jSONObject1 = jSONObject0.append("WfI}#X", "WfI}#X");
      jSONObject0.names();
      Boolean boolean0 = new Boolean("WfI}#X");
      String[] stringArray1 = new String[3];
      stringArray1[0] = "WfI}#X";
      stringArray1[1] = "KWQU~5d9^/@'";
      stringArray1[2] = "{\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray1);
      jSONObject1.toString(23);
      JSONObject jSONObject3 = jSONObject0.put("aWwg5[SL;obl/n", false);
      jSONObject3.optJSONObject("Unclosed comment");
      Short short0 = new Short((short)70);
      JSONTokener jSONTokener0 = new JSONTokener("java.lang.Short@0000000002.");
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of java.lang.Short@0000000002.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.min((-1162.389938673945), (-1162.389938673945));
      String[] stringArray0 = new String[1];
      jSONObject0.toString();
      stringArray0[0] = "WfI}#X";
      JSONObject jSONObject1 = jSONObject0.append("WfI}#X", "WfI}#X");
      jSONObject0.names();
      jSONObject1.optBoolean("GtgDU");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('P');
      stringWriter1.append((CharSequence) "GtgDU");
      jSONObject1.write(stringWriter1);
      jSONObject1.optJSONArray((String) null);
      Boolean boolean0 = new Boolean(true);
      Float float0 = new Float((-1774.3878F));
      JSONObject jSONObject2 = jSONObject1.accumulate("WfI}#X", float0);
      assertEquals(4, jSONObject0.length());
      assertEquals(4, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      JSONObject jSONObject0 = new JSONObject();
      Float.sum(2073.8152F, (-2737.0F));
      Short short0 = new Short((short)4);
      Short.toUnsignedInt((short)4);
      JSONObject.numberToString(short0);
      HashMap<Object, Boolean> hashMap2 = new HashMap<Object, Boolean>();
      Object object0 = new Object();
      Boolean boolean0 = new Boolean("");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.toString(12);
      JSONObject jSONObject2 = jSONObject0.put("java.lang.Short@0000000002.", true);
      jSONObject2.optJSONObject("] is not a number.");
      try { 
        jSONObject0.getJSONObject("java.lang.Short@0000000002.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Short@0000000002.\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Double double0 = new Double(2614.52262221);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      String string0 = "int";
      stringArray0[1] = "int";
      String string1 = ",\n";
      double double1 = (-1030.44962);
      Double double2 = new Double((-1030.44962));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.toString(31);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Double double0 = new Double(2614.52262221);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.append("getaddFirst", "");
      jSONObject1.names();
      jSONObject0.optBoolean("] is not a number.");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('s');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "getaddFirst");
      stringWriter2.append((CharSequence) "getaddFirst");
      jSONObject0.write(stringWriter0);
      jSONObject1.optJSONArray("");
      Boolean boolean0 = new Boolean(false);
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject2 = new JSONObject(object1);
      jSONObject2.accumulate("lis", double0);
      assertEquals(2, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject(linkedList0);
      JSONObject jSONObject2 = jSONObject0.put("in", (Collection) linkedList0);
      jSONObject1.remove("v<");
      JSONObject jSONObject3 = jSONObject2.append("[]", "in");
      try { 
        jSONObject3.getString("^E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"^E\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("kq0*9<0P=P76p", "kq0*9<0P=P76p");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "it";
      stringArray0[1] = "gettoLowerCase";
      stringArray0[2] = "";
      JSONObject jSONObject1 = new JSONObject("it", stringArray0);
      boolean boolean0 = new Boolean("gettoLowerCase");
      try { 
        jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.length();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Double.min((-1162.389938673945), (-1.0));
      String string0 = jSONObject0.toString();
      JSONObject jSONObject2 = jSONObject0.append("{}", "{}");
      JSONArray jSONArray0 = jSONObject2.names();
      assertNotNull(jSONArray0);
      
      jSONObject1.optBoolean("dGgWPrTKTtWkx/Az");
      Integer integer0 = new Integer(22);
      String string1 = JSONObject.valueToString(hashMap0, 2, 1404);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = jSONObject1.optBoolean("Unclosed comment", true);
      assertTrue(boolean0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.min((-1162.389938673945), (-1162.389938673945));
      String[] stringArray0 = new String[1];
      jSONObject0.toString();
      stringArray0[0] = "WfI}#X";
      JSONObject jSONObject1 = jSONObject0.append("WfI}#X", "WfI}#X");
      jSONObject0.names();
      jSONObject1.optBoolean("GtgDU");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('s');
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "WfI}#X");
      jSONObject1.write(stringWriter1);
      jSONObject0.optJSONArray("WfI}#X");
      Boolean boolean0 = new Boolean(false);
      jSONObject1.accumulate("{\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}", boolean0);
      assertEquals(5, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject.quote("n=,8LnM8/A9#_uev");
      Boolean boolean0 = Boolean.TRUE;
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.put("n=,8LnM8/A9#_uev", (Collection) linkedList0);
      jSONObject0.remove("n=,8LnM8/A9#_uev");
      JSONObject jSONObject1 = jSONObject0.append("va", jSONArray0);
      try { 
        jSONObject1.getString("m_F{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"m_F{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-3298.0));
      Double double1 = new Double(Double.NaN);
      JSONObject jSONObject1 = new JSONObject();
      Byte byte0 = new Byte((byte)112);
      Byte.toUnsignedInt((byte)67);
      Byte.compare((byte)2, (byte)42);
      Object object0 = new Object();
      JSONObject.getNames(object0);
      Map<JSONObject, Boolean> map0 = null;
      JSONObject jSONObject2 = new JSONObject((Map) null);
      String string0 = "null";
      Long long0 = new Long((byte)67);
      jSONObject2.put("d$[zD:juX*,+21V", (Map) null);
      try { 
        jSONObject1.append("null", double1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("0.0", "0.0");
      jSONObject0.length();
      Integer integer0 = new Integer(1);
      jSONObject1.optBoolean("0.0", false);
      jSONObject0.keys();
      JSONObject jSONObject2 = jSONObject0.put("0.0", (double) 1);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double(0.0);
      hashMap0.put("G)|$5hN~Qz", double0);
      jSONObject2.optLong("G)|$5hN~Qz", 0L);
      try { 
        jSONObject0.getJSONArray("0.0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0.0\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Float float0 = new Float(5267.15F);
      Float.sum(0.0F, 5267.15F);
      JSONObject jSONObject0 = new JSONObject((Object) "/)e");
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String[] stringArray0 = new String[9];
      stringArray0[2] = ">CNiP";
      stringArray0[4] = "8CU2xEwDl@_QUR2\"tA";
      stringArray0[5] = "8CU2xEwDl@_QUR2\"tA";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.toString((-154));
      jSONObject1.put("{\n\"java.lang.String@0000000004\": [\njava.lang.Byte@0000000020,\njava.lang.Byte@0000000021,\njava.lang.Byte@0000000022\n],\n\"java.lang.String@0000000013\": \"java.lang.Class@0000000014\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}", false);
      assertEquals(2, jSONObject1.length());
      
      jSONObject0.optJSONObject(">CNiP");
      jSONObject2.putOpt(";^zf:Js$&dh", stringArray0[0]);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = 0.0;
      Double double1 = new Double(0.0);
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject1.put("in", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Float float0 = new Float(5267.15F);
      Float.sum(0.0F, 5267.15F);
      JSONObject jSONObject0 = new JSONObject((Object) "/)e");
      String[] stringArray0 = new String[9];
      stringArray0[0] = ">CNiP";
      stringArray0[1] = "8CU2xEwDl@_QUR2\"tA";
      jSONObject0.optLong((String) null, 0L);
      stringArray0[2] = "/)e";
      stringArray0[3] = "/)e";
      stringArray0[4] = ">CNiP";
      stringArray0[5] = "/)e";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = ">CNiP";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.toString((-154));
      jSONObject1.optInt("/)e", 976);
      jSONObject0.names();
      jSONObject0.length();
      Integer integer0 = new Integer((-154));
      jSONObject1.append("8CU2xEwDl@_QUR2\"tA", "/)e");
      try { 
        jSONObject1.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("0.0", "0.0");
      Double double0 = new Double(1.0);
      JSONObject jSONObject2 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      HashMap<JSONObject, JSONObject> hashMap1 = new HashMap<JSONObject, JSONObject>(hashMap0);
      JSONObject jSONObject3 = new JSONObject((Map) hashMap1);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      linkedList0.iterator();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject2.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      jSONObject0.keys();
      int int0 = jSONObject1.optInt("0.0", 502);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Float float0 = new Float(5267.15F);
      Float.sum(0.0F, 5267.15F);
      JSONObject jSONObject0 = new JSONObject((Object) "/)e");
      String[] stringArray0 = new String[9];
      stringArray0[0] = ">CNiP";
      stringArray0[1] = "";
      stringArray0[2] = "/)e";
      stringArray0[3] = "/)e";
      stringArray0[4] = ">CNiP";
      stringArray0[5] = "/)e";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = ">CNiP";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.names();
      jSONObject0.length();
      jSONObject1.append("", "/)e");
      String string0 = jSONObject1.getString("");
      Float float1 = new Float((double) 5267.15F);
      String string1 = JSONObject.valueToString(float1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("kq0*9<0P=P76p", "kq0*9<0P=P76p");
      JSONObject.quote("kq0*9<0P=P76p");
      JSONObject.valueToString("\"kq0*9<0P=P76p\"");
      JSONObject jSONObject2 = jSONObject1.accumulate("\"java.lang.String@0000000003\"", "\"java.lang.String@0000000003\"");
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      try { 
        jSONObject2.getInt("\"java.lang.String@0000000003\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"java.lang.String@0000000003\\\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Float float0 = new Float(5267.15F);
      Float.sum(0.0F, 5267.15F);
      JSONObject jSONObject0 = new JSONObject((Object) "/)e");
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "8CU2xEwDl@_QUR2\"tA";
      stringArray0[1] = ">CNiP";
      stringArray0[2] = "";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray0);
      jSONObject3.toString(10);
      jSONObject3.put("", false);
      HashMap<JSONObject, Long> hashMap0 = new HashMap<JSONObject, Long>();
      HashMap<JSONObject, Long> hashMap1 = new HashMap<JSONObject, Long>(hashMap0);
      JSONObject jSONObject4 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject5 = jSONObject4.optJSONObject("");
      assertNull(jSONObject5);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject.quote("n=,8LnM8/A9#_uev");
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      Float.sum((-1367.5726F), 6);
      Short short0 = new Short((short)4);
      JSONObject.numberToString(short0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Object object0 = new Object();
      Boolean boolean1 = new Boolean("Bad value from toJSONString: ");
      Boolean.logicalXor(false, false);
      hashMap0.put("n=,8LnM8/A9#_uev", boolean1);
      Boolean boolean2 = new Boolean(false);
      hashMap0.put("Bad value from toJSONString: ", (Boolean) null);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.toString(1458, 1458);
      try { 
        jSONObject1.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(1.0);
      hashMap0.replace("{", double0);
      Double double1 = new Double(182.429351);
      hashMap0.put("] is not a Boolean.", double1);
      jSONObject0.optBoolean("] is not a Boolean.", true);
      jSONObject0.keys();
      Float float0 = new Float(182.429351);
      String string0 = "istoLowerCase";
      jSONObject0.put("istoLowerCase", (Object) null);
      try { 
        jSONObject0.getLong("tri");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"tri\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Float float0 = new Float(5267.15F);
      Float.sum(0.0F, 5267.15F);
      JSONObject jSONObject0 = new JSONObject((Object) "/)e");
      String[] stringArray0 = new String[9];
      stringArray0[0] = ">CNiP";
      stringArray0[1] = "8CU2xEwDl@_QUR2\"tA";
      stringArray0[2] = "/)e";
      stringArray0[3] = "/)e";
      stringArray0[4] = ">CNiP";
      stringArray0[5] = "/)e";
      stringArray0[6] = "";
      stringArray0[7] = "";
      jSONObject0.names();
      jSONObject0.remove("/)e");
      jSONObject0.keys();
      // Undeclared exception!
      jSONObject0.toString(2690, 78);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Float float0 = new Float(5267.15F);
      Float.sum(0.0F, 5267.15F);
      JSONObject jSONObject0 = new JSONObject((Object) "/)e");
      String[] stringArray0 = new String[9];
      stringArray0[0] = ">CNiP";
      stringArray0[1] = "8CU2xEwDl@_QUR2\"tA";
      stringArray0[3] = "/)e";
      jSONObject0.optString(stringArray0[2]);
      jSONObject0.toString();
      Object object0 = new Object();
      jSONObject0.append("JSONArray[", object0);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Boolean boolean0 = new Boolean("{");
      JSONTokener jSONTokener0 = new JSONTokener("{");
      Double double0 = new Double((-4158.67387943851));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.add(double0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray1);
      Float float0 = new Float((-720.44382027358));
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("zEcw&'", "{");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Float float0 = new Float(5267.15F);
      Float.sum(0.0F, 5267.15F);
      JSONObject jSONObject0 = new JSONObject((Object) "/)e");
      String[] stringArray0 = new String[9];
      stringArray0[0] = ">CNiP";
      String string0 = "8CU2xEwDl@_QUR2\"tA";
      stringArray0[1] = "8CU2xEwDl@_QUR2\"tA";
      stringArray0[2] = "/)e";
      stringArray0[3] = "/)e";
      stringArray0[4] = ">CNiP";
      stringArray0[5] = "/)e";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = ">CNiP";
      jSONObject0.optDouble("");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      int int0 = (-154);
      jSONObject1.toString((-154));
      jSONObject0.names();
      jSONObject0.length();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject1.put("?cD?FS4pNf", (Collection) linkedList0);
      try { 
        jSONObject1.getJSONArray("issplit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"issplit\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "0.0";
      JSONObject jSONObject1 = jSONObject0.putOpt("0.0", "0.0");
      try { 
        jSONObject1.append("0.0", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[0.0] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "] is not a Boolean.";
      Double double0 = new Double(1.0);
      hashMap0.replace("{", double0);
      Double double1 = new Double(182.429351);
      hashMap0.put("] is not a Boolean.", double1);
      jSONObject0.optBoolean("] is not a Boolean.", true);
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", 1845.86);
      long long0 = 1264L;
      hashMap0.put("{6FBFp#5+k`&}-*FU2", (Double) null);
      jSONObject0.names();
      jSONObject1.optLong("] is not a Boolean.", 1264L);
      try { 
        jSONObject1.getJSONArray("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject.quote("n=,8LnM8/A9#_uev");
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.optString("\"n=,8LnM8/A9#_uev\"");
      jSONObject0.toString();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Float.sum(2073.8152F, (-2737.0F));
      Short short0 = new Short((short)4);
      JSONObject.numberToString(short0);
      HashMap<Object, Boolean> hashMap2 = new HashMap<Object, Boolean>();
      Object object0 = new Object();
      HashMap<JSONObject, Double> hashMap3 = new HashMap<JSONObject, Double>();
      Double double0 = new Double((-1216.0));
      hashMap3.put(jSONObject0, double0);
      JSONObject jSONObject1 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      long long0 = jSONObject1.optLong("");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("0.0", "0.0");
      jSONObject0.length();
      long long0 = new Integer(1);
      jSONObject1.keys();
      boolean boolean0 = jSONObject0.isNull("0.0");
      assertFalse(boolean0);
      
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject.valueToString("n=,8LnM8/A9#_uev");
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("5'#Ux22*?#=p97_m|+0", (-1031.13));
      Boolean boolean0 = Boolean.FALSE;
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      Boolean boolean1 = new Boolean("5'#Ux22*?#=p97_m|+0");
      hashMap0.put(jSONObject0, boolean1);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONException", (Map) hashMap0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
      
      String string1 = JSONObject.doubleToString(0.0);
      assertEquals("0", string1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove((String) null);
      JSONObject.valueToString(jSONObject0);
      String string0 = JSONObject.doubleToString(615.35009);
      assertEquals("615.35009", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean boolean0 = new Boolean("RS~+ lE");
      hashMap0.put("KVJPvN10]3|NdX'8", boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.length();
      JSONObject.quote(",\n");
      JSONObject.valueToString(hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("{\"java.lang.String@0000000003\":java.lang.Boolean@0000000004}", hashMap0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      linkedList0.iterator();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.keys();
      int int0 = jSONObject1.optInt("RS~+ lE", 1);
      assertEquals(2, jSONObject0.length());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(0.0);
      jSONObject0.optDouble((String) null, 0.0);
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("java.lang.Long@00000000040", 1L);
      double double0 = jSONObject0.optDouble("java.lang.Long@00000000040");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      JSONObject.doubleToString(615.35009);
      try { 
        jSONObject0.getLong("615.35009");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"615.35009\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean("-1457.57998428440");
      try { 
        jSONObject0.getDouble("ANWLqfjTq\"%3J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ANWLqfjTq\\\"%3J\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.getNames((Object) jSONObject1);
      jSONObject0.optDouble("Substring bounds error", 1.0);
      jSONObject0.putOpt("Substring bounds error", "Substring bounds error");
      jSONObject0.optJSONArray((String) null);
      Object object0 = jSONObject0.get("Substring bounds error");
      assertEquals("Substring bounds error", object0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("0.0", "0.0");
      jSONObject0.length();
      jSONObject1.optLong("0.0");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.optBoolean((String) null);
      try { 
        jSONObject0.getJSONArray("-580.963560497123.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-580.963560497123.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.names();
      String string0 = null;
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, (-1881));
      assertEquals((-1881), int0);
      
      jSONObject0.keys();
      boolean boolean0 = jSONObject0.optBoolean("C+7YnXAD_g0", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Long long0 = new Long(1132L);
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("5'#Ux22*?#=p97_m|+0", (-1031.13));
      jSONObject0.length();
      Integer integer0 = new Integer(1);
      try { 
        jSONObject1.getBoolean("5'#Ux22*?#=p97_m|+0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"5'#Ux22*?#=p97_m|+0\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject.doubleToString(1243.145906);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("1243.145906", stringArray0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("C<Z~Y:[QO5S9{+|/a~", 0.0);
      JSONObject.valueToString(jSONObject0, 8, (-2735));
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('O');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "C<Z~Y:[QO5S9{+|/a~");
      jSONObject0.write(stringWriter2);
      jSONObject0.optJSONArray("getreverseBytes");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Boolean boolean0 = new Boolean(false);
      String string0 = jSONObject0.optString("", "");
      Integer integer0 = new Integer(13);
      String string1 = JSONObject.numberToString(integer0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, 8, (-2735));
      JSONArray jSONArray0 = jSONObject0.optJSONArray("getreverseBytes");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject.doubleToString(Double.NaN);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("1.0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1.0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = new Boolean(false);
      String string0 = jSONObject0.optString("", "");
      Integer integer0 = new Integer(13);
      String string1 = JSONObject.numberToString(integer0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedList0.addAll((Collection<? extends Byte>) linkedList1);
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>(linkedList0);
      byte byte0 = (byte)123;
      Byte byte1 = new Byte((byte)123);
      Byte.toUnsignedInt((byte)123);
      linkedList0.add(byte1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList2);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray1);
      String string0 = "wheel.json.JSONObject$1";
      // Undeclared exception!
      try { 
        linkedList2.add(123, byte1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 123, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject.doubleToString(1.0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "1";
      stringArray0[1] = "1";
      stringArray0[2] = "1";
      stringArray0[3] = "1";
      stringArray0[4] = "1";
      stringArray0[5] = "1";
      stringArray0[6] = "1";
      JSONObject jSONObject0 = new JSONObject("1", stringArray0);
      jSONObject0.optBoolean("1", false);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "1");
      jSONObject0.write(stringWriter1);
      assertEquals("1{}", stringWriter1.toString());
      assertEquals("1{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 211;
      jSONObject0.toString((-135), 211);
      jSONObject0.optInt((String) null);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, hashMap0);
      try { 
        jSONObject1.put((String) null, (long) 211);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 690, 690);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(1511L);
      jSONObject0.putOpt("", long0);
      JSONObject.valueToString(jSONObject0, 690, (-2028));
      JSONObject.testValidity("{\"java.lang.String@0000000002\": java.lang.Long@0000000003}");
      jSONObject0.optDouble("{\"java.lang.String@0000000002\": java.lang.Long@0000000003}");
      int int0 = jSONObject0.optInt("] is not a JSONObject.", (-950));
      assertEquals(1, jSONObject0.length());
      assertEquals((-950), int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject.doubleToString(2658.3953);
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("q", (Map) hashMap0);
      jSONObject1.opt("q");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 133, 209);
      assertEquals("null", string0);
      
      String string1 = JSONObject.doubleToString((-1093.7804709));
      assertEquals("-1093.7804709", string1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("A JSONObject text must begin with '{'", 0);
      Short short0 = new Short((short)10);
      jSONObject1.putOpt("wheel.json.JSONObject", short0);
      jSONObject0.length();
      JSONObject.valueToString(jSONObject0, 2, 2);
      Integer integer0 = new Integer(3);
      assertEquals(3, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.valueToString(float0, 642, 642);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      String string1 = JSONObject.quote("java.lang.Float@0000000002");
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = jSONObject0.optBoolean("Tz`)0S%%77B 2.4G", true);
      assertTrue(boolean0);
      
      String string2 = jSONObject0.optString("t");
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.length();
      JSONObject.valueToString(jSONObject0, 0, 0);
      Integer integer0 = new Integer(3);
      assertEquals(3, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("kq0*9<0P=P76p", (Collection) null);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.length();
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      jSONObject0.optDouble("Z_/GA5|()s;$+C:", (double) (byte)74);
      Byte byte0 = new Byte((byte)74);
      Byte.compare((byte)97, (byte)74);
      jSONObject0.putOpt("gethashCode", byte0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("kq0*9<0P=P76p", "kq0*9<0P=P76p");
      jSONObject1.put("h{w", true);
      jSONObject0.optJSONObject("kq0*9<0P=P76p");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "kq0*9<0P=P76p";
      JSONObject jSONObject1 = jSONObject0.putOpt("kq0*9<0P=P76p", "kq0*9<0P=P76p");
      try { 
        jSONObject1.getJSONArray("kq0*9<0P=P76p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"kq0*9<0P=P76p\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull(">e$2^@~Brm");
      assertTrue(boolean0);
      
      String string0 = JSONObject.doubleToString((-1457.5799842844));
      assertEquals("-1457.5799842844", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean boolean0 = Boolean.valueOf(true);
      hashMap0.put((String) null, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      jSONObject0.length();
      jSONObject0.toString();
      Integer integer0 = new Integer(22);
      assertEquals(22, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.length();
      jSONObject0.toString();
      Integer integer0 = new Integer(0);
      jSONObject0.optJSONObject("{}");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = JSONObject.valueToString("islogicalXor", (-4225), (-4225));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject.quote("");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("not");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of not
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("JSON does not allow non-finite numbers.", 32);
      boolean boolean1 = jSONObject0.optBoolean((String) null, true);
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long.getLong("O|!9!y");
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.length();
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.put((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.put("] is not a JSONArray.", boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("2EQQ#s)PsMFn", "");
      assertEquals("", string0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.putOpt(",\n", object0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
      
      long long1 = jSONObject0.optLong("null", 0L);
      assertTrue(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((-135), 211);
      assertEquals("{}", string0);
      
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, hashMap0);
      assertSame(jSONObject0, jSONObject1);
      
      String string1 = JSONObject.valueToString(jSONObject0, 107, 211);
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = JSONObject.valueToString(">e2^@~frm", 690, 690);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.length();
      JSONObject.valueToString(hashMap0);
      jSONObject0.accumulate("{}", hashMap0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.keys();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.length();
      Short short0 = new Short((short)12);
      jSONObject0.accumulate("ys4(6Xa}9F?h5", short0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("%/k~GCj!");
      assertEquals(Double.NaN, double0, 0.01);
      
      HashMap<String, Boolean> hashMap1 = new HashMap<String, Boolean>();
      hashMap0.putAll(hashMap1);
      jSONObject0.length();
      String string0 = JSONObject.doubleToString(0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((-135), 211);
      assertEquals("{}", string0);
      
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
      
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("Rd$P1g", "Rd$P1g");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 23);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("%/k~GCj!");
      assertEquals(Double.NaN, double0, 0.01);
      
      HashMap<String, Boolean> hashMap1 = new HashMap<String, Boolean>();
      hashMap0.putAll(hashMap1);
      jSONObject0.length();
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      String string1 = jSONObject0.optString("is", "] not found.");
      assertEquals("] not found.", string1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      jSONObject0.toString((-105), 211);
      String string0 = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "kchAx";
      stringArray0[1] = "kchAx";
      stringArray0[2] = "kchAx";
      stringArray0[3] = "isreplace";
      stringArray0[4] = "Substring bounds error";
      stringArray0[5] = "Substring bounds error";
      stringArray0[6] = "kchAx";
      stringArray0[7] = "kchAx";
      stringArray0[8] = "Substring bounds error";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("B~BY");
      jSONObject0.optLong(">e2^@~frm");
      jSONObject0.remove("B~BY");
      jSONObject0.put("Expected a ',' or ']'", (-63));
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.put("kchx", (Object) boolean0);
      jSONObject1.optDouble("Expected a ',' or ']'");
      jSONObject1.opt((String) null);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.add(jSONObject0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optJSONObject(104);
      JSONObject jSONObject1 = jSONArray0.optJSONObject(0);
      linkedList0.add(jSONObject1);
      linkedList0.spliterator();
      jSONObject0.length();
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "*Zq";
      try { 
        jSONObject0.getJSONArray("*Zq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"*Zq\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString((-135), 211);
      String string0 = null;
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("isvalues", 1.0);
      jSONObject0.length();
      jSONObject0.optBoolean("Substring bounds error", true);
      jSONObject0.has("Substring bounds error");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong(">e2^@~frm");
      assertEquals(0L, long0);
      
      int int0 = jSONObject0.optInt(">e2^@~frm");
      assertEquals(0, int0);
      
      double double0 = jSONObject0.optDouble(">e2^@~frm", (-1394.802830584493));
      assertEquals((-1394.802830584493), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.length();
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      String string1 = jSONObject0.optString("{}", "{}");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.length();
      int int0 = jSONObject0.optInt("Substring bounds error");
      assertEquals(0, int0);
      
      boolean boolean0 = jSONObject0.optBoolean("|M0#D9 \"QI/0b)M'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString((-135), 211);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject((Object) hashMap0);
      int int0 = jSONObject2.length();
      assertEquals(2, int0);
      
      String string0 = jSONObject2.toString();
      assertNotNull(string0);
      assertEquals(2, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("GJ;\"M$[z+{Z#[");
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.isNull("0p8n6().)S;GY");
      jSONObject0.put("(x&3>De5w6:", (-3015L));
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject2);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("WFRhI", (Collection) linkedList0);
      boolean boolean0 = jSONObject0.optBoolean("F[L\"k", true);
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "Substring bounds error";
      try { 
        jSONObject0.getDouble("Substring bounds error");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Substring bounds error\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.length();
      JSONObject jSONObject1 = jSONObject0.accumulate("Substring bounds error", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte) (-104));
      JSONObject.valueToString(byte0, 2540, (byte) (-104));
      jSONObject0.optLong("JSON does not allow non-finite numbers.");
      try { 
        jSONObject0.getInt("JSON does not allow non-finite numbers.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSON does not allow non-finite numbers.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "true";
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>(linkedList0);
      try { 
        jSONObject0.put((String) null, (Collection) linkedList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("islongBitsToDouble");
      try { 
        jSONObject0.getLong("< ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"< \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "GJ;\"M$[z+{Z#[";
      jSONObject0.isNull("toH");
      JSONObject jSONObject1 = jSONObject0.put(">e$2^@~Brm", 0L);
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject2 = jSONObject1.put("toH", false);
      try { 
        jSONObject2.getJSONObject("GJ;\"M$[z+{Z#[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"GJ;\\\"M$[z+{Z#[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "toH";
      stringArray0[1] = "toH";
      stringArray0[2] = "toH";
      stringArray0[3] = "toH";
      stringArray0[4] = "toH";
      stringArray0[5] = "toH";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.isNull("dou");
      jSONObject0.put("toH", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("toH", 0L);
      JSONObject.getNames(jSONObject1);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("dou");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of dou
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("`V-yfAGWzS.*6");
      jSONObject0.keys();
      String string0 = JSONObject.quote("`V-yfAGWzS.*6");
      assertEquals("\"`V-yfAGWzS.*6\"", string0);
      
      int int0 = jSONObject0.optInt("isisNaN");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@~2";
      stringArray0[1] = "@~2";
      stringArray0[2] = "@~2";
      stringArray0[3] = "@~2";
      stringArray0[4] = "@~2";
      stringArray0[5] = "@~2";
      String string0 = "1DoI6";
      stringArray0[6] = "1DoI6";
      stringArray0[7] = "@~2";
      stringArray0[8] = "@~2";
      JSONObject jSONObject0 = new JSONObject("@~2", stringArray0);
      JSONTokener jSONTokener0 = new JSONTokener("@~2");
      JSONObject.getNames(jSONObject0);
      try { 
        jSONTokener0.nextString('^');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at character 3 of @~2
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optInt("i^.7", 32);
      Double.min((-1162.389938673945), (-1162.389938673945));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "W#";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = "|\".Du*.Cigq";
      jSONObject0.append("W#", "W#");
      String string1 = "b";
      jSONObject0.names();
      try { 
        jSONObject0.getJSONObject("b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"b\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Float float0 = new Float(5267.15F);
      Float.sum(0.0F, 5267.15F);
      JSONObject.numberToString(float0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Object object0 = new Object();
      Boolean boolean0 = new Boolean("java.lang.Float@0000000001");
      Boolean.logicalXor(true, true);
      hashMap0.put(object0, boolean0);
      hashMap0.put(object0, (Boolean) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = (-1135);
      jSONObject0.toString(0, (-1135));
      try { 
        jSONObject0.get("java.lang.Float@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Float@0000000001\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.min((-1162.389938673945), (-1162.389938673945));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "WfI}#X";
      JSONObject jSONObject1 = jSONObject0.append("WfI}#X", "WfI}#X");
      jSONObject0.names();
      jSONObject1.optBoolean("GtgDU");
      Integer integer0 = new Integer(97);
      JSONObject.valueToString(double0, 44, 52);
      boolean boolean0 = jSONObject0.optBoolean("$Bq", false);
      assertEquals(4, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte byte0 = (byte) (-81);
      Byte byte1 = new Byte((byte) (-81));
      JSONObject jSONObject0 = new JSONObject(byte1);
      String[] stringArray0 = new String[3];
      String string0 = "]s";
      stringArray0[0] = "]s";
      String string1 = "Missing value";
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Short short0 = Short.valueOf((short) (-1721));
      Short.toUnsignedInt((short)1519);
      Short.toUnsignedLong((short) (-861));
      Short.compare((short)0, (short) (-980));
      Short.toUnsignedLong((short) (-861));
      JSONObject.numberToString(short0);
      Double double0 = new Double((short) (-1721));
      JSONObject jSONObject0 = new JSONObject(double0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "]s";
      jSONObject0.optInt("]s");
      stringArray0[1] = "Missing value";
      stringArray0[2] = "Missing value";
      stringArray0[3] = "";
      stringArray0[4] = "java.lang.Short@0000000001";
      stringArray0[5] = "Missing value";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optLong("", 800L);
      try { 
        jSONObject1.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Float float0 = new Float(5267.15F);
      Float.sum(0.0F, 5267.15F);
      Float.sum(0.0F, 5267.15F);
      JSONObject.numberToString(float0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Object object0 = new Object();
      Boolean boolean0 = new Boolean("java.lang.Float@0000000001");
      Boolean.logicalXor(true, true);
      hashMap0.put(object0, boolean0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject((-491));
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("F[L\"k", (Collection) linkedList0);
      assertEquals(2, jSONObject0.length());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "java.lang.Float@0000000001";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "java.lang.Float@0000000001";
      stringArray0[5] = "java.lang.Float@0000000001";
      stringArray0[6] = "r!]>r%(W";
      stringArray0[7] = "D&`";
      JSONObject jSONObject1 = new JSONObject(linkedList0, stringArray0);
      boolean boolean1 = jSONObject1.optBoolean("r!]>r%(W");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Float float0 = new Float(5267.15F);
      Float.sum(0.0F, 5267.15F);
      Float.sum(0.0F, 5267.15F);
      JSONObject.numberToString(float0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Object object0 = new Object();
      Boolean boolean0 = new Boolean("java.lang.Float@0000000001");
      Boolean.logicalXor(true, true);
      hashMap0.put(object0, boolean0);
      Boolean boolean1 = new Boolean(true);
      hashMap0.put(object0, boolean1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(41, (-1135));
      try { 
        jSONObject0.get("java.lang.Float@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Float@0000000001\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "wheel.json.JSONTokener";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      long long0 = jSONObject0.optLong("", (-446L));
      assertEquals((-446L), long0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("GJ;\"M$[z+{Z#[");
      jSONObject0.isNull("toH");
      jSONObject0.put(">e$2^@~Brm", 0L);
      JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Float float0 = new Float(5267.15F);
      Float.sum(0.0F, 5267.15F);
      Float.sum(0.0F, 5267.15F);
      JSONObject.numberToString(float0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Object object0 = new Object();
      Boolean boolean0 = new Boolean("java.lang.Float@0000000001");
      Boolean.logicalXor(false, true);
      Boolean boolean1 = new Boolean(true);
      hashMap0.put(boolean0, boolean1);
      Boolean boolean2 = new Boolean(true);
      Boolean boolean3 = new Boolean(true);
      hashMap0.put(boolean1, boolean3);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(0, (-1135));
      try { 
        jSONObject0.get("{\n\"java.lang.Boolean@0000000003\": java.lang.Boolean@0000000004,\n\"java.lang.Boolean@0000000004\": java.lang.Boolean@0000000005\n}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n\\\"java.lang.Boolean@0000000003\\\": java.lang.Boolean@0000000004,\\n\\\"java.lang.Boolean@0000000004\\\": java.lang.Boolean@0000000005\\n}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Float float0 = new Float(5267.15F);
      Float.sum(0.0F, 5267.15F);
      Float.sum(0.0F, 5267.15F);
      JSONObject.numberToString(float0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Object object0 = new Object();
      Boolean boolean0 = new Boolean("java.lang.Float@0000000001");
      Boolean.logicalXor(false, true);
      hashMap0.put(object0, boolean0);
      Boolean boolean1 = new Boolean(true);
      hashMap0.put(object0, boolean1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      String string0 = jSONObject1.toString(312, 0);
      assertEquals("{}", string0);
      
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Float.sum(2073.8152F, (-2737.0F));
      Short short0 = new Short((short)4);
      JSONObject.numberToString(short0);
      HashMap<Object, Boolean> hashMap2 = new HashMap<Object, Boolean>();
      Object object0 = new Object();
      Boolean boolean0 = new Boolean("");
      Boolean.logicalXor(true, true);
      hashMap2.put(object0, boolean0);
      Boolean boolean1 = new Boolean(false);
      hashMap2.put(hashMap0, boolean1);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap2);
      jSONObject1.toString(0, 0);
      try { 
        jSONObject1.get("HC 8]2Y8(B4wyXH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"HC 8]2Y8(B4wyXH\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Float float0 = new Float(5267.15F);
      Float.sum(0.0F, 5267.15F);
      JSONObject jSONObject0 = new JSONObject((Object) "/)e");
      String[] stringArray0 = new String[9];
      stringArray0[0] = ">CNiP";
      stringArray0[1] = "8CU2xEwDl@_QUR2\"tA";
      stringArray0[2] = "/)e";
      stringArray0[3] = "/)e";
      stringArray0[4] = ">CNiP";
      stringArray0[5] = "/)e";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = ">CNiP";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.toString((-154));
      jSONObject0.names();
      jSONObject0.length();
      jSONObject1.length();
      jSONObject1.append("8CU2xEwDl@_QUR2\"tA", "/)e");
      try { 
        jSONObject1.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Short short0 = Short.valueOf((short) (-1721));
      Short.toUnsignedInt((short)1519);
      short short1 = (short)0;
      Short.toUnsignedLong((short)0);
      Short.compare((short)1519, (short) (-861));
      short short2 = (short) (-980);
      Short.compare((short)0, (short) (-980));
      Short.toUnsignedLong((short) (-861));
      JSONObject.numberToString(short0);
      JSONObject.valueToString("java.lang.Short@0000000001");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = "/)e";
      HashMap<Object, Boolean> hashMap2 = new HashMap<Object, Boolean>();
      Boolean boolean0 = new Boolean(false);
      hashMap2.put(jSONObject0, boolean0);
      Boolean boolean1 = new Boolean(false);
      hashMap2.put(hashMap0, boolean0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap1);
      jSONObject0.toString(8, (-3768));
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = "/)e";
      stringArray0[4] = ">CNiP";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.toString(61);
      jSONObject1.names();
      jSONObject0.length();
      jSONObject0.length();
      JSONObject jSONObject2 = jSONObject1.append("", "");
      try { 
        jSONObject2.getString(">CNiP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\">CNiP\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      JSONObject jSONObject0 = new JSONObject(byte0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "]s";
      stringArray0[1] = "Missing value";
      stringArray0[2] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optLong("]s", (long) (byte) (-81));
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.getBoolean("");
      Boolean.logicalOr(false, true);
      Boolean.logicalXor(true, true);
      Boolean.logicalOr(false, false);
      JSONObject.valueToString(boolean0);
      Boolean.logicalAnd(false, false);
      Boolean.compare(true, false);
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Boolean@0000000001");
      jSONObject0.keys();
      jSONObject0.remove("");
      JSONObject.valueToString((Object) null);
      JSONObject.getNames(jSONObject0);
      // Undeclared exception!
      jSONObject0.toString(2500);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(1.0);
      jSONObject0.put("true", (Object) float0);
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "#|\"OcwIq");
      try { 
        jSONObject0.getInt("#|\"OcwIq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#|\\\"OcwIq\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      String[] stringArray1 = new String[6];
      stringArray1[0] = "";
      stringArray1[1] = "null";
      stringArray1[2] = "";
      stringArray1[3] = "";
      String string1 = null;
      try { 
        jSONObject0.append((String) null, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong(">e$2^@~Brm");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Float float0 = new Float(5267.15F);
      Float.sum(0.0F, 5267.15F);
      Float.sum(0.0F, 5267.15F);
      JSONObject.numberToString(float0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Object object0 = new Object();
      Boolean boolean0 = new Boolean("java.lang.Float@0000000001");
      Boolean.logicalXor(true, true);
      hashMap0.put(object0, boolean0);
      Boolean boolean1 = new Boolean(true);
      hashMap0.put(object0, boolean1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(0, (-1135));
      try { 
        jSONObject0.get("java.lang.Float@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Float@0000000001\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "A JSONObject text must end with '}'";
      stringArray0[2] = "";
      String string0 = "\\u";
      stringArray0[3] = string0;
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "H]`u\"X=a6+Ao_bK";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(true);
      jSONObject0.put("kchx", (Object) boolean0);
      jSONObject0.keys();
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 690, 690);
      assertEquals("{}", string0);
      
      JSONObject.testValidity("{}");
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      String string0 = null;
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte byte0 = (byte) (-115);
      Byte byte1 = new Byte((byte) (-115));
      JSONObject.valueToString(byte1);
      byte byte2 = (byte)61;
      byte byte3 = (byte)1;
      Byte.compare((byte)61, (byte)1);
      JSONTokener jSONTokener0 = new JSONTokener("java.lang.Byte@0000000001");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of java.lang.Byte@0000000001
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.add((JSONObject) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Float float0 = new Float(454.2689198794978);
      Float.max(0.0F, 0.0F);
      Float.min(0.0F, 1.0F);
      JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("=]ckM~Cw'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of =]ckM~Cw'
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      long long0 = 0L;
      Long long1 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long1);
      jSONObject0.toJSONArray((JSONArray) null);
      String string0 = "utPj<K05itY5^no";
      String string1 = "";
      String string2 = "";
      JSONObject.quote("");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.min((-1162.389938673945), (-1162.389938673945));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "WfI}#X";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = "|\".Du*.Cigq";
      jSONObject0.append("WfI}#X", "WfI}#X");
      String string1 = "b";
      jSONObject0.names();
      try { 
        jSONObject0.getJSONObject("b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"b\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
