/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:31:50 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSource;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)52;
      byteArray0[5] = (byte)109;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.endsWith(byteArray0);
      byteString0.hashCode();
      // Undeclared exception!
      try { 
        byteString0.substring((-922));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0, 0, 0);
      byteString0.lastIndexOf(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        byteString0.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("size < 2: ");
      String string0 = byteString0.toString();
      assertEquals("[text=size < 2: ]", string0);
      
      String string1 = byteString0.base64Url();
      assertEquals("c2l6ZSA8IDI6IA==", string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString0.asByteBuffer();
      boolean boolean0 = byteString1.EMPTY.startsWith(byteString0);
      assertTrue(boolean0);
      
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Object object0 = new Object();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("[hex=", charset0);
      assertEquals(5, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = ByteString.encodeUtf8("gzip finished without exhausting source");
      byteString0.toString();
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte)0, (-1665));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      byteString0.indexOf(byteString0);
      byteString0.base64();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        pipedInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-32);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      ByteString byteString1 = byteString0.EMPTY.hmacSha1(byteString0);
      byteString0.indexOf(byteString0, (int) (byte) (-32));
      ByteBuffer byteBuffer0 = byteString1.asByteBuffer();
      assertEquals(0, byteBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      byteString0.toString();
      // Undeclared exception!
      try { 
        byteString0.substring((-1671), (-1671));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      byteString0.equals("[hex=000000000000000000000000000000000000]");
      // Undeclared exception!
      try { 
        byteString0.startsWith((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[text=T]", string0);
      
      ByteString byteString1 = byteString0.sha1();
      boolean boolean0 = byteString1.equals("[text=T]");
      assertFalse(boolean0);
      
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
      
      byteString1.asByteBuffer();
      assertFalse(byteString0.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-66);
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteString.decodeBase64("MVzP*OhxA9'\"");
      // Undeclared exception!
      try { 
        ByteString.decodeHex("MVzP*OhxA9'\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: M
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-32);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      byteString0.md5();
      byteString0.indexOf(byteString0, (int) (byte) (-32));
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      assertEquals(15, byteBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      ByteString.decodeBase64("");
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, 461, 461);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("data == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: t
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = ObjectStreamConstants.baseWireHandle;
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      hashingSink0.hash();
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString0.asByteBuffer();
      byteString1.lastIndexOf(byteString0);
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: 0
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)10;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString2 = byteString0.hmacSha256(byteString1);
      byteString2.base64();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("6oGA+Rek8nk7qWgZZRJDk7lCtpy08PSYQAl8jQtvz8M=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: o
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)10;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteString0.hmacSha256(byteString1);
      byteString0.base64Url();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("AAo=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: o
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.EMPTY.hmacSha1(byteString0);
      byteString1.asByteBuffer();
      int int0 = byteString1.lastIndexOf(byteArray0, 2949);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      ByteString byteString0 = ByteString.encodeUtf8("f_Dmq]1MR:o-NuuzZ");
      byteString0.base64();
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      Pipe pipe1 = new Pipe(1L);
      ByteString byteString2 = new ByteString(byteArray0);
      byteString1.hashCode();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      ByteString byteString1 = ByteString.decodeHex("");
      byteString1.toAsciiUppercase();
      byteString1.asByteBuffer();
      ByteString byteString2 = ByteString.encodeUtf8("base64 == null");
      byteString0.base64();
      Pipe pipe0 = new Pipe(2327L);
      Buffer buffer0 = pipe0.buffer;
      HashingSink.sha1(buffer0);
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      ByteString byteString3 = byteString2.toAsciiLowercase();
      byteString1.hmacSha256(byteString2);
      byteString3.asByteBuffer();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, 17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.EMPTY.toAsciiLowercase();
      byteString0.base64();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      ByteString byteString1 = ByteString.decodeHex("");
      ByteString byteString2 = byteString1.toAsciiUppercase();
      byteString2.EMPTY.asByteBuffer();
      ByteString.encodeUtf8("base64 == null");
      byteString0.base64();
      ByteString byteString3 = byteString0.sha256();
      Charset charset0 = Charset.defaultCharset();
      byteString1.EMPTY.string(charset0);
      ByteString byteString4 = byteString3.toAsciiLowercase();
      byteString0.compareTo(byteString2);
      byte[] byteArray0 = byteString1.toByteArray();
      Charset.defaultCharset();
      byteString4.lastIndexOf(byteArray0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteString byteString0 = ByteString.of(byteArray0, 0, 0);
      ByteString byteString1 = byteString0.substring(0);
      int int0 = byteString1.EMPTY.lastIndexOf(byteString0);
      assertEquals(0, int0);
      
      Pipe pipe0 = new Pipe(4L);
      pipe0.sinkClosed = true;
      Buffer buffer0 = pipe0.buffer;
      String string0 = byteString1.toString();
      assertEquals("[size=0]", string0);
      
      String string1 = byteString1.hex();
      assertEquals("", string1);
      assertSame(byteString1, byteString0);
      
      ByteString byteString2 = ByteString.of(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      byteString2.string(charset0);
      assertFalse(byteString2.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      HashingSink hashingSink0 = HashingSink.sha256(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      Object object0 = new Object();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteString byteString0 = ByteString.of(byteArray0, 0, 6);
      ByteString byteString1 = byteString0.substring(6);
      Pipe pipe0 = new Pipe(4L);
      pipe0.sinkClosed = true;
      Buffer buffer0 = pipe0.buffer;
      String string0 = byteString1.toString();
      assertEquals("[size=0]", string0);
      
      String string1 = byteString1.hex();
      assertEquals(6, byteString0.size());
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("size < 2: ");
      String string0 = byteString0.toString();
      assertEquals("[text=size < 2: ]", string0);
      
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.asByteBuffer();
      ByteString byteString2 = byteString0.md5();
      int int0 = byteString0.compareTo(byteString2);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.encodeUtf8("Ij0f}8+8");
      byteString0.toString();
      byteString0.toByteArray();
      byteString0.compareTo(byteString0);
      byteString0.base64();
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-3753L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -3753
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString byteString1 = realBufferedSource0.readByteString();
      realBufferedSource0.readByteArray();
      byteString0.equals(byteString1);
      Buffer buffer1 = new Buffer();
      // Undeclared exception!
      try { 
        HashingSource.hmacSha1(buffer0, byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteString byteString0 = ByteString.of(byteArray0, 0, 0);
      byteString0.substring(0);
      byteString0.toAsciiUppercase();
      byteString0.indexOf(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("ISIZE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: ISIZE
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-66);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.equals(byteString1);
      String string0 = byteString0.toString();
      assertEquals("[hex=0000000000000000000000000000000000000000000000000000000000000000]", string0);
      
      ByteString byteString2 = hashingSource0.hash();
      boolean boolean1 = byteString0.rangeEquals((int) (byte)81, byteString2, (int) (byte)81, (int) (byte) (-66));
      assertFalse(boolean1 == boolean0);
      assertTrue(byteString2.equals((Object)byteString0));
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteString[] byteStringArray0 = new ByteString[0];
      byte[] byteArray0 = null;
      ByteString byteString0 = new ByteString((byte[]) null);
      Inflater inflater0 = new Inflater(true);
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Pipe pipe0 = new Pipe(892L);
      Buffer buffer0 = pipe0.buffer;
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)39;
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      ByteString byteString2 = byteString0.md5();
      int int0 = byteString2.compareTo(byteString0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-7);
      byteArray0[6] = (byte) (-119);
      byteArray0[5] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[6] = (byte)123;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.EMPTY.toAsciiUppercase();
      byteString0.EMPTY.equals((Object) null);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byteString1.EMPTY.indexOf(byteArray0);
      byteString1.compareTo(byteString0);
      ByteString byteString2 = new ByteString(byteArray0);
      byteString2.indexOf(byteString0, (-514));
      byteString2.base64();
      Pipe pipe0 = new Pipe((byte)123);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      // Undeclared exception!
      try { 
        HashingSource.hmacSha256(pipe_PipeSource0, byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)17;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\u0006");
      byteString0.base64();
      boolean boolean0 = byteString0.EMPTY.startsWith(byteArray0);
      assertFalse(boolean0);
      
      ByteString byteString1 = byteString0.md5();
      int int0 = byteString1.indexOf(byteArray0, (int) (byte)64);
      assertEquals((-1), int0);
      
      byteString1.rangeEquals(0, byteArray0, (int) (byte)64, (int) (byte)17);
      boolean boolean1 = byteString0.endsWith(byteString1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 60, 60);
      try { 
        ByteString.read(byteArrayInputStream0, 42);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteString byteString0 = ByteString.read(pipedInputStream0, 0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteString0.write(pipedOutputStream0);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)57;
      byteString0.EMPTY.lastIndexOf(byteArray0);
      // Undeclared exception!
      try { 
        HashingSource.sha256((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delegate == null
         //
         verifyException("okio.ForwardingSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteString byteString0 = ByteString.of(byteArray0, 0, 0);
      ByteString byteString1 = byteString0.substring(0);
      ByteString byteString2 = byteString0.toAsciiUppercase();
      byteString0.indexOf(byteArray0);
      byteString1.lastIndexOf(byteString2, (-1049));
      // Undeclared exception!
      try { 
        byteString2.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString0.asByteBuffer();
      ByteString byteString2 = ByteString.encodeUtf8("baEe64 == null");
      byteString1.asByteBuffer();
      boolean boolean0 = byteString0.startsWith(byteString2);
      assertFalse(boolean0);
      
      ByteString byteString3 = ByteString.encodeUtf8("");
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
      
      byteString3.internalArray();
      assertTrue(byteString3.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)102;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 792, (byte)102);
      int int0 = (-2353);
      // Undeclared exception!
      try { 
        ByteString.read(byteArrayInputStream0, (-2353));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2353
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteString byteString0 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString0.asByteBuffer();
      byteString1.EMPTY.startsWith(byteString0);
      ByteString byteString2 = ByteString.encodeUtf8("base64 == null");
      Pipe pipe0 = new Pipe(2327L);
      Buffer buffer0 = pipe0.buffer;
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString3 = hashingSink0.hash();
      byteString2.EMPTY.endsWith(byteString3);
      byteString0.EMPTY.write(buffer0);
      Charset.defaultCharset();
      buffer0.readByteArray();
      // Undeclared exception!
      try { 
        byteString3.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteString byteString0 = ByteString.of(byteArray0, 0, 0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteString0.EMPTY.hashCode();
      ByteString byteString1 = byteString0.substring(0);
      byteString0.startsWith(byteString1);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      // Undeclared exception!
      try { 
        HashingSink.hmacSha256((Sink) null, byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delegate == null
         //
         verifyException("okio.ForwardingSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteString byteString0 = ByteString.of(byteArray0, 0, 0);
      ByteString byteString1 = byteString0.substring(0);
      ByteString byteString2 = byteString0.toAsciiUppercase();
      byteString0.indexOf(byteArray0);
      byteString0.endsWith(byteString1);
      byteString2.equals(byteString2);
      byteString0.md5();
      byteString1.lastIndexOf(byteArray0, 1117);
      // Undeclared exception!
      try { 
        byteString1.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      ByteString byteString0 = ByteString.encodeUtf8("\"f[p*5");
      assertEquals(7, byteString0.size());
      
      int int0 = ByteString.codePointIndexToCharIndex("\"f[p*5", 0);
      assertEquals(0, int0);
      
      int int1 = ByteString.codePointIndexToCharIndex("", 0);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      HashingSource hashingSource1 = HashingSource.md5(buffer1);
      ByteString byteString0 = hashingSource1.hash();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byte[] byteArray0 = byteString1.toByteArray();
      ByteString byteString2 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString2.substring((int) (byte) (-119));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Pipe pipe0 = new Pipe(892L);
      Buffer buffer0 = pipe0.buffer;
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)39;
      ByteString byteString1 = new ByteString(byteArray0);
      pipe0.sinkClosed = true;
      byteString0.asByteBuffer();
      ByteString byteString2 = byteString0.md5();
      ByteString byteString3 = byteString2.toAsciiUppercase();
      assertNotSame(byteString3, byteString2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0, 0, 0);
      byteString0.lastIndexOf(byteArray0);
      ByteString byteString1 = byteString0.EMPTY.sha256();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString2 = byteString0.hmacSha256(byteString1);
      byteString2.toAsciiUppercase();
      String string0 = "T>GI4+_v +=k<\"";
      MockFile mockFile0 = new MockFile("T>GI4+_v +=k<\"", "T>GI4+_v +=k<\"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.toPath();
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream(mockPrintStream0, false, "T>GI4+_v +=k<\"");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // T>GI4+_v +=k<\"
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteString byteString0 = ByteString.of(byteArray0, 0, 0);
      byteString0.EMPTY.lastIndexOf(byteString0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.toAsciiUppercase();
      byteString0.indexOf(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("\"CFFy(2J{Evr8G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: \"
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ByteString.decodeBase64("o)#PpVY:[)?<y4;");
      ByteString byteString0 = ByteString.encodeUtf8("base64 == null");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Charset.defaultCharset();
      byteString0.sha512();
      ByteString.decodeHex("");
      Object object0 = new Object();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.encodeString("o)#PpVY:[)?<y4;", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      byteString0.EMPTY.asByteBuffer();
      ByteString byteString1 = ByteString.decodeBase64("");
      ByteString byteString2 = ByteString.encodeUtf8("base64 == null");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      Buffer buffer0 = new Buffer();
      HashingSource.sha1(buffer0);
      ByteString byteString3 = byteString0.sha512();
      ByteString.of(byteBuffer0);
      byteString0.utf8();
      byteString2.rangeEquals((-2130), byteString1, 122, 122);
      byteString3.base64();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3126, 122);
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      // Undeclared exception!
      try { 
        byteString0.substring(56, 2622);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(1)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte) (-7);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)123;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.indexOf(byteArray0);
      ByteString.decodeHex("");
      byteString0.EMPTY.equals(byteString0);
      byteString0.EMPTY.md5();
      ByteString byteString1 = byteString0.hmacSha512(byteString0);
      byteString1.toString();
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      int int0 = 0;
      ByteString byteString0 = ByteString.encodeUtf8("n*+Y4fX-7c'Q~");
      byteString0.toString();
      byteString0.toByteArray();
      byteString0.endsWith(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 23);
      try { 
        ByteString.read(byteArrayInputStream0, 120);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)71;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte)123;
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byteString0.EMPTY.equals(byteString0);
      ByteString byteString1 = byteString0.EMPTY.md5();
      ByteString byteString2 = byteString0.hmacSha512(byteString0);
      byteString2.EMPTY.hmacSha256(byteString0);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byteString2.toString();
      byteString1.rangeEquals(64, byteString2, 0, (int) (byte)126);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)71, (byte)126);
      byteString0.lastIndexOf(byteArray0, (int) (byte)71);
      byteString1.lastIndexOf(byteArray0);
      byteString1.base64();
      byte byte0 = ObjectStreamConstants.TC_OBJECT;
      byteString0.lastIndexOf(byteString2, 1692);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)71;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte)123;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.indexOf(byteArray0);
      byteString0.EMPTY.equals(byteString0);
      ByteString byteString1 = byteString0.EMPTY.md5();
      ByteString byteString2 = byteString0.hmacSha512(byteString0);
      byteString2.EMPTY.hmacSha256(byteString0);
      byteString2.EMPTY.lastIndexOf(byteArray0, (int) (byte)123);
      byteString2.toString();
      byteString1.rangeEquals((-1), byteString2, 0, (int) (byte) (-119));
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)71, (byte) (-119));
      byteString0.lastIndexOf(byteArray0, (int) (byte)71);
      byteString1.lastIndexOf(byteArray0);
      byte byte0 = ObjectStreamConstants.TC_PROXYCLASSDESC;
      Pipe pipe0 = new Pipe(2);
      ByteString.decodeBase64("`A'd");
      byteString1.indexOf(byteString0);
      ByteString byteString3 = byteString0.sha1();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteString3.EMPTY.hex();
      byteString3.toAsciiLowercase();
      ByteString byteString4 = byteString2.substring(0, 24);
      assertNotSame(byteString4, byteString1);
  }
}
