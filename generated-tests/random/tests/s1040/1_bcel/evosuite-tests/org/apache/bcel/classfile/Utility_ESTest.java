/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 16:26:33 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 46;
      int int1 = (-2206);
      Utility.clearBit(46, (-2206));
      String string0 = "i12MO'%F$'UI~V4";
      Utility.decode("i12MO'%F$'UI~V4", false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "i12MO'%F$'UI~V4";
      objectArray0[1] = (Object) "i12MO'%F$'UI~V4";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[2] = (Object) "i12MO'%F$'UI~V4";
      objectArray0[3] = (Object) "i12MO'%F$'UI~V4";
      Utility.printArray(objectArray0, false);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("i12MO'%F$'UI~V4", "org.apache.bcel.classfile.Signature$MyByteArrayInputStream", "NN7-4", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i12MO'%F$'UI~V4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-86);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte)54, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    istore\t\t%169
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.accessToString((-2818));
      Utility.compactClassName("private protected static final synchronized volatile transient abstract synthetic annotation enum", "private protected static final synchronized volatile transient abstract synthetic annotation enum", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte) (-16);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("private protected static final synchronized volatile transient abstract synthetic annotation enum");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-60), (-1950), true);
      Utility.toHexString(byteArray0);
      Utility.setBit((-3171), 6);
      char char0 = '0';
      Utility.format(1748, (byte) (-79), false, '0');
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)97;
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte) (-83);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)99, (int) (byte)97, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      Utility.compactClassName("{java.lang.Object@3e94c1d6, java.lang.Object@59f8b1a7}");
      MockPrintStream mockPrintStream0 = new MockPrintStream("CMwa^Q*l__Wo^u");
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-108), (int) (byte) (-108));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lor
         // 1:    goto_w\t\t#445963335
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Utility.compactClassName("static", "return", false);
      Utility.compactClassName("invokespecial");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte) (-120);
      byteArray0[7] = (byte)76;
      byteArray0[8] = (byte) (-105);
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)119, (byte)76);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic((byte) (-105), 66);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-105), 182);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 62814. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")_PDb4np=#");
      try { 
        Utility.typeOfMethodSignature("({mYK1)!A&G*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A&G*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = "ddiv";
      try { 
        constantPool0.getConstantString((-4402), (byte)4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -4402. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.getSignature(":");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)123, (-419));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "z&q-]2A8);&A";
      Utility.compactClassName("z&q-]2A8);&A", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-36);
      Utility.encode(byteArray0, false);
      Utility.convertString("\t<");
      Utility.compactClassName("z&q-]2A8);&A");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)58, (int) (byte) (-110));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L59;V");
      Utility.isSet(10, 215);
      Utility.format(2145, 215, false, '9');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte)3;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)1, 2145, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)108;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 103, (int) (byte) (-12), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("if_icmple\t\t#-15101", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "/@1Z:+vrm:`F?";
      try { 
        Utility.typeOfSignature("/@1Z:+vrm:`F?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /@1Z:+vrm:`F?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utility.isSet(230, 230);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte) (-26);
      byteArray0[8] = (byte) (-53);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)93;
      byteArray1[1] = (byte)75;
      byteArray1[2] = (byte)93;
      byteArray1[3] = (byte)75;
      Utility.equals(byteArray0, byteArray1);
      String string0 = ".";
      Utility.searchOpcode(".");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 86, (int) (byte)4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-118);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)72, (int) (byte) (-29));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-100), (int) (byte) (-100));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    aaload
         // 1:    wide\t(wide)
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Utility.compactClassName("lstore_1");
      Utility.setBit(730, 730);
      Utility.accessToString(68, false);
      try { 
        Utility.typeOfSignature("KY$$w?@g$+7P_xOga");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KY$$w?@g$+7P_xOga
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)28;
      byte byte0 = (byte) (-76);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)25;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)97, 947, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.format(93, 32, false, 'w');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)12;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)113, 107, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)24;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)91, (int) (byte)29, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ga[xe^N.Ls", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ga[xe^N.Ls'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "j{JbyK@WSCFD{<CH");
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{}", string0);
      
      boolean boolean0 = Utility.isSet((-1731277635), (-1731277635));
      assertFalse(boolean0);
      
      String string1 = Utility.accessToString(122, false);
      assertEquals("private static final synchronized volatile", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)125;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteArray0, constantPool0, (-312), (int) (byte)127);
      assertEquals("0:    daload\n1:    astore_0\n2:    land\n3:    lushr\n", string2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "}dlUgx.W";
      File file0 = MockFile.createTempFile("}dlUgx.W", "}dlUgx.W");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      String string1 = "putfie";
      Locale locale0 = Locale.forLanguageTag("putfie");
      String string2 = "ifeq";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "putfie";
      objectArray0[1] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "ifeq", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.close();
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 14407. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utility.replace("h`vv\"$M", "Oy;Rb]`d+_EO\"", "h`vv\"$M");
      try { 
        Utility.typeOfSignature("Oy;Rb]`d+_EO\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Oy;Rb]`d+_EO\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DhN");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte)11;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-32), (-5220));
      assertEquals("0:    dup_x1\n1:    dup_x1\n2:    <illegal opcode>\n3:    pop2\n4:    dadd\n5:    fcmpg\n6:    fconst_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "$dp5";
      // Undeclared exception!
      try { 
        Utility.decode("$dp5", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"dp\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-1123), (-2523));
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iload_2", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1950), 239, true);
      assertEquals("0:    iload_2\n1:    <illegal opcode>\n2:    nop\n3:    iastore\n4:    iadd\n", string1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.typeOfSignature("Zjf9R`Q.,KPI!*");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "mp0:ZJsp z$/w0L}";
      Utility.convertString("mp0:ZJsp z$/w0L}");
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'k';
      charArray0[1] = '>';
      charArray0[2] = 'D';
      charArray0[3] = '?';
      charArray0[4] = 'Z';
      charArray0[5] = '_';
      // Undeclared exception!
      try { 
        stringWriter0.write(charArray0, (int) (byte)4, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = ";\\7+$pHU";
      try { 
        Utility.typeOfSignature(";\u0007+$pHU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;\u0007+$pHU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte) (-13);
      byteArray0[8] = (byte)97;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 79, true);
      assertEquals("0:    f2d\n1:    nop\n2:    faload\n3:    dneg\n4:    faload\n5:    saload\n6:    lshr\n7:    <illegal opcode>\n8:    ladd\n", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte)112;
      byteArray0[7] = (byte)78;
      byteArray0[8] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("|mb.6");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(176, (byte)78);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[2] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ishl", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)28;
      byte byte0 = (byte) (-76);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)25;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)97, 947, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)70;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)39, 1032);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte)38;
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)65);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 4, (int) (byte) (-72));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 49985. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = (-4010);
      Utility.classOrInterface((-4010));
      String string0 = "=q2`C^G2G";
      try { 
        Utility.typeOfSignature("=q2`C^G2G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =q2`C^G2G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte) (-29);
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte) (-62);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("_6pY]!N2&QsN<.xxYI ");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-16);
      byteArray1[1] = (byte) (-117);
      byteArray1[2] = (byte)69;
      byteArray1[3] = (byte)90;
      byteArray1[4] = (byte)90;
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)90, (byte) (-16));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantString constantString0 = new ConstantString((byte)69);
      constantArray0[2] = (Constant) constantString0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S}_*)lEj?s%!:xN;<");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 512, (int) (byte)69, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "L<kj>Lr'p/*r-", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "int";
      String string1 = ")T5]";
      boolean boolean0 = true;
      Utility.compactClassName("int", ")T5]", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte) (-93);
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1441), (int) (byte) (-90), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    bastore
         // 1:    if_acmpne\t\t#24312
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte) (-58);
      byteArray0[8] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)71, (int) (byte)102);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = Utility.getSignature("<i|7T$R#>");
      assertEquals("L<i|7T$R#>;", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-96);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("D$l$a0", string1);
      
      String string2 = Utility.accessToString((int) (byte)31);
      assertEquals("public private protected static final", string2);
      
      String string3 = Utility.compactClassName(";");
      assertEquals(";", string3);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string4 = Utility.replace("invokevirtual", "~#,zJWHwktO", "g(i`~6s&TdJ");
      assertEquals("invokevirtual", string4);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utility.accessToString((-2982), true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "private static final volatile abstract synthetic annotation enum";
      objectArray0[1] = (Object) "private static final volatile abstract synthetic annotation enum";
      objectArray0[2] = (Object) "private static final volatile abstract synthetic annotation enum";
      objectArray0[3] = (Object) "private static final volatile abstract synthetic annotation enum";
      objectArray0[4] = (Object) "private static final volatile abstract synthetic annotation enum";
      objectArray0[5] = (Object) "private static final volatile abstract synthetic annotation enum";
      Utility.printArray(objectArray0, true, true);
      Utility.getSignature("{\"private static final volatile abstract synthetic annotation enum\", \"private static final volatile abstract synthetic annotation enum\", \"private static final volatile abstract synthetic annotation enum\", \"private static final volatile abstract synthetic annotation enum\", \"private static final volatile abstract synthetic annotation enum\", \"private static final volatile abstract synthetic annotation enum\"}");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)58;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)58, (int) (byte)58, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "2R";
      try { 
        Utility.typeOfSignature("2R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.printArray((Object[]) null, false, false);
      Utility.compactClassName("qh%|hV|URgl$A;gFa");
      Utility.printArray((Object[]) null, true);
      Utility.clearBit((-525), (-525));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)0;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-463), (-525), true);
      Utility.format((-524813), (byte)55, true, 'F');
      Utility.printArray((Object[]) null, false);
      try { 
        Utility.decode("areturn", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      try { 
        Utility.typeOfSignature("0*<gt6kr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0*<gt6kr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Utility.searchOpcode(" <paL<g*C|V^r3$>aV");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte) (-88);
      byteArray0[8] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("iushr", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      try { 
        Utility.typeOfSignature("PMGClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PMGClass
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Utility.clearBit(89, 1649);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      Utility.classOrInterface(10);
      String string0 = "+,=Wm\"9,l*74";
      try { 
        Utility.typeOfSignature("+,=Wm\"9,l*74");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,=Wm\"9,l*74
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "GHqF`lN?iL|iHTs";
      try { 
        Utility.typeOfSignature("GHqF`lN?iL|iHTs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GHqF`lN?iL|iHTs
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)14;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)80, (-3596), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "iload";
      stringArray0[1] = "iload";
      stringArray0[2] = "iload";
      String string0 = Utility.methodTypeToSignature("iload", stringArray0);
      assertEquals("(Liload;Liload;Liload;)Liload;", string0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("newarray");
      mockPrintWriter0.println("CONSTANT_Float");
      mockPrintWriter0.write("{w", (-1803), (-1803));
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
      byte byte0 = Utility.typeOfMethodSignature("(Liload;Liload;Liload;)Liload;");
      assertEquals((byte)14, byte0);
      
      String string1 = Utility.classOrInterface((-1803));
      assertEquals("class", string1);
      
      String string2 = Utility.compactClassName("iload");
      assertEquals("iload", string2);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string3 = Utility.replace("org.apache.bcel.classfile.InnerClass", "iload", "org.apache.bcel.classfile.Utility$1");
      assertEquals("org.apache.bcel.classfile.InnerClass", string3);
      
      Utility.getSignature("iload");
      int int0 = Utility.clearBit(1731, 2276);
      assertEquals(1731, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte)14;
      String string4 = Utility.toHexString(byteArray0);
      assertEquals("0e 0e 0e 0e 0e 8b 0e 0e 0e", string4);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.classOrInterface(139);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString("newarray");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "newarray";
      objectArray0[1] = (Object) "class";
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-60);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1647, 1647);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 51, 2148);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Utility.convertString("kGQ)UcJN");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte)71;
      byteArray0[8] = (byte) (-116);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 190, 3554, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ifnull";
      stringArray0[1] = "ifnull";
      stringArray0[2] = "ifnull";
      stringArray0[3] = "ifnull";
      stringArray0[4] = "ifnull";
      stringArray0[5] = "ifnull";
      Utility.methodTypeToSignature("ifnull", stringArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet(87, 87);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-49);
      Utility.equals(byteArray0, byteArray0);
      Utility.classOrInterface((byte)87);
      Utility.accessToString((int) (byte) (-63));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 87, 2091);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("7'72W7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7'72W7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "$";
      boolean boolean0 = true;
      try { 
        Utility.decode("$", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "9 lLI%";
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("9 lLI%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9 lLI%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("R", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "invokevirtual");
      Utility.compactClassName("HtkMO+MSZb|11:&L");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte)27;
      byteArray0[8] = (byte) (-85);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)3, 39, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 3:    fstore_3
         // 4:    dcmpg
         // 5:    impdep2
         // 6:    lor
         // 7:    iload_1
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Utility.isJavaIdentifierPart('I');
      String string0 = "@E6(\",M;9YEfl,6";
      try { 
        Utility.typeOfSignature("@E6(\",M;9YEfl,6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @E6(\",M;9YEfl,6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "XOBzqfKP^";
      try { 
        Utility.typeOfSignature("XOBzqfKP^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XOBzqfKP^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.convertString("From\tTo\tHandler\tType\n");
      Utility.searchOpcode("From\tTo\tHandler\tType\n");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Utility.accessToString((int) (short) (-1));
      try { 
        Utility.methodSignatureReturnType("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "hE1n*z{=;Yhk2O";
      stringArray0[1] = "hE1n*z{=;Yhk2O";
      stringArray0[2] = "hE1n*z{=;Yhk2O";
      stringArray0[3] = "hE1n*z{=;Yhk2O";
      String string0 = "void";
      stringArray0[4] = "void";
      stringArray0[5] = "hE1n*z{=;Yhk2O";
      stringArray0[6] = "hE1n*z{=;Yhk2O";
      stringArray0[7] = "hE1n*z{=;Yhk2O";
      stringArray0[8] = "hE1n*z{=;Yhk2O";
      try { 
        Utility.methodTypeToSignature("hE1n*z{=;Yhk2O", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "-<@m@Y";
      try { 
        Utility.typeOfSignature("-<@m@Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -<@m@Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)6;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, (int) (byte)49, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "F");
      Utility.searchOpcode("F");
      Utility.signatureToString("F", false);
      Utility.signatureToString("Dont call getValueChar() on a non CHAR ElementValue", false);
      Utility.typeOfSignature("F");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)39;
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)6;
      objectArray0[1] = (Object) (byte)6;
      Utility.printArray(objectArray0, false);
      EvoSuiteFile evoSuiteFile1 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Dont call getValueChar() on a non CHAR ElementValue");
      Utility.accessToString(91);
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "Illegal type: ";
      Utility.typeOfSignature("Illegal type: ");
      String string1 = "areturn";
      try { 
        Utility.methodSignatureArgumentTypes("areturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: areturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)121;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)29, (-3634), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utility.typeOfSignature("TkR&Ff=mT'Q");
      MockPrintStream mockPrintStream0 = new MockPrintStream("TkR&Ff=mT'Q");
      PrintStream printStream0 = mockPrintStream0.append('(');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "TkR&Ff=mT'Q";
      objectArray0[1] = (Object) "TkR&Ff=mT'Q";
      objectArray0[2] = (Object) printStream0;
      objectArray0[3] = (Object) "TkR&Ff=mT'Q";
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) "TkR&Ff=mT'Q";
      objectArray0[6] = (Object) "TkR&Ff=mT'Q";
      objectArray0[7] = (Object) printStream0;
      objectArray0[8] = (Object) "TkR&Ff=mT'Q";
      Utility.printArray(printStream0, objectArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Utility.format((-142), (-142), true, 'e');
      Utility.typeOfSignature("Jl");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = "'";
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte) (-18);
      byteArray0[7] = (byte)0;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 251, (int) (byte)39, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("getfield", false);
      Constant[] constantArray0 = new Constant[2];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)90;
      byteArray1[1] = (byte)102;
      byteArray1[2] = (byte) (-108);
      byteArray1[3] = (byte) (-22);
      byteArray1[4] = (byte)51;
      byteArray1[5] = (byte) (-1);
      byteArray1[6] = (byte)33;
      byteArray1[7] = (byte) (-78);
      byteArray1[8] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)51, 492);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.methodSignatureReturnType("B");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "byte";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Utility.printArray(objectArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("6ufY.0PLy>,{K", "null, null, null, byte, java.lang.Object@2cd47cd3", "]tz'!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6ufY.0PLy>,{K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "\\CarwUC\"*";
      byte[] byteArray0 = Utility.decode("CarwUC\"*", false);
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = "Hjems0aR[)";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Hjems0aR[)");
      Utility.printArray((Object[]) null);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("Hjems0aR[)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Hjems0aR[)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("Dknm9");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "\\_*T)zhq[[Cu$";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_*T)zhq[[Cu$");
      // Undeclared exception!
      try { 
        Utility.getSignature("_*T)zhq[[Cu$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[[Cu$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[L|;V");
      assertEquals((byte)13, byte0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "[L|;V";
      String string0 = Utility.printArray(objectArray0, false, true);
      assertEquals("\"[L|;V\"", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-69);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      try { 
        Utility.typeOfSignature("*y#J\"z:Ny");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: y#J\"z:Ny
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "The FilenameFilter must not be null";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("The FilenameFilter must not be null");
      try { 
        Utility.typeOfSignature("3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Utility.isJavaIdentifierPart('M');
      Utility.compactClassName("mQ3^DyBtYY", true);
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 1278;
      Utility.fillup("mQ3^DyBtYY", 1278, true, ',');
      try { 
        Utility.methodSignatureReturnType("The array of suffixes must not be null", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The array of suffixes must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)76;
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-83);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)99, (int) (byte)76, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "k@y`Z[K0Gk]=CD?au,";
      stringArray0[7] = "";
      Utility.methodTypeToSignature("", stringArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte)86;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)47, (int) (byte)47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Utility.getSignature("Byte code error: ");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)84;
      byteArray0[0] = (byte)84;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("54");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 54
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-57);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 180, (int) (byte)103, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Utility.isJavaIdentifierPart('w');
      Utility.fillup("N", 176, false, 'V');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.clearBit((-1670), 1915);
      Utility.isSet(240, (-2701));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)61;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, 179, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Utility.setBit(60, (-939));
      String string0 = "!x&4";
      try { 
        Utility.typeOfSignature("!x&4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: x&4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString("CONSTANT_InterfaceMethodref");
      Utility.typeOfSignature("CONSTANT_InterfaceMethodref");
      Utility.isJavaIdentifierPart('v');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("CONSTANT_InterfaceMethodref", "CONSTANT_InterfaceMethodref", "CONSTANT_InterfaceMethodref");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: CONSTANT_InterfaceMethodref
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)101;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 3, (int) (byte)101, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 153, (int) (byte)10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-50);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Ma.wJ:FR");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantPool1.constantToString((Constant) constantUtf8_1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 83, (int) (byte)82);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)97;
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-83);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)99, (int) (byte)97, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "gL}FA&h%$h";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = true;
      try { 
        Utility.decode("gL}FA&h%$h", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-124);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)8, (int) (byte) (-95));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Utility.isJavaIdentifierPart('q');
      Utility.methodSignatureReturnType("Fy");
      Utility.replace("'", "float", "'");
      Utility.convertString("monitorexit");
      try { 
        Utility.methodSignatureArgumentTypes("Fy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Fy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = Utility.setBit(112, 41);
      assertEquals(624, int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('5');
      assertTrue(boolean0);
      
      String string0 = Utility.classOrInterface(251);
      assertEquals("class", string0);
      
      Utility.compactClassName("lookupswitch");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)95;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$c7u$de$H$ac_", string1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte) (-6);
      byteArray0[8] = (byte)90;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-6), 194, true);
      assertEquals("0:    if_icmpne\t\t#-23280\n3:    <illegal opcode>\n4:    i2l\n5:    lstore_0\n6:    aload_3\n7:    <illegal opcode>\n8:    dup_x1\n", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      try { 
        Utility.typeOfSignature("N<m{iwwxmZ3df?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N<m{iwwxmZ3df?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byte[] byteArray0 = Utility.decode("E8m)SU@n&osB\"vYqpJ+", false);
      Utility.printArray((Object[]) null, true, false);
      Utility.toHexString(byteArray0);
      Utility.format(53, 1559, false, 'g');
      Utility.codeToString(byteArray0, (ConstantPool) null, 11, 1025, false);
      Utility.toHexString(byteArray0);
      String string0 = "2L,";
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 109
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("Ldp *Dy", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Ldp *Dy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "byte");
      Utility.accessToString(182);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "private protected final synchronized transient";
      Utility.methodTypeToSignature("private protected final synchronized transient", stringArray0);
      try { 
        Utility.typeOfSignature("(Lprivate;)Lprivate;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (Lprivate;)Lprivate;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      try { 
        Utility.typeOfSignature("80ZE1DKQt,G| XfV^kvf6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 80ZE1DKQt,G| XfV^kvf6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("3f&$2", false);
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("3f&$2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `3f&$2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getStatic");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, false);
      Utility.printArray(objectArray0);
      Utility.accessToString((-6024));
      Utility.convertString("{}");
      Utility.getSignature("KKK[$pGZMa]3wH,:.K1");
      Utility.compactClassName("Usc}I{)|cI_|}$aT", "{}", false);
      Utility.accessToString((-1), false);
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-73);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 9966, 167);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte) (-2);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ifnull\t\t#-19394", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-27);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)2, (int) (byte)81, true);
      String string1 = Utility.methodSignatureReturnType("V", true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "areturn";
      Utility.searchOpcode("areturn");
      Utility.accessToString((int) (short)176);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "areturn";
      objectArray0[1] = (Object) "areturn";
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.format(1421, (byte)26, false, '$');
      try { 
        Utility.typeOfSignature("castore");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: castore
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)14;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-67), (-3596), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Utility.accessToString((-2075), false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-3);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte) (-3);
      objectArray0[1] = (Object) (byte) (-55);
      objectArray0[2] = (Object) (byte) (-3);
      objectArray0[3] = (Object) "ldiv";
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)109;
      byteSequence0.read(byteArray1);
      objectArray0[4] = (Object) (byte) (-3);
      Utility.printArray(objectArray0);
      Utility.setBit(171, 3481);
      try { 
        Utility.methodSignatureArgumentTypes("bZ;R*.W />OrF)", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: bZ;R*.W />OrF)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = Utility.convertString("putfield");
      Utility.convertString(">O?ki%ispZ*3K#D&?6%");
      Utility.compactClassName("l1.W9", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "\"9p0X(rd~.XTd";
      Utility.getSignature("\"9p0X(rd~.XTd");
      Utility.compactClassName("\"9p0X(rd~.XTd");
      try { 
        Utility.typeOfSignature("\"9p0X(rd~.XTd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"9p0X(rd~.XTd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte)55;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1084, (int) (byte) (-1), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "YqokG<\\OSD+[F";
      // Undeclared exception!
      try { 
        Utility.signatureToString("YqokG<OSD+[F", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YqokG<OSD+[F'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Utility.isSet(46, 3000);
      Utility.compactClassName("<illegal opcode>", "monitorexit", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)25;
      byte byte0 = (byte)9;
      byteArray0[6] = (byte)9;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPath classPath1 = new ClassPath(classPath0, "s57o Zze5XbAGR");
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance(classPath1);
      syntheticRepository0.findClass("<illegal opcode>");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantPool0.accept(descendingVisitor0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)123, 175, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "double";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "double");
      try { 
        Utility.typeOfSignature("Ywcz?mvbK\".u-;EZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ywcz?mvbK\".u-;EZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("if_icmpeq\t\t#17275", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Utility.convertString("dload_1");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)71;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)97, 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-109);
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)36;
      byte byte1 = (byte) (-21);
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)65;
      Utility.encode(byteArray0, false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool1, 2, 2, true);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = "java.lang.Character";
      Utility.replace("\"r?3u)XMTUp?~X", "\"r?3u)XMTUp?~X", "java.lang.Character");
      try { 
        Utility.methodSignatureReturnType("\"r?3u)XMTUp?~X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XMTUp?~X'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Utility.methodSignatureReturnType("Z%E#~R$Zb`hY-#k", true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "boolean";
      objectArray0[1] = (Object) "Z%E#~R$Zb`hY-#k";
      objectArray0[2] = (Object) "boolean";
      objectArray0[3] = (Object) "boolean";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "Z%E#~R$Zb`hY-#k";
      objectArray0[6] = (Object) "boolean";
      Object object1 = new Object();
      objectArray0[7] = object1;
      objectArray0[8] = (Object) "boolean";
      Utility.printArray(objectArray0);
      Utility.format(185, (-1), true, '<');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-102);
      MockFile mockFile0 = new MockFile("boolean");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "A$[A%o*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"A$[A%o*\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "%ZduTWevC5";
      try { 
        Utility.typeOfSignature("%ZduTWevC5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %ZduTWevC5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<Q(Ivw*Yh~`g?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <Q(Ivw*Yh~`g?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = Utility.compactClassName("VvFPg8bm8/{.-Vp\"", true);
      Utility.typeOfSignature("VvFPg8bm8/{.-Vp\"");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Utility.getSignature("L");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(10, (byte) (-94));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)121;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.typeOfMethodSignature("fsub");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fsub
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 47;
      Utility.accessToString(47);
      String string0 = "jsr";
      Utility.convertString("jsr");
      String string1 = "\"u%$2&5y5P";
      Utility.compactClassName("\"u%$2&5y5P", true);
      Utility.isJavaIdentifierPart('.');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "\"u%$2&5y5P";
      objectArray0[1] = (Object) "\"u%$2&5y5P";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "jsr";
      objectArray0[4] = (Object) "jsr";
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.decode("\"u%$2&5y5P, \"u%$2&5y5P, java.lang.Object@60d87e90, jsr, jsr", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2&\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Utility.accessToString(1668);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("WgiK$+r%VzS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WgiK$+r%VzS'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fload_3", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = Utility.decode("R%L.", false);
      int int0 = Utility.setBit(97, 1697);
      assertEquals(99, int0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      String string0 = Utility.printArray(objectArray0, true, false);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("?gdom", "anewarray", true);
      assertEquals("?gdom", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(99, 97);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantDouble constantDouble0 = new ConstantDouble(99);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantFieldref constantFieldref2 = new ConstantFieldref(constantFieldref0);
      constantArray0[2] = (Constant) constantFieldref2;
      ConstantDouble constantDouble1 = new ConstantDouble(0.0);
      constantArray0[3] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string2 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertArrayEquals(new byte[] {(byte)82, (byte)37, (byte)76, (byte)46}, byteArray0);
      assertEquals("dastore", string2);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = ">";
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Utility.accessToString(2347);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "zpz$-0,3inV!n&i");
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte) (-5);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.isJavaIdentifierPart('=');
      try { 
        Utility.methodSignatureArgumentTypes("lneg", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lneg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = ")\t";
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Utility.convertString("dload_1");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)71;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)97, 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = "^X";
      Utility.compactClassName("^X", "J", false);
      Utility.signatureToString("J", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("^X", "Y_,cdQL7?4O/", "twc-JFJ3Vx1-[VPZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ^X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.accessToString((-1879), true);
      Utility.isJavaIdentifierPart('X');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "boolean");
      Utility.accessToString((-1879), true);
      Utility.format((-1879), (-1879), false, '?');
      Utility.clearBit((-2818), 32);
      Utility.methodSignatureReturnType("Class must not be null");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("public static transient strictfp synthetic annotation enum", "public static transient strictfp synthetic annotation enum", "public static transient strictfp synthetic annotation enum", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public static transient strictfp synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Utility.setBit(3825, (-2789));
      // Undeclared exception!
      try { 
        Utility.signatureToString("HBSuyoNVJ?0~jn(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HBSuyoNVJ?0~jn('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = (-787);
      Utility.isSet(40, (-787));
      String string0 = "&n5~iPE";
      try { 
        Utility.typeOfSignature("&n5~iPE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &n5~iPE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte) (-8);
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-8));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)92, (int) (byte) (-8), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0, false);
      boolean boolean0 = true;
      Utility.compactClassName("java.lang.Object@4e65256, java.lang.Object@21c285a4, java.lang.Object@4028b158, java.lang.Object@1e2c1cf8, java.lang.Object@28ee9989, java.lang.Object@1db4d695, java.lang.Object@1893160a, java.lang.Object@66a6023c, java.lang.Object@3ad8edb0", true);
      try { 
        Utility.methodSignatureReturnType("invokeinterface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokeinterface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("OBk/,%yx_~lhl9#mw", true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 74;
      Utility.isSet(74, 74);
      try { 
        Utility.methodSignatureReturnType("OBk.,%yx_~lhl9#mw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OBk.,%yx_~lhl9#mw'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("N^)=WC:uE4;}*@G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N^)=WC:uE4;}*@G'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte) (-92);
      byteArray0[7] = (byte)113;
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-109));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantFloat constantFloat0 = new ConstantFloat(847.1504F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-1709), (-1709), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 2451. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Utility.fillup("e", (-930), false, '3');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte)67;
      byteArray0[8] = (byte)53;
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)70);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantDouble constantDouble2 = new ConstantDouble((byte) (-60));
      constantArray0[1] = (Constant) constantDouble2;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(3182, 2754);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-60), (-930), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 55748. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 45489. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "4?DU$vC37";
      try { 
        Utility.typeOfSignature("4?DU$vC37");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4?DU$vC37
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte)89;
      Constant[] constantArray0 = new Constant[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantClass constantClass0 = new ConstantClass((byte)32);
      constantArray0[2] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-74), (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "irem");
      boolean boolean0 = true;
      Utility.compactClassName("*sg+G[@3y\"'W", "*sg+G[@3y\"'W", true);
      Utility.convertString("*sg+G[@3y\"'W");
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("*sg+G[@3y\"'W", (String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[@3y\"'W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      try { 
        Utility.typeOfSignature("QDcB6cJCdq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QDcB6cJCdq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.convertString("dcmpl");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "dcmpl";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "dcmpl";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "dcmpl";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "dcmpl";
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)72;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)72, 0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Utility.compactClassName("char", "char", false);
      try { 
        Utility.methodSignatureReturnType("LBh6U/!3g@%d</qC/qvU;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LBh6U/!3g@%d</qC/qvU;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("KTMY1$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KTMY1$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "EnclosingMethod";
      try { 
        Utility.typeOfSignature("EnclosingMethod");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EnclosingMethod
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte0 = (byte) (-52);
      byteArray0[0] = (byte) (-52);
      byte byte1 = (byte)29;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte) (-25);
      byte byte2 = (byte) (-26);
      byteArray0[3] = (byte) (-26);
      byte byte3 = (byte) (-27);
      byteArray0[4] = (byte) (-27);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1137), 1193, false);
      Utility.accessToString(246, false);
      Utility.replace("StackMapTable", "private protected final synchronized volatile transient", "private protected final synchronized volatile transient");
      Utility.methodSignatureReturnType("Illegally nested brackets:");
      // Undeclared exception!
      try { 
        Utility.signatureToString("+$*_0?-8%[}:1A", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `+$*_0?-8%[}:1A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Utility.getSignature("Invalid signature: ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte) (-50);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)89, (-2539), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-104);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      constantPool0.setConstantPool(constantArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 84, 84, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("iconst_2", false);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "breakpoint";
      Utility.getSignature("breakpoint");
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("69 63 6f 6e 73 74 5f 32");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 69 63 6f 6e 73 74 5f 32
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)79;
      byteArray0[2] = (byte)67;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$b1$dcC$NO$A", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-36), (int) (byte)67);
      assertEquals("0:    return\n1:    <illegal opcode>\n2:    fstore_0\n3:    fconst_2\n4:    iastore\n5:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong((-2191L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)51, (byte) (-33));
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantMethodHandle0.setReferenceIndex((-4069));
      constantArray0[2] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 57316. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string0 = Utility.convertString("Illegally nested brackets:");
      assertEquals("Illegally nested brackets:", string0);
      
      String string1 = Utility.compactClassName("Illegally nested brackets:", "Illegally nested brackets:", true);
      assertEquals("", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)79;
      Constant[] constantArray0 = new Constant[8];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(4, (byte)73);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantString constantString0 = new ConstantString(41);
      constantArray0[1] = (Constant) constantString0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("anewarray");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("");
      constantArray0[3] = (Constant) constantUtf8_1;
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8(constantUtf8_0);
      constantArray0[4] = (Constant) constantUtf8_2;
      Constant constant0 = constantString0.copy();
      constantArray0[5] = constant0;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[6] = (Constant) constantFloat0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat1 = new ConstantFloat(byteSequence0);
      constantArray0[7] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string2 = Utility.codeToString(byteArray0, constantPool1, (-1444823888), 46);
      assertEquals("0:    dstore_2\n1:    lstore_1\n2:    fstore_3\n3:    dload_2\n4:    ior\n5:    iastore\n", string2);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Utility.compactClassName("arraylength");
      Utility.setBit(61, 61);
      String string0 = "E8+}'3";
      try { 
        Utility.methodSignatureReturnType("E8+}'3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E8+}'3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "(V7p0c\"g@hknW";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.convertString("(V7p0c\"g@hknW");
      Utility.setBit((-1050), (-1050));
      Utility.convertString("(V7p0c\"g@hknW");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("<h@Rm&mx1Zzyr", "(V7p0c\"g@hknW", "(V7p0c\"g@hknW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <h@Rm&mx1Zzyr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "z0}J-O8");
      Utility.compactClassName("mX");
      String string0 = "Unreachable default case reached!";
      try { 
        Utility.typeOfSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = Utility.compactClassName("ireturn", "V", false);
      assertEquals("ireturn", string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "ireturn";
      objectArray0[1] = (Object) "ireturn";
      objectArray0[2] = (Object) "V";
      objectArray0[3] = (Object) "ireturn";
      objectArray0[4] = (Object) "ireturn";
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{ireturn, ireturn, V, ireturn, ireturn}", string1);
      
      String string2 = Utility.printArray(objectArray0, true);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(10, 10);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("static");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string3 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("ret\t\t%37", string3);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong((-2191L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)51, (byte) (-33));
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[2] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = ":Pu~/4zY";
      try { 
        Utility.typeOfSignature(":Pu~/4zY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :Pu~/4zY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = Utility.classOrInterface((-107));
      assertEquals("interface", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("<");
      mockFile0.toPath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockPrintWriter0.println(0L);
      mockFile0.getCanonicalFile();
      PrintWriter printWriter0 = mockPrintWriter0.append('=');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "interface";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "<";
      Utility.printArray(printWriter0, objectArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup", string1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Utility.classOrInterface(51);
      Utility.clearBit(255, (-80));
      Utility.compactClassName("class", true);
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = "(Unknown attribute ";
      try { 
        Utility.methodSignatureArgumentTypes("(Unknown attribute ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unknown attribute '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Utility.isJavaIdentifierPart('/');
      Utility.decode("org.apache.bcel.classfile.Utility$JavaWriter", false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "org.apache.bcel.classfile.Utility$JavaWriter";
      objectArray0[1] = (Object) "org.apache.bcel.classfile.Utility$JavaWriter";
      objectArray0[2] = (Object) "org.apache.bcel.classfile.Utility$JavaWriter";
      objectArray0[3] = (Object) "org.apache.bcel.classfile.Utility$JavaWriter";
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("GBUWN-(7JT]", "GBUWN-(7JT]", "Long", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GBUWN-(7JT]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("fSC8yQW'-o1N8G", false);
      int int0 = (-1243);
      Utility.accessToString((-1243), true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("void");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "void";
      PrintWriter printWriter0 = mockPrintWriter0.format("fSC8yQW'-o1N8G", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 67
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("#A7\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #A7\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "dreturn";
      stringArray0[1] = "dreturn";
      stringArray0[2] = "dreturn";
      stringArray0[3] = "|Y.8*";
      stringArray0[4] = "[]";
      stringArray0[5] = "cb9'~[4zE1QP$T\"^";
      stringArray0[6] = "dreturn";
      stringArray0[7] = "dreturn";
      stringArray0[8] = "v$EzfGTf";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("dreturn", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = Utility.isSet(443, 443);
      assertFalse(boolean0);
      
      Utility.isSet(141, 83);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0, false, true);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte) (-14);
      byteArray0[8] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-14), 73);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)105);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType((-1890));
      constantArray0[2] = (Constant) constantMethodType1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantLong constantLong0 = new ConstantLong(443);
      constantArray0[4] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("i2d", string1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)67;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$b9$dcP$7eOC", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Utility.classOrInterface(68);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-56);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)13;
      byteArray1[1] = (byte) (-60);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-60);
      byteArray1[4] = (byte)13;
      byteArray1[5] = (byte)13;
      byteArray1[6] = (byte) (-56);
      Utility.equals(byteArray0, byteArray1);
      Utility.replace("class", "class", (String) null);
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        constantPool0.getConstant((int) (byte) (-78));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -78. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte) (-34);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5301, (int) (byte)57, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Utility.searchOpcode("newarray");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int int0 = Utility.clearBit(6377, 132);
      assertEquals(6377, int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('/');
      assertFalse(boolean0);
      
      int int1 = Utility.clearBit((-1352), 77);
      assertEquals((-9544), int1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\t<";
      String string0 = Utility.methodTypeToSignature("\t<", stringArray0);
      assertEquals("(L<;)L<;", string0);
      
      int int2 = Utility.setBit((-1352), 132);
      assertEquals((-1352), int2);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean boolean0 = true;
      Utility.methodSignatureReturnType("DC.:khY~p$wG*PbQ_", true);
      try { 
        Utility.typeOfSignature(", length = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , length = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.decode("Rse*!gde3ws(~x", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = 39;
      Utility.setBit((-2179), 39);
      Utility.clearBit((-2179), 42);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.setBit(2328, 42);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)43;
      Utility.toHexString(byteArray0);
      Utility.compactClassName("7a fd 2b");
      // Undeclared exception!
      try { 
        Utility.signatureToString("7a fd 2b", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `7a fd 2b'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Utility.isJavaIdentifierPart('/');
      int int0 = (-4450);
      Utility.format((-4450), (-4450), false, 'd');
      String string0 = "-oTh[/30YN1%y!\"T?";
      String string1 = "static";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Illegally nested brackets:", "-oTh[/30YN1%y!\"T?", "static");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Illegally nested brackets:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = Utility.fillup("c=)Q", 36, true, 'v');
      assertEquals("c=)Qvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-96), (-4884));
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[1] = (Constant) constantClass0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lload_2", string1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = "CfCS1OK0";
      Utility.searchOpcode("CfCS1OK0");
      Utility.classOrInterface(98);
      String string1 = ";D";
      Utility.getSignature(";D");
      MockFile mockFile0 = new MockFile("\"9p0|X(rd~");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      String string2 = "v2j3lt?}My65^$r";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true, "v2j3lt?}My65^$r");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // v2j3lt?}My65^$r
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Utility.replace(",B~'H&D$:E9,hiT#V", ",B~'H&D$:E9,hiT#V", ",B~'H&D$:E9,hiT#V");
      String string0 = "B^*V2PuA";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Utility.typeOfSignature("B^*V2PuA");
      try { 
        Utility.methodSignatureReturnType("~HOM<r^._", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `~HOM<r^._'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = Utility.signatureToString("SF$Qw~{rc[+ti", true);
      assertEquals("short", string0);
      
      String string1 = Utility.fillup("short", 1877, true, 'Y');
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte) (-41);
      byteArray0[7] = (byte) (-104);
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("M'Ye>'_>Y3^jTqw]T0Y", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M'Ye>'_>Y3^jTqw]T0Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)104;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      String string0 = Utility.classOrInterface((-1872));
      assertEquals("class", string0);
      
      int int0 = Utility.clearBit((-1872), (byte)104);
      assertEquals((-1872), int0);
      
      boolean boolean1 = Utility.isSet(92, 92);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      boolean boolean0 = Utility.isSet(2907, 43);
      boolean boolean1 = Utility.isSet(2051, 2907);
      assertFalse(boolean1);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('S');
      assertTrue(boolean2 == boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-54);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("d9 78 4c 3f a2 b2 05 00 ca", string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fK2)p");
      Utility.accessToString((-1463), false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("public static volatile interface strictfp synthetic annotation enum");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      mockPrintStream0.print("short");
      objectArray0[2] = (Object) mockPrintStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      Utility.setBit((-1463), (-1463));
      Utility.setBit((-1463), (-1463));
      try { 
        Utility.typeOfMethodSignature("public static volatile interface strictfp synthetic annotation enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public static volatile interface strictfp synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Utility.compactClassName("4q^A6rL", true);
      Utility.classOrInterface(1860);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte)88;
      Utility.toHexString(byteArray0);
      Utility.isSet((byte) (-3), 6);
      // Undeclared exception!
      try { 
        Utility.signatureToString("java.lang.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Utility.getSignature("fK2)p <j");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 71
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = "Qn=4a\\E";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("Qn=4aE", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qn=4aE'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = "System";
      Utility.typeOfSignature("System");
      Utility.compactClassName("}@dg9#dJ8", "}@dg9#dJ8", true);
      boolean boolean0 = true;
      Utility.fillup("System", (byte)9, true, 'o');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.skip(0L);
      try { 
        byteSequence0.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Utility.methodTypeToSignature("float", (String[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)12;
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("float");
      constantArray0[0] = (Constant) constantUtf8_0;
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("float");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = "Rc9";
      try { 
        Utility.typeOfSignature("Rc9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Rc9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Utility.isJavaIdentifierPart('2');
      String string0 = "org.apache.bcel.classfile.Utility$JavaWriter";
      Utility.compactClassName("org.apache.bcel.classfile.Utility$JavaWriter");
      int int0 = 9;
      Utility.setBit((-1461), 9);
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null);
      Utility.compactClassName("java.lang.", "org.apache.bcel.classfile.Utility$JavaWriter", true);
      Utility.printArray((Object[]) null, true, true);
      Utility.printArray((Object[]) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("java.lang.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = Utility.convertString("%kAxfka,*;\"VnQ");
      assertEquals("%kAxfka,*;\\\"VnQ", string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Utility.isSet((-2094), 83);
      String string0 = "M1eqIn";
      try { 
        Utility.typeOfSignature("M1eqIn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M1eqIn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Utility.format(93, 93, false, '<');
      String string0 = "";
      Utility.compactClassName("", "", false);
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = "a,U8g:]A(a";
      Utility.replace("a,U8g:]A(a", "l2f", "a,U8g:]A(a");
      int int0 = (-6061);
      Utility.isSet((-6061), (-6061));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte byte0 = (byte)87;
      try { 
        byteSequence0.readDouble();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = Utility.decode("{}", false);
      assertArrayEquals(new byte[] {(byte)123, (byte)125}, byteArray0);
      
      byte[] byteArray1 = Utility.decode("<!fO^9J}mHAjA_<e", false);
      assertEquals(16, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('v');
      assertTrue(boolean0);
      
      try { 
        Utility.methodSignatureReturnType("PsfbyAi1:,Wg*Q`/}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PsfbyAi1:,Wg*Q`/}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Utility.replace("interface", "Warning: Padding byte != 0 in ", "boolean");
      Utility.setBit((-3618), (-3618));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-31);
      byte byte0 = (byte)111;
      byteArray0[2] = (byte)111;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 111
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)39;
      String string0 = Utility.encode(byteArray0, true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)118;
      objectArray0[1] = (Object) (byte)122;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (byte)118;
      objectArray0[4] = (Object) (byte)4;
      objectArray0[5] = (Object) (byte)4;
      objectArray0[6] = (Object) (byte)39;
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-100);
      Utility.equals(byteArray0, byteArray0);
      Utility.equals(byteArray0, byteArray0);
      String string0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null, "yo");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Utility.classOrInterface(144);
      boolean boolean0 = false;
      Utility.accessToString(5694, false);
      Utility.convertString(", low = ");
      try { 
        Utility.methodSignatureArgumentTypes("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      int int0 = 0;
      Utility.classOrInterface(0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("6<m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6<m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = "|8EPp.g5bh4GAT&NK";
      try { 
        Utility.typeOfSignature("|8EPp.g5bh4GAT&NK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: |8EPp.g5bh4GAT&NK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = "EZ5+?NK.";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("EZ5+?NK.", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EZ5+?NK.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("{", "", "org.apache.bcel.generic.Type");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int int0 = 0;
      Utility.accessToString(0);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      Object[] objectArray0 = new Object[1];
      String string0 = "";
      Locale locale0 = new Locale("", "", "");
      mockPrintWriter0.printf(locale0, "", objectArray0);
      objectArray0[0] = (Object) "";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("a0pi;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: a0pi;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "if_acmpeq";
      String string1 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("if_acmpeq", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(' ');
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0, false, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-17);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$cc$85$dd$ef", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      int int0 = 59;
      boolean boolean0 = true;
      Utility.accessToString(59, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("getstatic", (String) null, "q)4\u0007w@zSrWXM7D3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: getstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Utility.printArray((Object[]) null);
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, "<g35");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)2;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)75, (int) (byte)75);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = "float";
      try { 
        Utility.typeOfSignature("float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: float
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte)40;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 926, (int) (byte)35, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Utility.isSet(5, 5);
      try { 
        Utility.methodSignatureReturnType("[,zOLoC3zHK6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `,zOLoC3zHK6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Utility.classOrInterface(588);
      Utility.compactClassName("checkcast");
      Utility.clearBit(10, (-935));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-3121";
      stringArray0[1] = "checkcast";
      stringArray0[2] = "-3121";
      Utility.methodTypeToSignature("-3121", stringArray0);
      Utility.setBit(1128, 42);
      Utility.methodSignatureToString("(L-3121;Lcheckcast;L-3121;)L-3121;", (String) null, "", true);
      Utility.fillup(")?T\"*cC>", (-2650), true, 'T');
      Utility.compactClassName("", false);
      Utility.compactClassName("checkcast");
      try { 
        Utility.methodSignatureArgumentTypes("-3121", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -3121
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
