/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:36:30 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.MnCross;
import org.freehep.math.minuit.MnFunctionCross;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserCovariance;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnFunctionCross_ESTest extends MnFunctionCross_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-869.79155619667), (-1.0), 3.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnStrategy mnStrategy0 = new MnStrategy();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 10.000000000000002, mnStrategy0, 0.0);
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, 295);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1425, mnStrategy0, 2415.0);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1409.8, 1142);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-997.816), (-820));
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1425, mnStrategy0, 2415.0);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1409.8, 1142);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-997.816), (-820));
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(374.736, 374.736, (-31652.34799), 0.001, 0.001).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1425, mnStrategy0, 2415.0);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-997.816), (-820));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2072.8302435015685, 2072.8302435015685, 2072.8302435015685, 441.76251159, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add("7MEQT?Zh", 0.0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 0.0);
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[18];
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = new double[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 441.76251159, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2072.8302435015685, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add("7MEQT?Zh", 0.0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 0.0);
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[18];
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = new double[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 441.76251159, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = (-316.5234799);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1412.1, (-316.5234799), 1412.1, 1412.1).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      double double1 = 0.0;
      mnUserParameterState0.add("7MEQT?Zh", 0.0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 1412.1);
      int[] intArray0 = new int[1];
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      int int0 = 1944;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-316.5234799), 1944);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-869.79155619667), (-1.0), 3.0, (-869.79155619667), 2423.4626704238744).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnStrategy mnStrategy0 = new MnStrategy();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 10.000000000000002, mnStrategy0, (-1.6127024496379228));
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (double) 2237;
      doubleArray0[3] = (-1.6127024496379228);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, 295);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1412.1, (-316.5234799), 1412.1, (-316.5234799), 38696.11958).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add("7MEQT?Zh", 0.0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 4950.2, mnStrategy0, (-316.5234799));
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4950.2;
      doubleArray0[1] = 1412.1;
      mnUserParameterState0.clone();
      mnStrategy0.setGradientNCycles(0);
      mnUserParameterState0.removeLimits("7MEQT?Zh");
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1.0, (-2166));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2072.8302435015685, 2072.8302435015685, 0.3).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add("MQj?Z", 0.3);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.setLowerLimit("MQj?Z", 252.74973);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.7268119247876885, mnStrategy0, 0.7268119247876885);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      mnStrategy0.setHessianG2Tolerance(0.3);
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = 441.76251159;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 441.76251159, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2072.8302435015685, 2072.8302435015685, 0.3, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add("7MEQT?Zh", 0.03765187375731674);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.03765187375731674, mnStrategy0, 0.03765187375731674);
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.3, (-2456));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1412.1).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add("7MEQT?Zh", 0.0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 4950.2, mnStrategy0, 1412.1);
      int[] intArray0 = new int[1];
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 35.3039447822729, 3);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add("7MEQT?Zh", 0.0);
      MnStrategy mnStrategy0 = new MnStrategy();
      int[] intArray0 = new int[1];
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-1317.8122199782208);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)1962, (-1317.8122199782208), 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1976.1636227624278), mnStrategy0, 0);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1317.8122199782208), 3630);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1412.1, (-316.5234799), 1412.1, (-1317.7810816351812), 1412.1).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add("7MEQT?Zh", 0.0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 4950.2, mnStrategy0, 1412.1);
      int[] intArray0 = new int[1];
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-788.5525);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, (-788.5525), 16);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1412.1, (-316.5234799), 1412.1, (-1317.7810816351812), 38701.54115479139).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add("7MEQT?Zh", 0.0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 4950.2, mnStrategy0, 1412.1);
      int[] intArray0 = new int[1];
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-788.5525);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, (-788.5525), 1);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2072.8302435015685, 2072.8302435015685, 0.3).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add("7MEQT?Zh", 0.03765187375731674);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.03765187375731674, mnStrategy0, 0.03765187375731674);
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.03765187375731674;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = new double[0];
      mnStrategy0.setHessianG2Tolerance(0.03765187375731674);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 1416.003, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2072.8302435015685, 2072.8302435015685, 2072.8302435015685, 2072.8302435015685, 2072.8302435015685).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add("MQT?IZ", 2072.8302435015685);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.setLowerLimit("MQT?IZ", 2072.8302435015685);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.7268119247876885, mnStrategy0, 0.7268119247876885);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      mnStrategy0.setHessianG2Tolerance(2072.8302435015685);
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = 2072.8302435015685;
      mnUserParameterState0.setUpperLimit("MQT?IZ", 0.7268119247876885);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2072.8302435015685, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add("MQj?Z", 0.3);
      mnUserParameterState0.setLowerLimit("MQj?Z", 252.74973);
      int[] intArray0 = new int[1];
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = 441.76251159;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(fCNBase1).valueOf(any(double[].class));
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 441.76251159, mnStrategy0, 414.637527);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 252.74973, (-2126008811));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, (-0.5), 441.76251159, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add("MQT?IZ", (-0.5));
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.setLowerLimit("MQT?IZ", 252.74973);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.7268119247876885, mnStrategy0, 0.7268119247876885);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      mnStrategy0.setHessianG2Tolerance((-0.5));
      double[] doubleArray0 = new double[11];
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 252.74973, 7);
      doubleArray0[0] = 441.76251159;
      mnUserParameterState0.setUpperLimit("MQT?IZ", (-830.0153921375523));
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.7268119247876885, (-2123354618));
      doubleArray0[1] = 252.74973;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-551.16837113), 0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-0.5);
      doubleArray1[1] = 0.7268119247876885;
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 441.76251159, (-2396));
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, 2433.703719506237, 6);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2073.048037333758, 2073.048037333758, 0.3, 0.3, 2073.048037333758).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add("MQT?IZ", 0.3);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.setLowerLimit("MQT?IZ", 252.74973);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.7268119247876885, mnStrategy0, 0.7268119247876885);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      mnStrategy0.setHessianG2Tolerance(0.3);
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = 2073.048037333758;
      mnUserParameterState0.setUpperLimit("MQT?IZ", (-830.0153921375523));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.7268119247876885, (-2123354618));
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-550.9534514044949), 0);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2072.8302435015685, 2072.8302435015685, 0.3, 441.76251159, 0.3).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add("7MEQT?Zh", 0.0015294027956278544);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.setLowerLimit("7MEQT?Zh", 441.76251159);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.7268119247876885, mnStrategy0, 0.7268119247876885);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      mnStrategy0.setHessianG2Tolerance(0.3);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 441.76251159;
      mnUserParameterState0.setUpperLimit("7MEQT?Zh", (-870.0));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.7268119247876885, (-2123354618));
      doubleArray0[1] = 64.7958845;
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-551.16837113), (-2126328489));
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add("MQj?Z", 0.3);
      mnUserParameterState0.setLowerLimit("MQj?Z", 252.74973);
      int[] intArray0 = new int[1];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(fCNBase0).valueOf(any(double[].class));
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.7268119247876885, mnStrategy0, 414.637527);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1427158874);
      doubleArray0[1] = 441.76251159;
      doubleArray0[2] = 441.76251159;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 441.76251159, (-2126008811));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1.6, (-1713.5212)).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add("7MEQT?Zh", 0.0);
      mnUserParameterState0.add("}=Y&R>ma?o", 2139.490758);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 2090.90705, mnStrategy0, 16.6);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2090.90705;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 0;
      mnUserParameterState0.setUpperLimit("7MEQT?Zh", 0.0);
      doubleArray0[4] = (-2449.2976599938);
      doubleArray0[5] = (double) 0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-2.969383949916166), 15);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = (-1317.8122199782208);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add("7MEQT?Zh", (-23.180352454812372));
      MnStrategy mnStrategy0 = new MnStrategy();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-1317.8122199782208);
      MnStrategy mnStrategy1 = new MnStrategy(1908);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-800.11), mnStrategy0, 1.254971179904354E-5);
      mnUserParameterState0.setUpperLimit("7MEQT?Zh", 1.0);
      int[] intArray0 = new int[2];
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1540.834255, (-2146230390));
      intArray0[0] = 1908;
      intArray0[1] = 1908;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1248.492045, 1908);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1908, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.2;
      doubleArray0[1] = 24337.03719506237;
      doubleArray0[2] = 0.2;
      doubleArray0[3] = (-2012.0);
      doubleArray0[4] = 1214.424288370596;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1.0E-35, mnStrategy0, 0.2);
      int[] intArray0 = new int[5];
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-2012.0), 2191);
      intArray0[0] = 16;
      intArray0[1] = 664;
      intArray0[2] = 1266;
      intArray0[3] = 1517;
      intArray0[4] = 2379;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1454.2, 664);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16, Size: 5
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, (-0.5), 441.76251159, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add("MQT?IZ", (-0.5));
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.setLowerLimit("MQT?IZ", 252.74973);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.7268119247876885, mnStrategy0, 0.7268119247876885);
      mnUserParameterState0.add("Rjt_Cv9B:X", (-3583.758592967113), 0.0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      mnStrategy0.setHessianG2Tolerance((-0.5));
      double[] doubleArray0 = new double[11];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 252.74973, 7);
      doubleArray0[0] = 441.76251159;
      mnUserParameterState0.setUpperLimit("MQT?IZ", (-830.0153921375523));
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.7268119247876885, (-2123354618));
      doubleArray0[1] = 252.74973;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-551.16837113), 0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-0.5);
      doubleArray1[1] = 0.7268119247876885;
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 441.76251159, (-2396));
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, 2433.703719506237, 6);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, (-820.686152), 1);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.5826126758874237, 441.76251159, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.7268119247876885, mnStrategy0, 0.7268119247876885);
      mnUserParameterState0.add("Rjt_Cv9B:X", (-3583.758592967113), 0.0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      mnStrategy0.setHessianG2Tolerance(0.5826126758874237);
      double[] doubleArray0 = new double[11];
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 252.74973, 7);
      doubleArray0[0] = 441.76251159;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.7268119247876885, (-2123354618));
      doubleArray0[1] = 252.74973;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-551.16837113), 0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.5826126758874237;
      doubleArray1[1] = 0.7268119247876885;
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 441.76251159, (-2396));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, 2433.703719506237, 6);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, (-820.686152), 34);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }
}
