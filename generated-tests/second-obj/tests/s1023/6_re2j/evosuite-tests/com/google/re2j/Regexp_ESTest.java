/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:19:33 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Regexp_ESTest extends Regexp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = regexp0.toString();
      assertEquals("\\A", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      boolean boolean0 = regexp1.equals(regexp0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.maxCap();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.maxCap();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.z
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op1);
      Regexp regexp1 = new Regexp(regexp0);
      String string0 = regexp1.toString();
      assertEquals("(?-s:.)", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = 102;
      regexp0.reinit();
      String string0 = regexp0.toString();
      assertEquals("$", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexp0.subs = regexpArray0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.reinit();
      Regexp.Op.values();
      int int0 = regexp1.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = regexp0.toString();
      assertEquals("VERTICAL_BAR", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.cap = 0;
      regexp0.max = 0;
      regexp0.min = 0;
      regexp0.toString();
      regexp0.equals(regexp_Op0);
      regexp0.equals("[^x00-x{10FFFF}]");
      Regexp.Op.values();
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.equals(regexp1);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("[^x00-x{10FFFF}]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.[^x00-x{10FFFF}]
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      Regexp regexp2 = new Regexp(regexp_Op0);
      boolean boolean0 = regexp2.equals(regexp0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      boolean boolean0 = regexp0.equals(regexp0);
      assertTrue(boolean0);
      
      regexp0.toString();
      boolean boolean1 = regexp0.equals("B");
      assertFalse(boolean1);
      
      regexp_Op0.isPseudo();
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      boolean boolean2 = regexp_Op1.isPseudo();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op.values();
      regexp0.toString();
      boolean boolean0 = regexp_Op0.isPseudo();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      boolean boolean0 = regexp1.equals(regexp0);
      boolean boolean1 = regexp_Op0.isPseudo();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0].max = 7;
      regexp1.subs = regexpArray0;
      regexpArray0[2].op = regexp_Op0;
      regexp0.maxCap();
      int[] intArray0 = new int[4];
      int[] intArray1 = new int[5];
      intArray1[1] = 7;
      intArray1[2] = 7;
      intArray1[4] = 0;
      regexp0.reinit();
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_TEXT;
      regexp0.op = regexp_Op1;
      intArray0[3] = 64320;
      regexpArray0[1].runes = intArray0;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexp2.name = "";
      regexp0.equals(regexp0);
      Regexp.Op regexp_Op2 = Regexp.Op.END_LINE;
      Regexp.Op.values();
      regexp0.maxCap();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("rPF]51!rBfrAW}i.8BM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.rPF]51!rBfrAW}i.8BM
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = regexp0.toString();
      assertEquals("(?:)", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "Lo";
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.equals(regexp1);
      regexp_Op0.isPseudo();
      regexp0.maxCap();
      regexp0.maxCap();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 64320;
      regexpArray0[1].runes = intArray0;
      regexp0.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("x00x00x00\uFB40");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.x00x00x00\uFB40
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.maxCap();
      // Undeclared exception!
      try { 
        regexp0.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.equals(regexp0);
      regexp0.maxCap();
      Regexp.Op.values();
      regexp_Op0.isPseudo();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("Yi");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.Yi
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.equals(regexp0);
      Regexp.Op.values();
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp1;
      regexpArray0[2] = regexp0;
      regexp1.min = 3027;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp1;
      regexp1.subs = regexpArray0;
      regexp0.maxCap();
      Regexp.Op.values();
      Regexp.Op.values();
      regexp1.equals(regexp0);
      regexp0.toString();
      String string0 = "\\x";
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.x
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.equals(regexp0);
      regexp0.reinit();
      regexp1.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("Cf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.Cf
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[8];
      intArray0[3] = 0;
      intArray0[4] = 18;
      intArray0[6] = 64332;
      regexp0.equals(intArray0);
      intArray0[7] = 0;
      regexp0.runes = intArray0;
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
      
      Regexp.Op.values();
      String string0 = regexp0.toString();
      assertEquals("[\\x00\\x00\\x12-\\x00\uFB4C-\\x00]", string0);
      
      Regexp.Op regexp_Op1 = Regexp.Op.LEFT_PAREN;
      boolean boolean0 = regexp_Op1.isPseudo();
      boolean boolean1 = regexp0.equals("[x00x00x12-x00\uFB4C-x00]");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      regexp0.cap = (-1607);
      regexp0.toString();
      regexp_Op0.isPseudo();
      regexp0.reinit();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = (-2388);
      Regexp regexp1 = new Regexp(regexp0);
      boolean boolean0 = regexp1.equals(regexp0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.equals(regexp0);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("\"LR)>L5u;ysD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.\"LR)>L5u;ysD
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp_Op0.isPseudo();
      int int0 = regexp0.flags;
      boolean boolean0 = regexp0.equals(regexp0);
      int int1 = regexp0.maxCap();
      assertEquals(0, int1);
      
      Regexp.Op regexp_Op1 = Regexp.Op.PLUS;
      boolean boolean1 = regexp_Op1.isPseudo();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      boolean boolean0 = regexp_Op0.isPseudo();
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op1);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.toString();
      boolean boolean1 = regexp1.equals(regexp0);
      assertFalse(boolean1 == boolean0);
      
      regexp0.reinit();
      assertTrue(regexp0.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[1] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.cap = (-4340);
      regexp0.maxCap();
      regexpArray0[0].max = 0;
      regexp1.equals(regexp0);
      regexp0.maxCap();
      int[] intArray0 = new int[4];
      intArray0[1] = 0;
      intArray0[2] = 0;
      regexpArray0[0].runes = intArray0;
      intArray0[3] = 64320;
      regexpArray0[1].runes = intArray0;
      regexp0.maxCap();
      regexp0.equals(regexp1);
      regexp0.maxCap();
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "Lo";
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp0.equals(regexp1);
      regexp1.subs = regexpArray0;
      regexp_Op0.isPseudo();
      regexp0.maxCap();
      regexp1.equals(regexp0);
      regexpArray0[0].flags = (-3075);
      regexp0.maxCap();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[2] = 0;
      regexpArray0[2].max = 0;
      intArray0[3] = 64320;
      regexpArray0[1].runes = intArray0;
      regexp0.toString();
      regexp0.equals("Lo");
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("^x00-x{10FFFF}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.^x00-x{10FFFF}
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[13];
      intArray0[2] = 2;
      regexp0.cap = 1710;
      regexp0.reinit();
      intArray0[3] = 0;
      intArray0[4] = 2;
      intArray0[5] = 1710;
      regexp0.name = null;
      intArray0[6] = 64332;
      intArray0[12] = 0;
      regexp0.runes = intArray0;
      regexp0.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.toString();
      regexp_Op0.isPseudo();
      Regexp.Op regexp_Op1 = Regexp.Op.PLUS;
      Regexp regexp1 = new Regexp(regexp_Op1);
      Object object0 = new Object();
      regexp1.equals(object0);
      Regexp.Op.values();
      Regexp regexp2 = new Regexp(regexp0);
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexp0.equals(regexp3);
      regexp1.flags = 1114111;
      Regexp.Op regexp_Op2 = Regexp.Op.EMPTY_MATCH;
      regexp_Op2.isPseudo();
      regexp3.reinit();
      regexp3.maxCap();
      regexp1.equals(regexp3);
      regexp1.maxCap();
      // Undeclared exception!
      try { 
        regexp3.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-400);
      intArray0[1] = 0;
      regexp0.cap = 1640;
      intArray0[3] = 0;
      intArray0[5] = 256;
      intArray0[6] = 64320;
      intArray0[7] = 1311;
      regexp0.runes = intArray0;
      regexp0.min = (-205);
      regexp0.subs = null;
      regexp0.maxCap();
      regexp0.toString();
      regexp0.reinit();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("[xfffffe70-x00x00x00-\u0100\uFB40-\u051F]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.[xfffffe70-x00x00x00-\u0100\uFB40-\u051F]
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp_Op0.isPseudo();
      // Undeclared exception!
      try { 
        regexp0.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      regexp1.cap = 10;
      regexp_Op0.isPseudo();
      regexp1.min = 10;
      regexp1.equals(regexp0);
      regexp_Op0.isPseudo();
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.max = (-271);
      regexp1.max = (-297);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.QUEST;
      regexp1.op = regexp_Op1;
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.op = regexp_Op0;
      Object object0 = new Object();
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_LINE;
      regexp1.op = regexp_Op1;
      regexp0.equals((Object) null);
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexp2.flags = 770;
      int[] intArray0 = new int[17];
      regexp2.min = 2289;
      intArray0[0] = 6;
      intArray0[1] = (-2752);
      regexp2.cap = 6;
      regexp0.runes = intArray0;
      regexp0.equals(regexp2);
      regexp1.reinit();
      Regexp.Op.values();
      regexp_Op1.isPseudo();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("E/DoLINE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.E/DoLINE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = 20;
      regexp0.flags = (-1791);
      regexp0.toString();
      regexp0.reinit();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("(?-m:$)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.(?-m:$)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.equals(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      Regexp regexp1 = new Regexp(regexp_Op1);
      int int0 = regexp0.cap;
      Regexp regexp2 = new Regexp(regexp0);
      Regexp regexp3 = new Regexp(regexp2);
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      Regexp regexp4 = new Regexp(regexp2);
      assertTrue(regexp0.equals((Object)regexp3));
      
      regexpArray0[1] = regexp4;
      regexp3.subs = regexpArray0;
      regexp3.maxCap();
      Regexp.Op.values();
      regexp3.toString();
      assertFalse(regexp2.equals((Object)regexp3));
      
      boolean boolean0 = regexp_Op0.isPseudo();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Object object0 = new Object();
      regexp0.name = "u";
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.equals(regexp0);
      Regexp.Op.values();
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp1;
      regexp1.subs = regexpArray0;
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      regexp1.op = regexp_Op1;
      regexp1.name = "";
      regexp0.cap = 63;
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexp1.subs = null;
      regexp1.subs = regexpArray0;
      String string0 = regexp1.toString();
      assertEquals("\\B{0}", string0);
      
      regexp_Op1.isPseudo();
      regexp0.reinit();
      boolean boolean0 = regexp1.op.isPseudo();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "";
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.QUEST;
      regexp1.op = regexp_Op1;
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      regexp1.op = regexp_Op1;
      regexp1.name = "";
      Regexp[] regexpArray0 = new Regexp[1];
      regexp1.min = 1077;
      regexpArray0[0] = regexp0;
      regexp1.subs = null;
      regexp1.subs = regexpArray0;
      String string0 = regexp1.toString();
      assertEquals("\\B{1077,0}", string0);
      
      regexp0.toString();
      Regexp.Op regexp_Op2 = Regexp.Op.QUEST;
      boolean boolean0 = regexp_Op2.isPseudo();
      Object object0 = new Object();
      Regexp.Op.values();
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
      
      Object object1 = new Object();
      boolean boolean1 = regexp1.equals("B{1077,0}");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      regexp2.cap = 1360;
      regexp2.cap = 1360;
      int int0 = regexp2.min;
      int int1 = regexp0.min;
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp regexp3 = new Regexp(regexp0);
      regexp0.max = 1979;
      regexpArray0[0] = regexp3;
      regexp2.equals(regexp1);
      regexp2.maxCap();
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR_NOT_NL;
      regexp_Op1.isPseudo();
      Regexp regexp4 = new Regexp(regexp_Op1);
      Object object0 = new Object();
      regexp2.equals(" jD#O.\"`V.");
      Regexp.Op.values();
      regexp3.maxCap();
      Object object1 = new Object();
      Regexp regexp5 = new Regexp(regexp4);
      regexp5.equals("N51");
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("(?:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.(?:
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      regexp1.op = regexp_Op1;
      regexp1.name = "";
      Regexp[] regexpArray0 = new Regexp[1];
      regexp1.min = 1077;
      regexpArray0[0] = regexp0;
      regexp1.subs = null;
      regexp1.max = (-2678);
      regexp1.subs = regexpArray0;
      regexp1.toString();
      regexp0.toString();
      regexp_Op1.isPseudo();
      Object object0 = new Object();
      regexp0.maxCap();
      regexp1.toString();
      Regexp.Op.values();
      Regexp.Op regexp_Op2 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp2 = new Regexp(regexp_Op2);
      regexp2.maxCap();
      Regexp.Op regexp_Op3 = Regexp.Op.valueOf("END_TEXT");
      assertNotSame(regexp_Op3, regexp_Op2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[0].max = 94;
      regexp0.subs = regexpArray0;
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }
}
