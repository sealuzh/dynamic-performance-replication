/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 01:46:52 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.util.concurrent.TimeUnit;
import java.util.zip.Deflater;
import okio.AsyncTimeout;
import okio.BufferedSink;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.HashingSource;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.enter();
      asyncTimeout0.exit(false);
      assertFalse(asyncTimeout0.hasDeadline());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.enter();
      MockIOException mockIOException0 = new MockIOException("2x]]HgJM2J4F");
      asyncTimeout0.exit((IOException) mockIOException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("A3$mT^[c~t8", "~", ".A2", (-672));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("2x]]HgJM2J4F", "C$eCF", "~", (-672));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("A3$mT^[c~t8", "~", ".A2", 2048);
      stackTraceElementArray0[2] = stackTraceElement2;
      mockIOException0.setStackTrace(stackTraceElementArray0);
      AsyncTimeout.head = asyncTimeout0;
      asyncTimeout0.newTimeoutException(mockIOException0);
      asyncTimeout0.exit();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      IOException iOException0 = asyncTimeout0.newTimeoutException((IOException) null);
      assertEquals("java.io.InterruptedIOException: timeout", iOException0.toString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(false);
      asyncTimeout0.exit();
      asyncTimeout0.throwIfReached();
      asyncTimeout0.enter();
      MockIOException mockIOException0 = new MockIOException("S/lI;-8l[@?");
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      mockIOException0.initCause(mockIOException1);
      mockIOException1.fillInStackTrace();
      asyncTimeout0.exit((IOException) mockIOException1);
      RealBufferedSink realBufferedSink0 = null;
      try {
        realBufferedSink0 = new RealBufferedSink((Sink) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.deadlineNanoTime((-3022L));
      asyncTimeout0.enter();
      AsyncTimeout.awaitTimeout();
      AsyncTimeout.head = asyncTimeout0;
      assertEquals(0L, AsyncTimeout.head.timeoutNanos());
      
      asyncTimeout0.exit(false);
      asyncTimeout0.enter();
      System.setCurrentTimeMillis((-3022L));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      Pipe pipe0 = new Pipe(100000L);
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.writeHexadecimalUnsignedLong(100000L);
      pipe0.sourceClosed = false;
      BufferedSink bufferedSink0 = realBufferedSink0.emitCompleteSegments();
      asyncTimeout0.sink(bufferedSink0);
      asyncTimeout0.timedOut();
      asyncTimeout0.exit(false);
      asyncTimeout0.exit();
      asyncTimeout0.exit(true);
      asyncTimeout0.timedOut();
      String string0 = "`B-H6(O}))AW=|A`";
      String string1 = "94Mqh+DEU^=;cXM6";
      MockThrowable mockThrowable0 = new MockThrowable("94Mqh+DEU^=;cXM6");
      MockIOException mockIOException0 = new MockIOException(mockThrowable0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      int int0 = 0;
      StackTraceElement stackTraceElement0 = null;
      try {
        stackTraceElement0 = new StackTraceElement("", (String) null, "AsyncTimeout.source(", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Method name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      asyncTimeout0.timeout(1000000000000L, timeUnit0);
      Pipe pipe0 = new Pipe(382L);
      Source source0 = pipe0.source();
      HashingSource hashingSource0 = HashingSource.sha1(source0);
      Source source1 = asyncTimeout0.source(hashingSource0);
      assertNotNull(source1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime((-3022L));
      asyncTimeout0.enter();
      MockThrowable mockThrowable0 = new MockThrowable("yfW");
      MockIOException mockIOException0 = new MockIOException("nro`i=#S", mockThrowable0);
      InterruptedIOException interruptedIOException0 = (InterruptedIOException)asyncTimeout0.newTimeoutException(mockIOException0);
      InterruptedIOException interruptedIOException1 = (InterruptedIOException)asyncTimeout1.exit((IOException) interruptedIOException0);
      assertEquals("java.io.InterruptedIOException: timeout", interruptedIOException1.toString());
      assertNotSame(interruptedIOException1, interruptedIOException0);
  }
}
