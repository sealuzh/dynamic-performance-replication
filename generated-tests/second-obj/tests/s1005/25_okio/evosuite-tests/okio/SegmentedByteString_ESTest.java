/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:32:59 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.nio.charset.Charset;
import okio.Buffer;
import okio.ByteString;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.SegmentedByteString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SegmentedByteString_ESTest extends SegmentedByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring((-2551));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      String string0 = segmentedByteString0.utf8;
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(0, 1906);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hex();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      buffer0.require(0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        segmentedByteString0.toAsciiLowercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.md5();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.sha256();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-89);
      // Undeclared exception!
      try { 
        segmentedByteString0.indexOf(byteArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.require(0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.write(buffer0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      boolean boolean0 = segmentedByteString0.equals(buffer0);
      assertFalse(boolean0);
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.write(buffer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        segmentedByteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(38L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      segmentedByteString0.internalArray();
      segmentedByteString0.size();
      segmentedByteString0.rangeEquals((-2854), byteString0, (-2854), 1);
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(76L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 8);
      Buffer buffer1 = new Buffer();
      segmentedByteString0.asByteBuffer();
      assertEquals(8, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(32L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 8);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(38L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      segmentedByteString0.toString();
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(38L);
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      segmentedByteString0.getByte((byte)0);
      segmentedByteString0.write(buffer1);
      assertEquals(9L, buffer1.size());
      assertEquals(9L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(32L);
      Buffer buffer1 = buffer0.clone();
      byte[] byteArray0 = new byte[4];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 8);
      boolean boolean0 = segmentedByteString0.rangeEquals(8, byteArray0, 55, 8);
      assertEquals(8, segmentedByteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(0L);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      segmentedByteString0.utf8();
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = segmentedByteString0.rangeEquals(0, byteArray0, 2426, (-3285));
      assertEquals(1, segmentedByteString0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(0L);
      byte[] byteArray0 = new byte[4];
      buffer0.skip(0L);
      buffer0.segmentSizes();
      buffer0.read(byteArray0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, (byte)0);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 4);
      boolean boolean0 = segmentedByteString1.rangeEquals((int) (byte)0, byteArray0, (int) (byte)0, 4);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      buffer0.writeLong(32L);
      Buffer buffer1 = buffer0.clone();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 8);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer;
      segmentedByteString0.write(buffer2);
      assertEquals(8L, buffer2.completeSegmentByteCount());
      assertTrue(buffer0.equals((Object)buffer2));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(2732L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      segmentedByteString0.hashCode();
      int int0 = segmentedByteString0.size();
      assertEquals(1, int0);
      
      int int1 = segmentedByteString0.hashCode();
      assertFalse(int1 == int0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      segmentedByteString0.sha1();
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(32L);
      ByteString byteString1 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[4];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 8);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      boolean boolean0 = segmentedByteString0.rangeEquals((int) (byte)0, byteArray0, 1695, (int) (byte)0);
      boolean boolean1 = segmentedByteString0.equals(byteString1);
      assertEquals(8, segmentedByteString0.size());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(2732L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 8);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 8);
      segmentedByteString1.equals(segmentedByteString0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf((byte[]) null, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(32L);
      Buffer buffer1 = buffer0.clone();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 8);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)38;
      boolean boolean0 = segmentedByteString0.startsWith(byteArray0);
      assertFalse(boolean0);
      assertEquals(8, segmentedByteString0.size());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      segmentedByteString0.rangeEquals((-1291), (byte[]) null, 0, (-1291));
      MockFile mockFile0 = new MockFile("[size=0]", "[size=0]");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[size=0]", true);
      segmentedByteString0.write(mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(32L);
      Buffer buffer1 = buffer0.clone();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 8);
      segmentedByteString0.write(byteArrayOutputStream0);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(38L);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-126);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte) (-126);
      buffer0.read(byteArray0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, (byte)0);
      buffer0.sha512();
      segmentedByteString0.equals(byteArray0);
      segmentedByteString0.rangeEquals((int) (byte)0, byteArray0, (-2332), 1);
      SegmentedByteString segmentedByteString2 = new SegmentedByteString(buffer1, 1);
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=6 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(38L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      Charset charset0 = Charset.defaultCharset();
      String string0 = segmentedByteString0.string(charset0);
      assertEquals("\u0000", string0);
      
      segmentedByteString0.rangeEquals(0, byteString0, 14, 70);
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(32L);
      Buffer buffer1 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 8);
      buffer0.clone();
      segmentedByteString0.base64Url();
      buffer1.writableSegment(28);
      segmentedByteString0.write(buffer1);
      SegmentedByteString segmentedByteString1 = null;
      try {
        segmentedByteString1 = new SegmentedByteString(buffer1, 8);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // s.limit == s.pos
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(32L);
      int int0 = 8;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 8);
      segmentedByteString0.base64Url();
      segmentedByteString0.write(buffer0);
      buffer0.readUtf8Line(1L);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer1, 8);
      SegmentedByteString segmentedByteString2 = new SegmentedByteString(buffer1, 8);
      buffer0.readUtf8(1L);
      segmentedByteString1.equals(segmentedByteString2);
      int int1 = ObjectStreamConstants.baseWireHandle;
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      try { 
        realBufferedSource1.readByteArray(1L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(54L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 8);
      segmentedByteString0.base64Url();
      segmentedByteString0.write(buffer0);
      buffer0.readUtf8Line(1L);
      segmentedByteString0.toAsciiUppercase();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 8);
      segmentedByteString1.equals(segmentedByteString0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      segmentedByteString1.hmacSha1(segmentedByteString0);
      segmentedByteString1.base64();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      boolean boolean0 = realBufferedSource1.closed;
      SegmentedByteString segmentedByteString2 = new SegmentedByteString(buffer1, 1);
      int int1 = 7;
      segmentedByteString1.getByte(7);
      SegmentedByteString segmentedByteString3 = null;
      try {
        segmentedByteString3 = new SegmentedByteString(buffer1, 8257536);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=14 offset=0 byteCount=8257536
         //
         verifyException("okio.Util", e);
      }
  }
}
