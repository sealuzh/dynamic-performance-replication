/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:52:27 GMT 2018
 */

package org.apache.bcel.verifier.structurals;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.ObjectStreamConstants;
import java.lang.reflect.Array;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.generic.AALOAD;
import org.apache.bcel.generic.ACONST_NULL;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ARRAYLENGTH;
import org.apache.bcel.generic.ASTORE;
import org.apache.bcel.generic.ATHROW;
import org.apache.bcel.generic.ArithmeticInstruction;
import org.apache.bcel.generic.BALOAD;
import org.apache.bcel.generic.BASTORE;
import org.apache.bcel.generic.BIPUSH;
import org.apache.bcel.generic.BREAKPOINT;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CALOAD;
import org.apache.bcel.generic.CASTORE;
import org.apache.bcel.generic.CHECKCAST;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2F;
import org.apache.bcel.generic.D2I;
import org.apache.bcel.generic.D2L;
import org.apache.bcel.generic.DADD;
import org.apache.bcel.generic.DASTORE;
import org.apache.bcel.generic.DCMPG;
import org.apache.bcel.generic.DCMPL;
import org.apache.bcel.generic.DCONST;
import org.apache.bcel.generic.DDIV;
import org.apache.bcel.generic.DLOAD;
import org.apache.bcel.generic.DMUL;
import org.apache.bcel.generic.DNEG;
import org.apache.bcel.generic.DREM;
import org.apache.bcel.generic.DRETURN;
import org.apache.bcel.generic.DSTORE;
import org.apache.bcel.generic.DSUB;
import org.apache.bcel.generic.DUP;
import org.apache.bcel.generic.DUP2;
import org.apache.bcel.generic.DUP2_X1;
import org.apache.bcel.generic.DUP2_X2;
import org.apache.bcel.generic.DUP_X1;
import org.apache.bcel.generic.DUP_X2;
import org.apache.bcel.generic.F2D;
import org.apache.bcel.generic.F2I;
import org.apache.bcel.generic.F2L;
import org.apache.bcel.generic.FADD;
import org.apache.bcel.generic.FASTORE;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.FCMPL;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.FDIV;
import org.apache.bcel.generic.FLOAD;
import org.apache.bcel.generic.FMUL;
import org.apache.bcel.generic.FNEG;
import org.apache.bcel.generic.FREM;
import org.apache.bcel.generic.FRETURN;
import org.apache.bcel.generic.FSTORE;
import org.apache.bcel.generic.FSUB;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.GETSTATIC;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.I2B;
import org.apache.bcel.generic.I2C;
import org.apache.bcel.generic.I2D;
import org.apache.bcel.generic.I2F;
import org.apache.bcel.generic.I2L;
import org.apache.bcel.generic.I2S;
import org.apache.bcel.generic.IADD;
import org.apache.bcel.generic.IAND;
import org.apache.bcel.generic.IASTORE;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IDIV;
import org.apache.bcel.generic.IFEQ;
import org.apache.bcel.generic.IFGE;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.IFLE;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IFNE;
import org.apache.bcel.generic.IFNONNULL;
import org.apache.bcel.generic.IFNULL;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.IF_ACMPNE;
import org.apache.bcel.generic.IF_ICMPEQ;
import org.apache.bcel.generic.IF_ICMPGE;
import org.apache.bcel.generic.IF_ICMPGT;
import org.apache.bcel.generic.IF_ICMPLE;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.IF_ICMPNE;
import org.apache.bcel.generic.IINC;
import org.apache.bcel.generic.ILOAD;
import org.apache.bcel.generic.IMPDEP1;
import org.apache.bcel.generic.IMPDEP2;
import org.apache.bcel.generic.IMUL;
import org.apache.bcel.generic.INEG;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.INVOKEDYNAMIC;
import org.apache.bcel.generic.INVOKEINTERFACE;
import org.apache.bcel.generic.INVOKESPECIAL;
import org.apache.bcel.generic.INVOKESTATIC;
import org.apache.bcel.generic.IOR;
import org.apache.bcel.generic.IREM;
import org.apache.bcel.generic.IRETURN;
import org.apache.bcel.generic.ISHL;
import org.apache.bcel.generic.ISHR;
import org.apache.bcel.generic.ISTORE;
import org.apache.bcel.generic.ISUB;
import org.apache.bcel.generic.IUSHR;
import org.apache.bcel.generic.IXOR;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.L2D;
import org.apache.bcel.generic.L2F;
import org.apache.bcel.generic.L2I;
import org.apache.bcel.generic.LADD;
import org.apache.bcel.generic.LALOAD;
import org.apache.bcel.generic.LAND;
import org.apache.bcel.generic.LASTORE;
import org.apache.bcel.generic.LCMP;
import org.apache.bcel.generic.LCONST;
import org.apache.bcel.generic.LDC2_W;
import org.apache.bcel.generic.LDC_W;
import org.apache.bcel.generic.LDIV;
import org.apache.bcel.generic.LLOAD;
import org.apache.bcel.generic.LMUL;
import org.apache.bcel.generic.LNEG;
import org.apache.bcel.generic.LOR;
import org.apache.bcel.generic.LREM;
import org.apache.bcel.generic.LRETURN;
import org.apache.bcel.generic.LSHL;
import org.apache.bcel.generic.LSHR;
import org.apache.bcel.generic.LSTORE;
import org.apache.bcel.generic.LSUB;
import org.apache.bcel.generic.LUSHR;
import org.apache.bcel.generic.LXOR;
import org.apache.bcel.generic.MONITORENTER;
import org.apache.bcel.generic.MONITOREXIT;
import org.apache.bcel.generic.MULTIANEWARRAY;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.NEW;
import org.apache.bcel.generic.NEWARRAY;
import org.apache.bcel.generic.NOP;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.POP;
import org.apache.bcel.generic.POP2;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.PUTFIELD;
import org.apache.bcel.generic.PUTSTATIC;
import org.apache.bcel.generic.RET;
import org.apache.bcel.generic.ReturnaddressType;
import org.apache.bcel.generic.SALOAD;
import org.apache.bcel.generic.SASTORE;
import org.apache.bcel.generic.SIPUSH;
import org.apache.bcel.generic.SWAP;
import org.apache.bcel.generic.TABLESWITCH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.verifier.structurals.Frame;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.apache.bcel.verifier.structurals.LocalVariables;
import org.apache.bcel.verifier.structurals.OperandStack;
import org.apache.bcel.verifier.structurals.UninitializedObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstConstraintVisitor_ESTest extends InstConstraintVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ISTORE iSTORE0 = new ISTORE(1313);
      instConstraintVisitor0.visitISTORE(iSTORE0);
      assertEquals(1313, iSTORE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      SIPUSH sIPUSH0 = new SIPUSH((short)57);
      instConstraintVisitor0.visitSIPUSH(sIPUSH0);
      assertEquals((short)17, sIPUSH0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ILOAD iLOAD0 = new ILOAD(70);
      instConstraintVisitor0.visitILOAD(iLOAD0);
      DCMPG dCMPG0 = new DCMPG();
      assertEquals((short)152, dCMPG0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCMPG dCMPG0 = new DCMPG();
      IMPDEP1 iMPDEP1_0 = new IMPDEP1();
      IMPDEP1 iMPDEP1_1 = new IMPDEP1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP1(iMPDEP1_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP1.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      CALOAD cALOAD0 = new CALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCALOAD(cALOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackProducer(aCONST_NULL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitBREAKPOINT(bREAKPOINT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as BREAKPOINT.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP2(iMPDEP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP2.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitLLOAD((LLOAD) null);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FCONST fCONST0 = new FCONST(0.0F);
      instConstraintVisitor0.visitFCONST(fCONST0);
      assertEquals((short)11, fCONST0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(943, 943);
      iNVOKEINTERFACE0.setIndex(46);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEINTERFACE(iNVOKEINTERFACE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(214);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEDYNAMIC(iNVOKEDYNAMIC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INVOKEDYNAMIC instruction is not supported at this time
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitTABLESWITCH((TABLESWITCH) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BALOAD bALOAD0 = new BALOAD();
      DCONST dCONST0 = new DCONST(0.0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      dCONST0.consumeStack(constantPoolGen0);
      instConstraintVisitor0.visitDCONST(dCONST0);
      LREM lREM0 = new LREM();
      lREM0.toString(false);
      LDC_W lDC_W0 = new LDC_W(0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDC(lDC_W0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DSTORE dSTORE0 = new DSTORE(1326);
      instConstraintVisitor0.visitDSTORE(dSTORE0);
      assertEquals((short)57, dSTORE0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GETSTATIC gETSTATIC0 = new GETSTATIC(5);
      instConstraintVisitor0.visitGETSTATIC(gETSTATIC0);
      assertEquals("getstatic", gETSTATIC0.getName());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      short short0 = Constants.ISTORE_1;
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, (Number) (short)60);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.append((CompoundInstruction) pUSH0);
      JSR_W jSR_W0 = new JSR_W(instructionHandle0);
      instConstraintVisitor0.visitJSR_W(jSR_W0);
      assertEquals("jsr_w", jSR_W0.getName());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      PUTSTATIC pUTSTATIC0 = new PUTSTATIC(0);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      ISHL iSHL0 = new ISHL();
      LDC2_W lDC2_W0 = new LDC2_W(109);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDC2_W(lDC2_W0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LDC2_W constraint violated: Referenced constant should be a CONSTANT_Integer, a CONSTANT_Float or a CONSTANT_String, but is 'null'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BIPUSH bIPUSH0 = new BIPUSH((byte)46);
      instConstraintVisitor0.visitBIPUSH(bIPUSH0);
      FSTORE fSTORE0 = new FSTORE((byte)46);
      instConstraintVisitor0.visitFSTORE(fSTORE0);
      PUTFIELD pUTFIELD0 = new PUTFIELD((byte)46);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFieldInstruction(pUTFIELD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(943);
      instConstraintVisitor0.visitInvokeInstruction(iNVOKEDYNAMIC0);
      assertEquals("invokedynamic", iNVOKEDYNAMIC0.getName());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FRETURN fRETURN0 = new FRETURN();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ISHR iSHR0 = new ISHR();
      iSHR0.toString(true);
      iSHR0.copy();
      I2L i2L0 = new I2L();
      L2I l2I0 = new L2I();
      ISTORE iSTORE0 = new ISTORE(1130);
      INVOKESTATIC iNVOKESTATIC0 = new INVOKESTATIC(1130);
      LCMP lCMP0 = new LCMP();
      LDC2_W lDC2_W0 = new LDC2_W(1868);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitGOTO_W((GOTO_W) null);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSTORE lSTORE0 = new LSTORE(2002);
      instConstraintVisitor0.visitLSTORE(lSTORE0);
      assertEquals(4, lSTORE0.getLength());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      System.setCurrentTimeMillis(13L);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitGOTO((GOTO) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NEW nEW0 = new NEW(142);
      nEW0.toString(true);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitNEW(nEW0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.CPInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BALOAD bALOAD0 = new BALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      LDC2_W lDC2_W0 = new LDC2_W((byte)0);
      instConstraintVisitor0.setMethodGen((MethodGen) null);
      L2F l2F0 = new L2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2F(l2F0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      F2L f2L0 = new F2L();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(943);
      ObjectType objectType0 = new ObjectType("Cache hit ");
      OperandStack operandStack0 = new OperandStack(14, objectType0);
      LocalVariables localVariables0 = new LocalVariables(14);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      I2S i2S0 = new I2S();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2S(i2S0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2S constraint violated: The value at the stack top is not of type 'int', but of type 'Cache hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      F2L f2L0 = new F2L();
      ObjectType objectType0 = new ObjectType(":Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(15, objectType0);
      LocalVariables localVariables0 = new LocalVariables(15);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      InstructionList instructionList0 = new InstructionList();
      InstructionList instructionList1 = new InstructionList();
      DUP dUP0 = new DUP();
      DUP dUP1 = new DUP();
      instConstraintVisitor0.visitStackInstruction(dUP1);
      assertTrue(dUP1.equals((Object)dUP0));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ObjectType objectType0 = new ObjectType(":Cac+he h!z ");
      OperandStack operandStack0 = new OperandStack(15, objectType0);
      LocalVariables localVariables0 = new LocalVariables(15);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      mONITOREXIT0.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FCONST fCONST0 = new FCONST(1.0F);
      SWAP sWAP0 = (SWAP)InstructionConstants.SWAP;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackInstruction(sWAP0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction SWAP constraint violated: Cannot consume 2 stack slots: only 1 slot(s) left on stack!
         // Stack:
         // Slots used: 1 MaxStack: 15.
         // :Cac+he h!z  (Size: 1)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      F2L f2L0 = new F2L();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(943);
      int int0 = 14;
      ObjectType objectType0 = new ObjectType("Cache hit ");
      OperandStack operandStack0 = new OperandStack(14, objectType0);
      OperandStack operandStack1 = new OperandStack(943, objectType0);
      LocalVariables localVariables0 = new LocalVariables(14);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      ATHROW aTHROW0 = new ATHROW();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitATHROW(aTHROW0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Missing class: java.lang.ClassNotFoundException: Exception while looking for class Cache hit : org.evosuite.runtime.mock.java.lang.MockThrowable: Couldn't find: Cache hit .class
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(949);
      ObjectType objectType0 = new ObjectType("/n_4D@\"V(");
      OperandStack operandStack0 = new OperandStack(949, objectType0);
      OperandStack operandStack1 = new OperandStack(949);
      LocalVariables localVariables0 = new LocalVariables(949);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(3840);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = Pattern.CASE_INSENSITIVE;
      DNEG dNEG0 = new DNEG();
      DLOAD dLOAD0 = new DLOAD(80);
      ASTORE aSTORE0 = null;
      try {
        aSTORE0 = new ASTORE((-2311));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal value: -2311
         //
         verifyException("org.apache.bcel.generic.LocalVariableInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 15;
      ObjectType objectType0 = ObjectType.getInstance(":Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(15, objectType0);
      LocalVariables localVariables0 = new LocalVariables(15);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      localVariables0.merge(localVariables0);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      frame0.clone();
      DMUL dMUL0 = new DMUL();
      LRETURN lRETURN0 = new LRETURN();
      LAND lAND0 = new LAND();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLAND(lAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LAND constraint violated: The value at the stack top is not of type 'long', but of type ':Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Byte.BYTES;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "R?mKLM6[(Y.*");
      constantPoolGen0.addDouble(1);
      OperandStack operandStack0 = new OperandStack(23);
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      ISHL iSHL0 = new ISHL();
      LDC2_W lDC2_W0 = new LDC2_W(23);
      lDC2_W0.setIndex(1);
      instConstraintVisitor0.visitLDC2_W(lDC2_W0);
      DREM dREM0 = new DREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSWAP((SWAP) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("Cac+he hit ");
      String string0 = Constants.ILLEGAL_OPCODE;
      OperandStack operandStack0 = new OperandStack(941, objectType0);
      LocalVariables localVariables0 = new LocalVariables(941);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      Frame frame1 = new Frame(941, 941);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      ISHR iSHR0 = new ISHR();
      L2F l2F0 = new L2F();
      FSTORE fSTORE0 = new FSTORE(4029);
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(fSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FSTORE constraint violated: Stack top type and STOREing Instruction type mismatch: Stack top: 'Cac+he hit '; Instruction type: 'float'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(959);
      ObjectType objectType0 = new ObjectType("Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(14, objectType0);
      LocalVariables localVariables0 = new LocalVariables(14);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      localVariables0.clone();
      Pattern.quote("Cac+he hit ");
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      D2L d2L0 = new D2L();
      FCMPG fCMPG0 = new FCMPG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPG(fCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPG constraint violated: The value at the stack top is not of type 'float', but of type 'Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      F2L f2L0 = new F2L();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(943);
      ObjectType objectType0 = ObjectType.getInstance("Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(943, objectType0);
      OperandStack operandStack1 = new OperandStack(943, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      D2F d2F0 = new D2F();
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DLOAD dLOAD0 = new DLOAD(943);
      instConstraintVisitor0.visitDLOAD(dLOAD0);
      LSHR lSHR0 = new LSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHR(lSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHR constraint violated: The value at the stack top is not of type 'int', but of type 'Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      F2L f2L0 = new F2L();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(943);
      ObjectType objectType0 = ObjectType.getInstance("Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(943, objectType0);
      OperandStack operandStack1 = new OperandStack(943, objectType0);
      LocalVariables localVariables0 = new LocalVariables(943);
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      objectType0.isCastableTo((Type) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      LREM lREM0 = new LREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLREM(lREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LREM constraint violated: The value at the stack top is not of type 'long', but of type 'Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("/n_[4D@\"V(");
      OperandStack operandStack0 = new OperandStack(949, objectType0);
      LocalVariables localVariables0 = new LocalVariables(949);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      D2F d2F0 = new D2F();
      LCMP lCMP0 = new LCMP();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLCMP(lCMP0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LCMP constraint violated: The value at the stack top is not of type 'long', but of type '.n_[4D@\"V('.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      F2L f2L0 = new F2L();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(943);
      ObjectType objectType0 = new ObjectType("Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(943, objectType0);
      LocalVariables localVariables0 = new LocalVariables(943);
      localVariables0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      objectType0.isCastableTo((Type) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      D2F d2F0 = new D2F();
      IADD iADD0 = new IADD();
      IADD iADD1 = new IADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIADD(iADD1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IADD constraint violated: The value at the stack top is not of type 'int', but of type 'Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(920);
      ObjectType objectType0 = new ObjectType("Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(14, objectType0);
      LocalVariables localVariables0 = new LocalVariables(920);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.merge(localVariables0);
      localVariables0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      DASTORE dASTORE1 = new DASTORE();
      InstructionList instructionList0 = new InstructionList();
      InstructionList instructionList1 = new InstructionList(dASTORE1);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFLT((IFLT) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("l&q>{b");
      OperandStack operandStack0 = new OperandStack(14, objectType0);
      OperandStack operandStack1 = new OperandStack(943, objectType0);
      LocalVariables localVariables0 = new LocalVariables(14);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      objectType0.isCastableTo((Type) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LALOAD lALOAD0 = new LALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLALOAD(lALOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LALOAD constraint violated: The 'index' is not of type int but of type l&q>{b.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("Cac+he hit ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack(14, objectType0);
      operandStack0.toString();
      LocalVariables localVariables0 = new LocalVariables(920);
      localVariables0.merge(localVariables0);
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      localVariables0.merge(localVariables0);
      LocalVariables localVariables1 = new LocalVariables(827);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      I2L i2L0 = new I2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2L(i2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2L constraint violated: The value at the stack top is not of type 'int', but of type 'Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(941);
      ObjectType objectType0 = new ObjectType("Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(941, objectType0);
      LocalVariables localVariables0 = new LocalVariables(941);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(941, 941);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      D2F d2F0 = new D2F();
      byte[] byteArray0 = new byte[5];
      ISHR iSHR0 = new ISHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHR(iSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISHR constraint violated: The value at the stack top is not of type 'int', but of type 'Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("l&q>{b");
      OperandStack operandStack0 = new OperandStack(929, objectType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LocalVariables localVariables0 = new LocalVariables(929);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      D2F d2F0 = new D2F();
      LREM lREM0 = new LREM();
      ASTORE aSTORE0 = new ASTORE(929);
      Class<LCMP>[] classArray0 = (Class<LCMP>[]) Array.newInstance(Class.class, 2);
      Class<LCMP> class0 = LCMP.class;
      classArray0[0] = class0;
      Class<LCMP> class1 = LCMP.class;
      classArray0[1] = class1;
      Type.getTypes(classArray0);
      ISHL iSHL0 = new ISHL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHL(iSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISHL constraint violated: The value at the stack top is not of type 'int', but of type 'l&q>{b'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 943;
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(943);
      ObjectType objectType0 = ObjectType.getInstance("Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(943, objectType0);
      LocalVariables localVariables0 = new LocalVariables(943);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      D2F d2F0 = new D2F();
      FREM fREM0 = new FREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFREM(fREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FREM constraint violated: The value at the stack top is not of type 'float', but of type 'Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(935);
      ObjectType objectType0 = ObjectType.getInstance("Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(935, objectType0);
      OperandStack operandStack1 = new OperandStack(935, objectType0);
      LocalVariables localVariables0 = new LocalVariables(935);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      objectType0.isCastableTo((Type) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      D2F d2F0 = new D2F();
      DLOAD dLOAD0 = new DLOAD(4336);
      instConstraintVisitor0.visitDLOAD(dLOAD0);
      ASTORE aSTORE0 = new ASTORE(4327);
      instConstraintVisitor0.visitASTORE(aSTORE0);
      assertEquals("astore", aSTORE0.getName());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("Cac+he hit ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack(14, objectType0);
      LocalVariables localVariables0 = new LocalVariables(920);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.clone();
      localVariables1.merge(localVariables0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.clone();
      Frame frame1 = (Frame)frame0.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      DASTORE dASTORE0 = new DASTORE();
      LRETURN lRETURN0 = new LRETURN();
      GETFIELD gETFIELD0 = new GETFIELD(14);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitGETFIELD(gETFIELD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 929;
      ObjectType objectType0 = new ObjectType("l&q>{b");
      OperandStack operandStack0 = new OperandStack(929, objectType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LocalVariables localVariables0 = new LocalVariables(929);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      D2F d2F0 = new D2F();
      IAND iAND0 = new IAND();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIAND(iAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IAND constraint violated: The value at the stack top is not of type 'int', but of type 'l&q>{b'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      F2L f2L0 = new F2L();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(943);
      ObjectType objectType0 = new ObjectType("Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(943, objectType0);
      OperandStack operandStack1 = new OperandStack(943, objectType0);
      LocalVariables localVariables0 = new LocalVariables(943);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      objectType0.isCastableTo((Type) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      D2F d2F0 = new D2F();
      I2C i2C0 = new I2C();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2C(i2C0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2C constraint violated: The value at the stack top is not of type 'int', but of type 'Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("Cac+he hit ");
      String string0 = Constants.ILLEGAL_TYPE;
      OperandStack operandStack0 = new OperandStack(941, objectType0);
      LocalVariables localVariables0 = new LocalVariables(941);
      OperandStack operandStack1 = new OperandStack(939, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      InstructionList instructionList0 = new InstructionList();
      LRETURN lRETURN0 = new LRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLRETURN(lRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LRETURN constraint violated: The value at the stack top is not of type 'long', but of type 'Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      F2L f2L0 = new F2L();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(959);
      ObjectType objectType0 = ObjectType.getInstance(":Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(959, objectType0);
      LocalVariables localVariables0 = new LocalVariables(959);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DASTORE dASTORE0 = new DASTORE();
      LRETURN lRETURN0 = new LRETURN();
      ISHR iSHR0 = new ISHR();
      L2F l2F0 = new L2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2F(l2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2F constraint violated: The value at the stack top is not of type 'long', but of type ':Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(941);
      ObjectType objectType0 = new ObjectType("Cac+hehit ");
      OperandStack operandStack0 = new OperandStack(941, objectType0);
      LocalVariables localVariables0 = new LocalVariables(941);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(941, 941);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      D2F d2F0 = new D2F();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-45);
      byteArray0[3] = (byte) (-45);
      ISHR iSHR0 = new ISHR();
      LCONST lCONST0 = new LCONST(0L);
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-45));
      short short0 = Constants.IMUL;
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPGT(iF_ICMPGT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPGT constraint violated: The value at the stack top is not of type 'int', but of type 'Cac+hehit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 31;
      ObjectType objectType0 = new ObjectType(":Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(31, objectType0);
      LocalVariables localVariables0 = new LocalVariables(31);
      localVariables0.clone();
      LocalVariables localVariables1 = new LocalVariables(31);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame.setThis((UninitializedObjectType) null);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      InstructionList instructionList0 = new InstructionList();
      instructionList0.copy();
      IREM iREM0 = new IREM();
      LDIV lDIV0 = new LDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDIV(lDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LDIV constraint violated: The value at the stack top is not of type 'long', but of type ':Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      F2L f2L0 = new F2L();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(959);
      ObjectType objectType0 = new ObjectType("Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(14, objectType0);
      LocalVariables localVariables0 = new LocalVariables(14);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Class<IDIV>[] classArray0 = (Class<IDIV>[]) Array.newInstance(Class.class, 2);
      Class<IDIV> class0 = IDIV.class;
      classArray0[0] = class0;
      Class<IDIV> class1 = IDIV.class;
      classArray0[1] = class1;
      Type.getTypes(classArray0);
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      LCONST lCONST0 = new LCONST(0L);
      DRETURN dRETURN0 = (DRETURN)InstructionConstants.DRETURN;
      ARETURN aRETURN0 = new ARETURN();
      instConstraintVisitor0.visitARETURN(aRETURN0);
      assertEquals("areturn", aRETURN0.getName());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ObjectType objectType0 = new ObjectType(":Cac+he h!z ");
      OperandStack operandStack0 = new OperandStack(15, objectType0);
      LocalVariables localVariables0 = new LocalVariables(15);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      InstructionList instructionList0 = new InstructionList();
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(127);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINSTANCEOF(iNSTANCEOF0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      F2L f2L0 = new F2L();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("Cache hit ");
      OperandStack operandStack0 = new OperandStack(553, objectType0);
      operandStack0.getClone();
      LocalVariables localVariables0 = new LocalVariables(1804);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      objectType0.isCastableTo((Type) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LALOAD lALOAD0 = new LALOAD();
      DCMPG dCMPG0 = new DCMPG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPG(dCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPG constraint violated: The value at the stack top is not of type 'double', but of type 'Cache hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(949);
      ObjectType objectType0 = new ObjectType("/n_4D@\"V(");
      OperandStack operandStack0 = new OperandStack(949, objectType0);
      OperandStack operandStack1 = new OperandStack(949);
      LocalVariables localVariables0 = new LocalVariables(949);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      D2F d2F0 = new D2F();
      InstructionList instructionList0 = new InstructionList();
      instructionList0.insert((Instruction) d2F0);
      instructionList0.insert((Instruction) d2F0, (Instruction) dASTORE0);
      InstructionList instructionList1 = new InstructionList();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DSUB dSUB0 = new DSUB();
      dSUB0.toString();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDSUB(dSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DSUB constraint violated: The value at the stack top is not of type 'double', but of type '.n_4D@\"V('.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      F2L f2L0 = new F2L();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(959);
      ObjectType objectType0 = new ObjectType(":Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(15, objectType0);
      LocalVariables localVariables0 = new LocalVariables(15);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      IREM iREM0 = new IREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIREM(iREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IREM constraint violated: The value at the stack top is not of type 'int', but of type ':Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(941);
      ObjectType objectType0 = new ObjectType("Cac+he hit ");
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      OperandStack operandStack0 = new OperandStack(941, objectType0);
      LocalVariables localVariables0 = new LocalVariables(941);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      D2F d2F0 = new D2F();
      ISHR iSHR0 = new ISHR();
      LCONST lCONST0 = new LCONST(0L);
      DUP dUP0 = new DUP();
      instConstraintVisitor0.visitDUP(dUP0);
      ISTORE iSTORE0 = null;
      try {
        iSTORE0 = new ISTORE((-1716));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal value: -1716
         //
         verifyException("org.apache.bcel.generic.LocalVariableInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      F2L f2L0 = new F2L();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(958);
      ObjectType objectType0 = new ObjectType(":Cac+hehit ");
      OperandStack operandStack0 = new OperandStack(15, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack0.merge(operandStack1);
      LocalVariables localVariables0 = new LocalVariables(958);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame1);
      DASTORE dASTORE0 = new DASTORE();
      D2F d2F0 = new D2F();
      IFLE iFLE0 = new IFLE((InstructionHandle) null);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFLE0);
      InstructionList instructionList1 = instructionList0.copy();
      IFLE iFLE1 = new IFLE((InstructionHandle) null);
      instructionList0.append(instructionList1);
      ISUB iSUB0 = new ISUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISUB(iSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISUB constraint violated: The value at the stack top is not of type 'int', but of type ':Cac+hehit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("7$2CP");
      OperandStack operandStack0 = new OperandStack(61, objectType0);
      LocalVariables localVariables0 = new LocalVariables(61);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      LDIV lDIV0 = new LDIV();
      DADD dADD0 = new DADD();
      L2D l2D0 = new L2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2D(l2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2D constraint violated: The value at the stack top is not of type 'long', but of type '7$2CP'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(949);
      ObjectType objectType0 = new ObjectType("/n_4D@\"V(");
      OperandStack operandStack0 = new OperandStack(949, objectType0);
      OperandStack operandStack1 = new OperandStack(949);
      LocalVariables localVariables0 = new LocalVariables(949);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      D2F d2F0 = new D2F();
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      d2F0.getType(constantPoolGen0);
      instructionList0.insert((Instruction) d2F0);
      instructionList0.insert((Instruction) d2F0, (Instruction) dASTORE0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DSUB dSUB0 = new DSUB();
      IASTORE iASTORE0 = new IASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIASTORE(iASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IASTORE constraint violated: The value at the stack top is not of type 'int', but of type '.n_4D@\"V('.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("");
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      OperandStack operandStack0 = new OperandStack(951, objectType0);
      operandStack0.getClone();
      LocalVariables localVariables0 = new LocalVariables(951);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(951, 951);
      frame0.toString();
      ReturnaddressType returnaddressType0 = ReturnaddressType.NO_TARGET;
      objectType0.isCastableTo(returnaddressType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      byte[] byteArray0 = new byte[5];
      ISHR iSHR0 = new ISHR();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      L2F l2F0 = new L2F();
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      FSTORE fSTORE0 = new FSTORE(4029);
      Frame frame2 = new Frame(9, 9);
      IF_ICMPLE iF_ICMPLE0 = new IF_ICMPLE((InstructionHandle) null);
      iF_ICMPLE0.updateTarget((InstructionHandle) null, (InstructionHandle) null);
      iF_ICMPLE0.setTarget((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLE(iF_ICMPLE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPLE constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      F2L f2L0 = new F2L();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(959);
      ObjectType objectType0 = new ObjectType(":Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(959, objectType0);
      LocalVariables localVariables0 = new LocalVariables(959);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      localVariables0.toString();
      Frame frame1 = frame0.getClone();
      frame1.clone();
      Frame.getThis();
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.merge(localVariables1);
      operandStack0.toString();
      IRETURN iRETURN0 = new IRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIRETURN(iRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IRETURN constraint violated: The value at the stack top is not of type 'int', but of type ':Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(943);
      ObjectType objectType0 = ObjectType.getInstance("Cache hDGit ");
      OperandStack operandStack0 = new OperandStack(943, objectType0);
      OperandStack operandStack1 = new OperandStack(943, objectType0);
      LocalVariables localVariables0 = new LocalVariables(943);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Class<AALOAD> class0 = AALOAD.class;
      Type.getType(class0);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FADD fADD0 = new FADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFADD(fADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FADD constraint violated: The value at the stack top is not of type 'float', but of type 'Cache hDGit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      F2L f2L0 = new F2L();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(958);
      ObjectType objectType0 = new ObjectType(":Cac+hehit ");
      OperandStack operandStack0 = new OperandStack(15, objectType0);
      LocalVariables localVariables0 = new LocalVariables(15);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      D2F d2F0 = new D2F();
      ALOAD aLOAD0 = new ALOAD(15);
      FMUL fMUL0 = new FMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFMUL(fMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FMUL constraint violated: The value at the stack top is not of type 'float', but of type ':Cac+hehit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType0 = ObjectType.getInstance("[[Sf-B~REVcc\"7\"Op0");
      OperandStack operandStack0 = new OperandStack(15, objectType0);
      LocalVariables localVariables0 = new LocalVariables(959);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      Object object0 = frame0.clone();
      Frame.setThis((UninitializedObjectType) null);
      localVariables1.getClone();
      OperandStack operandStack1 = new OperandStack(15);
      Frame frame1 = new Frame(localVariables1, operandStack1);
      object0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      D2F d2F0 = new D2F();
      D2L d2L0 = new D2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2L(d2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2L constraint violated: The value at the stack top is not of type 'double', but of type '[[Sf-B~REVcc\"7\"Op0'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(941);
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(2758, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2758);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.merge(localVariables1);
      localVariables0.getClone();
      LocalVariables localVariables2 = new LocalVariables(470);
      Frame frame0 = new Frame(localVariables2, operandStack0);
      Frame frame1 = frame0.getClone();
      frame1.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      localVariables2.getClone();
      DASTORE dASTORE0 = new DASTORE();
      instConstraintVisitor0.setFrame(frame1);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      aRRAYLENGTH0.toString(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LXOR lXOR0 = new LXOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLXOR(lXOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LXOR constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectType objectType0 = new ObjectType(":Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(15, objectType0);
      LocalVariables localVariables0 = new LocalVariables(15);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      localVariables0.merge(localVariables0);
      Frame.getThis();
      F2D f2D0 = new F2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2D(f2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2D constraint violated: The value at the stack top is not of type 'float', but of type ':Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      F2L f2L0 = new F2L();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(920);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType.getInstance("vMdDH0]??HM*r9>");
      OperandStack operandStack0 = new OperandStack(14);
      LocalVariables localVariables0 = new LocalVariables(920);
      operandStack0.clear();
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.merge(localVariables0);
      operandStack0.toString();
      localVariables0.merge(localVariables1);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      ConstantInteger constantInteger0 = new ConstantInteger(14);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      FSUB fSUB0 = new FSUB();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      FSTORE fSTORE0 = new FSTORE(14);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(fSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FSTORE constraint violated: Cannot STORE: Stack to read from is empty.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      F2L f2L0 = new F2L();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(920);
      ObjectType objectType0 = new ObjectType("Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(920, objectType0);
      LocalVariables localVariables0 = new LocalVariables(920);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.merge(localVariables0);
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      InstructionList instructionList0 = new InstructionList();
      instructionList0.insert((Instruction) iNVOKEDYNAMIC0);
      instructionList0.insert((Instruction) iNVOKEDYNAMIC0, (Instruction) iNVOKEDYNAMIC0);
      DASTORE dASTORE0 = new DASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ACMPNE((IF_ACMPNE) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(943);
      ObjectType objectType0 = ObjectType.getInstance("Z");
      OperandStack operandStack0 = new OperandStack(943, objectType0);
      OperandStack operandStack1 = new OperandStack(943, objectType0);
      LocalVariables localVariables0 = new LocalVariables(943);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      localVariables0.getClone();
      ObjectType.getInstance("Z");
      Frame frame1 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      ILOAD iLOAD0 = new ILOAD(943);
      // Undeclared exception!
      try { 
        iLOAD0.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ILOAD constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(959);
      ObjectType objectType0 = new ObjectType(":Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(17, objectType0);
      LocalVariables localVariables0 = new LocalVariables(17);
      localVariables0.toString();
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack0.merge(operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDASTORE(dASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DASTORE constraint violated: The value at the stack top is not of type 'double', but of type ':Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(14, objectType0);
      LocalVariables localVariables0 = new LocalVariables(920);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.merge(localVariables0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      InstructionList instructionList0 = new InstructionList(dASTORE0);
      DUP dUP0 = new DUP();
      LUSHR lUSHR0 = new LUSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLUSHR(lUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LUSHR constraint violated: The value at the stack top is not of type 'int', but of type 'Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("Cac+e hit ");
      OperandStack operandStack0 = new OperandStack(935, objectType0);
      LocalVariables localVariables0 = new LocalVariables(935);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      localVariables0.merge(localVariables0);
      frame0.toString();
      Boolean boolean0 = new Boolean("Cac+e hit ");
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      DASTORE dASTORE1 = new DASTORE();
      D2F d2F0 = new D2F();
      LCONST lCONST0 = new LCONST(0L);
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, 77);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) dUP2_X1_0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      iFNONNULL0.copy();
      instConstraintVisitor0.visitIFNONNULL(iFNONNULL0);
      IFNULL iFNULL0 = new IFNULL(instructionHandle0);
      instConstraintVisitor0.visitIFNULL(iFNULL0);
      assertEquals("ifnull", iFNULL0.getName());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(943);
      ObjectType objectType0 = ObjectType.getInstance("Cac+he hit ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OperandStack operandStack0 = new OperandStack(943, objectType0);
      OperandStack operandStack1 = new OperandStack(943, objectType0);
      LocalVariables localVariables0 = new LocalVariables(943);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ALOAD aLOAD0 = new ALOAD(414);
      DCMPL dCMPL0 = new DCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPL(dCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPL constraint violated: The value at the stack top is not of type 'double', but of type 'Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(941);
      ObjectType objectType0 = ObjectType.getInstance("Cac+he hit ");
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      OperandStack operandStack0 = new OperandStack(941, objectType0);
      LocalVariables localVariables0 = new LocalVariables(941);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(941, 941);
      frame0.equals(operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      D2F d2F0 = new D2F();
      LOR lOR0 = new LOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLOR(lOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LOR constraint violated: The value at the stack top is not of type 'long', but of type 'Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(959);
      ObjectType objectType0 = ObjectType.getInstance(":Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(959, objectType0);
      LocalVariables localVariables0 = new LocalVariables(959);
      String string0 = localVariables0.toString();
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, string0);
      I2B i2B0 = new I2B();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2B(i2B0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2B constraint violated: The value at the stack top is not of type 'int', but of type ':Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(941);
      ObjectType objectType0 = ObjectType.getInstance("Cac+he hit ");
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      OperandStack operandStack0 = new OperandStack(941, objectType0);
      OperandStack operandStack1 = new OperandStack(941, objectType0);
      LocalVariables localVariables0 = new LocalVariables(941);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(941, 941);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      D2F d2F0 = new D2F();
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      POP2 pOP2_0 = new POP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPOP2(pOP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction POP2 constraint violated: Stack top size should be 2 but stack top is 'Cac+he hit ' of size '1'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(941);
      ObjectType objectType0 = ObjectType.getInstance("Ca+he hiT ");
      OperandStack operandStack0 = new OperandStack(941, objectType0);
      OperandStack operandStack1 = new OperandStack(941, objectType0);
      LocalVariables localVariables0 = new LocalVariables(941);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(941, 941);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      D2F d2F0 = new D2F();
      LNEG lNEG0 = new LNEG();
      LNEG lNEG1 = new LNEG();
      lNEG0.toString();
      lNEG0.toString(true);
      LNEG lNEG2 = new LNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLNEG(lNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LNEG constraint violated: The value at the stack top is not of type 'long', but of type 'Ca+he hiT '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("Cache hDGit ");
      OperandStack operandStack0 = new OperandStack(943, objectType0);
      OperandStack operandStack1 = new OperandStack(943, objectType0);
      LocalVariables localVariables0 = new LocalVariables(943);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LADD lADD0 = new LADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLADD(lADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LADD constraint violated: The value at the stack top is not of type 'long', but of type 'Cache hDGit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ObjectType objectType0 = new ObjectType(":Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(15, objectType0);
      LocalVariables localVariables0 = new LocalVariables(15);
      localVariables0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DASTORE dASTORE0 = new DASTORE();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      D2F d2F0 = new D2F();
      instConstraintVisitor0.visitICONST((ICONST) null);
      FASTORE fASTORE0 = new FASTORE();
      NOP nOP0 = new NOP();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      nOP0.toString(constantPool0);
      int int0 = 379;
      NEW nEW0 = new NEW(379);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCPInstruction(nEW0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(905);
      ObjectType objectType0 = new ObjectType("/n_4D@\"V(");
      OperandStack operandStack0 = new OperandStack(905, objectType0);
      OperandStack operandStack1 = new OperandStack(905);
      LocalVariables localVariables0 = new LocalVariables(905);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      D2F d2F0 = new D2F();
      dASTORE0.toString();
      InstructionList instructionList0 = new InstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) d2F0);
      IFLE iFLE0 = new IFLE(instructionHandle0);
      InstructionList instructionList1 = new InstructionList((BranchInstruction) iFLE0);
      FCONST fCONST0 = new FCONST(0.0F);
      ASTORE aSTORE0 = new ASTORE(905);
      DASTORE dASTORE1 = new DASTORE();
      IFEQ iFEQ0 = new IFEQ(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFEQ(iFEQ0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFEQ constraint violated: The value at the stack top is not of type 'int', but of type '.n_4D@\"V('.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      F2L f2L0 = new F2L();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(959);
      ObjectType objectType0 = new ObjectType("Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(14, objectType0);
      objectType0.toString();
      LocalVariables localVariables0 = new LocalVariables(14);
      FileSystemHandling.shouldAllThrowIOExceptions();
      localVariables0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      D2F d2F0 = new D2F();
      FNEG fNEG0 = new FNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFNEG(fNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FNEG constraint violated: The value at the stack top is not of type 'float', but of type 'Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      F2L f2L0 = new F2L();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(896);
      ObjectType objectType0 = new ObjectType("Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(14, objectType0);
      LocalVariables localVariables0 = new LocalVariables(896);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame1);
      Class<IASTORE>[] classArray0 = (Class<IASTORE>[]) Array.newInstance(Class.class, 6);
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(7);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitANEWARRAY(aNEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ANEWARRAY constraint violated: The 'count' at the stack top is not of type 'int' but of type 'Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "Ca+h hit ";
      ObjectType objectType0 = ObjectType.getInstance("Ca+h hit ");
      Character.getName(79);
      OperandStack operandStack0 = new OperandStack(79, objectType0);
      LocalVariables localVariables0 = new LocalVariables(79);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      Boolean boolean0 = new Boolean(true);
      Frame frame2 = new Frame(79, 79);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      DASTORE dASTORE1 = new DASTORE();
      InstructionList instructionList0 = new InstructionList(dASTORE0);
      InstructionList instructionList1 = new InstructionList();
      instructionList1.copy();
      instructionList0.insert((Instruction) dASTORE1);
      instructionList0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      IUSHR iUSHR0 = new IUSHR();
      FDIV fDIV0 = new FDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFDIV(fDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FDIV constraint violated: The value at the stack top is not of type 'float', but of type 'Ca+h hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      F2L f2L0 = new F2L();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(943);
      ObjectType objectType0 = ObjectType.getInstance("Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(943, objectType0);
      OperandStack operandStack1 = new OperandStack(943, objectType0);
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      D2F d2F0 = new D2F();
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DLOAD dLOAD0 = new DLOAD(943);
      instConstraintVisitor0.visitDLOAD(dLOAD0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDDIV((DDIV) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(980);
      ObjectType objectType0 = new ObjectType("1jac+he hit ");
      OperandStack operandStack0 = new OperandStack(980, objectType0);
      LocalVariables localVariables0 = new LocalVariables(14);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      Pattern.quote("1jac+he hit ");
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IXOR iXOR0 = new IXOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIXOR(iXOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IXOR constraint violated: The value at the stack top is not of type 'int', but of type '1jac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("Cac+he hit ");
      ObjectType objectType1 = new ObjectType("Cac+he hit ");
      ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(980, objectType1);
      LocalVariables localVariables0 = new LocalVariables(920);
      operandStack0.clone();
      LocalVariables localVariables1 = new LocalVariables(980);
      LocalVariables localVariables2 = new LocalVariables(994);
      localVariables2.getClone();
      localVariables2.getClone();
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack1);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      IOR iOR0 = new IOR();
      DADD dADD0 = new DADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDADD(dADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DADD constraint violated: The value at the stack top is not of type 'double', but of type 'Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(941);
      ObjectType objectType0 = ObjectType.getInstance("Cac+he hit ");
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      OperandStack operandStack0 = new OperandStack(941, objectType0);
      OperandStack operandStack1 = new OperandStack(941, objectType0);
      LocalVariables localVariables0 = new LocalVariables(941);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      Frame frame1 = new Frame(941, 941);
      IRETURN iRETURN0 = new IRETURN();
      frame0.equals(iRETURN0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      D2F d2F0 = new D2F();
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      LOR lOR0 = new LOR();
      POP pOP0 = new POP();
      instConstraintVisitor0.visitPOP(pOP0);
      assertEquals(1, pOP0.getLength());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectType objectType0 = new ObjectType(":Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(15, objectType0);
      LocalVariables localVariables0 = new LocalVariables(15);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      localVariables0.merge(localVariables0);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      Frame.getThis();
      frame0.clone();
      Frame.setThis((UninitializedObjectType) null);
      DMUL dMUL0 = new DMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDMUL(dMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DMUL constraint violated: The value at the stack top is not of type 'double', but of type ':Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(943);
      ObjectType.getInstance("Cache hDGit ");
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame0 = new Frame(943, 943);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      Frame.getThis();
      frame0.clone();
      Boolean boolean0 = new Boolean(true);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      D2F d2F0 = new D2F();
      IINC iINC0 = new IINC(3638, 223);
      IINC iINC1 = new IINC((byte)4, 3638);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ObjectType.getInstance("Ca+h6 hi0t ");
      Character.getName(79);
      OperandStack operandStack0 = new OperandStack(79);
      LocalVariables localVariables0 = new LocalVariables(79);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Pattern.quote("LATIN CAPITAL LETTER O");
      Frame frame1 = new Frame(79, 79);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      frame0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      D2F d2F0 = new D2F();
      IINC iINC0 = new IINC(46, 46);
      iINC0.toString();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not of type int but of type <unknown object>.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "q%A,$oUvQ=zoa5#Haj");
      ObjectType objectType0 = new ObjectType("q%A,$oUvQ=zoa5#Haj");
      OperandStack operandStack0 = new OperandStack(17, objectType0);
      LocalVariables localVariables0 = new LocalVariables(17);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ALOAD aLOAD0 = new ALOAD(17);
      instConstraintVisitor0.visitALOAD(aLOAD0);
      LRETURN lRETURN0 = new LRETURN();
      DNEG dNEG0 = new DNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDNEG(dNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DNEG constraint violated: The value at the stack top is not of type 'double', but of type 'q%A,$oUvQ=zoa5#Haj'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(949);
      ObjectType objectType0 = new ObjectType("/n_4D@yV(");
      OperandStack operandStack0 = new OperandStack(949, objectType0);
      operandStack0.clone();
      OperandStack operandStack1 = new OperandStack(949);
      LocalVariables localVariables0 = new LocalVariables(949);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      DASTORE dASTORE0 = new DASTORE();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      D2F d2F0 = new D2F();
      ASTORE aSTORE0 = (ASTORE)InstructionConstants.ASTORE_1;
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      operandStack0.push(objectType0);
      ILOAD iLOAD0 = new ILOAD(949);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE1 = new DASTORE();
      D2F d2F1 = new D2F();
      LREM lREM0 = new LREM();
      ASTORE aSTORE1 = new ASTORE(949);
      instConstraintVisitor0.visitStoreInstruction(aSTORE1);
      assertEquals(4, aSTORE1.getLength());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      F2L f2L0 = new F2L();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(943);
      ObjectType objectType0 = ObjectType.getInstance("Cc+he it");
      OperandStack operandStack0 = new OperandStack(943, objectType0);
      OperandStack operandStack1 = new OperandStack(943, objectType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      frame0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      Frame frame1 = new Frame((LocalVariables) null, operandStack1);
      DRETURN dRETURN0 = new DRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDRETURN(dRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DRETURN constraint violated: The value at the stack top is not of type 'double', but of type 'Cc+he it'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      F2L f2L0 = new F2L();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(958);
      ObjectType objectType0 = ObjectType.getInstance(":CaXc+hehit ");
      OperandStack operandStack0 = new OperandStack(958, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack0.merge(operandStack1);
      LocalVariables localVariables0 = new LocalVariables(958);
      LocalVariables localVariables1 = localVariables0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      localVariables1.clone();
      Frame frame1 = new Frame(localVariables0, operandStack1);
      NEWARRAY nEWARRAY0 = new NEWARRAY((byte)106);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitNEWARRAY(nEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction NEWARRAY constraint violated: The value at the stack top is not of type 'int', but of type ':CaXc+hehit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      F2L f2L0 = new F2L();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(959);
      ObjectType objectType0 = ObjectType.getInstance(":Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(959, objectType0);
      LocalVariables localVariables0 = new LocalVariables(959);
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DASTORE dASTORE0 = new DASTORE();
      LRETURN lRETURN0 = new LRETURN();
      instConstraintVisitor0.setFrame(frame0);
      FASTORE fASTORE0 = new FASTORE();
      DUP_X2 dUP_X2_0 = new DUP_X2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP_X2(dUP_X2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      F2L f2L0 = new F2L();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(943);
      ObjectType objectType0 = new ObjectType("Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(943, objectType0);
      OperandStack operandStack1 = new OperandStack(943, objectType0);
      LocalVariables localVariables0 = new LocalVariables(943);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      objectType0.isCastableTo((Type) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      D2F d2F0 = new D2F();
      I2C i2C0 = new I2C();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2F(d2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2F constraint violated: The value at the stack top is not of type 'double', but of type 'Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("5");
      String string0 = Constants.ILLEGAL_OPCODE;
      OperandStack operandStack0 = new OperandStack(941, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack0.merge(operandStack1);
      LocalVariables localVariables0 = new LocalVariables(941);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      frame0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      InstructionList instructionList0 = new InstructionList();
      DUP dUP0 = new DUP();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) dUP0);
      instructionList0.insert((Instruction) dUP0, (Instruction) dUP0);
      IFLE iFLE0 = new IFLE(instructionHandle0);
      // Undeclared exception!
      try { 
        iFLE0.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFLE constraint violated: The value at the stack top is not of type 'int', but of type '5'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(14, objectType0);
      LocalVariables localVariables0 = new LocalVariables(920);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.merge(localVariables0);
      localVariables0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      InstructionList instructionList0 = new InstructionList(dASTORE0);
      LSHL lSHL0 = new LSHL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHL(lSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHL constraint violated: The value at the stack top is not of type 'int', but of type 'Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      F2L f2L0 = new F2L();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(959);
      ObjectType objectType0 = new ObjectType(":Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(15, objectType0);
      LocalVariables localVariables0 = new LocalVariables(15);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      InstructionList instructionList0 = new InstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) iNVOKEDYNAMIC0);
      instructionList0.insert((Instruction) iNVOKEDYNAMIC0, (Instruction) iNVOKEDYNAMIC0);
      IFLE iFLE0 = new IFLE(instructionHandle0);
      IFLE iFLE1 = new IFLE(instructionHandle0);
      InstructionList instructionList1 = new InstructionList();
      DUP dUP0 = new DUP();
      DUP dUP1 = new DUP();
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPEQ(iF_ICMPEQ0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPEQ constraint violated: The value at the stack top is not of type 'int', but of type ':Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "q%A,$oUvQ=Ozoa5#Haj");
      ObjectType objectType0 = new ObjectType("q%A,$oUvQ=Ozoa5#Haj");
      OperandStack operandStack0 = new OperandStack(12, objectType0);
      LocalVariables localVariables0 = new LocalVariables(12);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ALOAD aLOAD0 = new ALOAD(12);
      InstructionList instructionList0 = new InstructionList();
      localVariables0.merge(localVariables1);
      DUP dUP0 = new DUP();
      ISHR iSHR0 = new ISHR();
      L2I l2I0 = new L2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2I(l2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2I constraint violated: The value at the stack top is not of type 'long', but of type 'q%A,$oUvQ=Ozoa5#Haj'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(943);
      ObjectType objectType0 = ObjectType.getInstance("Z");
      OperandStack operandStack0 = new OperandStack(943, objectType0);
      OperandStack operandStack1 = new OperandStack(943, objectType0);
      LocalVariables localVariables0 = new LocalVariables(943);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      localVariables0.getClone();
      ObjectType.getInstance("Z");
      Frame frame1 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_2;
      // Undeclared exception!
      try { 
        iLOAD0.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ILOAD constraint violated: Read-Access on local variable 2 with unknown content.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(0);
      LocalVariables localVariables1 = localVariables0.getClone();
      int int0 = 108;
      ObjectType objectType0 = ObjectType.getInstance("|CyUhzQy%-i]^{+");
      OperandStack operandStack0 = new OperandStack(108, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      INEG iNEG0 = new INEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINEG(iNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction INEG constraint violated: The value at the stack top is not of type 'int', but of type '|CyUhzQy%-i]^{+'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(920);
      ObjectType objectType0 = new ObjectType("Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(920, objectType0);
      LocalVariables localVariables0 = new LocalVariables(920);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack0.merge(operandStack1);
      Frame.setThis(uninitializedObjectType0);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      IMPDEP1 iMPDEP1_0 = new IMPDEP1();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DLOAD dLOAD0 = new DLOAD(920);
      instConstraintVisitor0.setFrame(frame1);
      InstructionHandle instructionHandle0 = null;
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPNE(iF_ICMPNE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPNE constraint violated: The value at the stack top is not of type 'int', but of type 'Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      F2L f2L0 = new F2L();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(920);
      ObjectType objectType0 = new ObjectType("Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(14, objectType0);
      LocalVariables localVariables0 = new LocalVariables(920);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      localVariables0.getClone();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      operandStack0.getClone();
      Frame.setThis(uninitializedObjectType0);
      operandStack0.pop((-1));
      Frame frame1 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DLOAD dLOAD0 = new DLOAD(920);
      instConstraintVisitor0.setFrame(frame1);
      IOR iOR0 = new IOR();
      LMUL lMUL0 = new LMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLMUL(lMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LMUL constraint violated: The value at the stack top is not of type 'long', but of type 'Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("7$2CP");
      OperandStack operandStack0 = new OperandStack(61, objectType0);
      LocalVariables localVariables0 = new LocalVariables(61);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      ConstantFloat constantFloat0 = new ConstantFloat(1020.09717F);
      F2I f2I0 = new F2I();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      D2I d2I0 = new D2I();
      D2I d2I1 = new D2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2I(d2I1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2I constraint violated: The value at the stack top is not of type 'double', but of type '7$2CP'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "q%A,$oUvQ=zoa5#Haj");
      ObjectType objectType0 = new ObjectType("q%A,$oUvQ=zoa5#Haj");
      OperandStack operandStack0 = new OperandStack(17, objectType0);
      LocalVariables localVariables0 = new LocalVariables(17);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ALOAD aLOAD0 = new ALOAD(17);
      instConstraintVisitor0.visitALOAD(aLOAD0);
      LRETURN lRETURN0 = new LRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2I((F2I) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ObjectType.getInstance("7$2CP");
      LocalVariables localVariables0 = new LocalVariables(0);
      Pattern.quote("SENSITIVE");
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame0 = new Frame(1377, 67);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DSUB dSUB0 = new DSUB();
      D2F d2F0 = new D2F();
      RET rET0 = new RET(805);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitRET(rET0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction RET constraint violated: Expecting a ReturnaddressType in local variable 805.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(959);
      LocalVariables localVariables0 = new LocalVariables(882);
      LocalVariables localVariables1 = localVariables0.getClone();
      OperandStack operandStack0 = new OperandStack(15);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack1);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      frame0.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      D2F d2F0 = new D2F();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DLOAD dLOAD0 = new DLOAD(43);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE1 = new DASTORE();
      D2F d2F1 = new D2F();
      IFLE iFLE0 = new IFLE((InstructionHandle) null);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFLE0);
      InstructionList instructionList1 = new InstructionList();
      instructionList1.append(instructionList0);
      IINC iINC0 = new IINC(4336, 844);
      instConstraintVisitor0.visitLocalVariableInstruction(dLOAD0);
      DSUB dSUB0 = new DSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor1.visitDSUB(dSUB0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(935);
      ObjectType objectType0 = ObjectType.getInstance("Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(935, objectType0);
      LocalVariables localVariables0 = new LocalVariables(935);
      operandStack0.clone();
      LocalVariables localVariables1 = new LocalVariables(935);
      LocalVariables localVariables2 = localVariables1.getClone();
      localVariables1.getClone();
      Frame frame0 = new Frame(localVariables2, operandStack0);
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      DASTORE dASTORE0 = new DASTORE();
      IOR iOR0 = new IOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIOR(iOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IOR constraint violated: The value at the stack top is not of type 'int', but of type 'Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(14, objectType0);
      LocalVariables localVariables0 = new LocalVariables(920);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.merge(localVariables0);
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LNEG lNEG0 = new LNEG();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cac+he hit ");
      DUP dUP0 = new DUP();
      IUSHR iUSHR0 = new IUSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIUSHR(iUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IUSHR constraint violated: The value at the stack top is not of type 'int', but of type 'Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      F2L f2L0 = new F2L();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "laload");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("Cache hit ");
      OperandStack operandStack0 = new OperandStack(553, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1804);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      objectType0.isCastableTo((Type) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FCMPL fCMPL0 = new FCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPL(fCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPL constraint violated: The value at the stack top is not of type 'float', but of type 'Cache hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("/n_4D@yV(");
      OperandStack operandStack0 = new OperandStack(949, objectType0);
      ObjectType objectType1 = new ObjectType("/n_4D@yV(");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      operandStack0.push(objectType1);
      Frame frame0 = new Frame(949, (-857));
      frame0.getClone();
      LocalVariables localVariables0 = new LocalVariables(949);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      LocalVariables localVariables1 = new LocalVariables(949);
      localVariables1.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      DUP dUP0 = new DUP();
      LSUB lSUB0 = new LSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSUB(lSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSUB constraint violated: The value at the stack top is not of type 'long', but of type '.n_4D@yV('.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      F2L f2L0 = new F2L();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(890);
      ObjectType objectType0 = ObjectType.getInstance("Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(890);
      OperandStack operandStack1 = new OperandStack(890, objectType0);
      LocalVariables localVariables0 = new LocalVariables(890);
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      I2F i2F0 = new I2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2F(i2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2F constraint violated: The value at the stack top is not of type 'int', but of type 'Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(949);
      ObjectType objectType0 = new ObjectType("/n_4D@\"V(");
      OperandStack operandStack0 = new OperandStack(949, objectType0);
      OperandStack operandStack1 = new OperandStack(949);
      LocalVariables localVariables0 = new LocalVariables(949);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      D2F d2F0 = new D2F();
      InstructionList instructionList0 = new InstructionList();
      instructionList0.insert((Instruction) d2F0);
      InstructionList instructionList1 = new InstructionList();
      LASTORE lASTORE0 = new LASTORE();
      FSUB fSUB0 = new FSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFSUB(fSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FSUB constraint violated: The value at the stack top is not of type 'float', but of type '.n_4D@\"V('.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      F2L f2L0 = new F2L();
      ObjectType objectType0 = new ObjectType("Lac+he hit ");
      OperandStack operandStack0 = new OperandStack(14, objectType0);
      LocalVariables localVariables0 = new LocalVariables(920);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.merge(localVariables0);
      operandStack0.toString();
      localVariables0.clone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      InstructionList instructionList0 = new InstructionList();
      LASTORE lASTORE0 = new LASTORE();
      LASTORE lASTORE1 = new LASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLASTORE(lASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LASTORE constraint violated: The value at the stack top is not of type 'long', but of type 'Lac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "q%A,$oUvQ=zoa5#Haj");
      ObjectType objectType0 = new ObjectType("q%A,$oUvQ=zoa5#Haj");
      OperandStack operandStack0 = new OperandStack(17, objectType0);
      LocalVariables localVariables0 = new LocalVariables(17);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ALOAD aLOAD0 = new ALOAD(17);
      instConstraintVisitor0.visitALOAD(aLOAD0);
      CHECKCAST cHECKCAST0 = new CHECKCAST(17);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCHECKCAST(cHECKCAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("7$2CP");
      OperandStack operandStack0 = new OperandStack(61, objectType0);
      operandStack0.toString();
      LocalVariables localVariables0 = new LocalVariables(61);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY((byte)3, (short)943);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitMULTIANEWARRAY(mULTIANEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction MULTIANEWARRAY constraint violated: The '943' upper stack types should be 'int' but aren't.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("lVuUA\"ry");
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      OperandStack operandStack0 = new OperandStack(941, objectType0);
      LocalVariables localVariables0 = new LocalVariables(941);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMUL((IMUL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(935);
      ObjectType objectType0 = ObjectType.getInstance("Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(935, objectType0);
      LocalVariables localVariables0 = new LocalVariables(935);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      OperandStack operandStack1 = new OperandStack(1341, objectType0);
      operandStack1.clone();
      LocalVariables localVariables1 = new LocalVariables(935);
      LocalVariables localVariables2 = localVariables1.getClone();
      localVariables1.getClone();
      Frame frame1 = new Frame(localVariables2, operandStack0);
      Frame frame2 = frame1.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame2);
      DASTORE dASTORE0 = new DASTORE();
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitARRAYLENGTH(aRRAYLENGTH0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ARRAYLENGTH constraint violated: The 'arrayref' does not refer to an array but is of type Cac+he hit .
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      F2L f2L0 = new F2L();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(958);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType0 = new ObjectType(":Cac+hehit ");
      LocalVariables localVariables0 = new LocalVariables(18);
      localVariables0.getClone();
      MockFile mockFile0 = new MockFile(":Cac+hehit ", ":Cac+hehit ");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      FDIV fDIV0 = new FDIV();
      mockPrintStream0.print((Object) fDIV0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(18, 18);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantFieldref1.dump(dataOutputStream0);
      NOP nOP0 = new NOP();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitNOP(nOP0);
      JSR jSR0 = new JSR((InstructionHandle) null);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      instConstraintVisitor1.visitJSR(jSR0);
      ISHL iSHL0 = new ISHL();
      LSTORE lSTORE0 = null;
      try {
        lSTORE0 = new LSTORE((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal value: -1
         //
         verifyException("org.apache.bcel.generic.LocalVariableInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(959);
      ObjectType objectType0 = new ObjectType(":Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(15, objectType0);
      LocalVariables localVariables0 = new LocalVariables(15);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      InstructionList instructionList0 = new InstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) iNVOKEDYNAMIC0);
      instructionHandle0.getAttributes();
      InstructionHandle instructionHandle1 = instructionList0.insert((Instruction) iNVOKEDYNAMIC0, (Instruction) iNVOKEDYNAMIC0);
      instConstraintVisitor0.visitFLOAD((FLOAD) null);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      LNEG lNEG0 = new LNEG();
      lNEG0.toString(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)58;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      lNEG0.produceStack(constantPoolGen0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      lNEG0.toString(false);
      LNEG lNEG1 = new LNEG();
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ(instructionHandle1);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ACMPEQ(iF_ACMPEQ0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      F2L f2L0 = new F2L();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(920);
      ObjectType objectType0 = new ObjectType("Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(14, objectType0);
      LocalVariables localVariables0 = new LocalVariables(920);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.merge(localVariables0);
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      InstructionList instructionList0 = new InstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) iNVOKEDYNAMIC0);
      InstructionHandle instructionHandle1 = instructionList0.insert((Instruction) iNVOKEDYNAMIC0, (Instruction) iNVOKEDYNAMIC0);
      IFLE iFLE0 = new IFLE(instructionHandle1);
      IFLE iFLE1 = new IFLE(instructionHandle0);
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      instructionList0.copy();
      IDIV iDIV0 = new IDIV();
      instructionList0.insert((Instruction) iDIV0);
      DUP dUP0 = new DUP();
      FLOAD fLOAD0 = new FLOAD(920);
      instConstraintVisitor0.visitFLOAD(fLOAD0);
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE(instructionHandle1);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPGE(iF_ICMPGE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPGE constraint violated: The value at the stack top is not of type 'int', but of type 'Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ObjectType objectType0 = new ObjectType(":Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(15, objectType0);
      LocalVariables localVariables0 = new LocalVariables(15);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      frame0.getClone();
      DASTORE dASTORE0 = new DASTORE();
      localVariables0.merge(localVariables0);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      frame0.clone();
      DMUL dMUL0 = new DMUL();
      I2D i2D0 = new I2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2D(i2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2D constraint violated: The value at the stack top is not of type 'int', but of type ':Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      F2L f2L0 = new F2L();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(947);
      ObjectType objectType0 = ObjectType.getInstance("Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(947, objectType0);
      OperandStack operandStack1 = new OperandStack(947, objectType0);
      LocalVariables localVariables0 = new LocalVariables(947);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      objectType0.isCastableTo((Type) null);
      localVariables0.merge(localVariables1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      D2F d2F0 = new D2F();
      FASTORE fASTORE0 = new FASTORE();
      fASTORE0.toString(true);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFASTORE(fASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FASTORE constraint violated: The value at the stack top is not of type 'float', but of type 'Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      F2L f2L0 = new F2L();
      F2L f2L1 = new F2L();
      LocalVariables localVariables0 = new LocalVariables(946);
      OperandStack operandStack0 = new OperandStack(946);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ObjectType.getInstance(")kipjxxc(RZXw=Q2");
      OperandStack operandStack1 = new OperandStack((-3384));
      Frame frame1 = new Frame(localVariables0, operandStack1);
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      ILOAD iLOAD0 = (ILOAD)InstructionConstants.ILOAD_2;
      ILOAD iLOAD1 = new ILOAD(946);
      // Undeclared exception!
      try { 
        iLOAD1.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ILOAD constraint violated: Cannot produce 1 stack slots: only -3384 free stack slot(s) left.
         // Stack:
         // Slots used: 0 MaxStack: -3384.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(949);
      ObjectType objectType0 = new ObjectType("/n_4D@\"V(");
      OperandStack operandStack0 = new OperandStack(949, objectType0);
      OperandStack operandStack1 = new OperandStack(949);
      LocalVariables localVariables0 = new LocalVariables(949);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      IFGT iFGT0 = new IFGT((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGT(iFGT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFGT constraint violated: The value at the stack top is not of type 'int', but of type '.n_4D@\"V('.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = 0;
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong(0);
      OperandStack operandStack0 = new OperandStack(0);
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      ISHL iSHL0 = new ISHL();
      LDC2_W lDC2_W0 = new LDC2_W(0);
      lDC2_W0.setIndex(1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      instConstraintVisitor0.visitLDC2_W(lDC2_W0);
      ASTORE aSTORE0 = new ASTORE(1);
      // Undeclared exception!
      try { 
        instConstraintVisitor1.visitASTORE(aSTORE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      F2L f2L0 = new F2L();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(959);
      int int0 = 15;
      ObjectType objectType0 = new ObjectType(":Cac+he hit ");
      OperandStack operandStack0 = new OperandStack(15, objectType0);
      LocalVariables localVariables0 = new LocalVariables(15);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      frame0.clone();
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DASTORE dASTORE0 = new DASTORE();
      InstructionList instructionList0 = new InstructionList();
      DUP dUP0 = new DUP();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 15);
      PUSH pUSH1 = new PUSH(constantPoolGen0, (double) 15);
      InstructionHandle instructionHandle0 = instructionList0.insert((CompoundInstruction) pUSH1);
      IFGE iFGE0 = new IFGE(instructionHandle0);
      IFGE iFGE1 = new IFGE(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGE(iFGE1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFGE constraint violated: The value at the stack top is not of type 'int', but of type ':Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("l&q>{b");
      OperandStack operandStack0 = new OperandStack(929, objectType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LocalVariables localVariables0 = new LocalVariables(929);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      D2F d2F0 = new D2F();
      LREM lREM0 = new LREM();
      ASTORE aSTORE0 = new ASTORE(929);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)58;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      POP2 pOP2_0 = new POP2();
      POP2 pOP2_1 = new POP2();
      DREM dREM0 = new DREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDREM(dREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DREM constraint violated: The value at the stack top is not of type 'double', but of type 'l&q>{b'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("Cac+he hit ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack(14, objectType0);
      LocalVariables localVariables0 = new LocalVariables(920);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.clone();
      localVariables1.merge(localVariables0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.clone();
      Frame frame1 = (Frame)frame0.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      F2L f2L0 = new F2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2L(f2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2L constraint violated: The value at the stack top is not of type 'float', but of type 'Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "q%A,$oUvQ=zoa5#Haj");
      ObjectType objectType0 = new ObjectType("q%A,$oUvQ=zoa5#Haj");
      OperandStack operandStack0 = new OperandStack(17, objectType0);
      LocalVariables localVariables0 = new LocalVariables(17);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LCONST lCONST0 = new LCONST(0L);
      instConstraintVisitor0.visitLCONST(lCONST0);
      SASTORE sASTORE0 = new SASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSASTORE(sASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction SASTORE constraint violated: The value at the stack top is not of type 'int', but of type 'q%A,$oUvQ=zoa5#Haj'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(949);
      ObjectType objectType0 = new ObjectType("/n_4D@\"V(");
      OperandStack operandStack0 = new OperandStack(949, objectType0);
      OperandStack operandStack1 = new OperandStack(949);
      LocalVariables localVariables0 = new LocalVariables(949);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      D2F d2F0 = new D2F();
      InstructionList instructionList0 = new InstructionList();
      instructionList0.insert((Instruction) d2F0);
      instructionList0.insert((Instruction) d2F0, (Instruction) dASTORE0);
      InstructionList instructionList1 = new InstructionList();
      IDIV iDIV0 = new IDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIDIV(iDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IDIV constraint violated: The value at the stack top is not of type 'int', but of type '.n_4D@\"V('.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(949);
      ObjectType objectType0 = new ObjectType("/n_4D@yV(");
      OperandStack operandStack0 = new OperandStack(949, objectType0);
      operandStack0.clone();
      operandStack0.getClone();
      LocalVariables localVariables0 = new LocalVariables(949);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.getClone();
      DASTORE dASTORE0 = new DASTORE();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      D2F d2F0 = new D2F();
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      operandStack0.push(objectType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE1 = new DASTORE();
      D2F d2F1 = new D2F();
      LREM lREM0 = new LREM();
      ASTORE aSTORE0 = new ASTORE(949);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      mONITOREXIT0.toString();
      instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      DUP2 dUP2_0 = new DUP2();
      instConstraintVisitor0.visitDUP2(dUP2_0);
      assertEquals(1, dUP2_0.getLength());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(941);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ObjectType objectType0 = ObjectType.getInstance("Cac+he hit ");
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectType0.toString();
      OperandStack operandStack0 = new OperandStack(941, objectType0);
      OperandStack operandStack1 = new OperandStack(941, objectType0);
      LocalVariables localVariables0 = new LocalVariables(941);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      FRETURN fRETURN0 = new FRETURN();
      FRETURN fRETURN1 = new FRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFRETURN(fRETURN1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FRETURN constraint violated: The value at the stack top is not of type 'float', but of type 'Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(941);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ObjectType objectType0 = ObjectType.getInstance("Cac+he hit ");
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      OperandStack operandStack0 = new OperandStack(941, objectType0);
      OperandStack operandStack1 = new OperandStack(941, objectType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(941);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      frame0.clone();
      Frame frame1 = new Frame(941, 941);
      IRETURN iRETURN0 = new IRETURN();
      frame0.equals(iRETURN0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      InstructionList instructionList0 = new InstructionList();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 868.70457);
      InstructionList instructionList1 = new InstructionList(pUSH0);
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList1);
      IFNE iFNE0 = new IFNE(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFNE(iFNE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFNE constraint violated: The value at the stack top is not of type 'int', but of type 'Cac+he hit '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("Cac+he hit ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OperandStack operandStack0 = new OperandStack(943, objectType0);
      OperandStack operandStack1 = new OperandStack(943, objectType0);
      LocalVariables localVariables0 = new LocalVariables(943);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ALOAD aLOAD0 = new ALOAD(414);
      DCMPL dCMPL0 = new DCMPL();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)98;
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      Frame frame1 = frame0.getClone();
      Frame frame2 = new Frame(localVariables0, operandStack1);
      InstConstraintVisitor instConstraintVisitor2 = new InstConstraintVisitor();
      instConstraintVisitor2.setFrame(frame1);
      DUP_X1 dUP_X1_0 = new DUP_X1();
      instConstraintVisitor2.visitDUP_X1(dUP_X1_0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("Cac+he hit ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OperandStack operandStack0 = new OperandStack(943, objectType0);
      OperandStack operandStack1 = new OperandStack(943, objectType0);
      LocalVariables localVariables0 = new LocalVariables(943);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ALOAD aLOAD0 = new ALOAD(414);
      DCMPL dCMPL0 = new DCMPL();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE0 = new DASTORE();
      D2F d2F0 = new D2F();
      ISHR iSHR0 = new ISHR();
      SWAP sWAP0 = new SWAP();
      instConstraintVisitor0.visitSWAP(sWAP0);
      ASTORE aSTORE0 = new ASTORE(3487);
      ASTORE aSTORE1 = new ASTORE(414);
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      instConstraintVisitor1.visitACONST_NULL(aCONST_NULL0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = 943;
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(943);
      ObjectType objectType0 = ObjectType.getInstance("Z");
      OperandStack operandStack0 = new OperandStack(943, objectType0);
      operandStack0.equals(iNVOKEDYNAMIC0);
      LocalVariables localVariables0 = new LocalVariables(3);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      localVariables0.getClone();
      ObjectType.getInstance("Z");
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      operandStack0.push(objectType0);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X1((DUP2_X1) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(949);
      ObjectType objectType0 = new ObjectType("/n_4D@yV(");
      OperandStack operandStack0 = new OperandStack(949, objectType0);
      operandStack0.clone();
      OperandStack operandStack1 = new OperandStack(949, objectType0);
      LocalVariables localVariables0 = new LocalVariables(949);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.getClone();
      DASTORE dASTORE0 = new DASTORE();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      D2F d2F0 = new D2F();
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      operandStack0.push(objectType0);
      operandStack0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DASTORE dASTORE1 = new DASTORE();
      D2F d2F1 = new D2F();
      LREM lREM0 = new LREM();
      ASTORE aSTORE0 = new ASTORE(949);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X2(dUP2_X2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
