/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 09:55:02 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.math.BigDecimal;
import java.nio.CharBuffer;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      String string0 = "0PHty8elu31e&=)";
      StringReader stringReader0 = new StringReader("0PHty8elu31e&=)");
      int int0 = (-2004890542);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (-2004890542));
      jSONReaderScanner0.resetStringPosition();
      char[] charArray1 = new char[5];
      charArray1[0] = 'T';
      charArray1[1] = 'S';
      charArray1[2] = 'N';
      charArray1[3] = 'N';
      charArray1[4] = 'S';
      Class<Integer> class0 = Integer.class;
      jSONReaderScanner0.scanFieldStringArray(charArray1, class0);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanDouble('*');
      String string1 = null;
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("jvdc");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      int int0 = 26;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("l$#+4i/36J\"eJO0z");
      char char0 = '4';
      jSONScanner0.scanString('4');
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char char0 = '2';
      int int0 = (-1973);
      JSONScanner jSONScanner0 = new JSONScanner("'Ynf>'O.gITr)uV;511", (-1973));
      jSONScanner0.scanString('2');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'Ynf>'O.gITr)uV;511", (-1));
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.nextIdent();
      String string0 = "syntax error";
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 'O.gI
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[4] = 'A';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("jvDC~<lU");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      int int0 = 26;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"jvDC\", 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      jSONReaderScanner0.hasSpecial = false;
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.matchStat = 7;
      jSONReaderScanner0.skipWhitespace();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = '\'';
      charArray0[2] = 'X';
      charArray0[3] = '1';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      boolean boolean0 = jSONReaderScanner0.isEnabled(24);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+fxGIJnT;>K", 0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanDouble('<');
      jSONReaderScanner0.isEnabled((-1841496563), (-1841496563));
      JSONScanner jSONScanner0 = new JSONScanner("+fxGIJnT;>K", 0);
      JSONScanner jSONScanner1 = new JSONScanner("+fxGIJnT;>K", 0);
      int int0 = jSONReaderScanner0.intValue();
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rtY@\"~8)ApVl4|B!");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('w');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0, (-1));
      jSONReaderScanner0.isBlankInput();
      Feature feature0 = Feature.IgnoreAutoType;
      boolean boolean0 = jSONReaderScanner1.isEnabled(feature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("illegal state. ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nnnnnnnn");
      jSONReaderScanner0.scanBoolean('S');
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanUUID('!');
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanString('-');
      jSONReaderScanner0.scanUUID('[');
      char[] charArray0 = new char[2];
      charArray0[0] = 'k';
      charArray0[1] = '!';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("info ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 26);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.nextIdent();
      StringReader stringReader1 = new StringReader("");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner1.nextToken(26);
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanUUID('P');
      jSONReaderScanner1.intValue();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("info ");
      jSONReaderScanner1.putChar('Z');
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("=o");
      jSONReaderScanner1.getCurrent();
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      jSONReaderScanner2.matchField(charArray0);
      assertEquals(989, jSONReaderScanner2.getFeatures());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("d%Kb*Uw#z");
      char[] charArray0 = new char[9];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      charArray0[3] = '%';
      charArray0[4] = '%';
      charArray0[5] = 'V';
      charArray0[6] = 'a';
      charArray0[7] = 'o';
      charArray0[8] = 'a';
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.intValue();
      jSONScanner0.getCalendar();
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-568));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("?N%/I%oXs`_&he'~7");
      JSONScanner jSONScanner0 = new JSONScanner("2}qln[,", 0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("2}qln[,", 0);
      jSONReaderScanner1.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanDouble('B');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      stringReader0.markSupported();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("false");
      jSONReaderScanner0.nextIdent();
      StringReader stringReader1 = new StringReader("TreeSet");
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      charArray0[3] = 'O';
      charArray0[4] = 'w';
      JSONReaderScanner jSONReaderScanner4 = null;
      try {
        jSONReaderScanner4 = new JSONReaderScanner(charArray0, (-483), 48);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",/5#Ev7W%kBE/1MA*", 0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("YqV=Zu0w 7k2C");
      boolean boolean0 = jSONReaderScanner0.isEnabled(0, 49);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanDecimal('\'');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Feature.AllowSingleQuotes is false", 0);
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = 't';
      charArray0[2] = '8';
      charArray0[3] = 'e';
      charArray0[4] = 'v';
      jSONScanner0.matchField2(charArray0);
      assertEquals(0, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 113);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan new error");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("P}n6Llw^=i<@R?:");
      jSONReaderScanner0.isEnabled(1, 1);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      JSONScanner jSONScanner0 = new JSONScanner("null", 0);
      jSONScanner0.scanDecimal('~');
      assertEquals(0, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan new error");
      TimeZone.getTimeZone("scan new error");
      jSONReaderScanner0.isEnabled((-1956), (-1956));
      boolean boolean0 = jSONReaderScanner0.isEnabled((-1956), (-1956));
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("read string from reader error");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("read string from reader error", 17);
      jSONReaderScanner1.nextIdent();
      jSONReaderScanner1.nextIdent();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("read string from reader error", 17);
      jSONReaderScanner0.longValue();
      jSONReaderScanner1.numberString();
      assertEquals(' ', jSONReaderScanner1.getCurrent());
      
      jSONReaderScanner0.isEOF();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-", (-1286));
      JSONScanner jSONScanner1 = new JSONScanner("Itp^/CG[z-", (-1286));
      JSONScanner jSONScanner2 = new JSONScanner("Itp^/CG[z-");
      assertEquals(0, jSONScanner2.matchStat);
      
      jSONScanner2.scanBoolean('G');
      jSONScanner2.scanDecimal('G');
      assertEquals(989, jSONScanner2.getFeatures());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("error parse null");
      stringReader0.read();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse null", 101);
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = '2';
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0esak*R8cw");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0esak*R8cw");
      jSONReaderScanner0.scanBoolean('r');
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanUUID('S');
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanUUID('S');
      char[] charArray0 = new char[7];
      charArray0[0] = 'S';
      charArray0[1] = '[';
      charArray0[2] = 'S';
      charArray0[3] = 'k';
      charArray0[4] = 'r';
      charArray0[5] = '[';
      charArray0[6] = 'S';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M0xrhxHSu82&O1,m", 1440);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$*[>1nY,");
      boolean boolean0 = jSONReaderScanner0.isEnabled(0, 0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4,~K*}~,GY0");
      jSONReaderScanner0.scanType((String) null);
      StringReader stringReader0 = new StringReader("Iq=9v>;5|8MG@<");
      jSONReaderScanner0.scanDate('x');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 999999999, (-2888));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rtY@\"~8)ApVl4|B!");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanIdent();
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = 'w';
      charArray0[2] = '>';
      charArray0[3] = 'w';
      stringReader0.markSupported();
      charArray0[4] = '>';
      charArray0[5] = '>';
      charArray0[6] = '>';
      charArray0[7] = '>';
      JSONLexerBase.readString(charArray0, 0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("");
      JSONScanner jSONScanner0 = new JSONScanner("", (-2));
      jSONScanner0.scanType("TreeSet");
      jSONScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("illegal state. ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nnnnnnnn");
      jSONReaderScanner0.scanBoolean('S');
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanUUID('!');
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      
      jSONReaderScanner0.scanUUID('[');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("nnnnnnnn", 4013);
      float float0 = jSONReaderScanner0.scanFloat('.');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      jSONReaderScanner0.hasSpecial = false;
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("kxx$j!cB:UKeI");
      JSONScanner jSONScanner0 = new JSONScanner("rtY", (-1));
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      jSONScanner0.scanInt('A');
      jSONScanner0.scanType("error parse new");
      jSONScanner0.isEOF();
      jSONScanner0.info();
      boolean boolean0 = jSONReaderScanner1.matchField(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("@l4Jr0P{Iq@B", 1440);
      jSONScanner0.info();
      char[] charArray0 = new char[1];
      charArray0[0] = ';';
      jSONScanner0.scanFieldDecimal(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 110, (-2));
      jSONReaderScanner0.scanFieldFloat(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\"");
      jSONReaderScanner1.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rtY@\"~8)ApVl4|B!");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanIdent();
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = 'w';
      charArray0[2] = '>';
      charArray0[3] = 'w';
      stringReader0.markSupported();
      charArray0[4] = '>';
      charArray0[5] = '>';
      charArray0[6] = '>';
      charArray0[7] = '>';
      JSONLexerBase.readString(charArray0, 0);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      char[] charArray1 = new char[4];
      charArray1[0] = '>';
      charArray1[1] = 'w';
      charArray1[2] = '>';
      charArray1[3] = '>';
      jSONReaderScanner0.charArrayCompare(charArray1);
      jSONReaderScanner0.getCurrent();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0, 2333);
      jSONReaderScanner1.isEnabled(2126, 2126);
      jSONReaderScanner1.getCurrent();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("rty");
      linkedList0.add(locale_LanguageRange0);
      jSONScanner0.scanStringArray(list0, 'w');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("AutoCloseSource");
      jSONReaderScanner0.nextToken();
      assertEquals('u', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Feature.AllowSingleQuotes is false");
      char[] charArray0 = new char[5];
      jSONScanner0.sp = 0;
      charArray0[0] = '$';
      charArray0[1] = 't';
      charArray0[2] = '8';
      jSONScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      charArray0[3] = 'e';
      charArray0[4] = 'v';
      jSONScanner0.matchField2(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("uhq", 0);
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = 'E';
      charArray0[3] = 'M';
      charArray0[4] = 'U';
      charArray0[5] = '#';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBigInteger((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = (-1279);
      JSONScanner jSONScanner0 = new JSONScanner("&", (-1279));
      jSONScanner0.resetStringPosition();
      jSONScanner0.scanLong('u');
      jSONScanner0.scanString('\\');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Itp^/CG[z-");
      char[] charArray0 = new char[8];
      charArray0[0] = 'n';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Itp^/CG[z-", 281);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("t", 0);
      jSONReaderScanner0.scanUUID('n');
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("zp]0h_CAf$}92iC9EL", 31);
      boolean boolean0 = jSONReaderScanner2.isEnabled(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanStringArray((Collection<String>) null, '8');
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Qm=:W7WZZ");
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 15;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("rtY");
      JSONScanner jSONScanner0 = new JSONScanner("rtY", (-125));
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("zzHv?Dks;:(G");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      char char0 = 'D';
      jSONReaderScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner1.scanDouble('D');
      jSONReaderScanner1.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. z
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info #: ");
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(85);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '<');
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.scanIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "java.time.";
      String string1 = "unclosed single-quote string";
      StringReader stringReader0 = new StringReader("unclosed single-quote string");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (-1));
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-");
      jSONScanner0.scanISO8601DateIfMatch(true);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("d%Kb*Uw#z");
      jSONReaderScanner0.scanDouble('e');
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = '4';
      charArray0[2] = 'L';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Itp^/CG[z-");
      jSONReaderScanner1.resetStringPosition();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanUUID('K');
      assertEquals(18, jSONReaderScanner0.token());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner1.scanFloat('.');
      jSONReaderScanner1.scanSymbolWithSeperator((SymbolTable) null, 'G');
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-", (-1279));
      jSONScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Itp^/CG[z-");
      jSONReaderScanner0.getCurrent();
      JSONScanner jSONScanner1 = new JSONScanner("P}n6Llw^=i<@R?:", 0);
      jSONScanner1.scanType((String) null);
      assertEquals(0, jSONScanner1.matchStat);
      
      jSONScanner0.isEOF();
      char[] charArray0 = new char[8];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      charArray0[3] = 'I';
      charArray0[4] = 'I';
      charArray0[5] = 'I';
      charArray0[6] = 'I';
      charArray0[7] = 'I';
      jSONScanner1.scanFieldInt(charArray0);
      assertEquals(0, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Itp^/CG[z-");
      char[] charArray0 = new char[8];
      charArray0[0] = 'n';
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-", (-1552));
      jSONScanner0.scanDecimal('^');
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSONReaderScanner0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      jSONReaderScanner0.scanDouble('A');
      charArray0[1] = '(';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 8192, 39);
      jSONReaderScanner1.resetStringPosition();
      jSONReaderScanner1.nextIdent();
      jSONReaderScanner0.scanDouble('<');
      jSONReaderScanner1.scanFieldSymbol(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(8192);
      jSONReaderScanner0.scanSymbol(symbolTable0);
      jSONReaderScanner1.integerValue();
      jSONReaderScanner0.scanUUID('J');
      assertEquals(16, jSONReaderScanner0.token());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONReaderScanner1.scanStringArray(linkedHashSet0, '<');
      assertFalse(jSONReaderScanner1.isEOF());
      
      jSONReaderScanner1.scanBoolean('[');
      assertEquals(18, jSONReaderScanner1.token());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONLexerBase.isWhitespace('7');
      PipedReader pipedReader0 = new PipedReader(3093);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M0xrhxHSuO2IO1,m", 1440);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      jSONReaderScanner0.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2298, 4096);
      jSONReaderScanner0.nextToken();
      JSONScanner jSONScanner0 = new JSONScanner("\"4Z.JGG", 49);
      SymbolTable symbolTable0 = new SymbolTable(116);
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.scanDecimal('.');
      jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("illegal state. ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 26);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.nextIdent();
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      char char0 = 'I';
      charArray0[2] = 'I';
      StringReader stringReader1 = new StringReader("");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner1.nextToken(26);
      jSONReaderScanner0.scanUUID('Z');
      jSONReaderScanner0.intValue();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("");
      jSONReaderScanner0.putChar('P');
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("illegal state. ");
      JSONScanner jSONScanner0 = new JSONScanner("", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", info : ", 0);
      jSONScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$*[>1nY,", 0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(".Z:%<ujGqNF_");
      jSONReaderScanner1.isEnabled(4175, 34);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("u definDd");
      jSONReaderScanner2.nextToken();
      assertEquals(' ', jSONReaderScanner2.getCurrent());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", info : ", 0);
      jSONScanner0.nextToken(0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      char char0 = '6';
      jSONScanner0.scanString('6');
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSONReaderScanner0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      jSONReaderScanner0.scanDouble('A');
      charArray0[1] = '(';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 8192, 39);
      jSONReaderScanner1.resetStringPosition();
      jSONReaderScanner1.nextIdent();
      jSONReaderScanner0.scanDouble('A');
      jSONReaderScanner1.scanFieldSymbol(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(8192);
      jSONReaderScanner0.scanSymbol(symbolTable0);
      jSONReaderScanner1.integerValue();
      jSONReaderScanner0.scanUUID('J');
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONReaderScanner0.scanUUID('@');
      jSONReaderScanner1.nextToken();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("|iDny&%2");
      jSONReaderScanner1.close();
      assertEquals((-2), jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", info : ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanIdent();
      stringReader0.markSupported();
      char[] charArray0 = new char[19];
      charArray0[0] = '|';
      charArray0[1] = '|';
      JSONLexerBase.readString(charArray0, 0);
      jSONReaderScanner0.stringDefaultValue = "scan true error";
      StringReader stringReader1 = new StringReader("AE~F");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanDate('U');
      jSONReaderScanner0.scanUUID('e');
      jSONReaderScanner1.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - i, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tqt");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanIdent();
      char char0 = 'q';
      char[] charArray0 = new char[4];
      charArray0[1] = 'q';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("T'7FKb");
      jSONReaderScanner1.nextToken();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("T'7FKb");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-563));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+fxGIJnT;>K", 0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanDouble('<');
      jSONReaderScanner0.isEnabled((-1841496563), (-1841496563));
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("mc");
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("mc", (-1));
      jSONReaderScanner1.nextToken();
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(charArray0, 58);
      jSONReaderScanner3.longValue();
      jSONReaderScanner2.scanString('<');
      jSONReaderScanner2.scanType("mc");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((-1841496563));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal state. ", (-1973));
      jSONScanner0.scanString('0');
      char[] charArray0 = new char[4];
      charArray0[0] = '0';
      charArray0[1] = '4';
      charArray0[2] = 'N';
      charArray0[3] = '!';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 98, (-4750));
      jSONReaderScanner0.scanDouble('Y');
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldSymbol(charArray1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("h?OFL", 98);
      jSONScanner0.scanUUID('0');
      jSONReaderScanner0.scanFieldDate(charArray1);
      assertEquals((-4750), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", info : ", 0);
      jSONScanner0.nextToken(0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      JSONScanner jSONScanner1 = new JSONScanner("Am7tMW", 48);
      jSONScanner0.scanDecimal('');
      char[] charArray0 = new char[1];
      charArray0[0] = 'g';
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner1.scanFloat('T');
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", info : ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanIdent();
      stringReader0.markSupported();
      char[] charArray0 = new char[19];
      charArray0[0] = '|';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner1.nextIdent();
      JSONScanner jSONScanner0 = new JSONScanner("u1u", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, 'y');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$*[>1nY,", 0);
      jSONReaderScanner0.getFeatures();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("$*[>1nY,");
      assertEquals(989, jSONReaderScanner1.getFeatures());
      
      boolean boolean0 = jSONReaderScanner0.isEnabled((-1935), 0);
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "com.google.common.collect.HashMultimap";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.google.common.collect.HashMultimap", (-2175));
      jSONReaderScanner0.isEnabled(68, 68);
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDouble((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 356);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.info();
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("jvDC~<lU");
      jSONReaderScanner0.nextIdent();
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(65219, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "error pare null";
      JSONScanner jSONScanner0 = new JSONScanner("error pare null");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H5~_8");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanIdent();
      stringReader0.markSupported();
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = '|';
      charArray0[3] = '|';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 2691, 34);
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(charArray0, 21);
      jSONReaderScanner3.nextToken();
      JSONReaderScanner jSONReaderScanner4 = new JSONReaderScanner("Set");
      jSONReaderScanner1.resetStringPosition();
      jSONReaderScanner4.nextIdent();
      JSONReaderScanner jSONReaderScanner5 = null;
      try {
        jSONReaderScanner5 = new JSONReaderScanner(charArray0, (-2577));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      Object[] objectArray0 = new Object[9];
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      jSONReaderScanner0.scanDouble('A');
      charArray0[1] = '(';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(", info : ");
      jSONReaderScanner1.resetStringPosition();
      jSONReaderScanner1.nextIdent();
      jSONReaderScanner0.scanDouble('<');
      jSONReaderScanner1.scanFieldSymbol(charArray0);
      StringReader stringReader0 = new StringReader("+FN|bl)~_k\u0002,$0");
      stringReader0.read();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner1.scanUUID('8');
      assertEquals(16, jSONReaderScanner1.token());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("?N%/I%oXs`_&he'~7");
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      JSONScanner jSONScanner0 = new JSONScanner("2}qln[,", 0);
      jSONScanner0.scanDecimal('^');
      assertEquals(0, jSONScanner0.getFeatures());
      
      jSONReaderScanner0.nextToken((-1090045771));
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char char0 = '2';
      JSONScanner jSONScanner0 = new JSONScanner("'Ynf>'O.gITr)uV;511", (-1973));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'Ynf>'O.gITr)uV;511", 84);
      jSONReaderScanner0.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Feature.AllowSingleQuotes is false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = 'n';
      charArray0[2] = 'd';
      charArray0[3] = '?';
      charArray0[4] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 39, 39);
      jSONReaderScanner0.resetStringPosition();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("d%Kb*Uw#z");
      jSONReaderScanner0.scanDouble('e');
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[2] = 'L';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSONReaderScanner0;
      objectArray0[1] = (Object) ", info : ";
      objectArray0[2] = (Object) ", info : ";
      objectArray0[3] = (Object) ", info : ";
      boolean boolean0 = jSONReaderScanner0.isEnabled(48, 2043);
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.SymbolTable", (-438));
      jSONScanner0.scanDecimal('b');
      assertEquals((-438), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Itp^/CG[z-");
      char[] charArray0 = new char[8];
      charArray0[6] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nnnnnnnn");
      jSONReaderScanner0.scanBoolean('k');
      jSONReaderScanner0.scanDouble('n');
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanUUID('[');
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanUUID('1');
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = ", info : ";
      StringReader stringReader0 = new StringReader(", info : ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanIdent();
      stringReader0.markSupported();
      char[] charArray0 = new char[19];
      charArray0[0] = '|';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner1.nextIdent();
      jSONReaderScanner0.scanLong('|');
      jSONReaderScanner1.getFeatures();
      SymbolTable symbolTable0 = new SymbolTable(989);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 989, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "unclosed single-quote string";
      StringReader stringReader0 = new StringReader("unclosed single-quote string");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (-1));
      jSONReaderScanner0.setToken(76);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("java.time.");
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("error parse null");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 0);
      char[] charArray0 = new char[1];
      jSONReaderScanner0.scanIdent();
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(".class", (-972));
      double double0 = jSONScanner0.scanFieldDouble(charArray0);
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"4Z.JGG", 49);
      assertEquals(0, jSONScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(116);
      jSONScanner0.scanDecimal('.');
      assertEquals(49, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 304, 93);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      String string0 = "TODO";
      JSONScanner jSONScanner0 = new JSONScanner("TODO", 39);
      // Undeclared exception!
      try { 
        jSONScanner0.matchField((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "Itp^/CG[z-";
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-");
      jSONScanner0.resetStringPosition();
      char[] charArray0 = new char[4];
      charArray0[0] = 'T';
      charArray0[1] = '<';
      charArray0[2] = '`';
      char char0 = '9';
      charArray0[3] = '9';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 525, (-1373));
      jSONReaderScanner0.nextToken();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((PipedWriter) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(";.( 9Sqz", 49);
      jSONReaderScanner0.setTimeZone((TimeZone) null);
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("illegal state. ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 26);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.nextIdent();
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      char char0 = 'W';
      charArray0[2] = 'W';
      StringReader stringReader1 = new StringReader("");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      char char1 = 'x';
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[5] = (Object) "encodeUTF8 error";
      objectArray0[6] = (Object) "encodeUTF8 error";
      objectArray0[7] = (Object) "encodeUTF8 error";
      String string0 = "new";
      JSONScanner jSONScanner0 = new JSONScanner("new", 0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'C';
      charArray0[1] = '7';
      charArray0[2] = '\\';
      charArray0[3] = 'V';
      charArray0[4] = '^';
      charArray0[5] = '!';
      charArray0[6] = 'T';
      jSONScanner0.scanFieldLong(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", 1875);
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - T, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.time.");
      char[] charArray0 = new char[6];
      charArray0[0] = 'p';
      jSONScanner0.scanLong('g');
      jSONScanner0.scanString('2');
      SymbolTable symbolTable0 = new SymbolTable(16384);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'D');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("T&&X;kPqJDv=_");
      char[] charArray0 = new char[6];
      charArray0[3] = 'D';
      jSONScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.matchField2(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("jvdc");
      jSONReaderScanner0.nextIdent();
      SymbolTable symbolTable0 = new SymbolTable(26);
      jSONReaderScanner0.integerValue();
      jSONReaderScanner0.numberString();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 656);
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("A", 656);
      float float0 = jSONScanner0.scanFloat(']');
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = ';';
      charArray0[2] = 's';
      charArray0[3] = '?';
      charArray0[4] = ';';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 39, 39);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanDouble('?');
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      int int0 = 45;
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.intValue();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\"");
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanUUID('c');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", info : ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanIdent();
      JSONScanner jSONScanner0 = new JSONScanner("E;ZU3j!.u\"U?J>'=y", 0);
      jSONScanner0.scanString();
      String string0 = "\":\"";
      int int0 = 93;
      JSONScanner jSONScanner1 = new JSONScanner(string0, int0);
      JSONScanner jSONScanner2 = new JSONScanner(string0, jSONScanner1.matchStat);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.getTimeZone();
      // Undeclared exception!
      try { 
        jSONScanner2.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.nextToken();
      assertEquals(9, jSONReaderScanner0.token());
      
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertTrue(jSONReaderScanner0.isEOF());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      jSONReaderScanner0.hasSpecial = false;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("unclosed string : ");
      jSONReaderScanner1.nextToken();
      assertEquals(' ', jSONReaderScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+fxGIJnT;>K", 0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanDouble('<');
      jSONReaderScanner0.isEnabled((-1841496563), (-1841496563));
      assertEquals(2, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner0 = new JSONScanner("+fxGIJnT;>K", 0);
      JSONScanner jSONScanner1 = new JSONScanner("+fxGIJnT;>K", 1254);
      assertEquals(1254, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", info : ", 0);
      jSONScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$*[>1nY,", 0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(", info : ");
      boolean boolean0 = jSONReaderScanner1.isEnabled(36, (-1638));
      assertTrue(boolean0);
      
      jSONScanner0.scanDecimal('F');
      assertEquals(0, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '@';
      charArray0[1] = 'I';
      charArray0[2] = '?';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false", 39);
      jSONReaderScanner0.scanDouble('?');
      SymbolTable symbolTable0 = new SymbolTable(39);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "error parse null";
      StringReader stringReader0 = new StringReader("error parse null");
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[5] = 'n';
      charArray0[6] = 'n';
      charArray0[7] = 'n';
      charArray0[8] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanLong('');
      jSONReaderScanner0.getFeatures();
      int int0 = (-1281);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1474));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = 'n';
      charArray0[2] = 'd';
      charArray0[3] = '?';
      charArray0[4] = '?';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 39, 39);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 39);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.features = 0;
      jSONReaderScanner0.scanLong('d');
      jSONReaderScanner0.getFeatures();
      jSONReaderScanner0.getCurrent();
      assertEquals(1, jSONReaderScanner0.token());
      
      int int0 = jSONReaderScanner1.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan new error");
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      charArray0[1] = '-';
      charArray0[2] = '$';
      charArray0[3] = ';';
      charArray0[4] = '<';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      int int0 = jSONReaderScanner1.intValue();
      assertEquals(0, int0);
      
      jSONReaderScanner1.lexError("TreeSet", (Object[]) null);
      jSONReaderScanner1.getCurrent();
      JSONScanner jSONScanner0 = new JSONScanner("rty", 644);
      jSONScanner0.isEOF();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(644, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nnnnnnnn");
      jSONReaderScanner0.scanBoolean('S');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("nnnnnnnn");
      jSONReaderScanner1.nextIdent();
      jSONReaderScanner1.nextIdent();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("-2-P5[DgR~A[$#", 0);
      jSONReaderScanner2.scanDouble(':');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - n, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-", (-1279));
      jSONScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Itp^/CG[z-", (-1279));
      TimeZone.getTimeZone("Itp^/CG[z-");
      jSONReaderScanner0.scanNumber();
      Feature feature0 = Feature.DisableASM;
      jSONReaderScanner0.isEnabled(feature0);
      char char0 = '6';
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('6');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 6 - I, info : pos 0, json : Itp^/CG[z-
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ']';
      charArray0[0] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 484, 484);
      jSONReaderScanner0.matchStat = 484;
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanUUID('c');
      assertEquals(1, jSONReaderScanner0.token());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("SupportAutoType");
      jSONReaderScanner1.nextToken();
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=xIF-(1d]\"X-%Sz");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 50);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("V5ZerY6cG~0_0M$0c&7");
      stringReader0.markSupported();
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'W';
      charArray0[3] = 'I';
      charArray0[4] = 'n';
      jSONReaderScanner1.scanFieldUUID(charArray0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "V5ZerY6cG~0_0M$0c&7";
      objectArray0[1] = (Object) stringReader0;
      jSONReaderScanner0.lexError((String) null, objectArray0);
      jSONReaderScanner0.scanString('t');
      assertEquals('x', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", info : ", 0);
      jSONScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$*[>1nY,", 1);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("$*[>1nY,");
      jSONReaderScanner1.isEnabled(0, 36);
      jSONScanner0.scanDecimal('j');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-U9#7#g");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.nextToken();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("w");
      char[] charArray0 = new char[8];
      charArray0[0] = 'M';
      charArray0[1] = 'T';
      charArray0[2] = 'M';
      charArray0[3] = 'T';
      charArray0[4] = 'T';
      charArray0[5] = 'M';
      char[] charArray1 = new char[0];
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      Class<Object> class1 = Object.class;
      jSONReaderScanner1.scanFieldStringArray(charArray1, class1);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 49);
      jSONReaderScanner2.next();
      jSONReaderScanner2.nextIdent();
      jSONReaderScanner0.scanDouble('M');
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("-U9#7#g");
      jSONReaderScanner0.scanUUID('T');
      JSONReaderScanner jSONReaderScanner4 = null;
      try {
        jSONReaderScanner4 = new JSONReaderScanner(charArray1, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[6] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nnnnnnnn");
      jSONReaderScanner0.scanBoolean('k');
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      jSONReaderScanner0.scanStringArray(set0, 'n');
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanUUID('[');
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanUUID('1');
      String string0 = null;
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("illegal state. ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nnnnnnnn");
      jSONReaderScanner0.scanBoolean('S');
      jSONReaderScanner0.resetStringPosition();
      JSONScanner jSONScanner0 = new JSONScanner("nnnnnnnn", 59);
      char[] charArray0 = new char[7];
      charArray0[0] = 'S';
      charArray0[1] = '!';
      charArray0[2] = '4';
      charArray0[3] = '!';
      charArray0[4] = '!';
      charArray0[5] = 'S';
      charArray0[6] = 'S';
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      char[] charArray1 = new char[3];
      charArray1[0] = '!';
      charArray1[1] = 'S';
      jSONScanner0.matchField2(charArray1);
      char[] charArray2 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray2);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("ZR@PC&|#uEv9~");
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("java.util.OptionalLong", (-2));
      jSONReaderScanner2.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner2.scanFloat('V');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Ynf>'O.gITr)uV;511", (-1973));
      char[] charArray0 = new char[6];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = 'V';
      charArray0[3] = '2';
      charArray0[4] = 'e';
      charArray0[5] = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2461, 15);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      StringReader stringReader0 = new StringReader("nnn");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0, (-1));
      jSONReaderScanner1.scanDate('2');
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner2.scanUUID('Z');
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(charArray0, 3507);
      jSONReaderScanner1.scanSymbolWithSeperator((SymbolTable) null, '.');
      jSONScanner0.isEOF();
      assertEquals((-1973), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan new error");
      TimeZone.getTimeZone("scan new error");
      JSONLexerBase.readString((char[]) null, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charArrayCompare((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Ynf>'O.gITr)uV;511", (-1973));
      jSONScanner0.scanString('2');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'Ynf>'O.gITr)uV;511", (-1));
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("syntax error", (-1973));
      jSONReaderScanner1.scanDouble('2');
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 'O.gI
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", info : ", 0);
      jSONScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$*[>1nY,", 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(", info : ");
      jSONReaderScanner1.isEnabled(36, (-1638));
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, 'E');
      assertEquals(0, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      JSONScanner jSONScanner0 = new JSONScanner(", info : ", 2);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.arrayCopy(0, charArray0, 0, 0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '/';
      charArray0[1] = ',';
      charArray0[2] = '8';
      charArray0[3] = 'a';
      charArray0[4] = 'Y';
      charArray0[5] = '1';
      charArray0[6] = ':';
      charArray0[7] = 'f';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2475);
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rtY@\"~8)ApVl4|B!");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.markSupported();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("rtY@\"~8)ApVl4|B!", 108);
      JSONScanner jSONScanner0 = new JSONScanner("rtY@\"~8)ApVl4|B!", 0);
      jSONScanner0.scanType("");
      SymbolTable symbolTable0 = new SymbolTable(91);
      JSONScanner jSONScanner1 = new JSONScanner("null");
      jSONScanner1.scanSymbol(symbolTable0);
      jSONScanner0.isEOF();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("pG.|vqBV,)1j");
      jSONReaderScanner0.nextToken();
      assertEquals(1, jSONReaderScanner0.token());
      
      int int0 = jSONReaderScanner2.scanInt('\'');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = ", info : ";
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSONReaderScanner0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      jSONReaderScanner0.scanDouble('A');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 1668);
      jSONReaderScanner1.nextIdent();
      jSONReaderScanner0.getFeatures();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ,, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-U9#7#g");
      jSONReaderScanner0.nextIdent();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONReaderScanner0.numberString();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "error parse null";
      StringReader stringReader0 = new StringReader("error parse null");
      int int0 = 0;
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[5] = 'n';
      charArray0[6] = 'n';
      charArray0[7] = 'n';
      charArray0[8] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-", (-1279));
      jSONScanner0.resetStringPosition();
      jSONScanner0.isBlankInput();
      jSONScanner0.nextIdent();
      assertEquals('^', jSONScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Itp^/CG[z-", 0);
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-@G(");
      jSONReaderScanner0.close();
      jSONReaderScanner0.bp = 47;
      int int0 = (-2436);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((-2436));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = '(';
      charArray0[3] = 'A';
      charArray0[4] = 'A';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("jvDC~<lU");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(26);
      jSONReaderScanner0.integerValue();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 1877);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      jSONReaderScanner0.scanDouble('A');
      jSONReaderScanner0.isEnabled(58, (-1841496563));
      assertEquals(16, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner0 = new JSONScanner("\"", 0);
      JSONScanner jSONScanner1 = new JSONScanner("t}PR>", 1378);
      jSONScanner0.scanDecimal('A');
      assertEquals(0, jSONScanner0.getFeatures());
      
      int int0 = jSONScanner0.token();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-", (-1279));
      jSONScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Itp^/CG[z-", (-1279));
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("e!#aA?S", 2005);
      StringReader stringReader0 = new StringReader("Itp^/CG[z-");
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(stringReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = ';';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_XkDli$qt");
      jSONReaderScanner0.nextIdent();
      String string0 = "x\"1";
      StringReader stringReader0 = new StringReader("x\"1");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner1.scanUUID('t');
      jSONReaderScanner0.intValue();
      jSONReaderScanner1.scanUUID('B');
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("U Qq0Uce4=+Y{H=");
      char[] charArray1 = new char[1];
      charArray1[0] = '?';
      JSONReaderScanner jSONReaderScanner4 = new JSONReaderScanner(charArray1, 107);
      jSONReaderScanner0.getLocale();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \"
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nnnnnnnn");
      StringReader stringReader0 = new StringReader("+[&");
      stringReader0.markSupported();
      jSONReaderScanner0.scanInt('w');
      JSONScanner jSONScanner0 = new JSONScanner("'", (-2252));
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, 'F');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONScanner0.scanBoolean('F');
      jSONScanner0.scanDecimal('F');
      assertEquals((-2252), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TdO", 2646);
      jSONReaderScanner0.scanUUID('n');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("undefined");
      jSONReaderScanner1.nextToken();
      assertTrue(jSONReaderScanner1.isEOF());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 26);
      jSONReaderScanner0.nextToken();
      assertEquals(16, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.nextToken();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("error parse null");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 0);
      char[] charArray0 = new char[1];
      jSONReaderScanner0.scanIdent();
      charArray0[0] = '>';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      StringReader stringReader1 = new StringReader("eTror parse new");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(63);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - p, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new", (-1874));
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 3);
      JSONScanner jSONScanner0 = new JSONScanner("l$d+4i/36J\"eJO0z", 3);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONScanner0.scanStringArray(arrayList0, 'w');
      char[] charArray0 = new char[8];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      charArray0[3] = 'w';
      charArray0[4] = 'w';
      charArray0[5] = 'Z';
      jSONReaderScanner0.scanUUID('S');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(", info : ");
      jSONReaderScanner1.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextTokenWithChar('w');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match w - i, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFieldBigInteger(charArray0);
      BigDecimal bigDecimal0 = new BigDecimal((int) '\\');
      assertEquals((short)92, bigDecimal0.shortValue());
      
      jSONScanner0.close();
      jSONScanner0.longValue();
      jSONScanner0.scanFieldUUID(charArray0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("LEI@wzWS92mE", 0);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      BigDecimal bigDecimal0 = new BigDecimal(91);
      assertEquals((byte)91, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = ']';
      int int0 = 484;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 484, 484);
      jSONReaderScanner0.matchStat = 484;
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 484);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nnnnnnnn");
      StringReader stringReader0 = new StringReader("+[&");
      stringReader0.markSupported();
      jSONReaderScanner0.scanInt('w');
      JSONScanner jSONScanner0 = new JSONScanner("'", (-2252));
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, 'F');
      jSONReaderScanner0.isEnabled((-2252), (-128));
      JSONScanner jSONScanner1 = new JSONScanner("", (-128));
      JSONScanner jSONScanner2 = new JSONScanner("nnnnnnnn", (-2688));
      jSONScanner0.scanDecimal('F');
      assertEquals((-2252), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'u';
      charArray0[3] = 'c';
      SymbolTable symbolTable0 = new SymbolTable(111);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26);
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringReader stringReader0 = new StringReader("error parse null");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDouble('D');
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      assertEquals(0, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Feature.AllowSingleQuotes is false");
      int int0 = 116;
      jSONScanner0.isEnabled(116, 116);
      char[] charArray0 = new char[1];
      char char0 = '%';
      charArray0[0] = '%';
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", infoF : ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanIdent();
      stringReader0.markSupported();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("syntax error", 0);
      jSONReaderScanner0.scanDouble('y');
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(stringReader0, 8);
      JSONScanner jSONScanner0 = new JSONScanner("syntax error", (-1));
      jSONScanner0.scanDecimal('\"');
      assertEquals((-1), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#", 0);
      jSONScanner0.resetStringPosition();
      jSONScanner0.isBlankInput();
      jSONScanner0.nextIdent();
      assertTrue(jSONScanner0.isEOF());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0);
      Locale locale0 = Locale.GERMANY;
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", info : ", 0);
      char[] charArray0 = new char[8];
      charArray0[0] = '$';
      charArray0[1] = '1';
      charArray0[2] = 'L';
      charArray0[3] = '0';
      charArray0[4] = '#';
      charArray0[5] = 'h';
      charArray0[6] = 'R';
      charArray0[7] = 'U';
      jSONScanner0.scanFieldDecimal(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 103, (-1250));
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("&");
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner1.nextIdent();
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 1);
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("\"", 45);
      jSONReaderScanner3.scanFloat('?');
      assertEquals(45, jSONReaderScanner3.getFeatures());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(59);
      JSONScanner jSONScanner0 = new JSONScanner(", info : ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      Feature feature0 = Feature.OrderedField;
      jSONReaderScanner0.config(feature0, false);
      SymbolTable symbolTable1 = null;
      try {
        symbolTable1 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "Qm=:W7WZZ";
      int int0 = (-1828);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Qm=:W7WZZ", (-1828));
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(">JX;); Q");
      String string0 = "@SByYt4q]";
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-1098));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - >, info : pos 0, json : >JX;); Q
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      charArray0[1] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'M', 484);
      jSONReaderScanner0.scanIdent();
      StringReader stringReader0 = new StringReader("eTror parse new");
      stringReader0.markSupported();
      stringReader0.read(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("eTror parse new");
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("`H_B#!/!\"A4b{/+", 1006);
      jSONReaderScanner2.nextToken();
      assertEquals(1, jSONReaderScanner2.token());
      
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.charArrayCompare(charArray0);
      assertEquals(484, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", infoF : ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanIdent();
      stringReader0.markSupported();
      jSONReaderScanner0.nextToken();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(59);
      JSONScanner jSONScanner0 = new JSONScanner(", info : ");
      StringReader stringReader0 = new StringReader("Wuyr7IIFjb \"");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(59);
      jSONReaderScanner0.scanUUID('Z');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("r&bE:Ia");
      jSONReaderScanner1.intValue();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(", info : ");
      jSONReaderScanner0.putChar('5');
      assertEquals('u', jSONReaderScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("V");
      jSONReaderScanner3.getCurrent();
      char[] charArray0 = new char[5];
      charArray0[0] = 'Z';
      charArray0[1] = '5';
      charArray0[2] = 'V';
      charArray0[3] = 'Z';
      charArray0[4] = '5';
      jSONReaderScanner2.matchField(charArray0);
      assertEquals(989, jSONReaderScanner2.getFeatures());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" -> ", 116);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("com.google.common.collect.TreeMultimap", 116);
      char char0 = 'i';
      jSONReaderScanner0.scanDouble('i');
      jSONReaderScanner1.scanFieldSymbol(charArray0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", info : ", 0);
      jSONScanner0.isBlankInput();
      SymbolTable symbolTable0 = new SymbolTable(59);
      JSONScanner jSONScanner1 = new JSONScanner(", info : ");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "fB 4";
      JSONScanner jSONScanner0 = new JSONScanner("fB 4", 77);
      char[] charArray0 = new char[1];
      char char0 = 'U';
      jSONScanner0.scanFieldSymbol(charArray0);
      int int0 = 32;
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[6] = (Object) "encodeUTF8 error";
      objectArray0[7] = (Object) "encodeUTF8 error";
      JSONScanner jSONScanner0 = new JSONScanner("new", 0);
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringReader stringReader0 = new StringReader("error parse null");
      char char0 = 'n';
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[5] = 'n';
      charArray0[6] = 'n';
      charArray0[7] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 0);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.getCurrent();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0, 0);
      int int0 = 122;
      jSONReaderScanner1.isEnabled(0, 122);
      jSONReaderScanner1.getCurrent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-U9#7#g");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.nextToken();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("w");
      char[] charArray0 = new char[8];
      charArray0[0] = 'M';
      charArray0[1] = 'T';
      charArray0[2] = 'M';
      charArray0[3] = 'T';
      charArray0[4] = 'T';
      charArray0[5] = 'M';
      char[] charArray1 = new char[0];
      Class<Object> class0 = Object.class;
      jSONReaderScanner1.scanFieldStringArray(charArray1, class0);
      int int0 = 49;
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 49);
      jSONReaderScanner2.nextIdent();
      jSONReaderScanner0.scanDouble('M');
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("-U9#7#g");
      JSONReaderScanner jSONReaderScanner4 = new JSONReaderScanner("new", 50);
      jSONReaderScanner3.nextToken();
      try { 
        jSONReaderScanner3.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 356);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 345);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner1.getFeatures();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-14));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      char char0 = ';';
      StringReader stringReader0 = new StringReader("\":\"");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (-874));
      jSONReaderScanner0.nextToken();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, 1581);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "enodeUTF8 eror";
      Object[] objectArray0 = new Object[9];
      objectArray0[5] = (Object) "enodeUTF8 eror";
      char char0 = 'X';
      char char1 = 'O';
      char char2 = 'q';
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      charArray0[2] = 'O';
      charArray0[3] = 'X';
      int int0 = 31;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2461, 31);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      StringReader stringReader0 = new StringReader("enodeUTF8 eror");
      SymbolTable symbolTable0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 31, (SymbolTable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Itp^/CG[z-");
      char[] charArray0 = new char[8];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[5] = 'n';
      charArray0[6] = 'n';
      charArray0[7] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 345);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.getFeatures();
      assertEquals(18, jSONReaderScanner0.token());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      JSONScanner.checkDate('r', 'J', 'n', 'Y', '&', 'T', 45, 'n');
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.JSONLexerBase", 0);
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      jSONReaderScanner1.getLocale();
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("rtY@\"~8)ApVl4|B!");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M0xrhxHSu82&O1,m", 1440);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.scanFloat('q');
      jSONScanner0.scanLong('\\');
      jSONScanner0.tokenName();
      boolean boolean0 = JSONScanner.charArrayCompare("aaaabaa", 1440, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.sp = (-1485);
      TimeZone timeZone0 = TimeZone.getTimeZone("j({I?S?[_vZRocEXC");
      jSONScanner0.timeZone = timeZone0;
      jSONScanner0.scanDate('#');
      PipedReader pipedReader0 = new PipedReader();
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      try { 
        pipedReader0.read(charBuffer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("LEI@wzWS92mE", 0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("?N%/I%oXs`_&he'~7");
      char[] charArray0 = new char[7];
      charArray0[1] = '\u0000';
      SymbolTable symbolTable0 = new SymbolTable(1363);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 3141, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.time.");
      char[] charArray0 = new char[6];
      char char0 = 'p';
      charArray0[0] = 'p';
      jSONScanner0.scanLong('g');
      jSONScanner0.scanString('2');
      SymbolTable symbolTable0 = new SymbolTable(16384);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol((String) null, 16384, 16384, 8, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("pr3]lMU/xk&/Gh", (-707));
      char[] charArray0 = new char[3];
      charArray0[0] = '|';
      charArray0[1] = 'D';
      jSONScanner0.scanFieldSymbol(charArray0);
      char char0 = '(';
      charArray0[2] = '(';
      jSONScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-2155));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 1318);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.nextIdent();
      StringReader stringReader1 = new StringReader("new");
      stringReader1.read();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader1);
      jSONReaderScanner1.nextToken((-2666));
      jSONReaderScanner0.scanUUID('I');
      jSONReaderScanner0.intValue();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("new");
      jSONReaderScanner2.scanUUID('Z');
      JSONReaderScanner jSONReaderScanner3 = null;
      try {
        jSONReaderScanner3 = new JSONReaderScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2c-k", 19);
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      Class<Integer> class0 = Integer.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.indexOf('1', 19);
      jSONReaderScanner0.putChar('d');
      // Undeclared exception!
      jSONReaderScanner0.nextIdent();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Feature.AllowSingleQuotes is false");
      char[] charArray0 = new char[5];
      jSONScanner0.sp = 0;
      charArray0[0] = '$';
      charArray0[1] = 't';
      charArray0[2] = '8';
      jSONScanner0.scanFieldDouble(charArray0);
      charArray0[3] = 'e';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 3968);
      Locale locale0 = Locale.CHINA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      jSONReaderScanner0.scanStringArray(set0, '>');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = ')';
      int int0 = 484;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 484, 484);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.matchStat = 484;
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ZAD5", 45);
      jSONReaderScanner0.scanDouble('2');
      char[] charArray0 = new char[8];
      charArray0[0] = '(';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '(';
      charArray0[4] = '(';
      charArray0[5] = '2';
      charArray0[6] = 'A';
      charArray0[7] = 'A';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 2355, (-1973));
      jSONReaderScanner1.resetStringPosition();
      char char0 = '<';
      jSONReaderScanner1.nextIdent();
      jSONReaderScanner0.scanDouble('');
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1973));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = "rtY@\"~8)ApVl4|B!";
      StringReader stringReader0 = new StringReader("rtY@\"~8)ApVl4|B!");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.markSupported();
      jSONReaderScanner0.scanInt('w');
      JSONScanner jSONScanner0 = new JSONScanner("", (-1));
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, 'w');
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanDouble('<');
      char[] charArray0 = new char[3];
      charArray0[0] = '<';
      charArray0[1] = 'w';
      charArray0[2] = '<';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(88);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : @
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = 'A';
      charArray0[0] = 'A';
      char char1 = '(';
      charArray0[1] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8192, 39);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanDouble('(');
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(39);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nnnnnnnn");
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-4437));
      jSONScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Set", 0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("Set");
      jSONReaderScanner2.nextToken();
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("error parse false");
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextTokenWithColon((-4437));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - S, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_XkDli$qt");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("_XkDli$qt", 0);
      jSONReaderScanner1.scanDouble(';');
      jSONReaderScanner1.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - _, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '}';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 9);
      jSONReaderScanner0.scanIdent();
      StringReader stringReader0 = new StringReader("..");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("..");
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      JSONScanner jSONScanner0 = new JSONScanner("4PR]5r0N#z MYx58", (-1723095588));
      jSONScanner0.matchField2(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("4PR]5r0N#z MYx58");
      JSONScanner jSONScanner2 = new JSONScanner("9KIQB#dI^");
      jSONScanner2.nextIdent();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("cEh8*", 1384);
      double double0 = jSONScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.time.");
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.", (-972));
      jSONReaderScanner0.isEnabled(818, 0);
      jSONScanner0.scanDecimal('p');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.time.");
      JSONScanner jSONScanner1 = new JSONScanner("java.time.");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      char[] charArray0 = new char[0];
      StringReader stringReader0 = new StringReader("TreeSet");
      JSONScanner jSONScanner0 = new JSONScanner("LEI@wzWS92mE", (-445));
      jSONScanner0.scanType("TreeSet");
      BigDecimal bigDecimal0 = new BigDecimal((double) (-2));
      assertEquals((short) (-2), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[5] = 'M';
      char char0 = 'c';
      charArray0[1] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 448, 484);
      jSONReaderScanner0.matchStat = 484;
      jSONReaderScanner0.nextToken();
      JSONScanner jSONScanner0 = new JSONScanner("\"4Z.JGG", 484);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString('n');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = ", info : ";
      StringReader stringReader0 = new StringReader(", info : ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanIdent();
      stringReader0.markSupported();
      char[] charArray0 = new char[19];
      charArray0[0] = '|';
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanLong('|');
      jSONReaderScanner0.getFeatures();
      SymbolTable symbolTable0 = new SymbolTable(989);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 989, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[5] = (Object) "encodeUTF8 error";
      objectArray0[6] = (Object) "encodeUTF8 error";
      objectArray0[7] = (Object) "encodeUTF8 error";
      JSONScanner jSONScanner0 = new JSONScanner("new", 0);
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals(0, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", info : ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Nxt");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Nxt", 0);
      jSONReaderScanner0.nextToken();
      SymbolTable symbolTable0 = new SymbolTable(45);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, '');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Feature.AllowSingleQuotes is false", 0);
      char[] charArray0 = new char[5];
      jSONScanner0.sp = 0;
      charArray0[0] = '$';
      charArray0[1] = 't';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Feature.AllowSingleQuotes is false");
      jSONReaderScanner0.isEnabled(43, 43);
      jSONScanner0.scanDecimal('8');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Itp^/CG)[z-");
      char[] charArray0 = new char[6];
      Class<Integer> class0 = Integer.class;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Itp^/CG)[z-");
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Itp^/CG)[z-", (-2));
      JSONScanner jSONScanner0 = new JSONScanner("} %mb;S&/sovo", (-2));
      jSONScanner0.scanType("");
      SymbolTable symbolTable0 = new SymbolTable(32);
      jSONScanner0.scanSymbol(symbolTable0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[2];
      jSONReaderScanner0.scanDouble('\u0000');
      JSONScanner jSONScanner0 = new JSONScanner("undefined", (-1));
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanStringArray((Collection<String>) null, 'A');
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner(", info : ");
      jSONScanner1.scanFieldSymbol(charArray0);
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", info : ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldUUID((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONScanner jSONScanner0 = new JSONScanner("2}qln[,");
      jSONScanner0.scanBoolean('Q');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 108, (-1248));
      jSONReaderScanner0.nextToken();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 70, 108);
      jSONReaderScanner1.scanFieldFloatArray(charArray0);
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner(charArray0, (-2), 463);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = 'n';
      charArray0[2] = 'd';
      charArray0[3] = '?';
      charArray0[4] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 39, 39);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 39);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.features = 0;
      jSONReaderScanner0.scanLong('d');
      jSONReaderScanner1.getFeatures();
      jSONReaderScanner0.getCurrent();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, (-2749));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      int int0 = (-1485);
      jSONScanner0.bp = (-1485);
      jSONScanner0.sp = (-1485);
      TimeZone timeZone0 = TimeZone.getTimeZone("j({I?S?[_vZRocEXC");
      jSONScanner0.timeZone = timeZone0;
      // Undeclared exception!
      try { 
        jSONScanner0.scanDate('#');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+5", 334);
      jSONScanner0.bp = 334;
      jSONScanner0.scanInt('%');
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = 'g';
      charArray0[4] = '%';
      jSONScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = "unclosed single-quote string";
      StringReader stringReader0 = new StringReader("unclosed single-quote string");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (-1));
      jSONReaderScanner0.close();
      stringReader0.markSupported();
      char char0 = 'u';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanInt('u');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StringReader stringReader0 = new StringReader("error parse null");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = '\"';
      charArray0[0] = '\"';
      charArray0[1] = '*';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 17);
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.stringDefaultValue();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(jSONReaderScanner0.sbuf, 4096, 45);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nnnnnnnn");
      char[] charArray0 = new char[5];
      charArray0[0] = 'O';
      charArray0[1] = '!';
      char char0 = '!';
      charArray0[2] = '!';
      charArray0[3] = '1';
      charArray0[4] = 'c';
      jSONReaderScanner0.charArrayCompare(charArray0);
      StringReader stringReader0 = new StringReader("+[&");
      stringReader0.mark(0);
      stringReader0.markSupported();
      jSONReaderScanner0.scanInt('w');
      JSONScanner jSONScanner0 = new JSONScanner("'", (-2252));
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, 'F');
      jSONScanner0.bp = (-2252);
      jSONReaderScanner0.isEnabled((-2252), (-128));
      JSONScanner jSONScanner1 = new JSONScanner("", (-128));
      JSONScanner jSONScanner2 = new JSONScanner("nnnnnnnn", (-2688));
      // Undeclared exception!
      try { 
        jSONScanner0.scanDecimal('F');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = "Itp^/CG[z-";
      JSONScanner jSONScanner0 = new JSONScanner("'Ynf>'O.gITr)uV;511", '2');
      int int0 = 3178;
      SymbolTable symbolTable0 = new SymbolTable(3178);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, '2');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      char[] charArray0 = null;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan new error");
      TimeZone.getTimeZone("scan new error");
      JSONLexerBase.readString((char[]) null, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloatArray2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-");
      jSONScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Itp^/CG[z-", (-2147483647));
      char[] charArray0 = new char[5];
      charArray0[0] = 's';
      charArray0[1] = 'X';
      charArray0[2] = 'O';
      charArray0[3] = 'q';
      charArray0[4] = '?';
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("rtY");
      JSONScanner jSONScanner1 = new JSONScanner("Itp^/CG[z-", (-2147483647));
      jSONScanner0.scanType("");
      jSONScanner0.isEOF();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rtY@\"~8)ApVl4|B!");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanIdent();
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = 'w';
      charArray0[2] = '>';
      charArray0[3] = 'w';
      stringReader0.markSupported();
      charArray0[4] = '>';
      charArray0[5] = '>';
      charArray0[6] = '>';
      charArray0[7] = '>';
      JSONLexerBase.readString(charArray0, 0);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      StringReader stringReader1 = new StringReader("");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanUUID('w');
      assertEquals(18, jSONReaderScanner0.token());
      
      jSONReaderScanner1.nextToken();
      assertEquals(989, jSONReaderScanner1.getFeatures());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - @, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 114, 114);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(102);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.numberString();
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rtY@\"~8)ApVl4|B!");
      JSONScanner jSONScanner0 = new JSONScanner("rtY@\"~8)ApVl4|B!", (-922));
      jSONScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("rtY@\"~8)ApVl4|B!", 0);
      JSONScanner jSONScanner1 = new JSONScanner("rtY@\"~8)ApVl4|B!", 0);
      jSONScanner0.scanBoolean('B');
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[2];
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanString();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[5] = (Object) "encodeUTF8 error";
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = '?';
      charArray0[2] = 'O';
      charArray0[3] = 'X';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2461, 31);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      StringReader stringReader0 = new StringReader("encodeUTF8 error");
      jSONReaderScanner0.scanDate('.');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner1.scanUUID(' ');
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 2461);
      jSONReaderScanner2.nextToken();
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("encodeUTF8 error");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - q, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      char[] charArray0 = new char[0];
      StringReader stringReader0 = new StringReader("TreeSet");
      JSONScanner jSONScanner0 = new JSONScanner("LEI@wzWS92mE", (-445));
      jSONScanner0.scanType("TreeSet");
      SymbolTable symbolTable0 = new SymbolTable(59);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[5] = (Object) "encodeUTF8 error";
      objectArray0[6] = (Object) "encodeUTF8 error";
      objectArray0[7] = (Object) "encodeUTF8 error";
      String string0 = "new";
      JSONScanner jSONScanner0 = new JSONScanner("new", 0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'C';
      charArray0[1] = '7';
      charArray0[2] = '\\';
      charArray0[3] = 'V';
      charArray0[4] = '^';
      charArray0[5] = '!';
      charArray0[6] = 'T';
      jSONScanner0.scanFieldLong(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", 1875);
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - T, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-", (-1279));
      jSONScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Itp^/CG[z-", (-1279));
      char char0 = 'G';
      JSONScanner jSONScanner1 = new JSONScanner("new", 0);
      // Undeclared exception!
      try { 
        jSONScanner1.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.scanLong('5');
      jSONScanner0.scanString('L');
      SymbolTable symbolTable0 = new SymbolTable(91);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'L');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 0);
      jSONReaderScanner0.scanLong('X');
      Object[] objectArray0 = new Object[9];
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      objectArray0[0] = (Object) jSONReaderScanner0;
      objectArray0[1] = (Object) ", info : ";
      objectArray0[3] = (Object) ", info : ";
      objectArray0[4] = (Object) jSONReaderScanner0;
      objectArray0[5] = (Object) "encodeUTF8 error";
      objectArray0[6] = (Object) "encodeUTF8 error";
      objectArray0[7] = (Object) "encodeUTF8 error";
      JSONScanner jSONScanner0 = new JSONScanner("IgnoreNonFieldGetter", 0);
      JSONScanner jSONScanner1 = new JSONScanner(", info : ", 93);
      jSONScanner0.scanDecimal('X');
      assertEquals(0, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StringReader stringReader0 = new StringReader("error parse null");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 0);
      jSONReaderScanner0.isBlankInput();
      Feature feature0 = Feature.IgnoreAutoType;
      boolean boolean0 = jSONReaderScanner0.isEnabled(feature0);
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-");
      jSONScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e!#aA?S", 2005);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse null", (-1279));
      jSONScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse null", 0);
      TimeZone.getTimeZone("error parse null");
      jSONReaderScanner0.scanNumber();
      StringReader stringReader0 = new StringReader("C");
      PipedReader pipedReader0 = new PipedReader(1653);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanUUID('');
      assertEquals('r', jSONReaderScanner0.getCurrent());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONReaderScanner1.scanStringArray(linkedHashSet0, 'k');
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[5] = (Object) "encodeUTF8 error";
      objectArray0[6] = (Object) "encodeUTF8 error";
      objectArray0[7] = (Object) "encodeUTF8 error";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeSupport");
      TimeZone.getTimeZone("fastjson.parser.autoTypeSupport");
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '8';
      charArray0[5] = '8';
      charArray0[6] = '8';
      charArray0[7] = '8';
      charArray0[8] = '8';
      jSONReaderScanner0.stringDefaultValue = "encodeUTF8 error";
      JSONLexerBase.readString(charArray0, 0);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.charArrayCompare(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 2);
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.getCurrent();
      char char0 = '+';
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tqt");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("tqt");
      jSONReaderScanner0.scanIdent();
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("tqt");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanLong('\u0000');
      jSONReaderScanner1.getFeatures();
      Feature feature0 = Feature.InternFieldNames;
      jSONReaderScanner1.isEnabled(feature0);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tqt");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("jvDC~<lU");
      jSONReaderScanner0.nextIdent();
      char[] charArray0 = new char[0];
      jSONReaderScanner1.scanFieldSymbol(charArray0);
      BigDecimal bigDecimal0 = new BigDecimal((-2262244760619952081L));
      int int0 = jSONReaderScanner1.intValue();
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-", (-1279));
      jSONScanner0.resetStringPosition();
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      JSONScanner jSONScanner1 = new JSONScanner("P}n6Llw^=i<@R?:", 0);
      jSONScanner0.isEOF();
      assertEquals((-1279), jSONScanner0.getFeatures());
      
      jSONScanner1.info();
      assertEquals(0, jSONScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Ns", 0);
      jSONScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9:{9,j65Z.i4WnFL", 0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Ns");
      int int0 = 749;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldUUID((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 39, (-407));
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanDouble('(');
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.intValue();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("tdo");
      jSONReaderScanner0.scanUUID('0');
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("QuoteFieldNames");
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(")%z5uru", 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ']';
      charArray0[0] = ']';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 484, 484);
      jSONReaderScanner0.matchStat = 484;
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", info : ", 0);
      jSONScanner0.nextToken(0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      jSONReaderScanner0.getCurrent();
      JSONScanner jSONScanner1 = new JSONScanner(", info : ", 8);
      jSONScanner1.scanType((String) null);
      jSONScanner1.isEOF();
      char[] charArray0 = new char[8];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = ',';
      charArray0[3] = ',';
      charArray0[4] = 'y';
      charArray0[5] = ',';
      charArray0[6] = ',';
      charArray0[7] = ',';
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("oracle.sql.DATE");
      jSONReaderScanner0.nextToken(39);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", info : ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("tij", 0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("tij", 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Itp^/CG[z-");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"4Z.JGG", 49);
      SymbolTable symbolTable0 = new SymbolTable(116);
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONScanner0.scanDecimal('.');
      assertEquals(49, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'Ynf>'O.gITr)uV;511");
      jSONReaderScanner0.setToken(14);
      JSONScanner jSONScanner0 = new JSONScanner("WriteTabAsSpecial");
      jSONScanner0.scanDecimal('t');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldIntArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int int0 = (-1973);
      JSONScanner jSONScanner0 = new JSONScanner("'Ynf>'O.gITr)uV;511", (-1973));
      jSONScanner0.scanString('2');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.resetStringPosition();
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = '2';
      charArray0[2] = '4';
      charArray0[3] = '4';
      charArray0[4] = '2';
      charArray0[5] = '4';
      charArray0[6] = '2';
      charArray0[7] = '4';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 52, 52);
      jSONReaderScanner1.resetStringPosition();
      jSONReaderScanner1.nextIdent();
      jSONReaderScanner1.scanDouble('4');
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-", (-1279));
      jSONScanner0.resetStringPosition();
      SymbolTable symbolTable0 = new SymbolTable(84);
      JSONScanner jSONScanner1 = new JSONScanner("A", 256);
      char[] charArray0 = new char[4];
      charArray0[0] = ' ';
      charArray0[1] = 'e';
      charArray0[2] = '';
      charArray0[3] = 'g';
      jSONScanner0.sbuf = charArray0;
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.scanType("a");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = ", info : ";
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSONReaderScanner0;
      objectArray0[1] = (Object) ", info : ";
      objectArray0[2] = (Object) ", info : ";
      objectArray0[3] = (Object) ", info : ";
      objectArray0[4] = (Object) jSONReaderScanner0;
      objectArray0[5] = (Object) "encodeUTF8 error";
      objectArray0[6] = (Object) "encodeUTF8 error";
      objectArray0[7] = (Object) "encodeUTF8 error";
      jSONReaderScanner0.intValue();
      objectArray0[8] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("encodeUTF8 error", objectArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. ,
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e!#aA?S", 0);
      jSONReaderScanner0.isEnabled((-1279), (-915));
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("e!#aA?S", (-1279));
      jSONReaderScanner0.nextToken();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = ", info : ";
      StringReader stringReader0 = new StringReader(", info : ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanIdent();
      stringReader0.markSupported();
      char[] charArray0 = new char[19];
      charArray0[0] = '|';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner1.nextIdent();
      jSONReaderScanner0.scanLong('|');
      jSONReaderScanner1.getFeatures();
      SymbolTable symbolTable0 = new SymbolTable(989);
      TimeZone.getAvailableIDs();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = "java.time.";
      JSONScanner jSONScanner0 = new JSONScanner("java.time.");
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      int int0 = (-1722997438);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("G)x]Xtw6)yJu", (-1722997438));
      jSONReaderScanner0.nextToken(12);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-1722997438), (-1722997438));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1722997438
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = 'k';
      charArray0[2] = 'S';
      charArray0[3] = 'N';
      charArray0[4] = 'T';
      char char0 = 'Q';
      charArray0[2] = 'Q';
      int int1 = 15;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 15);
      int int2 = 92;
      SymbolTable symbolTable0 = new SymbolTable(92);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'S');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rtY@\"~8)ApVl4|B!");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.markSupported();
      int int0 = jSONReaderScanner0.scanInt('w');
      assertEquals(0, int0);
      
      JSONScanner jSONScanner0 = new JSONScanner("", (-1));
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, 'w');
      JSONScanner.checkDate('q', 'J', 'e', 'w', '0', 't', 1023, (-997));
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      assertEquals((-1), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = '[';
      BigDecimal bigDecimal0 = new BigDecimal((int) '[');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal state. ", (-801));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charAt((-801));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      char char0 = '>';
      JSONLexerBase.isWhitespace('>');
      JSONScanner jSONScanner0 = new JSONScanner("scan false error", 2367);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan false error", 0);
      String string0 = "t";
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-", (-1279));
      jSONScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Itp^/CG[z-", (-1279));
      char char0 = jSONReaderScanner0.getCurrent();
      assertEquals('I', char0);
      
      JSONScanner jSONScanner1 = new JSONScanner("P}n6Llw^=i<@R?:", 0);
      int int0 = jSONScanner1.scanType("h2O");
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals((-2), int0);
      
      jSONScanner0.isEOF();
      assertEquals((-1279), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'Q(mmvMT7=VCxd4", (-972));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-972), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+[&");
      stringReader0.markSupported();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1U.%~Ic", 4013);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      float float0 = jSONReaderScanner0.scanFloat('K');
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2}qln[,");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('8');
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.time.");
      char[] charArray0 = new char[6];
      jSONScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.", (-972));
      jSONScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString(3648, (-571));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -571
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", info : ");
      int int0 = (-1718154296);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (-1718154296));
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanIdent();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-1718154296));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Ynf>'O.gITr)uV;511", (-1973));
      jSONScanner0.scanString('2');
      char char0 = '4';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.nextIdent();
      char[] charArray0 = new char[9];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '2';
      charArray0[4] = '2';
      charArray0[5] = '2';
      charArray0[6] = '2';
      charArray0[7] = '2';
      charArray0[8] = 'N';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 117, (-1));
      jSONReaderScanner1.scanDouble('Y');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", info : ", 0);
      JSONScanner jSONScanner1 = new JSONScanner("u<rOs7/\f", 0);
      assertEquals(0, jSONScanner1.matchStat);
      
      float float0 = jSONScanner1.scanFloat('4');
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M0xrhxHSu82&O1,m", 1440);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1440, 1440);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\"");
      jSONReaderScanner1.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 3);
      JSONScanner jSONScanner0 = new JSONScanner("l$d+4i/36J\"eJO0z", 3);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONScanner0.scanStringArray(arrayList0, 'w');
      char[] charArray0 = new char[8];
      charArray0[0] = 'w';
      charArray0[1] = '';
      charArray0[2] = 'w';
      charArray0[3] = '\"';
      charArray0[4] = '\"';
      charArray0[5] = 'Z';
      charArray0[6] = '';
      charArray0[7] = 'w';
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.pos();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      charArray0[1] = 'M';
      int int0 = 0;
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = "+fxGIJnT;>K";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2c-k", 19);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.next();
      jSONReaderScanner0.scanDouble('L');
      int int0 = (-1841496563);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = ")/w+m4ML2ljpbvy\"d&";
      StringReader stringReader0 = new StringReader(")/w+m4ML2ljpbvy\"d&");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanIdent();
      char char0 = '|';
      stringReader0.markSupported();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 1659);
      jSONReaderScanner1.nextIdent();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 999, 21);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-", (-1279));
      jSONScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Itp^/CG[z-");
      jSONScanner0.nextToken((-97));
      jSONReaderScanner0.getCurrent();
      JSONScanner jSONScanner1 = new JSONScanner("P}n6Llw^=i<@R?:", 0);
      jSONScanner1.scanType((String) null);
      jSONScanner0.isEOF();
      assertEquals('t', jSONScanner0.getCurrent());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      charArray0[3] = 'I';
      charArray0[4] = 'I';
      charArray0[5] = 'I';
      charArray0[6] = 'I';
      charArray0[7] = 'I';
      jSONScanner1.scanFieldInt(charArray0);
      assertEquals(0, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = '(';
      charArray0[1] = 'A';
      charArray0[4] = 'A';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'A', 4093);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.nextIdent();
      char[] charArray1 = new char[1];
      charArray0[2] = '(';
      jSONReaderScanner0.scanFieldSymbol(charArray1);
      jSONReaderScanner0.scanInt('\u0000');
      assertEquals(10, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nnnnnnnn", 2877);
      char[] charArray0 = new char[8];
      charArray0[0] = '$';
      charArray0[1] = 'q';
      charArray0[2] = 'f';
      charArray0[3] = '|';
      charArray0[4] = 'S';
      jSONScanner0.close();
      charArray0[5] = '9';
      charArray0[6] = '\\';
      charArray0[7] = 'U';
      jSONScanner0.scanFieldFloatArray(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 65279);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-2), (-234));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -234
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")8nYJ");
      jSONReaderScanner0.skipWhitespace();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(')', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6H", (-133));
      jSONReaderScanner0.scanDate('7');
      jSONReaderScanner0.isEnabled(1551, 71);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.nextToken();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("P}n6Llw^=i<@R?:");
      JSONScanner jSONScanner0 = new JSONScanner("null", 0);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('~');
      assertEquals(0, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = 'M';
      charArray0[0] = 'M';
      charArray0[1] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'M', 484);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      StringReader stringReader0 = new StringReader("eTror parse new");
      stringReader0.read(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('N');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match N - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[6] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      String string0 = "nnnnnnnn";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nnnnnnnn");
      jSONReaderScanner0.scanBoolean('k');
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanUUID('[');
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanUUID('1');
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rtY@\"~8)ApVl4|B!");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanUUID('w');
      char[] charArray0 = new char[4];
      stringReader0.read();
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      charArray0[3] = 'w';
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("r");
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldString(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5(OL.4B");
      int int0 = 1964;
      char[] charArray0 = new char[7];
      charArray0[0] = ',';
      char char0 = 'p';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 5, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanLong('X');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSONReaderScanner0;
      objectArray0[1] = (Object) ", info : ";
      objectArray0[2] = (Object) ", info : ";
      objectArray0[3] = (Object) ", info : ";
      objectArray0[4] = (Object) jSONReaderScanner0;
      objectArray0[5] = (Object) "encodeUTF8 error";
      objectArray0[6] = (Object) "encodeUTF8 error";
      StringReader stringReader0 = new StringReader("false");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      charArray0[2] = 'X';
      charArray0[3] = 'X';
      charArray0[4] = 'X';
      charArray0[5] = 'X';
      stringReader0.read(charArray0);
      jSONReaderScanner1.lexError("EOF", objectArray0);
      jSONReaderScanner0.scanString('a');
      JSONScanner jSONScanner0 = new JSONScanner("([8>RY");
      jSONScanner0.info();
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.setToken(0);
      assertEquals(0, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      char char0 = 'M';
      JSONScanner jSONScanner0 = new JSONScanner("LEI");
      char char1 = 'S';
      jSONScanner0.scanBoolean('z');
      int int0 = 42;
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-403), (-1227));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      StringReader stringReader0 = new StringReader("error parse null");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse null");
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.getCurrent();
      jSONReaderScanner0.isEnabled((-24), 5);
      jSONReaderScanner0.charAt(':');
      char[] charArray0 = new char[4];
      charArray0[0] = 'K';
      charArray0[1] = '>';
      charArray0[2] = '\u0000';
      charArray0[3] = '>';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 5, 5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Itp^/CG[z-", (-2147483647));
      char[] charArray0 = new char[5];
      charArray0[0] = 's';
      charArray0[1] = 'X';
      charArray0[3] = 'q';
      charArray0[4] = '?';
      char[] charArray1 = new char[8];
      charArray1[0] = 'q';
      charArray1[1] = '?';
      charArray1[2] = 'q';
      charArray1[3] = 'X';
      charArray1[4] = 'X';
      charArray1[5] = 'X';
      charArray1[6] = 'O';
      charArray1[7] = '?';
      jSONReaderScanner0.scanFieldFloatArray2(charArray1);
      StringReader stringReader0 = new StringReader("scan new error");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanFieldBigInteger(charArray0);
      jSONReaderScanner1.scanUUID('#');
      jSONReaderScanner1.getTimeZone();
      jSONReaderScanner0.scanString('O');
      assertEquals((-2147483647), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      StringReader stringReader0 = new StringReader("illegal state. ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nnnnnnnn");
      JSONScanner jSONScanner0 = new JSONScanner("illegal state. ");
      jSONScanner0.scanBoolean('O');
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      charArray0[3] = 'O';
      charArray0[4] = 'h';
      charArray0[5] = 'O';
      charArray0[6] = 'k';
      charArray0[7] = 'S';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 83, 3781);
      jSONReaderScanner1.nextIdent();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("MWGhB", 104);
      jSONReaderScanner1.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner2.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ' ';
      StringReader stringReader0 = new StringReader("0PHty8elu31e&=)");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0PHty8elu31e&=)");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("0PHty8elu31e&=)");
      jSONReaderScanner1.nextToken();
      JSONScanner jSONScanner0 = new JSONScanner("0PHty8elu31e&=)", 0);
      jSONScanner0.scanBoolean('-');
      JSONScanner jSONScanner1 = new JSONScanner("UTF-8", (-1));
      JSONScanner jSONScanner2 = new JSONScanner(charArray0, 0);
      Locale locale0 = Locale.forLanguageTag("Mk;qM:");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      jSONScanner1.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner2.scanFieldBigInteger(charArray0);
      jSONScanner2.scanFieldString(charArray0);
      float float0 = jSONReaderScanner1.scanFloat('D');
      assertEquals(2, jSONReaderScanner1.token());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      StringReader stringReader0 = new StringReader("error parse null");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[5] = 'n';
      charArray0[6] = 'n';
      charArray0[7] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 345);
      jSONReaderScanner0.isEnabled(0, 0);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, 'n');
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-U9#7#g", 19);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("_xkdli");
      JSONScanner jSONScanner0 = new JSONScanner("-U9#7#g", 7);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('M');
      assertEquals(7, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 0);
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[2];
      jSONReaderScanner0.scanDouble('\u0000');
      jSONReaderScanner0.scanUUID('D');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("AAAAbAA");
      jSONReaderScanner1.nextToken();
      assertEquals(1, jSONReaderScanner1.token());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = ';';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_XkDli$qt");
      jSONReaderScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 46, 120);
      jSONReaderScanner1.scanDouble('m');
      char[] charArray1 = null;
      jSONReaderScanner1.scanFieldSymbol(charArray0);
      int int0 = 58;
      SymbolTable symbolTable0 = new SymbolTable(120);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      StringReader stringReader0 = new StringReader("illegal state. ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 26);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.nextIdent();
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'I';
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0, 1229);
      boolean boolean0 = jSONReaderScanner1.isEnabled((-2));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[5] = (Object) "encodeUTF8 error";
      objectArray0[6] = (Object) "encodeUTF8 error";
      objectArray0[7] = (Object) "encodeUTF8 error";
      JSONScanner jSONScanner0 = new JSONScanner("new", 0);
      char[] charArray0 = new char[1];
      jSONScanner0.scanUUID('G');
      charArray0[0] = 'G';
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals(0, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      charArray0[1] = 't';
      charArray0[2] = ']';
      charArray0[3] = 'w';
      int int0 = 963;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 963, 963);
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 1440);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 0);
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[2];
      jSONReaderScanner0.scanDouble('\u0000');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(", info : ");
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet", (-979));
      jSONScanner0.scanType("undefined");
      JSONScanner jSONScanner1 = new JSONScanner(", info : ");
      jSONScanner1.isEOF();
      JSONScanner jSONScanner2 = new JSONScanner("undefined", (-1841496563));
      jSONScanner2.stringVal();
      jSONReaderScanner1.scanDate('A');
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      char char0 = '2';
      JSONScanner jSONScanner0 = new JSONScanner("'Ynf>'O.gITr)uV;511", (-1973));
      jSONScanner0.scanString('2');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("pau", 40);
      jSONReaderScanner0.isEOF();
      JSONScanner jSONScanner1 = new JSONScanner("pau", (-1235));
      jSONScanner1.scanType("pau");
      JSONScanner jSONScanner2 = new JSONScanner("pau");
      jSONScanner2.isEOF();
      SymbolTable symbolTable0 = new SymbolTable(1);
      jSONScanner2.scanSymbol(symbolTable0);
      JSONScanner jSONScanner3 = new JSONScanner("TreeSet", 0);
      // Undeclared exception!
      try { 
        jSONScanner2.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 0);
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[2];
      jSONReaderScanner0.scanDouble('\u0000');
      assertEquals(16, jSONReaderScanner0.token());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(", info : ");
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet", (-979));
      jSONScanner0.scanType("undefined");
      JSONScanner jSONScanner1 = new JSONScanner(", info : ");
      jSONScanner1.scanNumber();
      jSONScanner1.isEOF();
      JSONScanner jSONScanner2 = new JSONScanner("undefined", (-1841496563));
      jSONScanner2.stringVal();
      jSONReaderScanner1.scanDate('A');
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false", 4);
      jSONReaderScanner0.scanIdent();
      StringReader stringReader0 = new StringReader("unclosed string : ");
      JSONScanner jSONScanner0 = new JSONScanner("G", 4);
      jSONScanner0.scanDecimal('~');
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.skipWhitespace();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = "new";
      StringReader stringReader0 = new StringReader("new");
      int int0 = (-2717);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (-2717));
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-", (-1279));
      jSONScanner0.resetStringPosition();
      jSONScanner0.scanLong('u');
      jSONScanner0.scanString('u');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = "java.time.";
      StringReader stringReader0 = new StringReader("unclosed single-quote string");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 1295);
      jSONReaderScanner0.setToken((-1));
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("java.time.");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.time.");
      char[] charArray0 = new char[6];
      charArray0[0] = 'p';
      charArray0[1] = 'a';
      charArray0[2] = 'y';
      charArray0[3] = 'V';
      charArray0[4] = 'o';
      charArray0[5] = '%';
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.intValue();
      jSONScanner0.getCalendar();
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 54);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = "Itp^/CG[z-";
      StringReader stringReader0 = new StringReader("Itp^/CG[z-");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, Integer.MIN_VALUE);
      jSONReaderScanner0.close();
      int int0 = 76;
      jSONReaderScanner0.setToken(76);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("=j78nw");
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = '{';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldBoolean(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Am7tMW", 48);
      String string0 = jSONScanner0.tokenName();
      assertEquals(48, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("Unknown", string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      StringReader stringReader0 = new StringReader("illegal state. ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 26);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.nextIdent();
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'I';
      StringReader stringReader1 = new StringReader("");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner1.nextToken(26);
      jSONReaderScanner0.scanUUID('Z');
      jSONReaderScanner0.intValue();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("");
      jSONReaderScanner0.putChar('P');
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("illegal state. ");
      jSONReaderScanner1.getCurrent();
      jSONReaderScanner0.matchField(charArray0);
      assertEquals('s', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      stringReader0.markSupported();
      jSONReaderScanner0.scanInt('w');
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, 'w');
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(stringReader0, (-2));
      jSONReaderScanner1.nextToken();
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("&\"");
      JSONReaderScanner jSONReaderScanner4 = new JSONReaderScanner("error parse new");
      jSONReaderScanner0.nextToken();
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[7];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      charArray0[3] = 'w';
      charArray0[4] = 'w';
      charArray0[5] = 'w';
      charArray0[6] = 'w';
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'u';
      charArray0[3] = 'c';
      SymbolTable symbolTable0 = new SymbolTable(111);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      Locale.lookup(arrayList0, list0);
      jSONReaderScanner0.setLocale((Locale) null);
      jSONReaderScanner0.scanFieldDate(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 18, (-937));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-");
      jSONScanner0.resetStringPosition();
      jSONScanner0.getCalendar();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 95, (-1515));
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanDouble('<');
      jSONReaderScanner0.intValue();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("!");
      jSONReaderScanner0.scanUUID('<');
      Feature feature0 = Feature.AllowSingleQuotes;
      jSONReaderScanner0.config(feature0, true);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("l");
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("");
      jSONReaderScanner0.nextToken();
      assertEquals(1, jSONReaderScanner0.token());
      
      jSONReaderScanner2.bytesValue();
      assertEquals(989, jSONReaderScanner2.getFeatures());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M0xrhxHSu82&O1,m", 1440);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1440, 1440);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      StringReader stringReader0 = new StringReader("gV[%,V\"Feiss");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner1.scanDate(' ');
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanUUID(' ');
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(charArray0, 29);
      assertEquals(989, jSONReaderScanner3.getFeatures());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rtY@\"~8)ApVl4|B!");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.markSupported();
      jSONReaderScanner0.scanInt('w');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("", 108);
      JSONScanner jSONScanner0 = new JSONScanner("rtY@\"~8)ApVl4|B!", 0);
      jSONScanner0.scanType("");
      SymbolTable symbolTable0 = new SymbolTable(91);
      JSONScanner jSONScanner1 = new JSONScanner("juNl");
      jSONScanner1.scanSymbol(symbolTable0);
      jSONScanner0.isEOF();
      StringReader stringReader1 = new StringReader("");
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("-;)O_9d]|U");
      jSONReaderScanner0.nextToken();
      assertEquals('t', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = ",>Z4G";
      int int0 = 63;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",>Z4G", 63);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.matchStat();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ",>Z4G");
      simpleTimeZone0.setEndRule((-1841496563), 0, (-1118159960));
      simpleTimeZone0.getDisplayName();
      // Undeclared exception!
      try { 
        simpleTimeZone0.setEndRule(512, (-1435754015), (-3695));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal end month 512
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("*]x\"E38}~PFD&NDGYt(", 2383);
      jSONScanner0.nextToken(2420);
      Locale locale0 = Locale.ENGLISH;
      jSONScanner0.scanUUID('\'');
      assertEquals(']', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" -> ", (-2896));
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("com.google.common.collect.TreeMultimap", (-2896));
      jSONReaderScanner0.scanDouble('i');
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = "Itp^/CG[z-";
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = ';';
      char char0 = 's';
      charArray0[2] = 's';
      charArray0[3] = '?';
      charArray0[4] = ';';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 45, 2738);
      jSONReaderScanner0.scanInt(';');
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      String string1 = "Pi?HjN[qgxaSk{m!t";
      JSONScanner jSONScanner0 = new JSONScanner("Pi?HjN[qgxaSk{m!t", 43);
      jSONScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = "unclosed single-quote string";
      StringReader stringReader0 = new StringReader("unclosed single-quote string");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (-1));
      jSONReaderScanner0.close();
      jSONReaderScanner0.setToken(76);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("java.time.");
      char[] charArray0 = new char[8];
      charArray0[0] = '{';
      charArray0[1] = '^';
      charArray0[2] = 'p';
      charArray0[3] = 'w';
      charArray0[4] = 'l';
      charArray0[5] = '(';
      charArray0[6] = 'a';
      charArray0[7] = '(';
      jSONReaderScanner1.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ew");
      HashSet<String> hashSet0 = new LinkedHashSet<String>();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[3];
      jSONReaderScanner0.pos();
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      jSONReaderScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nnnnnnnn");
      JSONScanner.checkDate('S', 'S', 'S', 'S', 'S', 'S', 0, 'S');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("nnnnnnnn");
      jSONReaderScanner1.resetStringPosition();
      jSONReaderScanner1.nextIdent();
      jSONReaderScanner0.scanDouble('S');
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      int int0 = 84;
      JSONScanner jSONScanner0 = new JSONScanner("X}", 84);
      char[] charArray0 = null;
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '\u0000', '\u0000');
      jSONReaderScanner0.matchStat = (int) '\u0000';
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanDate('>');
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=7Foj@qqN0A;");
      char[] charArray0 = new char[8];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[5] = 'n';
      charArray0[6] = 'n';
      charArray0[7] = 'n';
      StringReader stringReader1 = new StringReader("error");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 501, 4194);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken((-4989));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.time.");
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'p';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.", (-972));
      jSONReaderScanner0.ch = '>';
      jSONReaderScanner0.isEnabled(815, 0);
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 0);
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[2];
      jSONReaderScanner0.scanDouble('\u0000');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(", info : ");
      JSONScanner jSONScanner0 = new JSONScanner("unclosed string : ");
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.scanFieldString(charArray0);
      float float0 = jSONReaderScanner0.scanFloat('A');
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Ynf>'O.gITr)uV;511", (-1973));
      jSONScanner0.scanString('2');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.resetStringPosition();
      char[] charArray0 = new char[9];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '2';
      charArray0[4] = '2';
      charArray0[5] = '2';
      charArray0[6] = '2';
      charArray0[7] = '2';
      charArray0[8] = 'N';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 117, (-1));
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner1.scanDate('U');
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-2920));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      StringReader stringReader0 = new StringReader("illegal state. ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nnnnnnnn");
      jSONReaderScanner0.scanBoolean('S');
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanUUID('!');
      JSONScanner jSONScanner0 = new JSONScanner("nnnnnnnn", 59);
      char[] charArray0 = new char[3];
      charArray0[0] = '!';
      charArray0[1] = 'S';
      charArray0[2] = 'Z';
      jSONScanner0.matchField2(charArray0);
      char[] charArray1 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray1);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("ZR@PC&|#uEv9~");
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("java.util.OptionalLong", (-1));
      jSONReaderScanner2.scanFloat('V');
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = ')';
      int int0 = 484;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 484, 484);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.matchStat = 484;
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.stringDefaultValue = "?$ref";
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5(OL.4B");
      char[] charArray0 = new char[7];
      charArray0[0] = ',';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 8192);
      jSONReaderScanner1.resetStringPosition();
      jSONReaderScanner0.scanDouble('<');
      jSONReaderScanner1.scanFieldSymbol(charArray0);
      jSONReaderScanner1.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. 5
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = ';';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_XkDli$qt");
      jSONReaderScanner0.nextIdent();
      StringReader stringReader0 = new StringReader("x\"1");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.nextToken(81);
      jSONReaderScanner1.scanUUID('t');
      jSONReaderScanner0.intValue();
      jSONReaderScanner1.scanUUID('B');
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("U Qq0Uce4=+Y{H=");
      JSONReaderScanner jSONReaderScanner4 = new JSONReaderScanner(stringReader0, 123);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \"
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      JSONScanner jSONScanner0 = new JSONScanner("4PR]5r0N#z MYx58", (-1723095588));
      jSONScanner0.matchField2(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(1651);
      jSONScanner0.scanSymbol(symbolTable0, 'x');
      JSONScanner jSONScanner1 = new JSONScanner("PR]5r0N#z MY", (-1723095588));
      jSONScanner0.scanType("lIp$X: 8");
      jSONScanner0.scanDecimal('x');
      assertEquals('5', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = 'k';
      charArray0[2] = 'S';
      charArray0[3] = 'N';
      charArray0[4] = 'T';
      charArray0[5] = 'Q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 15);
      jSONReaderScanner0.nextIdent();
      JSONLexerBase.readString(charArray0, 1);
      jSONReaderScanner0.isEnabled(0, 1501);
      jSONReaderScanner0.isEnabled((-1638), 95);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.serializer.SerializeConfig", (-755));
      boolean boolean0 = jSONScanner0.isEnabled((-755));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals((-755), jSONScanner0.getFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 0);
      jSONReaderScanner0.scanLong('X');
      Object[] objectArray0 = new Object[9];
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldInt(charArray0);
      objectArray0[0] = (Object) jSONReaderScanner0;
      objectArray0[1] = (Object) ", info : ";
      objectArray0[2] = (Object) ", info : ";
      objectArray0[3] = (Object) ", info : ";
      objectArray0[4] = (Object) jSONReaderScanner0;
      objectArray0[5] = (Object) "encodeUTF8 error";
      objectArray0[6] = (Object) "encodeUTF8 error";
      objectArray0[7] = (Object) "encodeUTF8 error";
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.nextIdent();
      objectArray0[8] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("encodeUTF8 error", objectArray0);
      jSONReaderScanner0.getCurrent();
      JSONScanner jSONScanner0 = new JSONScanner("create asm deserializer error, ");
      char[] charArray1 = new char[6];
      charArray1[0] = ' ';
      charArray1[1] = ' ';
      charArray1[2] = ' ';
      charArray1[3] = ' ';
      charArray1[4] = ' ';
      jSONReaderScanner0.arrayCopy(0, charArray1, 0, 0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M0xrhxHSu82&O1,m", 1440);
      jSONScanner0.intValue();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1440, 1440);
      JSONScanner jSONScanner1 = new JSONScanner("AQOBkdr", 13);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 9, 4);
      jSONReaderScanner1.scanFieldSymbol(charArray0);
      jSONReaderScanner1.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('>', '}', 'S', 'k', 'T', 'T');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Itp^/CG)[z-");
      char[] charArray0 = new char[6];
      Class<Integer> class0 = Integer.class;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Itp^/CG)[z-");
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      String string0 = "} %mb;S&/s\\ovo";
      jSONReaderScanner0.scanBoolean('5');
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanUUID('k');
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanUUID('k');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("A");
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Ynf>'O.gITr)uV;511", (-1973));
      char[] charArray0 = new char[9];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[8] = 'N';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 117, 0);
      jSONReaderScanner0.scanDouble('Y');
      SymbolTable symbolTable0 = new SymbolTable(58);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'u';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*@gl [H", 48);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("1[^kX3");
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      jSONReaderScanner0.scanDouble('A');
      charArray0[1] = '(';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(", info : ");
      jSONReaderScanner1.resetStringPosition();
      jSONReaderScanner1.nextIdent();
      jSONReaderScanner0.scanDouble('<');
      jSONReaderScanner1.scanFieldSymbol(charArray0);
      StringReader stringReader0 = new StringReader("+FN|bl)~_k\u0002,$0");
      stringReader0.read();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(stringReader0);
      SymbolTable symbolTable0 = new SymbolTable(39);
      jSONReaderScanner1.scanSymbolWithSeperator(symbolTable0, 'A');
      assertEquals(16, jSONReaderScanner1.token());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rtY@\"~8)ApVl4|B!");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 103);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - r, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5(OL.4B");
      char[] charArray0 = new char[7];
      charArray0[0] = ',';
      JSONScanner jSONScanner0 = new JSONScanner("false", 0);
      jSONScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("UseBigDecimal", 44);
      char char0 = jSONReaderScanner0.getCurrent();
      assertEquals('5', char0);
      
      JSONScanner jSONScanner1 = new JSONScanner("?", 119);
      int int0 = jSONScanner0.scanType("5(OL.4B");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals((-2), int0);
      
      jSONScanner1.isEOF();
      assertEquals(119, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("d%Kb*Uw#z");
      jSONReaderScanner0.scanDouble('e');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      StringReader stringReader0 = new StringReader("d%Kb*Uw#z");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanUUID('+');
      jSONReaderScanner0.isEnabled(0, 0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(",");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner2.scanInt('e');
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextTokenWithChar('a');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match a - d, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      StringReader stringReader0 = new StringReader("illegal state. ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 26);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.nextIdent();
      Object[] objectArray0 = new Object[2];
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = 'n';
      charArray0[2] = 'I';
      charArray0[3] = 'c';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("illegal state. ", objectArray0);
      jSONReaderScanner0.scanString('1');
      assertEquals(' ', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.Rectangle", 1023);
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = ';';
      charArray0[2] = 's';
      charArray0[3] = '?';
      charArray0[4] = ';';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 39, 39);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanDouble('?');
      jSONReaderScanner0.isEnabled(91, 91);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("/", 39);
      jSONReaderScanner1.isBlankInput();
      JSONScanner.checkDate('s', ';', 's', 's', '?', 's', 's', (-1));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2c-k", 19);
      jSONReaderScanner0.indexOf('1', 19);
      jSONReaderScanner0.putChar('d');
      // Undeclared exception!
      jSONReaderScanner0.nextIdent();
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = ';';
      StringReader stringReader0 = new StringReader("x\"1");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \"
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      JSONScanner jSONScanner0 = new JSONScanner("1]?|S+U|j!q}ipkU(", 40);
      jSONScanner0.scanInt('M');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("pzu", 1);
      jSONScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanFloat('M');
      // Undeclared exception!
      try { 
        jSONScanner0.subString((-1), 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'Ynf>'O.gITr)uV;511", (-1279));
      StringReader stringReader0 = new StringReader("Itp^/CG[z-");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.info();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.matchStat = 0;
      jSONReaderScanner0.scanUUID('');
      assertEquals((-1279), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.", (-1));
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError("java.time.", objectArray0);
      jSONReaderScanner0.getCurrent();
      JSONScanner jSONScanner0 = new JSONScanner("m_$'i#d:q_bk", 2295);
      jSONScanner0.isEOF();
      assertEquals(2295, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[5] = (Object) "encodeUTF8 error";
      char[] charArray0 = new char[7];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      charArray0[4] = 'b';
      charArray0[5] = 'A';
      charArray0[6] = 'A';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanDouble('A');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 46, 279);
      jSONReaderScanner1.resetStringPosition();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner1.scanDouble('A');
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(25);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{HQK");
      char[] charArray0 = new char[6];
      charArray0[1] = 'T';
      charArray0[1] = '\\';
      charArray0[2] = 'V';
      charArray0[3] = '\\';
      charArray0[4] = '!';
      charArray0[5] = 'V';
      jSONScanner0.scanFieldLong(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{HQK", (-1968714995));
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.config(feature0, false);
      SymbolTable symbolTable0 = new SymbolTable(1875);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : {
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Ynf>'O.gITr)uV;511", (-1973));
      jSONScanner0.scanString('2');
      SymbolTable symbolTable0 = new SymbolTable(3178);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanDouble('6');
      PipedWriter pipedWriter0 = new PipedWriter();
      int int0 = (-891);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(pipedWriter0, (-891));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = '/';
      charArray0[0] = '/';
      charArray0[1] = 't';
      int int0 = 84;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 363, 84);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[5] = (Object) "encodeUTF8 error";
      objectArray0[6] = (Object) "encodeUTF8 error";
      objectArray0[7] = (Object) "encodeUTF8 error";
      JSONScanner jSONScanner0 = new JSONScanner("new", 0);
      char[] charArray0 = new char[7];
      jSONScanner0.scanFieldFloat(charArray0);
      charArray0[0] = 'C';
      charArray0[1] = '7';
      charArray0[2] = '\\';
      charArray0[3] = 'V';
      charArray0[4] = '^';
      charArray0[5] = '!';
      charArray0[6] = 'T';
      jSONScanner0.scanFieldLong(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", 1875);
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.config(feature0, true);
      SymbolTable symbolTable0 = new SymbolTable(1281);
      jSONReaderScanner0.indexOf('C', 84);
      jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = ", info : ";
      JSONScanner jSONScanner0 = new JSONScanner(", info : ", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldFloatArray2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = 'k';
      charArray0[2] = 'S';
      charArray0[3] = 'N';
      charArray0[4] = 'T';
      charArray0[5] = 'Q';
      int int0 = 15;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 15);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanLong('Q');
      jSONReaderScanner0.getFeatures();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("G)x]Xtw6)yJu", (-1722997438));
      jSONReaderScanner0.nextToken(12);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-1722997438), (-1722997438));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1722997438
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      char[] charArray0 = null;
      int int0 = 71;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString((char[]) null, 71);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-", (-1973));
      char char0 = 'Z';
      jSONScanner0.scanString('Z');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", info : ", 0);
      jSONScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$*[>1nY,", 0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(", info : ");
      jSONReaderScanner1.isEnabled(36, (-1638));
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("new");
      jSONReaderScanner2.nextToken();
      assertEquals('\u001A', jSONReaderScanner2.getCurrent());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-", (-1279));
      jSONScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Itp^/CG[z-", (-1279));
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("P}n6Llw^=i<@R?:");
      jSONReaderScanner1.isEnabled(3710, 815);
      SymbolTable symbolTable0 = new SymbolTable(27);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '`');
      assertEquals((-1279), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      char char0 = '?';
      StringReader stringReader0 = new StringReader("unclosed str");
      int int0 = 102;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"", 102);
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Itp^/CG)[z-");
      char[] charArray0 = new char[6];
      Class<Integer> class0 = Integer.class;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Itp^/CG)[z-");
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      char char0 = 'l';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-593));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Itp^/CG[z-");
      char[] charArray0 = new char[8];
      charArray0[0] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1092);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanLong('8');
      jSONReaderScanner0.getFeatures();
      SymbolTable symbolTable0 = new SymbolTable(989);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 0, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      charArray0[1] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'M', 484);
      jSONReaderScanner0.matchStat = 484;
      jSONReaderScanner0.nextToken();
      JSONScanner jSONScanner0 = new JSONScanner("\"4Z.JGG", 484);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 484, 484);
      jSONReaderScanner1.scanFieldSymbol(charArray0);
      jSONReaderScanner1.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("a", 3392903);
      assertEquals(3392903, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 656;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 656);
      Class<Integer> class0 = Integer.class;
      jSONReaderScanner0.scanFieldDate(charArray0);
      char char0 = 'E';
      jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, 'E');
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('o');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match o - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = ']';
      int int0 = 484;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 484, 484);
      SymbolTable symbolTable0 = new SymbolTable(3);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nnnnnnnn");
      StringReader stringReader0 = new StringReader("+[&");
      stringReader0.ready();
      stringReader0.markSupported();
      jSONReaderScanner0.scanInt('w');
      jSONReaderScanner0.scanUUID('w');
      int int0 = JSONLexer.OBJECT;
      jSONReaderScanner0.scanUUID('K');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("1UU.%~Ic", 4013);
      jSONReaderScanner1.scanFloat('$');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.indexOf('{', 70);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      StringReader stringReader0 = new StringReader("error parse null");
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 0);
      jSONReaderScanner0.isBlankInput();
      char[] charArray0 = new char[1];
      jSONReaderScanner0.scanIdent();
      charArray0[0] = '>';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 2126);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = "error parse null";
      StringReader stringReader0 = new StringReader("error parse null");
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[5] = 'n';
      charArray0[6] = 'n';
      charArray0[7] = 'n';
      charArray0[8] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.getFeatures();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('v');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      JSONScanner jSONScanner0 = new JSONScanner("tqt", 84);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("notwriterootclassname", (-1098137394));
      jSONScanner0.stringVal();
      SymbolTable symbolTable0 = new SymbolTable(69);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      StringReader stringReader0 = new StringReader("illegal state. ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nnnnnnnn");
      jSONReaderScanner0.scanBoolean('S');
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanUUID('!');
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanUUID('[');
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanInt('%');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("nnnnnnnn", 4013);
      jSONScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanFloat('.');
      // Undeclared exception!
      try { 
        jSONScanner0.subString(0, (-186));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("LEI@wzWS92mE", 0);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("LEI@wzWS92mE", (-689));
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.getCurrent();
      jSONReaderScanner0.isEnabled((-1121), (-1121));
      jSONReaderScanner0.getCurrent();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("d%Kb*Uw#z");
      jSONReaderScanner0.scanDouble('e');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      StringReader stringReader0 = new StringReader("d%Kb*Uw#z");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanUUID('e');
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 0);
      assertEquals(989, jSONReaderScanner2.getFeatures());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rtY@\"~8)ApVl4|B!");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.markSupported();
      jSONReaderScanner0.scanInt('w');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("error");
      jSONReaderScanner1.nextToken();
      assertEquals(1, jSONReaderScanner1.token());
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[5] = (Object) "encodeUTF8 error";
      objectArray0[6] = (Object) "encodeUTF8 error";
      objectArray0[7] = (Object) "encodeUTF8 error";
      JSONScanner jSONScanner0 = new JSONScanner("new", 0);
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldString(charArray0);
      charArray0[0] = 'G';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 120);
      jSONReaderScanner0.getCurrent();
      JSONScanner jSONScanner1 = new JSONScanner("encodeUTF8 error", 120);
      jSONScanner0.scanType("uvzjutrd");
      jSONScanner1.isEOF();
      double double0 = jSONScanner1.scanFieldDouble(charArray0);
      assertEquals((-2), jSONScanner1.matchStat);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("LEI@wzWS92mE", 0);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      char char0 = '.';
      jSONReaderScanner0.scanDate('.');
      StringReader stringReader0 = new StringReader("TreeSet");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      char char1 = ' ';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. T
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 3);
      JSONScanner jSONScanner0 = new JSONScanner("l$d+4i/36J\"eJO0z", 3);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(", info : ");
      jSONReaderScanner1.scanDouble('a');
      jSONReaderScanner1.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("kH:^");
      char[] charArray0 = new char[6];
      jSONScanner0.nextIdent();
      charArray0[0] = 'p';
      JSONLexerBase.readString(charArray0, 0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 9, 0);
      jSONReaderScanner0.features = 1643;
      jSONReaderScanner0.isEnabled(999999, 999999);
      jSONScanner0.nextTokenWithColon();
      Feature feature0 = Feature.AllowArbitraryCommas;
      jSONReaderScanner0.isEnabled(feature0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("uhq", 423);
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = 'B';
      charArray0[5] = 'B';
      charArray0[6] = '`';
      jSONReaderScanner0.scanFieldDouble(charArray0);
      char[] charArray1 = new char[3];
      charArray1[0] = '\\';
      charArray1[2] = 'B';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray1, 423);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-");
      jSONScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Itp^/CG[z-", 408);
      jSONReaderScanner0.scanUUID('m');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = ';';
      charArray0[2] = 's';
      charArray0[3] = '?';
      charArray0[4] = ';';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 39, 39);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.nextIdent();
      char char0 = '<';
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanDouble('?');
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(45);
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4544, 43);
      jSONReaderScanner0.scanInt(')');
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("CSt@5!u", 51068);
      assertEquals(51068, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("LEI@wzWS92mE", 0);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tqt");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanIdent();
      char[] charArray0 = new char[5];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      charArray0[3] = 'q';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 'q', 95);
      jSONReaderScanner1.scanFloat('0');
      BigDecimal bigDecimal0 = new BigDecimal((int) 'q');
      jSONReaderScanner1.scanFieldFloatArray2(charArray0);
      StringReader stringReader1 = new StringReader("O4!]=|I\"|:RIXQY");
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(stringReader1);
      jSONReaderScanner2.scanDate('q');
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(stringReader1);
      jSONReaderScanner2.scanUUID('w');
      JSONReaderScanner jSONReaderScanner4 = new JSONReaderScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner3.scanFieldStringArray(charArray0, (-1), (SymbolTable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[5] = 'n';
      charArray0[6] = 'n';
      charArray0[7] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 356);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.info();
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      jSONReaderScanner0.scanDouble('A');
      charArray0[1] = '(';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(", info : ");
      jSONReaderScanner1.resetStringPosition();
      jSONReaderScanner1.nextIdent();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 111);
      jSONReaderScanner2.nextToken(39);
      jSONReaderScanner0.scanUUID('<');
      assertEquals(16, jSONReaderScanner0.token());
      
      jSONReaderScanner1.intValue();
      jSONReaderScanner2.scanUUID('(');
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("SupportAutoType");
      jSONReaderScanner1.nextToken();
      assertEquals('n', jSONReaderScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      charArray0[1] = 'X';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'M', 484);
      jSONReaderScanner0.nextToken();
      JSONScanner jSONScanner0 = new JSONScanner("\"4Z.JGG", 0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 484, 0);
      jSONReaderScanner1.scanFieldSymbol(charArray0);
      jSONReaderScanner1.scanFieldBoolean(charArray0);
      jSONReaderScanner1.isRef();
      assertEquals((-1), jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanFieldString(charArray0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("kxx$j!cB:UKeI");
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals('x', jSONReaderScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanUUID('R');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = "unclosed single-quote string";
      StringReader stringReader0 = new StringReader("unclosed single-quote string");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (-1));
      jSONReaderScanner0.close();
      jSONReaderScanner0.setToken(76);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("java.time.");
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = "java.time.";
      JSONScanner jSONScanner0 = new JSONScanner("java.time.");
      char[] charArray0 = new char[6];
      charArray0[0] = 'p';
      jSONScanner0.scanLong('g');
      jSONScanner0.scanString('2');
      SymbolTable symbolTable0 = new SymbolTable(16384);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, '+');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("uhq", 0);
      int int1 = 1551;
      char char0 = '\\';
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = '\\';
      charArray0[2] = 'B';
      charArray0[2] = '\\';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSONReaderScanner0;
      objectArray0[1] = (Object) ", info : ";
      objectArray0[2] = (Object) ", info : ";
      objectArray0[3] = (Object) ", info : ";
      objectArray0[4] = (Object) jSONReaderScanner0;
      objectArray0[5] = (Object) "encodeUTF8 error";
      objectArray0[6] = (Object) "encodeUTF8 error";
      StringReader stringReader0 = new StringReader(", info : ");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanUUID('');
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 125, 125);
      SymbolTable symbolTable0 = new SymbolTable('{');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("rtY@\"~8)ApVl4|B!");
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 1656, 20);
      jSONReaderScanner2.scanUUID('o');
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("/");
      JSONReaderScanner jSONReaderScanner4 = new JSONReaderScanner("t");
      jSONReaderScanner0.nextToken();
      JSONReaderScanner jSONReaderScanner5 = new JSONReaderScanner("rtY@\"~8)ApVl4|B!");
      jSONReaderScanner5.bytesValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner3.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.time.");
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'p';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.", (-972));
      jSONReaderScanner0.isEnabled(815, 0);
      jSONScanner0.scanDecimal('p');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      int int0 = 2517;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 2517);
      jSONReaderScanner0.resetStringPosition();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", info : ", 0);
      jSONScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(", info : ");
      jSONReaderScanner1.nextToken();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(", info : ");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ,, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan new error");
      Feature feature0 = Feature.DisableASM;
      boolean boolean0 = jSONReaderScanner0.isEnabled(feature0);
      assertFalse(boolean0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = 'k';
      charArray0[2] = 'S';
      charArray0[3] = ';';
      charArray0[4] = 'T';
      charArray0[5] = 'Q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 15);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanLong('Q');
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.getFeatures();
      SymbolTable symbolTable0 = new SymbolTable(';');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 15, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("`\"Js^X=+Q@!m=&2");
      JSONScanner jSONScanner1 = new JSONScanner(":_!z?9qn:M(*OrB;Yf!", '=');
      jSONScanner0.nextToken(2383);
      Locale locale0 = Locale.ENGLISH;
      jSONScanner0.locale = locale0;
      // Undeclared exception!
      try { 
        jSONScanner0.scanUUID('\'');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = "'Ynf>'O.gITr)uV;511";
      JSONScanner jSONScanner0 = new JSONScanner("'Ynf>'O.gITr)uV;511");
      jSONScanner0.scanString('#');
      SymbolTable symbolTable0 = new SymbolTable(3178);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'A');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("?N%/I%oXs`_&he'~7");
      JSONScanner jSONScanner0 = new JSONScanner("2}qln[,", 0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = 'E';
      charArray0[2] = 'h';
      charArray0[3] = ']';
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanDecimal('^');
      jSONReaderScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy((-1548), charArray0, 0, 95);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2c-k", (-1));
      jSONReaderScanner0.isEnabled(68, (-1));
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String string0 = "illegal state. ";
      StringReader stringReader0 = new StringReader("illegal state. ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 26);
      jSONReaderScanner0.stringVal();
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      charArray0[2] = 'I';
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray(charArray1);
      String string1 = "TODO";
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, 4333);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = 'k';
      charArray0[2] = '<';
      charArray0[3] = 'N';
      charArray0[4] = 'T';
      charArray0[2] = 'Q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 15);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanLong('\u0000');
      jSONReaderScanner0.getFeatures();
      jSONReaderScanner0.getCurrent();
      jSONReaderScanner0.scanUUID('~');
      assertEquals('k', jSONReaderScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("false");
      jSONReaderScanner1.nextToken();
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = 'k';
      charArray0[2] = 'S';
      charArray0[3] = 'N';
      charArray0[4] = 'T';
      charArray0[5] = 'Q';
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList1);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = locale0.stripExtensions();
      timeZone0.getDisplayName(locale1);
      JSONScanner jSONScanner0 = new JSONScanner("Z#XN");
      jSONScanner0.setTimeZone(timeZone0);
      jSONScanner0.bytesValue();
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" -> ", 116);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("com.google.common.collect.TreeMultimap", 116);
      jSONReaderScanner0.scanDouble('i');
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      StringReader stringReader0 = new StringReader("error parse null");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse null");
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanDouble('D');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-", (-1279));
      jSONScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Itp^/CG[z-", (-1279));
      jSONReaderScanner0.getCurrent();
      boolean boolean0 = jSONReaderScanner0.isEnabled((-1279), 835);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      charArray0[3] = 'I';
      charArray0[4] = 'I';
      charArray0[5] = 'I';
      charArray0[6] = 'I';
      charArray0[7] = 'I';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0);
      jSONScanner1.scanDecimal('I');
      assertEquals(989, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nnnnnnnn");
      StringReader stringReader0 = new StringReader("+[&");
      stringReader0.markSupported();
      jSONReaderScanner0.scanInt('w');
      jSONReaderScanner0.scanUUID('w');
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      
      jSONReaderScanner0.scanUUID('K');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("1U.%~Ic", 4013);
      float float0 = jSONReaderScanner1.scanFloat('K');
      assertEquals(4013, jSONReaderScanner1.getFeatures());
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      JSONScanner jSONScanner1 = new JSONScanner("false", 95);
      jSONScanner0.resetStringPosition();
      jSONScanner0.isBlankInput();
      jSONScanner0.nextIdent();
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("l$#+4i/36J\"eJO0z");
      char char0 = '4';
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", info : ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanUUID('L');
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanUUID('<');
      char[] charArray0 = new char[9];
      charArray0[0] = '!';
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = 'L';
      charArray0[6] = '0';
      charArray0[7] = 'L';
      charArray0[8] = '<';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner("4PR]5r0N#z MYx58", (-1723095588));
      jSONScanner0.matchField2(charArray0);
      SymbolTable symbolTable0 = new SymbolTable('x');
      jSONScanner0.scanSymbol(symbolTable0, 'x');
      JSONScanner jSONScanner1 = new JSONScanner("PR]5r0N#z MY", (-1723095588));
      // Undeclared exception!
      try { 
        jSONScanner1.scanSymbol(symbolTable0, '');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-", (-1279));
      jSONScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Itp^/CG[z-");
      char char0 = jSONReaderScanner0.getCurrent();
      assertEquals('I', char0);
      
      JSONScanner jSONScanner1 = new JSONScanner("P}n6Llw^=i<@R?:", 0);
      int int0 = jSONScanner1.scanType("P}n6Llw^=i<@R?:");
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals((-2), int0);
      
      jSONScanner0.isEOF();
      assertEquals((-1279), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 125, 2484);
      jSONReaderScanner1.scanInt('=');
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner1.scanFieldSymbol(charArray0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("*j;Y^C&}hdB/.dC)VC", 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner2.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", infno : ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanIdent();
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 909, 27);
      StringReader stringReader1 = new StringReader(", infno : ");
      JSONScanner jSONScanner0 = new JSONScanner(".");
      jSONScanner0.scanNumber();
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner(charArray0, (-2655), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rtY@\"~8)ApVl4|B!");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char char0 = 'w';
      stringReader0.markSupported();
      jSONReaderScanner0.scanInt('w');
      JSONScanner jSONScanner0 = new JSONScanner("", (-1));
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, '8');
      jSONReaderScanner0.isEnabled(91, 49);
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner((String) null, 91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("a", 0);
      StringReader stringReader0 = new StringReader("a");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDouble((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      int int0 = (-1279);
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-", (-1279));
      jSONScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Itp^/CG[z-", (-1279));
      TimeZone.getTimeZone("Itp^/CG[z-");
      jSONReaderScanner0.scanNumber();
      Feature feature0 = Feature.DisableASM;
      jSONReaderScanner0.isEnabled(feature0);
      char char0 = 'I';
      jSONReaderScanner0.scanLong('I');
      jSONReaderScanner0.getFeatures();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-464));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("oracle.sql.DATE");
      jSONReaderScanner0.nextToken(39);
      char[] charArray0 = new char[3];
      charArray0[0] = '@';
      charArray0[1] = 'I';
      charArray0[2] = '?';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 484, 39);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner1.scanFieldFloatArray(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("TODO", 39);
      jSONScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      charArray0[1] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 448, 484);
      jSONReaderScanner0.matchStat = 484;
      jSONReaderScanner0.nextToken();
      JSONScanner jSONScanner0 = new JSONScanner("\"4Z.JGG", 484);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString('n');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_XkDli$qt");
      jSONReaderScanner0.scanIdent();
      StringReader stringReader0 = new StringReader("TreeSet");
      SymbolTable symbolTable0 = new SymbolTable(465);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ay1~5FIe:Jj");
      jSONScanner0.resetStringPosition();
      String string0 = "!#{Zrbc[Pia/H";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined", (-1616905636));
      jSONReaderScanner0.getCurrent();
      jSONReaderScanner0.nextIdent();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      char[] charArray0 = new char[2];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("d%Kb*Uw#z");
      jSONReaderScanner0.scanDouble('e');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      StringReader stringReader0 = new StringReader("d%Kb*Uw#z");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner1.scanDate('s');
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(stringReader0);
      assertEquals(989, jSONReaderScanner2.getFeatures());
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e!#aA?S", 2005);
      JSONScanner jSONScanner0 = new JSONScanner("SkipTransientField", 122);
      jSONScanner0.nextToken(2005);
      Locale locale0 = Locale.ENGLISH;
      jSONScanner0.scanUUID('F');
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("LEI@wzWS92mE", 0);
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      jSONScanner0.isBlankInput();
      SymbolTable symbolTable0 = new SymbolTable(59);
      JSONScanner jSONScanner1 = new JSONScanner("D1~v?n)!");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Itp^/CG[z-");
      char[] charArray0 = new char[8];
      charArray0[6] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nnnnnnnn");
      jSONReaderScanner0.scanDouble('n');
      jSONReaderScanner0.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. n
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2c-k", (-1));
      jSONReaderScanner0.putChar('c');
      assertEquals((-1), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}oK2)gX2s?^");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      StringReader stringReader0 = new StringReader("illegal state. ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nnnnnnnn");
      jSONReaderScanner0.scanBoolean('S');
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanUUID('[');
      jSONReaderScanner0.putChar('a');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      JSONScanner jSONScanner0 = new JSONScanner("4PR]5r0N#z MYx58", (-1723095588));
      SymbolTable symbolTable0 = new SymbolTable(1651);
      jSONScanner0.scanSymbol(symbolTable0, 'x');
      JSONScanner jSONScanner1 = new JSONScanner("PR]5r0N#z MY", (-1723095588));
      jSONScanner0.scanType("lIp$X: 8");
      BigDecimal bigDecimal0 = new BigDecimal((double) 1651);
      assertEquals((byte)115, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      char char0 = '?';
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = ';';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_XkDli$qt");
      jSONReaderScanner0.nextIdent();
      StringReader stringReader0 = new StringReader("x\"1");
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner1.scanFloat(';');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1440304241));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("LEI@wzWS92mE", 0);
      jSONReaderScanner0.close();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldString(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[5] = (Object) "encodeUTF8 error";
      char char0 = 'O';
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      charArray0[2] = 'O';
      charArray0[3] = 'X';
      int int0 = 2461;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2461, 'X');
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      StringReader stringReader0 = new StringReader("encodeUTF8 error");
      jSONReaderScanner0.scanDate('.');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner1.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanUUID(' ');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 0);
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[2];
      jSONReaderScanner0.scanDouble('\u0000');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(", info : ");
      JSONScanner jSONScanner0 = new JSONScanner("unclosed string : ");
      jSONScanner0.scanFieldString(charArray0);
      float float0 = jSONReaderScanner0.scanFloat('A');
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[6] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nnnnnnnn");
      jSONReaderScanner0.scanBoolean('k');
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      jSONReaderScanner0.scanStringArray(set0, 'n');
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanUUID('[');
      jSONReaderScanner0.isEnabled((-1638), (-2315));
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, 'k');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      StringReader stringReader0 = new StringReader("illegal state. ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nnnnnnnn");
      jSONReaderScanner0.scanBoolean('S');
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanUUID('!');
      JSONScanner jSONScanner0 = new JSONScanner("nnnnnnnn", 59);
      char[] charArray0 = new char[3];
      charArray0[1] = 'S';
      jSONScanner0.matchField2(charArray0);
      char[] charArray1 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray1);
      String string0 = "ZR@PC&|#uEv9~";
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("ZR@PC&|#uEv9~");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSONReaderScanner0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      jSONReaderScanner0.scanDouble('A');
      charArray0[1] = '(';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 8192, 39);
      jSONReaderScanner1.resetStringPosition();
      jSONReaderScanner0.scanDouble('<');
      jSONReaderScanner1.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 0);
      jSONReaderScanner0.scanLong('X');
      Object[] objectArray0 = new Object[9];
      char[] charArray0 = new char[1];
      jSONReaderScanner0.scanFieldInt(charArray0);
      objectArray0[2] = (Object) jSONReaderScanner0;
      objectArray0[1] = (Object) ", info : ";
      objectArray0[2] = (Object) ", info : ";
      objectArray0[4] = (Object) jSONReaderScanner0;
      objectArray0[5] = (Object) "encodeUTF8 error";
      objectArray0[6] = (Object) "encodeUTF8 error";
      objectArray0[7] = (Object) "encodeUTF8 error";
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.nextIdent();
      assertEquals(16, jSONReaderScanner0.token());
      
      objectArray0[8] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("encodeUTF8 error", objectArray0);
      jSONReaderScanner0.getCurrent();
      JSONScanner jSONScanner0 = new JSONScanner("create asm deserializer error, ");
      char[] charArray1 = new char[6];
      charArray1[0] = ' ';
      charArray1[1] = ' ';
      charArray1[2] = ' ';
      charArray1[3] = ' ';
      charArray1[4] = ' ';
      jSONReaderScanner0.arrayCopy(0, charArray1, 0, 0);
      assertEquals(0, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("`\"Js^X=+Q@!m=&2", 78);
      char[] charArray0 = new char[1];
      jSONScanner0.scanBoolean('G');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2c-k", (-1));
      jSONReaderScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 2, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      StringReader stringReader0 = new StringReader("illegal state. ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 26);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.nextIdent();
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'I';
      StringReader stringReader1 = new StringReader("");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner1.nextToken(26);
      jSONReaderScanner0.scanUUID('Z');
      jSONReaderScanner0.intValue();
      assertEquals(18, jSONReaderScanner0.token());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("");
      jSONReaderScanner2.scanUUID('y');
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("");
      jSONReaderScanner3.nextToken();
      assertEquals(20, jSONReaderScanner3.token());
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("LEI@wzWS92mE", 0);
      jSONReaderScanner0.scanLong('Q');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[5] = (Object) "encodeUTF8 error";
      objectArray0[6] = (Object) "encodeUTF8 error";
      objectArray0[7] = (Object) "encodeUTF8 error";
      JSONScanner jSONScanner0 = new JSONScanner("new", 0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'C';
      charArray0[1] = '7';
      charArray0[2] = '\\';
      charArray0[3] = 'V';
      charArray0[4] = '^';
      charArray0[5] = '!';
      charArray0[6] = 'T';
      jSONScanner0.scanFieldLong(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", 1875);
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.config(feature0, true);
      SymbolTable symbolTable0 = new SymbolTable(1281);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*@gl [H", 48);
      jSONReaderScanner0.scanUUID('u');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("-pN])f}Xey/3");
      jSONReaderScanner1.nextToken();
      assertEquals(2, jSONReaderScanner1.token());
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = 'k';
      charArray0[2] = 'S';
      charArray0[3] = 'S';
      charArray0[4] = 'T';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 51068, 125);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("zB=oYjou7LvvRP", (-1168));
      JSONScanner jSONScanner0 = new JSONScanner("zB=oYjou7LvvRP");
      jSONScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONReaderScanner1.stringDefaultValue();
      assertEquals((-1168), jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-U9#7#g", 19);
      jSONReaderScanner0.indexOf('M', 2009);
      jSONReaderScanner0.putChar('J');
      jSONReaderScanner0.nextIdent();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSONReaderScanner0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      jSONReaderScanner0.scanDouble('A');
      charArray0[1] = '(';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 8192, 39);
      jSONReaderScanner1.resetStringPosition();
      jSONReaderScanner1.nextIdent();
      jSONReaderScanner0.scanDouble('<');
      jSONReaderScanner1.scanFieldSymbol(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(8192);
      jSONReaderScanner0.scanSymbol(symbolTable0);
      jSONReaderScanner1.integerValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. (
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("P}n6Llw^=i<@R?:");
      JSONScanner jSONScanner0 = new JSONScanner("null", 0);
      jSONReaderScanner0.putChar('<');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      jSONScanner0.scanDecimal('~');
      assertEquals(0, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      jSONReaderScanner0.hasSpecial = false;
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("kxx$j!cB:UKeI");
      JSONScanner jSONScanner0 = new JSONScanner("rtY", (-1));
      jSONScanner0.scanInt('A');
      jSONScanner0.scanType("error parse new");
      jSONScanner0.isEOF();
      jSONScanner0.info();
      assertEquals((-1), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = ']';
      charArray0[0] = ']';
      charArray0[0] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 484, 484);
      jSONReaderScanner0.matchStat = 484;
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      String string0 = "TODO";
      JSONScanner jSONScanner0 = new JSONScanner("TODO", 48);
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('[');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match [ - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rtY@\"~8)ApVl4|B!");
      JSONScanner jSONScanner0 = new JSONScanner("rtY@\"~8)ApVl4|B!", (-922));
      jSONScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("rtY@\"~8)ApVl4|B!", 0);
      jSONReaderScanner0.ch = 'n';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("rtY");
      char char0 = '_';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", info : ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanIdent();
      char char0 = '|';
      JSONScanner jSONScanner0 = new JSONScanner("E;ZU3j!.u\"U?J>'=y", 0);
      jSONScanner0.scanString();
      char char1 = 'p';
      char char2 = 'g';
      char char3 = '';
      jSONScanner0.scanLong(char3);
      jSONScanner0.scanString(char3);
      boolean boolean0 = true;
      jSONScanner0.scanISO8601DateIfMatch(boolean0);
      char char4 = '*';
      char[] charArray0 = new char[8];
      charArray0[0] = char2;
      charArray0[1] = char0;
      charArray0[2] = char4;
      charArray0[3] = char1;
      charArray0[4] = char4;
      charArray0[5] = char2;
      charArray0[6] = char0;
      charArray0[7] = char0;
      int int0 = 32;
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 0);
      Object[] objectArray0 = new Object[9];
      jSONReaderScanner0.lexError("", objectArray0);
      objectArray0[0] = (Object) jSONReaderScanner0;
      objectArray0[1] = (Object) ", info : ";
      objectArray0[2] = (Object) ", info : ";
      objectArray0[3] = (Object) ", info : ";
      objectArray0[4] = (Object) jSONReaderScanner0;
      objectArray0[5] = (Object) "encodeUTF8 error";
      objectArray0[7] = (Object) "encodeUTF8 error";
      jSONReaderScanner0.intValue();
      objectArray0[8] = (Object) jSONReaderScanner0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = '\"';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanType(", info : ");
      JSONScanner jSONScanner1 = new JSONScanner("encodeUTF8 error");
      jSONScanner0.isEOF();
      JSONScanner jSONScanner2 = new JSONScanner("true");
      char[] charArray1 = new char[5];
      charArray1[0] = '\"';
      charArray1[1] = 'R';
      charArray1[2] = 'w';
      charArray1[3] = '\"';
      charArray1[4] = 'B';
      jSONScanner2.scanFieldInt(charArray1);
      jSONReaderScanner0.charAt(0);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-", (-1279));
      jSONScanner0.resetStringPosition();
      char char0 = ';';
      jSONScanner0.isBlankInput();
      SymbolTable symbolTable0 = new SymbolTable(84);
      JSONScanner jSONScanner1 = new JSONScanner("A", 256);
      SymbolTable symbolTable1 = new SymbolTable(16);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ", 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSONReaderScanner0;
      objectArray0[1] = (Object) ", info : ";
      objectArray0[2] = (Object) ", info : ";
      objectArray0[3] = (Object) ", info : ";
      objectArray0[4] = (Object) jSONReaderScanner0;
      objectArray0[5] = (Object) "encodeUTF8 error";
      objectArray0[6] = (Object) "encodeUTF8 error";
      objectArray0[7] = (Object) "encodeUTF8 error";
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      
      objectArray0[8] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("encodeUTF8 error", objectArray0);
      jSONReaderScanner0.getCurrent();
      JSONScanner jSONScanner0 = new JSONScanner("EH0$Sj|}n3#eUlgQB/x", 3303);
      jSONScanner0.isEOF();
      assertEquals(3303, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      char[] charArray0 = new char[2];
      StringReader stringReader0 = new StringReader("error parse new");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 26);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      Object object0 = new Object();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      stringReader0.read(charArray0);
      jSONReaderScanner1.token = (-1);
      StringReader stringReader1 = new StringReader("error parse new");
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken((-1));
      assertEquals(1, jSONReaderScanner0.token());
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("", (-489));
      jSONReaderScanner3.scanUUID('x');
      JSONReaderScanner jSONReaderScanner4 = new JSONReaderScanner(stringReader1, 47);
      jSONReaderScanner4.intValue();
      jSONReaderScanner2.scanUUID('0');
      JSONReaderScanner jSONReaderScanner5 = new JSONReaderScanner("");
      jSONReaderScanner5.nextToken();
      assertEquals(989, jSONReaderScanner5.getFeatures());
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Ynf>'O.gITr)uV;511", (-1973));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'Ynf>'O.gITr)uV;511");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanDouble('!');
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = 'm';
      charArray0[2] = '2';
      charArray0[3] = 'm';
      charArray0[4] = 'm';
      charArray0[5] = 'm';
      charArray0[6] = '2';
      charArray0[7] = '!';
      charArray0[8] = '2';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 2843, 120);
      StringReader stringReader0 = new StringReader("_XkDli$qt");
      jSONReaderScanner1.scanDate('/');
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(stringReader0);
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-1), (-3304));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", info : ", 0);
      char[] charArray0 = new char[8];
      charArray0[0] = '$';
      JSONScanner jSONScanner1 = new JSONScanner(", info : ", 123);
      jSONScanner1.nextToken((-2755));
      jSONScanner1.scanFloat('');
      assertEquals(16, jSONScanner1.token());
      
      int int0 = jSONScanner0.matchStat();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      String string0 = "+fxGIJnT;>K";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+fxGIJnT;>K", 0);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("d%Kb*Uw#z");
      char[] charArray0 = new char[9];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      charArray0[3] = '%';
      charArray0[4] = '%';
      charArray0[5] = 'V';
      charArray0[6] = 'a';
      jSONScanner0.scanISO8601DateIfMatch(true);
      charArray0[7] = 'o';
      jSONScanner0.isBlankInput();
      charArray0[8] = 'a';
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.intValue();
      jSONScanner0.getCalendar();
      jSONScanner0.stringVal();
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-568));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = '*';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 125, 125);
      SymbolTable symbolTable0 = new SymbolTable(125);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : {
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed string : ");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0PHty8elu3re&=)");
      StringReader stringReader0 = new StringReader("infoF ");
      jSONReaderScanner0.scanDate('E');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.matchField(charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("zf5d");
      jSONReaderScanner0.nextIdent();
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      BigDecimal bigDecimal0 = new BigDecimal((long) (-2));
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(79502, int0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Itp^/CG)[z-");
      char[] charArray0 = new char[6];
      char char0 = 'j';
      Class<Integer> class0 = Integer.class;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Itp^/CG)[z-");
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Itp^/CG)[z-", (-2));
      JSONScanner jSONScanner0 = new JSONScanner("} %mb;S&/sovo", (-2));
      jSONScanner0.scanType("");
      SymbolTable symbolTable0 = new SymbolTable(32);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      StringReader stringReader0 = new StringReader("error parse null");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 0);
      char[] charArray0 = new char[1];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      StringReader stringReader1 = new StringReader("eTror parse new");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.getTimeZone();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      String string0 = "unclosed single-quote string";
      StringReader stringReader0 = new StringReader("unclosed single-quote string");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (-1));
      jSONReaderScanner0.setToken(76);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("java.time.");
      jSONReaderScanner1.tokenName();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = ';';
      String string0 = "_XkDli$qt";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_XkDli$qt");
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", info : ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanIdent();
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      jSONReaderScanner0.skipWhitespace();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", info : ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      stringReader0.markSupported();
      jSONReaderScanner0.scanInt('w');
      JSONScanner jSONScanner0 = new JSONScanner("Z-JdA7`GP@~-v<\"X", 0);
      jSONReaderScanner1.scanSymbolWithSeperator((SymbolTable) null, 'w');
      jSONReaderScanner1.isEnabled(53, (-2462));
      JSONScanner jSONScanner1 = new JSONScanner(", info : ", (-2462));
      JSONScanner jSONScanner2 = new JSONScanner("AAAAbAA", (-1441561131));
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('O');
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.time.");
      char[] charArray0 = new char[6];
      jSONScanner0.skipWhitespace();
      jSONScanner0.nextIdent();
      charArray0[0] = 'p';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.", (-972));
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.matchField2(charArray0);
      assertEquals('.', jSONScanner0.getCurrent());
      
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-");
      jSONScanner0.resetStringPosition();
      char[] charArray0 = new char[2];
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, (-1279));
      jSONScanner1.scanFieldDouble(charArray0);
      jSONScanner0.nextToken((-1279));
      jSONScanner0.scanDecimal('v');
      // Undeclared exception!
      try { 
        jSONScanner1.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rtY@\"~8)ApVl4|B!");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.markSupported();
      jSONReaderScanner0.scanInt('w');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("", 108);
      JSONScanner jSONScanner0 = new JSONScanner("rtY@\"~8)ApVl4|B!", 0);
      jSONScanner0.scanType("");
      SymbolTable symbolTable0 = new SymbolTable(91);
      JSONScanner jSONScanner1 = new JSONScanner("null");
      jSONScanner1.scanSymbol(symbolTable0);
      jSONScanner0.isEOF();
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      JSONScanner jSONScanner2 = null;
      try {
        jSONScanner2 = new JSONScanner(charArray0, 2853, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'x';
      charArray0[2] = 'U';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 64, 64);
      SymbolTable symbolTable0 = new SymbolTable(64);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tqt");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanIdent();
      char[] charArray0 = new char[4];
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      charArray0[3] = 'q';
      StringReader stringReader1 = new StringReader("tqt");
      JSONScanner jSONScanner0 = new JSONScanner("9)c> G#I2", 66);
      jSONScanner0.scanDecimal('N');
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.indexOf('N', 66);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan false error");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("encodeUTF8 error", (-1412));
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanDouble('m');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("encodeUTF8 error");
      JSONScanner jSONScanner0 = new JSONScanner("a", (-1));
      jSONScanner0.scanType("encodeUTF8 error");
      JSONScanner jSONScanner1 = new JSONScanner("encodeUTF8 error");
      jSONScanner1.isEOF();
      JSONScanner jSONScanner2 = new JSONScanner("a", 0);
      jSONScanner0.stringVal();
      jSONReaderScanner0.scanDate('y');
      assertEquals(1, jSONReaderScanner0.token());
      
      jSONScanner2.bytesValue();
      assertEquals(0, jSONScanner2.getFeatures());
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      String string0 = "Itp^/CG[z-";
      JSONScanner jSONScanner0 = new JSONScanner("'Ynf>'O.gITr)uV;511", (-1973));
      jSONScanner0.scanString('2');
      SymbolTable symbolTable0 = new SymbolTable(3178);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, '2');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Itp^/CG[z-");
      char[] charArray0 = new char[8];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[5] = 'n';
      charArray0[6] = 'n';
      charArray0[7] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 345);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.getFeatures();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nnnnnnnn");
      jSONReaderScanner0.scanBoolean('S');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("nnnnnnnn");
      jSONReaderScanner1.nextIdent();
      jSONReaderScanner1.nextIdent();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("-2-P5[DgR~A[$#", 0);
      jSONReaderScanner2.scanDouble(':');
      // Undeclared exception!
      try { 
        jSONReaderScanner2.longValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'Ynf>'O.gITr)uV;511");
      jSONReaderScanner0.setToken(14);
      JSONScanner jSONScanner0 = new JSONScanner("'Ynf>'O.gITr)uV;511");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldIntArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rtY@\"~8)ApVl4|B!");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("rtY@\"~8)ApVl4|B!");
      stringReader0.markSupported();
      int int0 = jSONReaderScanner0.scanInt('w');
      assertEquals(0, int0);
      
      JSONScanner jSONScanner0 = new JSONScanner("", (-1));
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, 'w');
      char[] charArray0 = new char[7];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      charArray0[3] = 'w';
      charArray0[4] = 'w';
      charArray0[5] = 'w';
      charArray0[6] = 'w';
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertNull(string0);
      
      jSONReaderScanner0.scanString();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-");
      jSONScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Itp^/CG[z-", (-1279));
      jSONReaderScanner0.getCurrent();
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, (-1279));
      jSONScanner1.scanFieldDouble(charArray0);
      assertEquals((-2), jSONScanner1.matchStat);
      
      jSONScanner1.matchField2(charArray0);
      assertEquals((-1279), jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSONReaderScanner0;
      char[] charArray0 = new char[2];
      jSONReaderScanner0.scanFieldString(charArray0);
      charArray0[0] = 'A';
      jSONReaderScanner0.scanDouble('A');
      charArray0[1] = '(';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 8192, 39);
      jSONReaderScanner1.resetStringPosition();
      jSONReaderScanner1.nextIdent();
      jSONReaderScanner0.scanDouble('<');
      jSONReaderScanner1.scanFieldSymbol(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(8192);
      jSONReaderScanner0.scanSymbol(symbolTable0);
      jSONReaderScanner1.integerValue();
      jSONReaderScanner0.scanString('3');
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. (
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.markSupported();
      pipedReader0.close();
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pipedReader0, 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '>';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 2121);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("f=mbO_V}3QQ/!SH)+^4");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-");
      jSONScanner0.resetStringPosition();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Itp^/CG[z-", (-2147483647));
      char[] charArray0 = new char[5];
      charArray0[0] = 's';
      charArray0[1] = 'X';
      charArray0[2] = 'O';
      charArray0[3] = 'q';
      charArray0[4] = '?';
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("P}n6Llw^=i<@R?:");
      jSONReaderScanner0.isEnabled((-1279), (-1935));
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONScanner0.scanDecimal('.');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 356);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.time.");
      jSONScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.", (-972));
      JSONScanner jSONScanner1 = new JSONScanner("java.time.", 0);
      int int0 = jSONScanner0.token();
      assertEquals('.', jSONScanner0.getCurrent());
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("wOe");
      jSONReaderScanner0.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. w
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-U9#7#g", 'M');
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanInt('7');
      jSONReaderScanner0.indexOf('M', 2009);
      jSONReaderScanner0.matchStat = 77;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("-U9#7#g", (-1));
      jSONReaderScanner1.scanFloat('J');
      jSONReaderScanner0.getTimeZone();
      assertEquals(77, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nnnnnnnn");
      jSONReaderScanner0.scanBoolean('S');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("nnnnnnnn");
      jSONReaderScanner1.nextIdent();
      jSONReaderScanner1.nextIdent();
      JSONScanner jSONScanner0 = new JSONScanner("PS&KGhvIy]Gf|PF?N", (-1));
      SymbolTable symbolTable0 = new SymbolTable(76);
      SymbolTable symbolTable1 = new SymbolTable(1651);
      jSONScanner0.scanSymbol(symbolTable1, 'S');
      JSONScanner jSONScanner1 = new JSONScanner("a", (-1));
      jSONScanner0.scanType("a");
      BigDecimal bigDecimal0 = new BigDecimal((-3224.523726285115));
      assertEquals((short) (-3224), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 656);
      Class<Integer> class0 = Integer.class;
      jSONReaderScanner0.scanFieldDate(charArray0);
      char char0 = 'E';
      jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, 'E');
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.scanFieldUUID(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(jSONReaderScanner0.sbuf, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", info : ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanIdent();
      stringReader0.markSupported();
      char[] charArray0 = new char[19];
      charArray0[0] = '|';
      charArray0[1] = '|';
      JSONLexerBase.readString(charArray0, 0);
      jSONReaderScanner0.stringDefaultValue = "scan true error";
      StringReader stringReader1 = new StringReader("AE~F");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanDate('U');
      jSONReaderScanner0.scanUUID('e');
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONReaderScanner1.scanStringArray(linkedHashSet0, 'z');
      assertEquals((-1), jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("LEI@wzWS92mE", 0);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      int int0 = 0;
      jSONReaderScanner0.eofPos = 0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Itp^/CG[z-");
      jSONScanner0.scanISO8601DateIfMatch(true);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("d%Kb*Uw#z");
      jSONReaderScanner0.scanDouble('e');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      StringReader stringReader0 = new StringReader("d%Kb*Uw#z");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner1.scanDate('s');
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner2.scanUUID('!');
      JSONReaderScanner jSONReaderScanner3 = null;
      try {
        jSONReaderScanner3 = new JSONReaderScanner(charArray0, (-644));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"4Z.JGG", (-1676));
      // Undeclared exception!
      try { 
        jSONScanner0.scanString('n');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      int int0 = 0;
      JSONScanner jSONScanner0 = new JSONScanner(", info : ", 0);
      jSONScanner0.nextToken(0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      jSONScanner0.scanLong('Z');
      jSONScanner0.isEOF();
      // Undeclared exception!
      try { 
        JSONLexerBase.readString((char[]) null, 1793);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Itp^/CG[z-");
      char[] charArray0 = new char[8];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[2] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 699, (-887));
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      String string0 = "gV[%,V\"Feiss";
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('n');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      JSONScanner.checkDate('5', '%', 'J', '5', 'q', 'w', 368, 101);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("E<fF>F{P<<>$EMG");
      char[] charArray0 = new char[6];
      charArray0[0] = '%';
      charArray0[1] = 'p';
      charArray0[2] = 'w';
      charArray0[3] = '%';
      charArray0[4] = '5';
      charArray0[5] = 'J';
      jSONReaderScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(368);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - E, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'M';
      charArray0[1] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 484, 484);
      jSONReaderScanner0.matchStat = 484;
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("TODO", 65279);
      char char0 = 'r';
      char char1 = '.';
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }
}
