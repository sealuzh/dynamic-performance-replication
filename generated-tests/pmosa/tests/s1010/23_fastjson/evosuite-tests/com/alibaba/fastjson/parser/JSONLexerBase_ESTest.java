/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 16:35:35 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.LineNumberReader;
import java.io.PipedReader;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('%');
      jSONReaderScanner0.stringVal();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("PQz<3EaK");
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      charArray0[1] = 't';
      charArray0[2] = '!';
      charArray0[3] = 'v';
      jSONScanner0.scanDecimal(')');
      charArray0[4] = '}';
      charArray0[5] = 'h';
      charArray0[6] = '%';
      charArray0[7] = 'E';
      jSONScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.subString(834, 834);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("76yzP)_n");
      jSONReaderScanner0.charAt(0);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong(';');
      assertEquals(76L, long0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'a';
      charArray0[1] = ')';
      charArray0[2] = ':';
      charArray0[3] = '?';
      charArray0[4] = 'n';
      charArray0[5] = '(';
      charArray0[6] = '\\';
      charArray0[7] = ']';
      charArray0[8] = 'I';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 103);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("QuoeFieldNames");
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("SKga\fl=:Lgr-agXNN.");
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      char char0 = 'w';
      charArray0[1] = 'w';
      jSONScanner0.scanUUID('U');
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("`Fr+(Nk%}3)MMP<&");
      jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('D');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "8uz\"P5M'`<";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 8
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 24);
      jSONReaderScanner0.matchStat = 24;
      Class<Feature> class0 = Feature.class;
      SymbolTable symbolTable0 = new SymbolTable(24);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '?');
      Class<Feature> class1 = Feature.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : ?
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ZnJAUsK?9WsU");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(34);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 't');
      jSONReaderScanner0.stringVal();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ne");
      jSONReaderScanner0.scanDecimal('.');
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      boolean boolean0 = jSONReaderScanner0.isEnabled(125);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1188, 1188);
      jSONReaderScanner0.nextToken(1188);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      SymbolTable symbolTable0 = new SymbolTable(1188);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '`');
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.stringVal();
      int int0 = jSONReaderScanner0.pos();
      assertEquals(0, int0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("parse number key error");
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONReaderScanner0.close();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 35);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.features = 35;
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.stringVal();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")x9>Yg\"0C;f-JbL");
      int int0 = 0;
      jSONScanner0.token = 0;
      jSONScanner0.longValue();
      jSONScanner0.nextToken();
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      jSONReaderScanner0.scanString();
      long long0 = jSONReaderScanner0.scanLong('k');
      assertEquals(0L, long0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = ">S";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(">S");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("wvZ{-NpR:=/%|V=");
      Locale locale0 = Locale.CANADA;
      jSONReaderScanner0.token = (-746);
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.setToken((-896));
      jSONReaderScanner0.sub_chars(2407, 0);
      assertEquals((-896), jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      jSONReaderScanner0.stringVal();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFloat('Z');
      jSONReaderScanner0.stringVal();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.scanString('j');
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "";
      JSONScanner jSONScanner0 = new JSONScanner("");
      char char0 = '4';
      jSONScanner0.scanInt('a');
      jSONScanner0.hasSpecial = false;
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      charArray0[1] = '4';
      charArray0[2] = 'g';
      charArray0[3] = 'a';
      charArray0[4] = 'a';
      jSONScanner0.token = 0;
      charArray0[5] = '4';
      jSONScanner0.ch = '3';
      charArray0[6] = 'a';
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.ch = 'g';
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ne");
      jSONReaderScanner0.scanFloat(']');
      int int0 = jSONReaderScanner0.scanInt('S');
      assertEquals(0, int0);
      
      long long0 = jSONReaderScanner0.scanLong('{');
      assertEquals(0L, long0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("parse number key error");
      jSONReaderScanner0.stringVal();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("parse number key error");
      jSONReaderScanner0.nextToken(21);
      jSONReaderScanner0.stringVal();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('a', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      String string0 = "v7";
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("v7");
      jSONReaderScanner1.scanFieldDecimal(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.pos();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. v
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("s_ i*WTr{5z", 28);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. s
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("i");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char char0 = '4';
      char char1 = 'a';
      jSONScanner0.scanInt('a');
      jSONScanner0.hasSpecial = false;
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      charArray0[1] = '4';
      charArray0[2] = 'g';
      charArray0[3] = 'a';
      charArray0[4] = 'a';
      jSONScanner0.token = 0;
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('l');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match l - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = 65;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 65);
      int int1 = 73;
      jSONReaderScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("76yzP)_n");
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.charAt(0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong(';');
      assertEquals(76L, long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 24);
      jSONReaderScanner0.matchStat = 24;
      Class<Feature> class0 = Feature.class;
      SymbolTable symbolTable0 = new SymbolTable(24);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '?');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("illegal identifier : ", 24);
      SymbolTable symbolTable1 = new SymbolTable(59);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanSymbol(symbolTable1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanInt('a');
      jSONScanner0.hasSpecial = false;
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      charArray0[1] = '4';
      charArray0[2] = 'g';
      charArray0[3] = 'a';
      charArray0[4] = 'a';
      jSONScanner0.token = 0;
      charArray0[5] = '4';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 463);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.longValue();
      jSONScanner0.nextToken();
      jSONScanner0.scanFieldString(charArray0);
      char char0 = ';';
      SymbolTable symbolTable0 = new SymbolTable(105);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u001Apos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ew");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.scanLong('c');
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.nextToken(125);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('A');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match A - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fpp", 1188);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(1188);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = ", fieldName ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "false");
      int int0 = 11;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", fieldName ", 11);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ,, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 845);
      jSONReaderScanner0.scanInt('j');
      jSONReaderScanner0.scanFieldLong(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(4096);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'U');
      jSONReaderScanner0.scanSymbol(symbolTable0);
      Class<Object> class1 = Object.class;
      jSONReaderScanner0.newCollectionByType(class1);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.charArrayCompare(charArray1);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\u0000");
      jSONReaderScanner1.next();
      int int0 = jSONReaderScanner0.getFeatures();
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 56);
      jSONReaderScanner0.tokenName();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.stringVal();
      Locale locale0 = Locale.FRENCH;
      char[] charArray0 = new char[1];
      jSONReaderScanner0.scanBoolean('v');
      charArray0[0] = '';
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.bytesValue();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      boolean boolean0 = jSONReaderScanner0.scanBoolean('U');
      assertFalse(boolean0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 56);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.stringVal();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2), "");
      jSONReaderScanner0.setTimeZone(simpleTimeZone0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.nextToken(0);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar(']');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match ] - u, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JSONScanner jSONScanner0 = new JSONScanner("YQ<4");
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.close();
      jSONScanner0.scanDecimal('|');
      jSONScanner0.scanDecimal('|');
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.subString(0, 0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("springfox.documentation.spring.web.json.Json");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('J');
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(">S");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      int int0 = Calendar.FEBRUARY;
      jSONReaderScanner0.scanString('-');
      Feature feature0 = Feature.IgnoreNotMatch;
      jSONReaderScanner0.config(feature0, true);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed.str.lit");
      Feature feature0 = Feature.SupportAutoType;
      char[] charArray0 = new char[5];
      charArray0[0] = '*';
      charArray0[1] = '/';
      charArray0[2] = 'G';
      charArray0[3] = '~';
      charArray0[4] = 'P';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 35);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 35);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet");
      jSONReaderScanner0.scanUUID('5');
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("create");
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(");
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = '1';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.nextToken(810);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ne");
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanDate('n');
      jSONReaderScanner0.scanLong(')');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("`Fr+(Nk%}3)MMP<&");
      jSONReaderScanner0.scanDate('v');
      jSONReaderScanner0.stringVal();
      char[] charArray0 = new char[9];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      charArray0[2] = '?';
      charArray0[3] = 'v';
      charArray0[4] = 'v';
      charArray0[5] = 'v';
      charArray0[6] = 'i';
      charArray0[7] = 'v';
      charArray0[8] = 'v';
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("undefined", (-1), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFloat('G');
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6");
      int int0 = jSONReaderScanner0.scanType((String) null);
      assertEquals((-2), int0);
      
      jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[7];
      charArray0[0] = 'j';
      charArray0[1] = '-';
      charArray0[2] = '4';
      charArray0[3] = 'C';
      charArray0[4] = '0';
      charArray0[5] = '5';
      charArray0[6] = 'S';
      SymbolTable symbolTable0 = new SymbolTable(65536);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 32, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("`Fr+(Nk%Z}3)MMP<&");
      jSONReaderScanner0.stringVal();
      float float0 = jSONReaderScanner0.scanFloat(']');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.nextToken(0);
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[8];
      charArray0[0] = 'O';
      charArray0[1] = 'B';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[2] = 'm';
      charArray0[3] = '{';
      charArray0[4] = 'y';
      charArray0[5] = 'O';
      charArray0[6] = 'p';
      charArray0[7] = 'W';
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.pos();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('W');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner("true", 78);
      SymbolTable symbolTable0 = new SymbolTable(78);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.LocalDateTime");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("false", (-1766));
      jSONReaderScanner1.scanBoolean('x');
      assertEquals((-1766), jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanLong('V');
      char[] charArray0 = new char[7];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      charArray0[2] = 'V';
      charArray0[3] = 'V';
      charArray0[4] = 'V';
      charArray0[5] = 'V';
      charArray0[6] = 'V';
      jSONReaderScanner0.copyTo(4, 4, charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("76yzP)_n");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanString('g');
      jSONReaderScanner0.scanLong(';');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double double0 = jSONReaderScanner0.scanDouble('[');
      assertEquals(76.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      jSONReaderScanner0.nextToken(18);
      jSONReaderScanner0.stringDefaultValue();
      assertEquals('u', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.scanLong(';');
      jSONReaderScanner0.nextIdent();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      jSONReaderScanner0.stringVal();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not support : ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.scanFloat('B');
      jSONReaderScanner0.scanNumber();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.nextToken(5);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ne");
      jSONReaderScanner0.stringVal();
      char char0 = ']';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      char[] charArray0 = new char[0];
      JSONLexerBase.readString(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFloat('Z');
      jSONReaderScanner0.stringVal();
      JSONLexerBase.isWhitespace('X');
      jSONReaderScanner0.getCurrent();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan new error");
      SymbolTable symbolTable0 = new SymbolTable(2956);
      jSONReaderScanner0.addSymbol(67, 67, 2956, symbolTable0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONScanner jSONScanner0 = new JSONScanner("true", 3897);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("true");
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      jSONScanner0.scanString('0');
      jSONScanner0.scanStringArray(list0, 'V');
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("s_ i*WTr{5z", 28);
      jSONReaderScanner0.nextToken(28);
      assertEquals('_', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      jSONReaderScanner0.nextToken(0);
      jSONReaderScanner0.getCalendar();
      jSONReaderScanner0.getLocale();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanLong('i');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.LocalTime", 2176);
      char[] charArray0 = new char[6];
      charArray0[0] = 'h';
      jSONReaderScanner0.stringDefaultValue = "java.time.LocalTime";
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldInt(charArray1);
      jSONReaderScanner0.token = 2176;
      charArray0[1] = '[';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = ',';
      charArray0[3] = 'X';
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONReaderScanner0.stringDefaultValue = "java.time.LocalTime";
      charArray0[4] = ' ';
      charArray0[5] = '3';
      jSONReaderScanner0.timeZone = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 2552, (SymbolTable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      jSONReaderScanner0.stringVal();
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      jSONReaderScanner0.nextIdent();
      charArray0[1] = '5';
      charArray0[2] = '?';
      charArray0[3] = '&';
      charArray0[4] = 'd';
      charArray0[5] = 'P';
      jSONReaderScanner0.scanFieldLong(charArray0);
      char[] charArray1 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(">S");
      char char0 = 'B';
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \">\", 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("parse number key error");
      jSONReaderScanner0.scanFloat('Z');
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.nextToken(11);
      char[] charArray0 = new char[6];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = ';';
      charArray0[3] = 'Z';
      charArray0[4] = 'Z';
      charArray0[5] = 'Z';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.indexOf('/', 11);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy((-1), charArray0, 1278, Integer.MIN_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1188);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldString(charArray0);
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("parse number key error");
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      charArray0[1] = '%';
      charArray0[2] = '?';
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.isEnabled(10, 10);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      float float0 = jSONReaderScanner0.scanFloat('j');
      assertEquals(8.0F, float0, 0.01F);
      
      jSONReaderScanner0.stringVal();
      String string0 = jSONReaderScanner0.scanString('j');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'B';
      charArray0[4] = '+';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 102);
      jSONReaderScanner0.scanInt('+');
      jSONReaderScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      float float0 = jSONReaderScanner0.scanFloat(' ');
      assertEquals(8.0F, float0, 0.01F);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\":\"");
      jSONReaderScanner1.scanDate('{');
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet");
      int int0 = 18;
      jSONReaderScanner0.nextToken(2376);
      String string0 = "[Q-o s'[4Ya";
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("[Q-o s'[4Ya");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("n4");
      char[] charArray0 = new char[3];
      charArray0[0] = 'I';
      charArray0[1] = '4';
      charArray0[2] = '3';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('%');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.scanDouble('!');
      jSONReaderScanner0.sub_chars(15, 15);
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 117;
      char[] charArray0 = new char[1];
      charArray0[0] = '>';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 117);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.nextToken(0);
      assertEquals(1, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      jSONReaderScanner0.scanDate('6');
      jSONReaderScanner0.nextToken(18);
      assertEquals('u', jSONReaderScanner0.getCurrent());
      
      Number number0 = jSONReaderScanner0.integerValue();
      assertEquals(8, number0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("parse number key error");
      jSONReaderScanner0.nextToken(7);
      jSONReaderScanner0.stringVal();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7$,>ZBsIkD1Q/=*6mK");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7$,>ZBsIkD1Q/=*6mK");
      jSONReaderScanner0.scanFloat('Q');
      jSONReaderScanner0.nextToken(0);
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFloat('N');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("");
      jSONReaderScanner1.scanDate('5');
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 30);
      SymbolTable symbolTable0 = new SymbolTable(84);
      jSONReaderScanner0.addSymbol(30, 30, (-463), symbolTable0);
      jSONReaderScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 25);
      StringReader stringReader0 = new StringReader("\"O(Gbd4SbBe)_Q=8");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\"O(Gbd4SbBe)_Q=8", 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanFieldDate(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      jSONReaderScanner0.nextToken(0);
      jSONReaderScanner0.decimalValue(false);
      jSONReaderScanner0.scanNumber();
      assertEquals('u', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 20, 699);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      int int0 = 116;
      char[] charArray0 = new char[0];
      jSONReaderScanner0.nextToken(2780);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      Class<Feature> class0 = Feature.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.alibaba.fastjson.parser.Feature
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.stringVal();
      char[] charArray0 = new char[1];
      jSONReaderScanner0.token = 10;
      jSONReaderScanner0.scanString('I');
      charArray0[0] = 'J';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-32);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanString('d');
      jSONReaderScanner0.scanBoolean('d');
      jSONReaderScanner0.next();
      jSONReaderScanner0.isEnabled(1392, 1392);
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'e';
      charArray0[3] = 'd';
      charArray0[4] = 'e';
      charArray0[5] = 'g';
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      jSONReaderScanner0.nextToken(8);
      jSONReaderScanner0.stringVal();
      char[] charArray0 = new char[2];
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      SymbolTable symbolTable0 = new SymbolTable(6658);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'W');
      charArray0[0] = 'r';
      charArray0[1] = 'W';
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1562);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.nextToken(1562);
      jSONReaderScanner0.scanFieldInt(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 2370, 68);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8u\"P5M'`<");
      jSONReaderScanner0.nextToken(5);
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8u\"P5M'`<");
      jSONReaderScanner0.ch = '{';
      jSONReaderScanner0.nextToken(5);
      assertEquals('u', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.isRef();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      jSONReaderScanner0.scanString();
      long long0 = jSONReaderScanner0.longValue();
      assertEquals('P', jSONReaderScanner0.getCurrent());
      assertEquals(149L, long0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("NonStringKeyAsString");
      jSONReaderScanner1.scanNumber();
      jSONReaderScanner1.scanIdent();
      jSONReaderScanner1.longValue();
      jSONReaderScanner1.scanNumber();
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 24);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "new");
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.stringVal();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 15;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 15);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "undefined");
      FileSystemHandling.shouldAllThrowIOExceptions();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONReaderScanner0.matchStat();
      int int0 = jSONReaderScanner0.scanType("}aTxmC");
      assertEquals((-2), int0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("F>");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("~3}.wMs##|n9**2lT", 119);
      jSONReaderScanner0.close();
      jSONReaderScanner1.nextToken(19);
      jSONReaderScanner1.stringVal();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.stringVal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('.');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("76yzP)_n");
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.setTimeZone(timeZone0);
      jSONReaderScanner0.scanString('g');
      jSONReaderScanner0.scanLong(';');
      char[] charArray0 = new char[7];
      charArray0[0] = ';';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = 'g';
      charArray0[4] = ';';
      charArray0[5] = 'g';
      charArray0[6] = ';';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 120);
      jSONReaderScanner1.nextToken(1079);
      jSONReaderScanner1.stringVal();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-2354));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanLong('I');
      jSONReaderScanner0.scanDate('U');
      jSONReaderScanner0.scanNullOrNew();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":7mPH82*SK<=|4f[l");
      jSONReaderScanner0.nextToken(57);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      jSONReaderScanner0.nextToken(16);
      jSONReaderScanner0.nextToken(18);
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      
      Number number0 = jSONReaderScanner0.integerValue();
      assertEquals(149, number0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      jSONReaderScanner0.nextToken(16);
      assertEquals(2, jSONReaderScanner0.token());
      
      jSONReaderScanner0.integerValue();
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("F>");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("~3}.wMs##|n9**2lT", 119);
      char[] charArray0 = new char[4];
      charArray0[0] = 'h';
      charArray0[1] = 'n';
      charArray0[2] = 's';
      charArray0[3] = 'r';
      jSONReaderScanner1.scanFieldSymbol(charArray0);
      jSONReaderScanner1.nextToken(4);
      jSONReaderScanner0.nextToken((-215));
      jSONReaderScanner0.bytesValue();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~:5{");
      jSONReaderScanner0.scanLong('k');
      jSONReaderScanner0.nextToken(4);
      assertEquals(':', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("parse number key errof");
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, 'S');
      jSONReaderScanner0.scanInt('r');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONReaderScanner0.scanDouble('h');
      JSONScanner jSONScanner0 = new JSONScanner(")rQ&vo!`?#i1{Xez", (-123008));
      char[] charArray0 = new char[1];
      jSONScanner0.resetStringPosition();
      charArray0[0] = 'h';
      jSONScanner0.scanFieldStringArray(charArray0, (-123008), (SymbolTable) null);
      jSONReaderScanner0.bytesValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 35);
      jSONReaderScanner0.matchField(charArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Class<Feature> class0 = Feature.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      jSONReaderScanner0.scanStringArray(list1, 'K');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 99999);
      jSONReaderScanner1.scanDouble('K');
      jSONReaderScanner1.nextToken((-399));
      jSONReaderScanner1.stringVal();
      jSONReaderScanner0.skipWhitespace();
      assertEquals(20, jSONReaderScanner0.token());
      
      jSONReaderScanner1.scanDate('|');
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SupportArrayToBean");
      int int0 = 117;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("c1v,p'D!!b5");
      jSONReaderScanner0.scanSymbol((SymbolTable) null);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("c1v");
      jSONReaderScanner1.nextToken(117);
      jSONReaderScanner0.integerValue();
      jSONReaderScanner1.scanDecimal('7');
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = '7';
      charArray0[2] = '7';
      int int1 = (-1270);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1270));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("EOF error");
      char[] charArray0 = new char[7];
      charArray0[0] = 'z';
      JSONScanner jSONScanner0 = new JSONScanner("76yzP");
      jSONScanner0.scanDecimal('z');
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.subString(0, 0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'2[8 m");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'2[8 m");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(2325);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("`Fr+(Nk%}3)MMP<&");
      jSONReaderScanner0.nextToken(10);
      jSONReaderScanner0.stringVal();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals('F', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ne");
      jSONReaderScanner0.scanString('i');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanLong('{');
      jSONReaderScanner0.scanUUID('B');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONReaderScanner0.scanDouble('{');
      JSONScanner jSONScanner0 = new JSONScanner("`Fr", (-1));
      jSONScanner0.scanInt('G');
      assertEquals((-1), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not support : ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('[');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("K[(j}[`");
      char[] charArray0 = new char[9];
      charArray0[0] = ']';
      jSONReaderScanner0.stringVal();
      charArray0[1] = '2';
      charArray0[2] = 'n';
      charArray0[3] = ',';
      jSONReaderScanner0.scanFieldString(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(".=Lnv~mG_2Y");
      jSONReaderScanner1.scanNumber();
      int int0 = jSONReaderScanner0.token();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("FPP_]");
      jSONReaderScanner0.scanDecimal('+');
      int int0 = Calendar.MAY;
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.integerValue();
      int int1 = jSONReaderScanner0.matchStat();
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      charArray0[2] = 'v';
      charArray0[3] = 'A';
      charArray0[4] = 'v';
      charArray0[5] = 'v';
      charArray0[6] = 'v';
      charArray0[7] = 'v';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1460, (-2099));
      jSONReaderScanner0.nextTokenWithChar('v');
      jSONReaderScanner0.scanBoolean('4');
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanDecimal('v');
      jSONReaderScanner0.scanType("6");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanInt('O');
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("axhym");
      SymbolTable symbolTable0 = new SymbolTable(56);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, '~');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.nextToken((-969));
      jSONReaderScanner0.isEnabled((-1534), 0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanUUID('&');
      jSONReaderScanner0.putChar('q');
      jSONReaderScanner0.close();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.nextToken(4);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((-215));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("K[(j}[`");
      char[] charArray0 = new char[9];
      charArray0[0] = ']';
      charArray0[1] = '2';
      charArray0[2] = 'n';
      jSONReaderScanner0.nextToken((int) ']');
      jSONReaderScanner0.nextToken((int) 'n');
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals('(', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'I';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(bufferedReader0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.stringVal();
      Locale locale0 = Locale.FRENCH;
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader1, 1562);
      jSONReaderScanner1.scanBoolean('d');
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanDecimal(']');
      jSONReaderScanner1.scanType("NonStringKeyAsString");
      jSONReaderScanner1.scanInt('Z');
      Class<Object> class0 = Object.class;
      jSONReaderScanner1.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.LocalTime");
      char char0 = '6';
      jSONReaderScanner0.scanDecimal('6');
      jSONReaderScanner0.scanType("java.time.LocalTime");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.nextIdent();
      int int0 = 8192;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-2));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - t, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("76yzP)_n");
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.setTimeZone(timeZone0);
      jSONReaderScanner0.scanString('g');
      jSONReaderScanner0.scanLong(';');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONReaderScanner0.scanDouble('[');
      jSONReaderScanner0.scanLong('z');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      int int0 = jSONReaderScanner0.scanInt('P');
      assertEquals(76, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanUUID('5');
      jSONReaderScanner0.putChar('a');
      jSONReaderScanner0.close();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("parse number key error");
      jSONReaderScanner0.nextToken(1);
      Locale locale0 = Locale.FRENCH;
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0, 1);
      jSONReaderScanner1.scanBoolean('7');
      jSONReaderScanner1.scanFieldBigInteger(charArray0);
      jSONReaderScanner1.scanDecimal('e');
      String string0 = "NonStringKeyAsString";
      jSONReaderScanner0.scanType("parse number key error");
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - n, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("YQ<4");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("YQ<4");
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("EOF error");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals(0.0, double0, 0.01);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UvClSd9KqaL6mS");
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.info();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("o$l");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("o$l");
      jSONReaderScanner1.nextToken(0);
      char[] charArray0 = new char[2];
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONReaderScanner0.scanStringArray(arrayList0, '{');
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("r0b9l-%V]Uqk$bgQg");
      jSONReaderScanner2.nextToken(0);
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(charArray0, 120);
      jSONReaderScanner1.nextToken(0);
      jSONReaderScanner0.nextToken(20);
      assertEquals(1, jSONReaderScanner0.token());
      
      jSONReaderScanner3.scanFieldBoolean(charArray0);
      assertEquals(989, jSONReaderScanner3.getFeatures());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanLong('A');
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanStringArray((Collection<String>) null, 'A');
      int int0 = 12;
      jSONReaderScanner0.nextToken(12);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.skipWhitespace();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 91);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("expect ':' at ");
      jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.scanString('C');
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONReaderScanner0.scanDate('#');
      jSONReaderScanner0.scanNumber();
      LineNumberReader lineNumberReader0 = null;
      try {
        lineNumberReader0 = new LineNumberReader((Reader) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("EOF error");
      jSONReaderScanner0.nextToken(15);
      JSONScanner jSONScanner0 = new JSONScanner("EOF error", 15);
      jSONReaderScanner0.nextToken(15);
      char[] charArray0 = new char[4];
      charArray0[0] = '}';
      charArray0[1] = '@';
      charArray0[2] = 't';
      charArray0[3] = '\"';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.nextToken((-3649));
      jSONReaderScanner0.nextToken(5);
      jSONReaderScanner0.scanInt('^');
      int int0 = jSONReaderScanner0.scanInt('/');
      assertEquals(4, jSONReaderScanner0.pos());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. 8
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      char[] charArray0 = new char[1];
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanUUID('5');
      jSONReaderScanner0.nextToken(2);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.skipWhitespace();
      int int0 = jSONReaderScanner0.getFeatures();
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(989, int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "hb{d;#MJ|XA3!");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)26;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("`Fr+(Nk%}3)MMPzE");
      jSONReaderScanner0.scanIdent();
      int int0 = Calendar.MAY;
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.nextToken(68);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '\u0082';
      charArray0[1] = '\u0082';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 49);
      jSONReaderScanner0.scanDouble('M');
      jSONReaderScanner0.scanStringArray((Collection<String>) null, '\u0082');
      jSONReaderScanner0.sp = 49;
      SymbolTable symbolTable0 = new SymbolTable(49);
      jSONReaderScanner0.nextToken(49);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0082
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      char[] charArray0 = new char[1];
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanUUID('5');
      jSONReaderScanner0.nextToken(2);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.nextToken(2);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanUUID('5');
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.stringVal();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 4, 4);
      jSONReaderScanner1.nextToken(9);
      jSONReaderScanner1.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextTokenWithChar('*');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match * - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanLong('A');
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.nextToken(13);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.skipWhitespace();
      char[] charArray1 = new char[6];
      charArray1[0] = '/';
      charArray1[1] = 'A';
      charArray1[2] = 'A';
      charArray1[3] = 'A';
      charArray1[4] = 'A';
      charArray1[5] = 'A';
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader(charArray1, (-3928), 1487);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('(');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("o$l");
      jSONReaderScanner0.scanSymbol((SymbolTable) null);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("o$l");
      jSONReaderScanner1.nextToken(0);
      jSONReaderScanner1.scanDecimal('s');
      int int0 = Calendar.MAY;
      jSONReaderScanner1.nextIdent();
      jSONReaderScanner1.intValue();
      jSONReaderScanner1.integerValue();
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader((Reader) null, 68);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("z\"P5M~'`<");
      char[] charArray0 = new char[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.scanFieldDouble(charArray0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONReaderScanner0.scanStringArray(arrayList0, '5');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("r0b9l-%V]Uqk$bgQg");
      jSONReaderScanner0.nextToken(6);
      jSONReaderScanner1.stringVal();
      jSONReaderScanner0.skipWhitespace();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("EOF error");
      char[] charArray0 = new char[7];
      charArray0[0] = 'z';
      jSONReaderScanner0.scanSymbol((SymbolTable) null);
      jSONReaderScanner0.scanFieldDate(charArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "EOF");
      jSONReaderScanner0.np = (int) 'z';
      jSONReaderScanner0.nextIdent();
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // OF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ne");
      jSONReaderScanner0.stringVal();
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = new SymbolTable(256);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 't');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONReaderScanner0.scanDate('n');
      jSONReaderScanner0.scanLong('n');
      jSONReaderScanner0.scanInt('n');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.nextToken(0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.nextToken((-1));
      assertEquals('u', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = Calendar.MAY;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" -> ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      jSONReaderScanner0.nextToken(2345);
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = '~';
      jSONReaderScanner0.floatValue();
      charArray0[2] = 'i';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('6');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 6 - u, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      jSONReaderScanner0.nextToken(1243);
      jSONReaderScanner0.nextToken(11);
      SymbolTable symbolTable0 = new SymbolTable(11);
      // Undeclared exception!
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'V');
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.nextToken(3);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      char[] charArray0 = new char[0];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" -> ");
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.matchField(charArray0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = 'W';
      charArray0[2] = 'S';
      charArray0[3] = 'k';
      charArray0[4] = 'T';
      charArray0[5] = '>';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26);
      Feature feature0 = Feature.NonStringKeyAsString;
      jSONReaderScanner0.config(feature0, true);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(26);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. W
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" -> ");
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.timeZone = timeZone0;
      jSONReaderScanner0.scanFieldUUID(charArray0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      char[] charArray0 = new char[5];
      charArray0[0] = 'M';
      charArray0[1] = 'w';
      charArray0[3] = '9';
      charArray0[4] = 'k';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.nextToken(13);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.nextToken((-3492));
      jSONReaderScanner0.scanFieldSymbol(charArray0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("treeset");
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.timeZone = timeZone0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      char char0 = File.separatorChar;
      jSONReaderScanner0.nextToken((-119));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = 'm';
      charArray0[2] = 'o';
      charArray0[3] = '[';
      charArray0[4] = '';
      charArray0[5] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26, 23);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.nextToken(116);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "P[R}<p3");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not support : ");
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" -> ");
      jSONScanner0.isBlankInput();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not support : ");
      char[] charArray0 = new char[7];
      charArray0[0] = 'B';
      charArray0[1] = 'A';
      charArray0[2] = 'B';
      charArray0[3] = 'X';
      charArray0[4] = 'B';
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      jSONReaderScanner0.scanStringArray(set0, '$');
      charArray0[5] = 'B';
      charArray0[6] = 'B';
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.close();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ']';
      charArray0[1] = '9';
      charArray0[2] = 'T';
      charArray0[3] = 'b';
      charArray0[4] = 'n';
      charArray0[5] = 'T';
      charArray0[7] = 'A';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 335, 335);
      jSONReaderScanner0.nextToken(335);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not support : ");
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      charArray0[1] = '^';
      jSONReaderScanner0.scanType("g");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.nextToken((-3492));
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanFieldUUID(charArray0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("null");
      char[] charArray1 = new char[6];
      charArray1[0] = 'M';
      charArray1[1] = 'Q';
      charArray1[2] = '\'';
      charArray1[3] = '.';
      charArray1[4] = 'r';
      charArray1[5] = 'N';
      JSONLexerBase.readString(charArray1, 0);
      JSONScanner jSONScanner0 = new JSONScanner("+W6*m");
      jSONScanner0.stringVal();
      jSONReaderScanner2.scanFieldDecimal(charArray0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8uz\"P5M'`<");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloat(charArray0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanFloat('/');
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = 'B';
      charArray0[5] = '/';
      charArray0[6] = 'B';
      charArray0[7] = 'B';
      charArray0[8] = 'B';
      jSONReaderScanner0.scanFieldDouble(charArray0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not suppo\rt : ");
      jSONReaderScanner0.stringVal();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloat(charArray0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '}';
      charArray0[1] = 'p';
      charArray0[2] = 'c';
      charArray0[3] = '&';
      charArray0[4] = '';
      charArray0[5] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.nextToken(1);
  }
}
