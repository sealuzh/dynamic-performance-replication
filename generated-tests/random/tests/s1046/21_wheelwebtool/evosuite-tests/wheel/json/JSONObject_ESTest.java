/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 17:23:41 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("getvalueOf", "");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("\"\"", (Collection) linkedList0);
      String string0 = JSONObject.valueToString(jSONObject0, (-54582745), (-1705));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Double double0 = new Double((-769.7536353110036));
      JSONObject jSONObject0 = new JSONObject(double0);
      Short short0 = new Short((short)2259);
      jSONObject0.accumulate(".%EY3;", short0);
      Short short1 = new Short((short) (-2703));
      jSONObject0.accumulate(".%EY3;", short1);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{beIB(y'b6!");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 11 of {beIB(y'b6!
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = new String[8];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.putOpt((String) null, "MK6&O_aRih73n(u?~^j");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("(,$", (Map) hashMap0);
      Object object0 = jSONObject1.opt("(,$");
      assertNotSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("rtk6$og#", true);
      boolean boolean0 = jSONObject1.has("rtk6$og#");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = jSONObject0.putOpt("FA\"OTaVQuyG+W", float0);
      long long0 = jSONObject1.getLong("FA\"OTaVQuyG+W");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-1553), (-1553));
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.testValidity(object0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.remove("Unclosed comment");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("\"\"", object0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      Float float0 = new Float(Double.NaN);
      Boolean boolean0 = Boolean.valueOf("5)ohqX");
      hashMap0.put(float0, boolean0);
      JSONObject jSONObject1 = jSONObject0.put("(,$", (Map) hashMap0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Byte, Double> hashMap0 = new HashMap<Byte, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (-592));
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Short short0 = new Short((short) (-177));
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.put("", (double) (short) (-177));
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optLong("E4Tm{+gI:#&>B", 5054L);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("] is not a Boolean.", 1733);
      assertEquals(1733, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("3Q&miI", (double) 0L);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("", (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("\"java.lang.Integer@0000000001\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.get("QZ)5BZAZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"QZ)5BZAZ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = JSONObject.doubleToString(88);
      assertEquals("88", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("istoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = JSONObject.quote("Z=&+WKMQQ]CV");
      assertEquals("\"Z=&+WKMQQ]CV\"", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("c)p/d }ARIL|01d'.", 1L);
      double double0 = jSONObject1.optDouble("c)p/d }ARIL|01d'.", (-3019.94865));
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("(,$");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Byte byte0 = new Byte((byte)63);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Float float0 = new Float(0.0);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("true", false);
      try { 
        jSONObject0.getLong("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("Cx", "Cx");
      try { 
        jSONObject1.getInt("Cx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Cx\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("java.lang.Integer@0000000001", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Double double0 = new Double((-769.7536353110036));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.keys();
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] is not a Boolean.", (Collection) null);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("(,$", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String string0 = JSONObject.valueToString(linkedList0, 12, 1144);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      String string0 = JSONObject.valueToString(hashMap0, 113, 113);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 88, 58);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Float float0 = new Float(405.783F);
      jSONArray0.put(9, (Object) float0);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray0, 1873, 4);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-3766), (-3766));
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "onrp*EuN");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Boolean boolean0 = new Boolean("null");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.put("null", (Object) long0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Boolean boolean0 = new Boolean("null");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Long long0 = new Long(0L);
      jSONObject0.put("null", (Object) long0);
      jSONObject0.toString(2205, 2205);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Boolean boolean0 = new Boolean("null");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String string0 = jSONObject0.toString(2023);
      jSONObject0.optString(string0, ";<o;BPeEI");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject2 = jSONObject1.put("rtk6$og#", (Collection) linkedList0);
      jSONObject2.toString();
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(44, (Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONObject0.length());
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(45, jSONArray1.length());
      assertNotNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte) (-80));
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, (-142), 1665);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      int int0 = jSONObject0.optInt("}d8'+</9eOyepfZdk");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "<Wcg4\"S/~82N;)(%#}");
      try { 
        jSONObject0.getInt("<Wcg4\"S/~82N;)(%#}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<Wcg4\\\"S/~82N;)(%#}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      boolean boolean0 = jSONObject0.optBoolean("ykO\nFx:dIIG8&K+");
      assertFalse(boolean0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.getBoolean("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\t\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "<#LJ_4ieTGlBs6";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("JSONArray[", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Short short0 = new Short((short)54);
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("rtk6$og#", (Collection) linkedList0);
      String string0 = jSONObject0.optString("rtk6$og#");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      jSONObject0.put("\r", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("\r");
      assertNotSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("8yYU`hHhZ`]Tu]Y>");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Byte byte0 = new Byte((byte)7);
      JSONObject jSONObject0 = new JSONObject(byte0);
      Integer integer0 = new Integer((byte)7);
      jSONObject0.append("getoptJSONObject", integer0);
      jSONObject0.optJSONArray("getoptJSONObject");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optJSONArray((String) null);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Double double0 = new Double((-769.7536353110036));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("to", 1227.79492958928);
      double double1 = jSONObject0.optDouble("to");
      assertEquals(4, jSONObject0.length());
      assertEquals(1227.79492958928, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Float float0 = new Float((-1916.0426085335243));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optLong("[;Tc+D_T4", (-1L));
      jSONObject0.put("[;Tc+D_T4", (-1L));
      jSONObject0.toString(624);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "onrp*EuN");
      jSONObject0.toString(103);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Boolean boolean0 = new Boolean("null");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte) (-116));
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject1 = jSONObject0.put("to", (Map) hashMap0);
      long long0 = jSONObject1.optLong("to");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)34);
      jSONObject0.put("ro", (Object) byte0);
      try { 
        jSONObject0.getJSONObject("ro");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ro\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] is not a Boolean.", (Collection) null);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("] is not a Boolean.");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Byte byte0 = new Byte((byte)63);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.put("0", (Object) byte0);
      try { 
        jSONObject0.getJSONArray("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Float float0 = new Float(1.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("?6pEKtG3'p|{E0N?<y", 1017.0);
      int int0 = jSONObject0.getInt("?6pEKtG3'p|{E0N?<y");
      assertEquals(4, jSONObject0.length());
      assertEquals(1017, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Float float0 = new Float((-1916.0426085335243));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("[;Tc+D_T4", (-1L));
      double double0 = jSONObject1.getDouble("[;Tc+D_T4");
      assertEquals(4, jSONObject0.length());
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("false", true);
      boolean boolean0 = jSONObject0.getBoolean("false");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("ci7e9h}", (Object) "O-G'P,Ur");
      try { 
        jSONObject0.getBoolean("ci7e9h}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ci7e9h}\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Short short0 = new Short((short) (-177));
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.append("[", short0);
      boolean boolean0 = jSONObject1.optBoolean("[", true);
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Byte, Double> hashMap0 = new HashMap<Byte, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", false);
      boolean boolean0 = jSONObject1.optBoolean("", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Double double0 = new Double((-769.7536353110036));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("to", 1227.79492958928);
      long long0 = jSONObject1.getLong("to");
      assertEquals(4, jSONObject0.length());
      assertEquals(1227L, long0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-3345.0));
      assertEquals("-3345", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-4773.7693358));
      assertEquals("-4773.7693358", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("4B@r/TxC Um7or:Edr/", true);
      try { 
        jSONObject1.append("4B@r/TxC Um7or:Edr/", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[4B@r/TxC Um7or:Edr/] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Short short0 = new Short((short) (-177));
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.append("[", short0);
      Long long0 = new Long((short) (-177));
      jSONObject0.append("[", long0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("\"\"", (Collection) linkedList0);
      Boolean boolean0 = new Boolean("getvalueOf");
      JSONObject jSONObject2 = jSONObject1.accumulate("\"\"", boolean0);
      assertSame(jSONObject0, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("JSONObject[", jSONArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Boolean boolean0 = new Boolean("null");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}", (Map) null);
      Long long0 = new Long(0L);
      jSONObject1.put("null", (Object) long0);
      // Undeclared exception!
      jSONObject0.toString(2205, 2205);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("%C*!QG_{5x4=$x,ydJ");
      jSONTokener0.nextValue();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 18 of %C*!QG_{5x4=$x,ydJ
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      jSONObject0.putOpt("FA\"OTaVQuyG+W", float0);
      boolean boolean0 = jSONObject0.isNull("FA\"OTaVQuyG+W");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Double double0 = new Double((-769.7536353110036));
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      jSONObject0.toString(4811);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@00000000070", 3604);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, (-1814L));
      assertEquals((-1814L), long0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("rtk6$og#");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("toS");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("9J~;n@STUAo{7s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 9J~;n@STUAo{7s
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      jSONObject0.put("A JSONArray text must start with '['", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("A JSONArray text must start with '['");
      assertNotSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wheel.json.JSONObject@0000000001", 0.0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Short short0 = new Short((short) (-566));
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      try { 
        jSONObject0.getString("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject1 = jSONObject0.put("true", (Collection) linkedList0);
      jSONObject1.toString(88, (-3399));
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }
}
