/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 22:20:28 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      try { 
        Utility.decode("$91$91U$91$A$A$A", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte)57;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$A$A9$A", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)90;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$AZ$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)122;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$Az$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)97;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$Aa$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      byte[] byteArray1 = new byte[4];
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)16;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 00 00 00 10 00 00 00", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)35;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 23 00", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes(" fields:\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  fields:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-874), 2463);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = Utility.clearBit((-1635), 32767);
      assertEquals(2147482013, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = Utility.setBit(3039, 2660);
      assertEquals(3039, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte byte0 = Utility.typeOfMethodSignature("(Lpublic;Lclass;Lclass;Lclass;Lclass;LNull;Lclass;)Lpublic;");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = Utility.signatureToString("L;", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = Utility.signatureToString("Ljava/lang/;");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = Utility.replace("R^E'fbPPZ>w E", "R^E'fbPPZ>w E", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.printArray((Object[]) stringArray0, false, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = Utility.methodSignatureToString("()LZ;", "fSI#/+jj&.Q=_", "fSI#/+jj&.Q=_");
      assertEquals("fSI#/+jj&.Q=_ Z fSI#/+jj&.Q=_()", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = Utility.methodSignatureArgumentTypes("(SSSILInvalid;)S");
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = Utility.methodSignatureArgumentTypes("()S");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-5138), 167, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = Utility.setBit(0, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = Utility.setBit((-4061), 2660);
      assertEquals((-4045), int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = Utility.replace("Pattern is missing", "interface", (String) null);
      assertEquals("Pattern is missing", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace(", reference_index = ", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, true, true);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object[] objectArray0 = new Object[17];
      String string0 = Utility.printArray(objectArray0, true);
      assertEquals("{null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("null, null, null, null, null, null", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("L");
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[7];
      MockPrintStream mockPrintStream0 = new MockPrintStream("qtFaXM4!ZH]z");
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) stringArray0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      LocalVariableTable localVariableTable0 = new LocalVariableTable(2385, (-836), localVariableArray0, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("B{9GP/%|q3", "M?Rxl6\"l,U9Uy<p~", "!@P^F.FR", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: B{9GP/%|q3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null, true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      try { 
        Utility.methodSignatureToString("yW!mb1>7wW1ZT", "yW!mb1>7wW1ZT", "", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: yW!mb1>7wW1ZT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      try { 
        Utility.methodSignatureToString("", "", "L;", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("SUFi", (String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "lE\"[|,", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "_Em:rKK6", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("x{MO_u", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: x{MO_u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "2\"N", "L8R_D?Lbom7u`C");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", ">;", ">;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = Utility.isSet((byte)0, (byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = Utility.getSignature("");
      assertEquals("L;", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = Utility.format(75, 75, false, '6');
      assertEquals("666666666666666666666666666666666666666666666666666666666666666666666666675", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = Utility.format(32767, (-875), true, 'z');
      assertEquals("32767", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = Utility.format(161, (-2882), true, '\\');
      assertEquals("161", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = Utility.format(0, 0, false, 'n');
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = Utility.format((byte) (-128), 46, true, '^');
      assertEquals("-128^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = Utility.fillup(" is null.", 1216, true, '1');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("", false);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = Utility.convertString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = Utility.compactClassName("", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = Utility.compactClassName("", "", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = Utility.compactClassName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1518, (int) (byte)31, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 108, 108, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1339), 1249);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = Utility.clearBit(81, (byte)0);
      assertEquals(80, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = Utility.clearBit(0, 214);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = Utility.classOrInterface(0);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = Utility.accessToString((int) (short)0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = Utility.accessToString((-1912833790));
      assertEquals("private native strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "double", "Q2gMp");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "getstatic", true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("@^ tWu3TCld@V", "Dont call getValueShort() on a non SHORT ElementValue", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @^ tWu3TCld@V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("R^E'fbPPZ>w", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 224, false, '[');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 43, 43, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (short)0, (int) (short)0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 121, 121);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)119;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 87, (int) (byte) (-68));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 119
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = Utility.convertString("/yqZZ:b9 ");
      assertEquals("/yqZZ:b9 ", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('$');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('A');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('}');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('4');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "static volatile native interface abstract synthetic annotation enum";
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals("static volatile native interface abstract synthetic annotation enum, null, null", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, false, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = Utility.fillup("mM/~uKh`8j}@nN:\f9", 4420, false, '\"');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = Utility.fillup("", 0, false, 'a');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      try { 
        Utility.typeOfSignature("(LqtFaXM4!ZH]z;LqtFaXM4!ZH]z;LqtFaXM4!ZH]z;LqtFaXM4!ZH]z;LqtFaXM4!ZH]z;LqtFaXM4!ZH]z;LqtFaXM4!ZH]z;)LqtFaXM4!ZH]z;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (LqtFaXM4!ZH]z;LqtFaXM4!ZH]z;LqtFaXM4!ZH]z;LqtFaXM4!ZH]z;LqtFaXM4!ZH]z;LqtFaXM4!ZH]z;LqtFaXM4!ZH]z;)LqtFaXM4!ZH]z;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      try { 
        Utility.typeOfSignature("char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: char
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = Utility.getSignature("short");
      assertEquals("S", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("E7[nuGA+sJ_X", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E7[nuGA+sJ_X'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = Utility.signatureToString("StackMap(", true);
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = Utility.signatureToString("V", true);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("O54&Grb$", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O54&Grb$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = Utility.signatureToString("BEe!U<+!,$5", false);
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = Utility.signatureToString("Illegal type: ", true);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("POnBrT|\"6Zn|`", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `POnBrT|\"6Zn|`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("W6MW1hUgQHxrF_'Y", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W6MW1hUgQHxrF_'Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString(":r", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `:r'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Unexpected element value kind in annotation: ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unexpected element value kind in annotation: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("G)@s?d`F.PI", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G)@s?d`F.PI'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = Utility.signatureToString("J>w5qWk&3", false);
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Xk[4|+ikN6xcT", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Xk[4|+ikN6xcT'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ka", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ka'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = Utility.signatureToString("Dont", false);
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("YzF+n47a.=ney:/b0I^", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YzF+n47a.=ney:/b0I^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte) (-69), 773, byteSequence0, constantPool0);
      try { 
        Utility.methodSignatureToString("Vubl|", "dconst_0", "U4!&`2WM", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Vubl|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("f", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = Utility.compactClassName("class", "Invalid method signature: ", true);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("bipush\t\t0", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup2_x2", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(1L);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lreturn", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("caload", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmpge\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("swap", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fload_1", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aload_0", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("sastore", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("ret\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ineg", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iastore", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload_1", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("arraylength", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("f2i", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("jsr\t\t#2", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fload_0", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("land", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload_2", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lshr", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("baload", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("i2s", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dsub", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("faload", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup2_x1", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("i2l", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[2] = (byte)30;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lload_0", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[34];
      byteArray0[2] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload_3", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("d2l", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("1694~~~~~~", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readLong();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iand", string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aload_3", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lload_3", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup_x1", string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ladd", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("public protected static synchronized volatile", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("irem", string0);
      assertEquals(45, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dload_2", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("istore_2", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmple\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("d2i", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = Utility.accessToString((-2232), false);
      assertEquals("static volatile native interface abstract synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = Utility.convertString("gz~}7m$[|^x(55d['OR");
      assertEquals("gz~}7m$[|^x(55d[\\'OR", string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = Utility.convertString("Mn).?\"s");
      assertEquals("Mn).?\\\"s", string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = Utility.convertString("0:    nop\n");
      assertEquals("0:    nop\\n", string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("$b6$b6$b6$b6", false);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-74), (byte) (-74), (byte) (-74), (byte) (-74)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("d$.1", false);
      assertArrayEquals(new byte[] {(byte)100, (byte)0, (byte)49}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      try { 
        Utility.decode("O^54&Grb$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("0$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('v');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-109);
      byte[] byteArray1 = new byte[5];
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = new byte[4];
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = Utility.fillup("static volatile native interface abstract synthetic annotation enum", (-2189), false, '*');
      assertEquals("static volatile native interface abstract synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("82 00 00", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      short short0 = Utility.searchOpcode("aload");
      assertEquals((short)25, short0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[]");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("ZZvfV`WzL");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      try { 
        Utility.typeOfSignature("YzF+n47a.=ney:/b0I^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YzF+n47a.=ney:/b0I^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Xl,.'zuu[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Xl,.'zuu[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      try { 
        Utility.typeOfSignature("W=gH|&P<,{gc>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W=gH|&P<,{gc>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Visiting non-standard PMGClass object");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      try { 
        Utility.typeOfSignature("U&(&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U&(&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("TXJ]A<)lw5YEP");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("SAZ%W");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      try { 
        Utility.typeOfSignature("R^E'fbPPZ>w E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R^E'fbPPZ>w E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      try { 
        Utility.typeOfSignature("QrsO8BfWZ2D@AEF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QrsO8BfWZ2D@AEF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      try { 
        Utility.typeOfSignature("PZ-GSF2E7Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PZ-GSF2E7Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      try { 
        Utility.typeOfSignature("O$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      try { 
        Utility.typeOfSignature("NMr?_\"r>^QD/o(mU{K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NMr?_\"r>^QD/o(mU{K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Mn).?\"s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Mn).?\"s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("L#AnN;");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      try { 
        Utility.typeOfSignature("K=M?f,gn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K=M?f,gn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("J");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Illegal type: ");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      try { 
        Utility.typeOfSignature("HYQEEJAl6=;,YL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HYQEEJAl6=;,YL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      try { 
        Utility.typeOfSignature("GI$Z`bE/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GI$Z`bE/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Fr'M&-gm\"T$-t");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Et/x'PPZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Et/x'PPZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Dont");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("CxX@laLdWmLt:bVTJ");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("B#[/D");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      try { 
        Utility.typeOfSignature("A}\t#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A}\t#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@FE8N=T44Of");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @FE8N=T44Of
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      try { 
        Utility.typeOfSignature("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">}...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >}...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      try { 
        Utility.typeOfSignature("=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      try { 
        Utility.typeOfSignature("< ;^5EPH@CJfzfEB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: < ;^5EPH@CJfzfEB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":~<4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :~<4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9a]88To!^r1+o-@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9a]88To!^r1+o-@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8L Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8L Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      try { 
        Utility.typeOfSignature("7mpGt)u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7mpGt)u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6Rn*ijvv#)^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6Rn*ijvv#)^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      try { 
        Utility.typeOfSignature("5z&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5z&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4:Rvl2q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4:Rvl2q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3 #|.[1\"vL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3 #|.[1\"vL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      try { 
        Utility.typeOfSignature("29 29 29 80 c3 29 29 7d 29");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 29 29 29 80 c3 29 29 7d 29
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1c7Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1c7Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      try { 
        Utility.typeOfSignature("0$M$bc$ad$bc$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0$M$bc$ad$bc$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".uI'}|G`O?f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .uI'}|G`O?f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-D'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -D'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      try { 
        Utility.typeOfSignature(", high = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+u)k2k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: u)k2k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*p3&/p,*>-k}z}C\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: p3&/p,*>-k}z}C\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'{0%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '{0%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&8_0Vp5Ig(CI0ED");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &8_0Vp5Ig(CI0ED
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%&X/ x*q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %&X/ x*q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      try { 
        Utility.typeOfSignature("$iDot");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $iDot
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#PS,AgaAFa4>u]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #PS,AgaAFa4>u]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\"s9nn6W_CUBo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"s9nn6W_CUBo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!;Vb~UP)_O%z3?A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;Vb~UP)_O%z3?A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("L#AnN;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L#AnN;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(St)/@|ytQ87(9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /@|ytQ87(9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("CL4wq39[Jp)b=V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[Jp)b=V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("short", (String[]) null);
      assertEquals("()S", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "'";
      stringArray0[1] = "1Q[1:BH~Bop+W4tR]";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("1Q[1:BH~Bop+W4tR]", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("[ToifMx,GNg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [ToifMx,GNg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = Utility.getSignature("\t\t#");
      assertEquals("L#;", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "gz~}7m$[|^x(55d['OR";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("gz~}7m$[|^x(55d['OR", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[|^x(55d['OR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = Utility.getSignature("0:    i2s\n1:    aload_3\n2:    dcmpl\n3:    nop\n4:    nop\n");
      assertEquals("L0:;", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("L-5Xq:Y?XJ&#5=j", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L-5Xq:Y?XJ&#5=j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("L/GZ-L6S<Iz65E", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L/GZ-L6S<Iz65E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = Utility.signatureToString("TM3;", false);
      assertEquals("M3", string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = Utility.signatureToString("ZF^", true);
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("XB3Gv#", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XB3Gv#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(Lclass;LLjava/lang/O5?=4R&Gb$;V;)LLjava/lang/O5?=4R&Gb$;V;", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;)LLjava/lang/O5?=4R&Gb$;V;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("U&(&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U&(&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("TH=I^ s~", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TH=I^ s~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("R^E'fbPPZ>w E", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R^E'fbPPZ>w E'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q85", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q85'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType(";7f@)P?%|+Kpk$0R^`", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P?%|+Kpk$0R^`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Nt}ho", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Nt}ho'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("M\"Ob)HSt|6<%Cic", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M\"Ob)HSt|6<%Cic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("JU5?L|MW156gSM'hax", true);
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Invalid method signature: ");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("H%_GDn,RpQGEjR", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H%_GDn,RpQGEjR'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = Utility.signatureToString("Fr'M&-gm\"T$-t", false);
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = Utility.signatureToString("Dw,}d)1[_h;`(LSo7");
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = Utility.signatureToString("CxX@laLdWmLt:bVTJ", false);
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = Utility.signatureToString("[Bz", false);
      assertEquals("byte[]", string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      // Undeclared exception!
      Utility.replace("", "", "");
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = Utility.methodSignatureToString("(LM&2%QjxO#'jjS;LM&2%QjxO#'jjS;LM&2%QjxO#'jjS;)LM&2%QjxO#'jjS;", "`L<a@o5Kn)", "M&2%QjxO#'jjS", false);
      assertEquals("M&2%QjxO#'jjS M&2%QjxO#'jjS `L<a@o5Kn)(M&2%QjxO#'jjS arg1, M&2%QjxO#'jjS arg2, M&2%QjxO#'jjS arg3)", string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String[] stringArray0 = Utility.methodSignatureArgumentTypes("()Lorg/apache/bcel/classfile/StackMap;", true);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "GghSp?b8}\"M=R4hM";
      stringArray0[1] = "monitorenter";
      stringArray0[2] = "bz@";
      stringArray0[3] = "impdep2";
      stringArray0[4] = "void";
      try { 
        Utility.methodTypeToSignature("bz@", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-2744), (-2744));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      boolean boolean0 = Utility.isSet(22, (byte)81);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      int int0 = Utility.clearBit((byte) (-45), (byte) (-79));
      assertEquals((-131117), int0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = Utility.compactClassName("java.lang.NI$<I4=2RG.x6'22%", true);
      assertEquals("java.lang.NI$<I4=2RG.x6'22%", string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = Utility.compactClassName(")", ")", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("sipush\t\t0", string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("goto_w\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ifnonnull\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-104), 134, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("wide\t(wide)", string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(1L);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("monitorexit", string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("monitorenter", string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("athrow", string0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte) (-66);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 162, false);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    arraylength\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("newarray\t\t<<illegal type>>", string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 73, (int) (byte) (-69), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-3362), (int) (byte)88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-25), (int) (byte) (-71));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-72);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-53786696), 341);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("areturn", string0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dreturn", string0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("freturn", string0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte) (-83);
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)12, (-795));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ireturn", string0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte) (-87);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2, (-3), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 2:    nop
         // 3:    nop
         // 4:    nop
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_acmpeq\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-93);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)86, 70);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ifgt\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifge\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iflt\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ifne\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifeq\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte) (-106);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 6131, 188);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte) (-107);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 6131, 188);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lcmp", string0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-110);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)20, (int) (byte)79, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2b", string0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("d2f", string0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("f2d", string0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("f2l", string0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("l2d", string0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-119);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 87, (int) (byte) (-68));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("l2i", string0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2d", string0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-122);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)51, (int) (byte) (-57), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-123);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, (int) (byte) (-123));
      assertEquals("4:    nop\n5:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iinc\t\t%0\t0", string0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[2] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lxor", string0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2189), (int) (byte)35);
      assertEquals("0:    ixor\n1:    nop\n2:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lor", string0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ior", string0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lushr", string0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iushr", string0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ishr", string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lshl", string0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ishl", string0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dneg", string0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fneg", string0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lneg", string0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("frem", string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lrem", string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)111;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ddiv", string0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fdiv", string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ldiv", string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-58);
      byteArray0[6] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("idiv", string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte)107;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 46, 1925, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fmul", string0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lmul", string0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("imul", string0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fsub", string0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lsub", string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dadd", string0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[1] = (byte)98;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fadd", string0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)96;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 54, 82, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup2", string0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup_x2", string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup", string0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)88;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3362), (int) (byte)88);
      assertEquals("0:    pop2\n1:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("pop", string0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("castore", string0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)84;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)84, (int) (byte)95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("aastore", string0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 79, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fastore", string0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("astore_3", string0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.skip(1L);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("astore_2", string0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("astore_1", string0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("astore_0", string0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)72;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1365, (int) (byte)93, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)62;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1458), (-1458), false);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    istore_3\n4:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("istore_1", string0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("istore_0", string0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("astore\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("1694~~~~~~", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals("dstore\t\t%52", string0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("saload", string0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("1694~~~~~~", false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 172, 172);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aaload", string0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("1694~~~~~~", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("daload", string0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("laload", string0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iaload", string0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("aload_0", string0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload_1", string0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload_0", string0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("%]m ", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertArrayEquals(new byte[] {(byte)37, (byte)93, (byte)109, (byte)32}, byteArray0);
      assertEquals("fload_3", string0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.skip(1L);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fload_2", string0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" 7pI,=38}G ", false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3378, (-2174), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)31;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 84, 324, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iload_2", string0);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iload_1", string0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fload\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)43, (int) (byte)43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)18;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-68);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 713, 1506);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      String string0 = Utility.classOrInterface((-2342));
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      String string0 = Utility.classOrInterface(21);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      String string0 = Utility.accessToString((-3117), true);
      assertEquals("public private final volatile transient native synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      String string0 = Utility.accessToString(46, true);
      assertEquals("private protected static", string0);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(S%7H@", "(S%7H@", "(S%7H@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `%7H@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("W\"0]K(u<RXg_");
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      int int0 = Utility.setBit(1543, (-922));
      assertEquals(1607, int0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      String string0 = Utility.compactClassName("H>4IM}>0D66");
      assertEquals("H>4IM}>0D66", string0);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("$l$8b$I$A$A$A$A$A$A$A", ")", "invokeinterface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      String string0 = Utility.accessToString((int) (byte)74);
      assertEquals("private static volatile", string0);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      String string0 = Utility.accessToString(0, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      String[] stringArray0 = Constants.OPCODE_NAMES;
      String string0 = Utility.printArray((Object[]) stringArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g");
      Object[] objectArray0 = new Object[6];
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(6, objectArray0.length);
  }
}
