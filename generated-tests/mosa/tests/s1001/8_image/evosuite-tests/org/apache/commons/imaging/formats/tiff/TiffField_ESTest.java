/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:38:15 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.nio.ByteOrder;
import org.apache.commons.imaging.formats.tiff.TiffElement;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeAscii;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeByte;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeDouble;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeFloat;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeRational;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffField_ESTest extends TiffField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[2];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(2100, 2100, fieldTypeFloat0, 2100, 2100, byteArray0, byteOrder0, 2100);
      tiffField0.toString();
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) null, "2100 (0x834: Unknown Tag):  (2100 Float)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[13];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(50, 50, fieldTypeFloat0, 50, 50, byteArray0, byteOrder0, 50);
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertNotNull(tiffElement0);
      assertEquals(50, tiffField0.getTag());
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(50L, tiffElement0.offset);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(16, 16, fieldTypeByte0, 16, 16, byteArray0, byteOrder0, 16);
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [B cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      byte[] byteArray0 = new byte[28];
      TiffField tiffField0 = new TiffField(15, 15, fieldTypeByte0, 15, 15, byteArray0, (ByteOrder) null, 15);
      String string0 = tiffField0.getValueDescription();
      assertEquals(15, tiffField0.getTag());
      assertEquals(15, tiffField0.getSortHint());
      assertEquals(15L, tiffField0.getCount());
      assertNotNull(string0);
      assertEquals(15, tiffField0.getDirectoryType());
      assertEquals(15, tiffField0.getBytesLength());
      assertEquals(15, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[13];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(50, 50, fieldTypeFloat0, 50, 50, byteArray0, byteOrder0, 50);
      tiffField0.dump();
      assertEquals(200, tiffField0.getBytesLength());
      assertEquals(50, tiffField0.getOffset());
      assertEquals(50L, tiffField0.getCount());
      assertEquals(50, tiffField0.getTag());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(50, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[13];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(78, 78, fieldTypeFloat0, 78, 78, byteArray0, byteOrder0, 78);
      String string0 = tiffField0.getTagName();
      assertEquals(78, tiffField0.getSortHint());
      assertEquals(78, tiffField0.getOffset());
      assertEquals("Unknown Tag (0x4e)", string0);
      assertEquals(78, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(10, 10, fieldTypeFloat0, 10, 10, byteArray0, byteOrder0, 10);
      String string0 = tiffField0.toString();
      assertEquals("10 (0xa: Unknown Tag):  (10 Float)", string0);
      
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(10, 10);
      String string1 = tiffField_OversizeValueElement0.getElementDescription(false);
      assertNotNull(string1);
      assertEquals(10, tiffField0.getOffset());
      assertEquals("OversizeValueElement, tag: Unknown Tag, fieldType: Float", string1);
      assertEquals(10, tiffField0.getSortHint());
      assertEquals(40, tiffField0.getBytesLength());
      assertEquals(10, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(65096, 65096, fieldTypeFloat0, 65096, 65096, byteArray0, byteOrder0, 65096);
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(65096, 65096);
      String string0 = tiffField_OversizeValueElement0.getElementDescription(true);
      assertEquals(65096, tiffField0.getTag());
      assertEquals(65096, tiffField0.getOffset());
      assertEquals(65096, tiffField0.getSortHint());
      assertEquals(65096, tiffField0.getDirectoryType());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(16, 16, fieldTypeByte0, 16, 16, byteArray0, byteOrder0, 16);
      int int0 = tiffField0.getDirectoryType();
      assertEquals(16, tiffField0.getSortHint());
      assertEquals(16, tiffField0.getTag());
      assertEquals(16, int0);
      assertEquals(16, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[22];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(33, 33, fieldTypeFloat0, 33, 33, byteArray0, byteOrder0, 33);
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [F@660741c6 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[171];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      TiffField tiffField0 = new TiffField(275, 275, fieldTypeLong0, 275, 275, byteArray0, byteOrder0, 275);
      tiffField0.dump();
      tiffField0.getIntArrayValue();
      int int0 = tiffField0.getOffset();
      assertEquals(275, int0);
      assertEquals(1100, tiffField0.getBytesLength());
      assertEquals(275, tiffField0.getTag());
      assertEquals(275, tiffField0.getSortHint());
      assertEquals(275L, tiffField0.getCount());
      assertEquals(275, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[11];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-9), (-9), fieldTypeFloat0, (-9), (-9), byteArray0, byteOrder0, (-9));
      int int0 = Float.MAX_EXPONENT;
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertEquals((-9), tiffField0.getDirectoryType());
      assertEquals((-9), tiffField0.getSortHint());
      assertEquals((-9), tiffField0.getOffset());
      assertNull(tiffElement0);
      assertEquals((-9), tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[121];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(50975, 50975, fieldTypeFloat0, 50975, 50975, byteArray0, byteOrder0, 50975);
      String string0 = tiffField0.getDescriptionWithoutValue();
      assertEquals("50975 (0xc71f: RowInterleaveFactor): ", string0);
      assertEquals(50975, tiffField0.getDirectoryType());
      assertEquals(50975, tiffField0.getSortHint());
      assertEquals(50975, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[4];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(2100, 2100, fieldTypeFloat0, 2100, 2100, byteArray0, byteOrder0, 2100);
      int int0 = tiffField0.getSortHint();
      assertEquals(2100, tiffField0.getDirectoryType());
      assertEquals(2100, tiffField0.getTag());
      assertEquals(2100, tiffField0.getOffset());
      assertEquals(2100, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(3463, (byte)22, fieldTypeShort0, (byte)22, 1L, byteArray0, byteOrder0, 3463);
      int[] intArray0 = tiffField0.getIntArrayValue();
      assertEquals(22L, tiffField0.getCount());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3463, tiffField0.getTag());
      assertEquals(3463, tiffField0.getSortHint());
      assertEquals(44, tiffField0.getBytesLength());
      assertEquals(1, tiffField0.getOffset());
      assertEquals(22, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[13];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(50, 50, fieldTypeFloat0, 50, 50, byteArray0, byteOrder0, 50);
      tiffField0.getFieldTypeName();
      assertEquals(50, tiffField0.getTag());
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(50, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[2];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(11, 11, fieldTypeFloat0, 11, 11, byteArray0, byteOrder0, 11);
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [F@1e512a for: 11 (0xb: ProcessingSoftware): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[203];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      TiffField tiffField0 = new TiffField((-72), (-72), fieldTypeLong0, 8560L, (-72), byteArray0, byteOrder0, (-72));
      tiffField0.dump();
      tiffField0.getIntValueOrArraySum();
      assertEquals((-72), tiffField0.getTag());
      assertEquals((-72), tiffField0.getDirectoryType());
      assertEquals((-72), tiffField0.getSortHint());
      assertEquals(34240, tiffField0.getBytesLength());
      assertEquals((-72), tiffField0.getOffset());
      assertEquals(8560L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[121];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(2348, 2348, fieldTypeFloat0.ASCII, 2348, 2348, byteArray0, byteOrder0, 2348);
      tiffField0.dump();
      assertEquals(2348, tiffField0.getSortHint());
      assertEquals(2348, tiffField0.getTag());
      assertEquals(2348, tiffField0.getDirectoryType());
      assertEquals(2348, tiffField0.getBytesLength());
      assertEquals(2348L, tiffField0.getCount());
      assertEquals(2348, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[170];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      TiffField tiffField0 = new TiffField(34, 34, fieldTypeRational0, 34, 34, byteArray0, byteOrder0, 34);
      tiffField0.dump();
      assertEquals(272, tiffField0.getBytesLength());
      assertEquals(34L, tiffField0.getCount());
      assertEquals(34, tiffField0.getDirectoryType());
      assertEquals(34, tiffField0.getTag());
      assertEquals(34, tiffField0.getSortHint());
      assertEquals(34, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[13];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(50, 50, fieldTypeFloat0, 50, 50, byteArray0, byteOrder0, 50);
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): [F@1253ec1a
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[219];
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-185), (-185), fieldTypeDouble0.ASCII, 0L, (-185), byteArray0, byteOrder0, (-185));
      tiffField0.toString();
      assertEquals((-185), tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals((-185), tiffField0.getOffset());
      assertEquals((-185), tiffField0.getDirectoryType());
      assertEquals((-185), tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(16, 16, fieldTypeByte0, 16, 16, byteArray0, byteOrder0, 16);
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@5e06fe6a for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      TiffField tiffField0 = new TiffField(5103, 5103, fieldTypeRational0, 5103, 5103, byteArray0, (ByteOrder) null, 5103);
      tiffField0.getDoubleArrayValue();
      // Undeclared exception!
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(50732, 2531, fieldTypeShort0, 50732, (byte) (-17), byteArray0, byteOrder0, (byte) (-17));
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(50732L, tiffField0.getCount());
      assertEquals(0, int0);
      assertEquals(2531, tiffField0.getDirectoryType());
      assertEquals(101464, tiffField0.getBytesLength());
      assertEquals(50732, tiffField0.getTag());
      assertEquals((-17), tiffField0.getOffset());
      assertEquals((-17), tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[3];
      TiffField tiffField0 = new TiffField((-271), 29, fieldTypeByte0.RATIONAL, 29, 29, byteArray0, (ByteOrder) null, (-271));
      tiffField0.getIntArrayValue();
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals((-271), tiffField0.getSortHint());
      assertEquals((-271), tiffField0.getTag());
      assertEquals(29, tiffField0.getOffset());
      assertEquals(29, tiffField0.getDirectoryType());
      assertEquals(232, tiffField0.getBytesLength());
      assertEquals(29L, tiffField0.getCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[171];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      TiffField tiffField0 = new TiffField(270, 270, fieldTypeLong0, 270, 270, byteArray0, byteOrder0, 270);
      tiffField0.dump();
      tiffField0.getDoubleArrayValue();
      assertEquals(1080, tiffField0.getBytesLength());
      assertEquals(270L, tiffField0.getCount());
      assertEquals(270, tiffField0.getDirectoryType());
      assertEquals(270, tiffField0.getOffset());
      assertEquals(270, tiffField0.getTag());
      assertEquals(270, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(11, 11, fieldTypeFloat0, 11, 11, byteArray0, byteOrder0, 11);
      String string0 = tiffField0.getTagName();
      assertEquals(11, tiffField0.getDirectoryType());
      assertEquals(11, tiffField0.getSortHint());
      assertEquals(11, tiffField0.getTag());
      assertEquals("ProcessingSoftware", string0);
      assertEquals(11, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[219];
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(54, 54, fieldTypeDouble0, 54, 54, byteArray0, byteOrder0, 54);
      String string0 = tiffField0.toString();
      assertEquals("54 (0x36: Unknown Tag): 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 (54 Double)", string0);
      
      tiffField0.getDoubleArrayValue();
      assertEquals(54, tiffField0.getSortHint());
      assertEquals(54, tiffField0.getDirectoryType());
      assertEquals(54, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-514), (-514), fieldTypeByte0, 1L, 1L, byteArray0, byteOrder0, (-514));
      tiffField0.dump();
      assertEquals(1L, tiffField0.getCount());
      
      tiffField0.getDoubleArrayValue();
      assertEquals((-514), tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getBytesLength());
      assertEquals((-514), tiffField0.getTag());
      assertEquals(1, tiffField0.getOffset());
      assertEquals((-514), tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[10];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(1, 34, fieldTypeFloat0, 1L, 1L, byteArray0, byteOrder0, 34);
      tiffField0.getIntValueOrArraySum();
      assertEquals(1, tiffField0.getOffset());
      assertEquals(34, tiffField0.getDirectoryType());
      assertEquals(34, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getTag());
      assertEquals(4, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(3463, (-2146516312), fieldTypeShort0, 1L, (-2146516312), byteArray0, byteOrder0, 51022);
      tiffField0.getIntArrayValue();
      assertEquals(3463, tiffField0.getTag());
      assertEquals(51022, tiffField0.getSortHint());
      assertEquals((-2146516312), tiffField0.getDirectoryType());
      assertEquals(2, tiffField0.getBytesLength());
      assertEquals((-2146516312), tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[13];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(50, 50, fieldTypeFloat0, 50, 50, byteArray0, byteOrder0, 50);
      tiffField0.getDoubleArrayValue();
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [F cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[8];
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(15, 15, fieldTypeRational0, 15, 15, byteArray0, (ByteOrder) null, 15);
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[47];
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      TiffField tiffField0 = new TiffField(65538, 65538, fieldTypeShort0, 65538, 65538, byteArray0, (ByteOrder) null, 65538);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      tiffField0.getDoubleArrayValue();
      assertEquals(65538, tiffField0.getDirectoryType());
      assertEquals(65538, tiffField0.getSortHint());
      assertEquals(65538, tiffField0.getTag());
      assertEquals(65538, tiffField0.getOffset());
      assertEquals(131076, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[254];
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      TiffField tiffField0 = new TiffField(2085, 2085, fieldTypeAscii0, 0L, 2085, byteArray0, byteOrder0, 90);
      String string0 = tiffField0.getStringValue();
      assertEquals(90, tiffField0.getSortHint());
      assertEquals(2085, tiffField0.getOffset());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(2085, tiffField0.getDirectoryType());
      assertEquals(2085, tiffField0.getTag());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[160];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      TiffField tiffField0 = new TiffField(275, 275, fieldTypeByte0, 275, 275, byteArray0, byteOrder0, 275);
      tiffField0.dump();
      assertEquals(275, tiffField0.getTag());
      assertEquals(275, tiffField0.getBytesLength());
      assertEquals(275, tiffField0.getOffset());
      assertEquals(275, tiffField0.getSortHint());
      assertEquals(275, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[219];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeShort fieldTypeShort0 = new FieldTypeShort(736, "u|KwPY/d");
      TiffField tiffField0 = new TiffField(514, 0, fieldTypeShort0, 736, 736, byteArray0, byteOrder0, 0);
      String string0 = tiffField0.toString();
      assertEquals(736, tiffField0.getOffset());
      assertEquals("514 (0x202: JPEGInterchangeFormatLength): 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0... (109) (736 u|KwPY/d)", string0);
      assertEquals(1472, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[208];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      TiffField tiffField0 = new TiffField(2425, 2425, fieldTypeLong0, 255L, 255L, byteArray0, byteOrder0, 2425);
      tiffField0.dump();
      String string0 = tiffField0.toString();
      assertEquals(255, tiffField0.getOffset());
      assertEquals("2425 (0x979: Unknown Tag): 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0... (52) (255 SLong)", string0);
      assertEquals(2425, tiffField0.getSortHint());
      assertEquals(1020, tiffField0.getBytesLength());
      assertEquals(2425, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[219];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(2100, 38, fieldTypeFloat0, 2100, 11440L, byteArray0, byteOrder0, 2100);
      String string0 = tiffField0.toString();
      assertEquals(8400, tiffField0.getBytesLength());
      assertEquals(2100, tiffField0.getSortHint());
      assertEquals(38, tiffField0.getDirectoryType());
      assertEquals("2100 (0x834: Unknown Tag): 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0... (54) (2100 Float)", string0);
      assertEquals(11440, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[416];
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(1883, 11, fieldTypeDouble0, 1883, 1883, byteArray0, byteOrder0, 1883);
      String string0 = tiffField0.toString();
      assertEquals(11, tiffField0.getDirectoryType());
      assertEquals(15064, tiffField0.getBytesLength());
      assertEquals(1883, tiffField0.getSortHint());
      assertEquals("1883 (0x75b: Unknown Tag): 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0... (52) (1883 Double)", string0);
      assertEquals(1883, tiffField0.getOffset());
  }
}
