/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:56:03 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.StreamCorruptedException;
import java.util.Enumeration;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.EnclosingMethod;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.classfile.Visitor;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassLoaderRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      try { 
        Utility.typeOfSignature("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = Utility.compactClassName("");
      assertEquals("", string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      String string1 = Utility.printArray(objectArray0, false, false);
      assertEquals(", , ", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockFile mockFile0 = new MockFile("return");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockFile0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(69L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('Q');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = Utility.accessToString((-1424));
      assertEquals("final synchronized volatile interface strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = Utility.convertString("~T-Ug]A1lQcg");
      String string1 = Utility.compactClassName("~T-Ug]A1lQcg", false);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.accessToString(5516, false);
      assertEquals("protected static transient native abstract synthetic", string2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(", offset=", "{}", ", offset=", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , offset=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      boolean boolean0 = Utility.isJavaIdentifierPart('j');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-51);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("u.w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `u.w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char char0 = ']';
      Utility.isJavaIdentifierPart(']');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("swap", "swap", "swap", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: swap
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.compactClassName("if_icmpne");
      assertEquals("if_icmpne", string0);
      
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)87;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("W", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      short short0 = Constants.MINOR_1_5;
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("byte", stringArray0);
      assertEquals("()B", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\t");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\t";
      stringArray0[1] = "ireturn";
      String string0 = Utility.methodTypeToSignature("\t", stringArray0);
      assertEquals("(L;Lireturn;)L;", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.signatureToString("MeT`sLR:# $");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MeT`sLR:# $'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte byte0 = Utility.typeOfSignature("Visiting non-standard PMGClass object");
      assertEquals((byte)12, byte0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "*'l~esTv9+ld";
      objectArray0[1] = (Object) "*'l~esTv9+ld";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string1);
      assertEquals("{\"*'l~esTv9+ld\", \"*'l~esTv9+ld\"}", string1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = Utility.convertString("aZ/4m+c&}sQb]89I:iX");
      assertEquals("aZ/4m+c&}sQb]89I:iX", string0);
      
      String string1 = Utility.getSignature("aZ/4m+c&}sQb]89I:iX");
      assertEquals("LaZ/4m+c&}sQb]89I:iX;", string1);
      
      byte byte0 = Utility.typeOfSignature("LaZ/4m+c&}sQb]89I:iX;");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      byte[] byteArray0 = Utility.decode("", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(":%", false);
      assertArrayEquals(new byte[] {(byte)58, (byte)37}, byteArray0);
      
      String string0 = Utility.fillup("Invalid signature: ", (-334), false, '4');
      assertEquals("Invalid signature: ", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-1385), 199);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Utility.isJavaIdentifierPart('_');
      Utility.classOrInterface((-3030));
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "class";
      objectArray0[1] = (Object) "class";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-51);
      Utility.clearBit((byte) (-51), (byte) (-51));
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfMethodSignature("f~stora_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: f~stora_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utility.compactClassName("#&dAG]O,0B};r\"'");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "#&dAG]O,0B};r\"'";
      objectArray0[2] = (Object) "#&dAG]O,0B};r\"'";
      objectArray0[3] = (Object) "#&dAG]O,0B};r\"'";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      Utility.convertString("#&dAG]O,0B};r\"'");
      try { 
        Utility.typeOfSignature("\t\t#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Utility.convertString("2:B5DLRN6%Rq`_");
      try { 
        Utility.methodSignatureArgumentTypes("a]NL@ ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: a]NL@ 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      boolean boolean0 = Utility.isJavaIdentifierPart('O');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("nop", string1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      Utility.convertString("<illegal opcode>");
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("freturn", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteSequence0.close();
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean1 = true;
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("cj:`W5*VH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: cj:`W5*VH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-71), (int) (byte) (-71));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("$5[", false);
      // Undeclared exception!
      try { 
        Utility.decode("$5[", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"5[\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$*>");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$*>");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string0 = Utility.compactClassName("$*>", false);
      assertEquals("$*>", string0);
      
      byte[] byteArray0 = Utility.decode("$*>", false);
      assertArrayEquals(new byte[] {(byte)0, (byte)62}, byteArray0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('D');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = Utility.fillup("void", (byte) (-96), true, 'Y');
      assertEquals("void", string0);
      
      int int0 = Utility.setBit((byte) (-96), (byte) (-96));
      assertEquals((-95), int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-85);
      Object[] objectArray0 = new Object[1];
      Utility.printArray(objectArray0, true);
      Utility.classOrInterface((byte) (-85));
      try { 
        Utility.methodSignatureReturnType("interface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `interface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = Utility.format(11, 11, true, 'O');
      assertEquals("11OOOOOOOOO", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Utility.format((-1975), (-1975), false, '.');
      try { 
        Utility.typeOfMethodSignature("Ie7[k]LWzx8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ie7[k]LWzx8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("S\"6<XF 9");
      assertEquals("short", string0);
      
      short short0 = Utility.searchOpcode("short");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = Utility.getSignature("Invalid type: ");
      String string1 = Utility.compactClassName("LInvalid;", "Invalid type: ", false);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.replace("Invalid type: ", "LInvalid;", "dload");
      assertEquals("Invalid type: ", string2);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte byte0 = Constants.T_UNKNOWN;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)15;
      try { 
        Utility.typeOfSignature("8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.compactClassName("if_icmpne");
      assertEquals("if_icmpne", string0);
      
      String string1 = Constants.ILLEGAL_OPCODE;
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("00", string2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-13);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("2d f3", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.classOrInterface(1270);
      try { 
        Utility.decode("$VALUES", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utility.isJavaIdentifierPart('\u0085');
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.read();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.encode(byteArray1, false);
      try { 
        Utility.decode("$b9", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantUtf8.printStats();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = null;
      Utility.isJavaIdentifierPart('v');
      String string0 = "l;sN&2!{u";
      Utility.compactClassName("l;sN&2!{u", true);
      String string1 = "interface";
      String string2 = "yb5c$u<O][2X";
      try { 
        Utility.decode("yb5c$u<O][2X", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.compactClassName("The wildcard array must not be null");
      Utility.typeOfSignature("The wildcard array must not be null");
      try { 
        Utility.methodSignatureReturnType("#vlim<,^zDd]mg", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `#vlim<,^zDd]mg'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Utility.signatureToString("Dont call getValueShort() on a non SHORT ElementValue", true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('C');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "double");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) printWriter0;
      objectArray0[1] = (Object) printWriter0;
      objectArray0[2] = (Object) charArrayWriter0;
      objectArray0[3] = (Object) "Dont call getValueShort() on a non SHORT ElementValue";
      objectArray0[4] = (Object) printWriter0;
      objectArray0[5] = (Object) charArrayWriter0;
      Utility.printArray(printWriter0, objectArray0);
      assertEquals(261, charArrayWriter1.size());
      assertEquals(261, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("46");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 46
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-88);
      Object[] objectArray0 = new Object[6];
      objectArray0[2] = (Object) byteArray0;
      objectArray0[4] = (Object) byteArray0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-51), (byte) (-88));
      ConstantFloat constantFloat0 = new ConstantFloat((byte)0);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[2];
      Utility.convertString("'");
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-51);
      Utility.getSignature(" (");
      try { 
        Utility.methodSignatureArgumentTypes("L(;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L(;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      int int0 = Pattern.CASE_INSENSITIVE;
      try { 
        Utility.typeOfSignature("*'l~esTv9+ld");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'l~esTv9+ld
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-106);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.close();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "W`eX k8@TgGs");
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      try { 
        Utility.typeOfSignature("?-NJ!.d4wS-!?\"cMg{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?-NJ!.d4wS-!?\"cMg{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Utility.getSignature("`3POa.Z<");
      boolean boolean0 = false;
      try { 
        Utility.typeOfSignature("+xH/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: xH/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-51);
      String string0 = Utility.getSignature(" (");
      assertEquals("L(;", string0);
      
      int int0 = Utility.clearBit((-3832), (-3832));
      assertEquals((-4088), int0);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-51);
      byteArray1[1] = (byte)86;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      String string1 = Utility.replace(",3:rzAw", "yFWj/O0GO$fS9!r@8Kn", "Q|4HcbX{R]`S@");
      assertEquals(",3:rzAw", string1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedShort();
      byteSequence1.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)73, (int) (byte)73);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "invokeInterface");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.getSignature("mrM&[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "<illegal opcode>";
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("E*Nny`N<1PqK+$G;){%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E*Nny`N<1PqK+$G;){%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[6] = (Object) byteArray0;
      byte[] byteArray1 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readFully(byteArray1);
      byteSequence0.skip((-636L));
      byteSequence0.close();
      try { 
        Utility.typeOfSignature("$A$A$A$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $A$A$A$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2211);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Y$ ");
      Utility.compactClassName("a}z@S", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a}z@S");
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("void");
      try { 
        Utility.typeOfSignature(", low = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , low = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("{}", stringArray0);
      Utility.classOrInterface(699);
      Utility.clearBit(699, 699);
      try { 
        Utility.typeOfSignature("()L{};");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ()L{};
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("TFl9A0z]", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TFl9A0z]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fload_3", string0);
      
      short short0 = Utility.searchOpcode("goto");
      assertEquals((short)167, short0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[6] = (Object) byteArray0;
      objectArray0[8] = (Object) byteArray0;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)116;
      byteArray1[1] = (byte)116;
      byteArray1[2] = (byte)116;
      byteArray0[0] = (byte)116;
      byteArray1[4] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.skip((-646L));
      byteSequence0.readUnsignedShort();
      byteSequence0.close();
      Utility.classOrInterface(189);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 29812, (int) (byte)116);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-72);
      byteArray0[5] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utility.searchOpcode("java.lang.8%1^IjW.w\"o+kp MR");
      short short0 = Constants.ICONST_3;
      try { 
        Utility.methodSignatureReturnType("Kz:H", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Kz:H'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Pattern.quote("tWaP/Cm_MY@t");
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("tWaP/Cm_MY@t");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = constantUtf8_0.toString();
      assertEquals("CONSTANT_Utf8[1](\"tWaP/Cm_MY@t\")", string0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "QtWaP/Cm_MY@tE");
      byte byte0 = Utility.typeOfSignature("CONSTANT_Utf8[1](\"tWaP/Cm_MY@t\")");
      assertEquals((byte)5, byte0);
      
      String string1 = Utility.compactClassName("QtWaP/Cm_MY@tE");
      assertEquals("QtWaP.Cm_MY@tE", string1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Phl^5xC0cUaZZ{OEVOe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Phl^5xC0cUaZZ{OEVOe'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utility.typeOfSignature("Ie7[k]LWzx8");
      Utility.format((-1975), (-1975), false, '9');
      try { 
        Utility.typeOfMethodSignature("instanceof");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: instanceof
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("aaload", string0);
      
      short short0 = Utility.searchOpcode("goto");
      assertEquals((short)167, short0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "areturn";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = "AYqm ]0i";
      try { 
        Utility.typeOfSignature("AYqm ]0i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AYqm ]0i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-72);
      byteArray1[1] = (byte) (-72);
      byteArray1[2] = (byte) (-72);
      Utility.equals(byteArray0, byteArray1);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("dconst_1", "dconst_1", "dconst_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dconst_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      short short0 = Constants.MINOR_1_5;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("InvaHid method signature: ");
      String string0 = constantUtf8_0.toString();
      assertEquals("CONSTANT_Utf8[1](\"InvaHid method signature: \")", string0);
      
      ConstantUtf8.printStats();
      constantUtf8_0.clone();
      int int0 = Utility.setBit((short)0, (short)0);
      assertEquals(1, int0);
      
      String string1 = Utility.getSignature("CONSTANT_Utf8[1](\"InvaHid method signature: \")");
      assertEquals("[LCONSTANT_Utf8;", string1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Utility.setBit(700, (-139));
      Utility.isJavaIdentifierPart('&');
      Utility.fillup("v[^DrlY_J&[-#Ndb", 6, false, '&');
      String[] stringArray0 = new String[7];
      stringArray0[0] = "t";
      stringArray0[1] = "t";
      stringArray0[2] = "v[^DrlY_J&[-#Ndb";
      stringArray0[3] = "t";
      stringArray0[4] = "t";
      stringArray0[5] = "v[^DrlY_J&[-#Ndb";
      stringArray0[6] = "U";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("t", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[^DrlY_J&[-#Ndb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      Utility.isJavaIdentifierPart('6');
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.typeOfSignature(":|Y.w/oE-?` l&L\"a8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :|Y.w/oE-?` l&L\"a8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[2] = object0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)55;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)55, (-1125));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = "$d9SU8Zp6?ui&MF&Y)";
      Utility.getSignature("$d9SU8Zp6?ui&MF&Y)");
      try { 
        Utility.typeOfMethodSignature("$d9SU8Zp6?ui&MF&Y)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $d9SU8Zp6?ui&MF&Y)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      Utility.printArray(objectArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("{null, null, null, null, null, null, null, null, null, null}");
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.fillup("{null, null, null, null, null, null, null, null, null, null}", 229, false, 'o');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, (-2407), (int) (byte)47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Utility.compactClassName("The wildcard array must not be null");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.signatureToString("PyViOwQjJ3Uxecukr", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PyViOwQjJ3Uxecukr'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-67);
      String string0 = "zP_'LK+{";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "zP_'LK+{");
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte) (-73);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)96;
      byteArray1[1] = (byte)20;
      byteArray1[2] = (byte)112;
      byteArray1[3] = (byte) (-67);
      byteArray1[4] = (byte) (-9);
      byteArray1[5] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readUnsignedByte();
      ConstantDouble constantDouble0 = new ConstantDouble((-833.211));
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (-213), 512);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-117);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.typeOfSignature("5DjDsS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5DjDsS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      String string0 = Constants.CONSTRUCTOR_NAME;
      constantMethodref0.setClassIndex((byte)0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ConstantDouble constantDouble0 = new ConstantDouble((byte)0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = "O|U},y!`7MWRA{E";
      Utility.getSignature("<init>");
      try { 
        Utility.methodSignatureReturnType("O|U},y!`7MWRA{E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O|U},y!`7MWRA{E'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "The size must be non-negative";
      Utility.getSignature("The size must be non-negative");
      try { 
        Utility.typeOfSignature("=M#ws.xZl5V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =M#ws.xZl5V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)47;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.clearBit((byte)47, 225);
      try { 
        byteSequence0.readChar();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Utility.codeToString(byteArray0, (ConstantPool) null, (-399), (-399));
      String string0 = Utility.compactClassName("land", true);
      assertEquals("land", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2542);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)83, (-228));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 232, 157);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[9];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("#jWZ./m:DizLt=0w`E.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #jWZ./m:DizLt=0w`E.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-61);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-61), (int) (byte) (-61));
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("long");
      try { 
        Utility.typeOfSignature("0:    monitorexit\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    monitorexit
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      Object[] objectArray0 = new Object[8];
      Utility.printArray(objectArray0, false);
      Utility.classOrInterface(823);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 118, 186);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!/");
      String string0 = "21X:HU#M'8$.+2%(";
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-77);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("21X:HU#M'8$.+2%(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 21X:HU#M'8$.+2%(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utility.fillup("{SKqbs!l", (-460), true, '=');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), 1560);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-*oW,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -*oW,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)63;
      Object object0 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S:2\"sW^C!");
      Utility.printArray((Object[]) null, true, true);
      Utility.typeOfSignature("Z~~");
      String string0 = "iload_1";
      try { 
        Utility.methodSignatureArgumentTypes("iload_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iload_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-42);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.convertString("GQejxV7Z|\"H]:(lR");
      try { 
        Utility.typeOfSignature("GQejxV7Z|\"H]:(lR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GQejxV7Z|\"H]:(lR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-121);
      byteArray0[3] = (byte)0;
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      short short0 = Constants.ASTORE_3;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-59);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-59));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-59), 230);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)72, 112);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("CHOP ");
      assertEquals("char", string0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "char";
      objectArray0[1] = (Object) "char";
      objectArray0[2] = (Object) "CHOP ";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "CHOP ";
      objectArray0[5] = (Object) "r9\"[J8B(-k&r;F-_C@";
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      
      String string2 = Utility.convertString("\t\t%");
      assertEquals("\t\t%", string2);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "R9FzSUfno";
      stringArray0[1] = "R9FzSUfno";
      stringArray0[2] = "R9FzSUfno";
      stringArray0[3] = "R9FzSUfno";
      try { 
        Utility.typeOfSignature("R9FzSUfno");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R9FzSUfno
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      short short0 = Utility.searchOpcode("goto");
      assertEquals((short)167, short0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[3] = (byte)16;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)16;
      byteArray1[1] = (byte)16;
      byteArray1[2] = (byte)91;
      byteArray0[0] = (byte)91;
      byteArray1[4] = (byte)16;
      byteArray1[5] = (byte)16;
      byteArray1[6] = (byte)16;
      byteArray1[7] = (byte)91;
      byteArray1[8] = (byte) (-17);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readChar();
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.getSignature("Qc4d4^");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfMethodSignature("LQc4d4^;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LQc4d4^;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)0, 4499);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantLong constantLong0 = new ConstantLong(0L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[2] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dup2_x1", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(7);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      int int0 = Pattern.COMMENTS;
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteSequence1);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[20];
      stringArray0[0] = "Ivalid signature:`";
      stringArray0[1] = "Ivalid signature:`";
      stringArray0[2] = "Ivalid signature:`";
      String string0 = Utility.methodTypeToSignature("Ivalid signature:`", (String[]) null);
      assertEquals("()LIvalid;", string0);
      
      boolean boolean0 = Utility.isSet(1665, 2491);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Retstatic");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Retstatic", "Retstatic", "Retstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Retstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("W'rbGZ3B-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W'rbGZ3B-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)116;
      byte byte0 = Utility.typeOfSignature("D\"J,7Ekp/I'");
      assertEquals((byte)7, byte0);
      
      String string0 = Utility.compactClassName(", ", false);
      assertEquals(", ", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      Utility.getSignature("<illegal opcode>");
      try { 
        Utility.methodSignatureReturnType("L<illegal;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<illegal;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = Utility.classOrInterface(28);
      assertEquals("class", string0);
      
      String string1 = Utility.getSignature("class");
      assertEquals("Lclass;", string1);
      
      Utility.methodSignatureReturnType("Lclass;");
      byte byte0 = ElementValue.PRIMITIVE_BYTE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("B", string2);
      
      String string3 = Utility.format((byte)66, (byte)66, false, 'x');
      assertEquals("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx66", string3);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      Utility.getSignature("<init>");
      try { 
        Utility.methodSignatureReturnType("L<init>;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `init>;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.getSignature("if_icmplt");
      try { 
        Utility.methodSignatureArgumentTypes("SU%hjlJO(/3|37K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: SU%hjlJO(/3|37K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Utility.classOrInterface(805);
      String string0 = ">iKZj";
      try { 
        Utility.typeOfSignature(">iKZj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >iKZj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Utility.setBit((-1397), (-1397));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "areturn");
      Utility.getSignature("a%k");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.signatureToString("4iD:e1n`", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `4iD:e1n`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      short short0 = Constants.MINOR_1_5;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Utility.signatureToString("Float");
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Float");
      Utility.getSignature("R(b-?!@@=");
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_MAX;
      try { 
        Utility.typeOfSignature(".z-'\"j4OgI=5O7G9p9L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .z-'\"j4OgI=5O7G9p9L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) byteArray0;
      Utility.printArray(objectArray0, true);
      Utility.classOrInterface((byte)42);
      try { 
        Utility.methodSignatureReturnType("H#z}Y4*,s}CjHm0#vv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H#z}Y4*,s}CjHm0#vv'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.searchOpcode("daload");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-8);
      byteArray0[3] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "daload");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) "daload";
      objectArray0[2] = (Object) null;
      Utility.printArray(objectArray0, true, true);
      String string0 = "Z~~";
      Utility.typeOfSignature("[**FN^Qu4a^pDj'");
      try { 
        Utility.methodSignatureArgumentTypes("Z~~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Z~~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte byte0 = (byte)100;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("R", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = ")R9FzCSUfno";
      stringArray0[1] = ")R9FzCSUfno";
      stringArray0[2] = ")R9FzCSUfno";
      stringArray0[3] = ")R9FzCSUfno";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType(")R9FzCSUfno");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R9FzCSUfno'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-85);
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-12);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)80);
      byteSequence0.close();
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)32;
      byteArray1[2] = (byte)44;
      byteArray1[3] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)80, (int) (byte)32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-92);
      int int0 = Pattern.UNICODE_CASE;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(902, (byte) (-92));
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantMethodHandle0;
      boolean boolean0 = false;
      byte[] byteArray1 = Utility.decode("ltVF+", false);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int1 = 98;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 98, 98);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Utility.convertString("aZ/4m+c&}sQb]89I:iX");
      String string0 = Utility.getSignature("aZ/4m+c&}sQb]89I:iX");
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object object0 = new Object();
      String string1 = Utility.signatureToString("V", false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Utility.getSignature("aZ/4m+c&}sQb]89I:iX");
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.signatureToString("UAx", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UAx'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[21];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = object1;
      objectArray0[2] = object1;
      objectArray0[3] = object0;
      objectArray0[5] = (Object) byteArray0;
      Utility.printArray(objectArray0, false);
      Utility.signatureToString("[B@6545b9ca, java.lang.Object@49af047b, java.lang.Object@49af047b, java.lang.Object@21d6084d, null, [B@6545b9ca, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null", false);
      Utility.isSet(44, 9);
      try { 
        Utility.typeOfSignature("<%&yt1'npx:h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <%&yt1'npx:h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte byte0 = Constants.ATTR_SYNTHETIC;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      String string1 = Utility.getSignature("<illegal type>");
      assertEquals("L<illegal;", string1);
      
      String string2 = Utility.methodSignatureReturnType("B4G#");
      assertEquals("byte", string2);
      
      String string3 = Utility.compactClassName("a*ka;j:k");
      assertEquals("a*ka;j:k", string3);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantDouble constantDouble0 = new ConstantDouble(95.5655);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-124);
      try { 
        Utility.methodSignatureReturnType("$)GcgXH!M6+NM`Frdo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GcgXH!M6+NM`Frdo'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      try { 
        Utility.methodSignatureReturnType("[%6&4@^B/1hZP$]&$+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `%6&4@^B/1hZP$]&$+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)98;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)98, (int) (byte)98);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)37;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)101, (-1998));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      short short0 = Constants.MINOR_1_5;
      ConstantClass constantClass0 = new ConstantClass((-225));
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantClass0;
      constantArray0[5] = (Constant) constantClass0;
      constantArray0[7] = (Constant) constantClass0;
      constantArray0[8] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-94);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 73, 57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)87);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.close();
      Utility.codeToString(byteSequence1, constantPool0, false);
      String[] stringArray0 = Constants.ATTRIBUTE_NAMES;
      String string0 = Utility.printArray((Object[]) stringArray0);
      assertEquals("{SourceFile, ConstantValue, Code, Exceptions, LineNumberTable, LocalVariableTable, InnerClasses, Synthetic, Deprecated, PMGClass, Signature, StackMap, RuntimeVisibleAnnotations, RuntimeInvisibleAnnotations, RuntimeVisibleParameterAnnotations, RuntimeInvisibleParameterAnnotations, AnnotationDefault}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString(">");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) ">";
      objectArray0[1] = (Object) ">";
      objectArray0[2] = (Object) ">";
      objectArray0[3] = (Object) ">";
      objectArray0[4] = (Object) ">";
      objectArray0[5] = (Object) ">";
      objectArray0[6] = (Object) ">";
      Utility.printArray(objectArray0, true);
      try { 
        Utility.methodSignatureArgumentTypes("(E9b2=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E9b2='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Utility.compactClassName("\t\t#");
      Utility.format(1945, (byte)28, false, 'x');
      try { 
        Utility.typeOfSignature("U(jBtXc%?R~{3BM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U(jBtXc%?R~{3BM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Utility.compactClassName(", offset=", ", offset=", true);
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      byteSequence0.close();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 180, (int) (byte)42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      short short0 = Constants.FSTORE_2;
      byte[] byteArray0 = new byte[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      int int0 = Pattern.DOTALL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Constants.ILLEGAL_OPCODE;
      byteSequence0.readShort();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Utility.getSignature("^\"~La>zs");
      try { 
        Utility.methodSignatureReturnType("Qu/pfoIsZTO hnWSg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qu/pfoIsZTO hnWSg'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-92);
      byteArray0[0] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte) (-89);
      byteArray0[7] = (byte)74;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)83, 1251, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)68;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte) (-89);
      byteArray0[7] = (byte)74;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)83, 1251, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(540.5277752426294);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(40, 7);
      constantInterfaceMethodref0.clone();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-89), 212);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "da'load";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)104;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte0 = (byte) (-124);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[27];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-87);
      String string0 = "Qc4d4^";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-3506), (-46));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      short short0 = Constants.MINOR_1_5;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 81, (int) (byte)21);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)80);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.readUnsignedShort();
      byteSequence0.close();
      String string0 = Utility.replace("lastore", "lastore", "lastore");
      assertEquals("lastore", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)55);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)70, (-1125));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)77;
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.convertString("j");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)77, (-287));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte)83;
      byteArray0[8] = (byte)18;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[13];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2768, 512);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.isJavaIdentifierPart('\u0085');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("jsr_w", "jsr_w", "aload_2", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jsr_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      Utility.convertString("<illegal opcode>");
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(6, 160);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.compactClassName("<illegal opcode>");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)92;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)92, 223, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Utility.classOrInterface(805);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "interface");
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("int");
      Utility.typeOfSignature("J#StV&UJ\"=+$");
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 924, (int) (byte)79);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((-636L));
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-110), 4316);
      try { 
        byteSequence0.readDouble();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("O'F{U$#ffB%C`*'Y", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      byteSequence0.close();
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[1] = (Constant) constantString0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantString constantString1 = new ConstantString(2522);
      Utility.printArray((Object[]) constantArray0);
      byte byte0 = ElementValue.PRIMITIVE_BYTE;
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1153, 300);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)123;
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.printArray((Object[]) null);
      byte byte0 = ElementValue.PRIMITIVE_BYTE;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)63, (int) (byte)66);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "return";
      Utility.fillup("return", 104, true, '>');
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\t\t");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-66);
      byteArray0[1] = (byte)5;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte)5;
      byteArray0[8] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      int int0 = Pattern.MULTILINE;
      byteSequence0.readChar();
      byteSequence0.close();
      byteSequence0.close();
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = 90;
      boolean boolean0 = false;
      Utility.format(46, 90, false, '#');
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)76;
      byteArray0[0] = (byte)76;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)76, (int) (byte)76, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)88;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1885173434), 3262);
      assertEquals("0:    pop2\n1:    pop2\n2:    pop2\n", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)25;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 80, 1524, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-82);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 844, 1251, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Utility.convertString("aZ/4m+c&}sQb]89I:iX");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((-618));
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)70, (int) (byte)114);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      String string1 = Utility.convertString("<illegal opcode>");
      Constant[] constantArray0 = new Constant[4];
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "IpV{>w+C%0,~Bz^#J");
      ConstantPool constantPool2 = constantPool1.copy();
      constantPool1.copy();
      constantPool2.setConstantPool(constantArray0);
      constantPool1.toString();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-65), (byte) (-65));
      constantInterfaceMethodref0.clone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-79);
      Utility.codeToString(byteArray0, constantPool2, (int) (byte) (-65), 212);
      Utility.compactClassName("IpV{>w+C%0,~Bz^#J", false);
      String string2 = Utility.methodSignatureReturnType("IpV{>w+C%0,~Bz^#J", false);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)80;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)80);
      byteSequence0.readUnsignedShort();
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.reset();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.signatureToString("InnerClass(");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\tdefault = ", "Types", "Types", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \tdefault = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)6);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.readUnsignedShort();
      byteSequence0.close();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-127);
      String string0 = Constants.CONSTRUCTOR_NAME;
      Pattern.quote("Vg;2bGsVBIWCJ;-k}e");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 96, 192);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-115);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-115), (int) (byte) (-115));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    f2d\n1:    nop\n2:    nop\n", "0:    f2d\n1:    nop\n2:    nop\n", "==[z\"WGgGB=51i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    f2d
         // 1:    nop
         // 2:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      int int0 = Pattern.UNIX_LINES;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      byteSequence1.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)90;
      byteArray1[1] = (byte)49;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)90, (int) (byte)49);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "<illegal type>";
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-75);
      byteArray0[5] = (byte)99;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 42, (int) (byte)99, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.mark((byte)24);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-84);
      byteArray1[1] = (byte)69;
      byteArray1[2] = (byte)24;
      byteArray1[3] = (byte) (-84);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 195, 182);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Utility.setBit((-1397), (-1397));
      Utility.compactClassName("Qc4d4^", false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Qc4d4^");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureArgumentTypes("Qc4d4^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Qc4d4^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = "<``1qHq{]$";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<``1qHq{]$");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<``1qHq{]$");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("<``1qHq{]$", false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte) (-97);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-123), (int) (byte)69);
      try { 
        Utility.methodSignatureReturnType(" O+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` O+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-121));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-97);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-21), (int) (byte) (-121));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmpeq\t\t#-20601
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.getSignature("<illegal type>");
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)119;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-87);
      int int0 = (-2349);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-87), (-2349));
      Utility.fillup("0:    ret\t\t%169\n", (byte) (-87), true, '~');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" ");
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      String string0 = "Y";
      try { 
        Utility.methodSignatureReturnType("Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$5[");
      String string0 = Utility.compactClassName("$5[", false);
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-15);
      byteArray0[3] = (byte)119;
      byteArray0[3] = (byte) (-15);
      byteArray0[5] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "Y$ ";
      objectArray0[4] = (Object) fileSystemHandling1;
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)24;
      byteArray0[6] = (byte)61;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)24, (-1125));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fload_0", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "<illegal opcode>";
      objectArray0[1] = (Object) "<illegal opcode>";
      objectArray0[3] = (Object) "<illegal opcode>";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      try { 
        Utility.typeOfSignature("@n;B*Bx<16zBcS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @n;B*Bx<16zBcS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)99;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      short short0 = Utility.searchOpcode("daad");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte) (-8);
      byteArray0[0] = (byte) (-66);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray1[1] = (byte)53;
      byteArray1[2] = (byte) (-12);
      byteArray1[3] = (byte)81;
      byteArray1[4] = (byte)53;
      byteArray1[5] = (byte)8;
      byteArray1[6] = (byte) (-66);
      byteArray1[8] = (byte) (-8);
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)8, (int) (short) (-1));
      assertEquals("8:    <illegal opcode>\n", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart(')');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[1] = (byte) (-124);
      try { 
        Utility.typeOfSignature("\"Ne1)E>pxlV_B;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"Ne1)E>pxlV_B;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      EvoSuiteFile evoSuiteFile0 = null;
      Object[] objectArray0 = new Object[10];
      objectArray0[6] = (Object) byteArray0;
      byte[] byteArray1 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.skip((-636L));
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-110);
      byteArray2[1] = (byte)53;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)99;
      ByteSequence byteSequence1 = new ByteSequence(byteArray2);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      try { 
        Utility.methodSignatureArgumentTypes("i2c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i2c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-1);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      byteSequence0.close();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-119);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3174, (int) (byte)20, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      ConstantDouble constantDouble0 = new ConstantDouble((-585.186086));
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "l2} L\u0002$O-T&Od");
      Utility.getSignature("Wy7Z+`Zi");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.constantToString((Constant) constantDouble0);
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(805);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteSequence1.close();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)8, 164);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)17;
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      byteSequence0.readUnsignedShort();
      byteSequence0.skip((byte)44);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)47, 2979);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ConstantUtf8.getInstance("7");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      int int0 = (-2861);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-2861));
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 111, (int) (byte) (-79));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-119);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1412), (-315), false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("checkcast", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `checkcast'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, (int) (byte)37);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = new String[4];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-16);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.mark((-2942));
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = "LocalVariableTable";
      // Undeclared exception!
      try { 
        Utility.typeOfSignature(stringArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Pattern.quote("tWaP/Cm_MY@t");
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("tWaP/Cm_MY@t");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-321), (-969));
      assertEquals("0:    istore_0\n", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart(')');
      assertFalse(boolean0);
      
      String string2 = Utility.classOrInterface((-3320));
      assertEquals("interface", string2);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)79;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)119;
      byteArray1[1] = (byte)14;
      byteArray1[2] = (byte) (-42);
      byteArray1[3] = (byte) (-85);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)16, (-1789));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)116;
      byteArray1[1] = (byte)116;
      byteArray1[2] = (byte)116;
      byteArray0[0] = (byte)116;
      byteArray1[4] = (byte)116;
      byteArray1[5] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.skip((-646L));
      byteSequence0.readUnsignedShort();
      byteSequence0.close();
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)99;
      byteArray2[1] = (byte)8;
      byteArray2[2] = (byte) (-110);
      byteArray2[3] = (byte)116;
      byteArray2[4] = (byte)8;
      byteArray2[5] = (byte)8;
      byteArray2[6] = (byte)99;
      Utility.toHexString(byteArray0);
      Utility.format(255, (byte)8, false, 'K');
      try { 
        Utility.typeOfSignature("KKKKK255");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KKKKK255
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = "daad";
      Utility.searchOpcode("daad");
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte) (-8);
      byteArray0[0] = (byte) (-66);
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence1.markSupported();
      byteSequence1.readByte();
      byteSequence1.read();
      byteSequence0.markSupported();
      byteSequence1.readUnsignedShort();
      byteSequence1.close();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)56;
      byteArray1[1] = (byte) (-66);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 93, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", low = ");
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("XM OG_Y?2p", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XM OG_Y?2p'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[15];
      byteArray0[1] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("instanceof");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantUtf8_1.clone();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_G5`ChM8.)1'kAE]");
      Utility.typeOfSignature("Byte code error: ");
      ConstantMethodType constantMethodType0 = new ConstantMethodType(8);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteSequence0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(Throwable e) {
         //
         // invalid stream header: 00840000
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, (int) (byte)75);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      short short0 = Constants.FSTORE_2;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Y$ ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("n1&0^");
      try { 
        Utility.typeOfSignature("NM?~y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NM?~y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "da'load";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)75;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      String string1 = "1K0V1x?bgFQvA;";
      try { 
        Utility.typeOfSignature("1K0V1x?bgFQvA;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1K0V1x?bgFQvA;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";u%*q9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;u%*q9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = ")R9FzCSUfno";
      String[] stringArray0 = new String[4];
      stringArray0[0] = ")R9FzCSUfno";
      stringArray0[1] = ")R9FzCSUfno";
      stringArray0[2] = ")R9FzCSUfno";
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)65;
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-43);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = "LocalVariableTable";
      try { 
        Utility.typeOfSignature(")R9FzCSUfno");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )R9FzCSUfno
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)40;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.available();
      byteSequence0.close();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.compactClassName("dload_2", false);
      assertEquals("dload_2", string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1)null\n2)n";
      stringArray0[1] = "1)null\n2)n";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8|Dr]TIgZ9");
      stringArray0[4] = "java.lang.-+";
      stringArray0[5] = "1)null\n2)n";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(stringArray0[2], stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = ")R9FzSUfno";
      stringArray0[0] = ")R9FzSUfno";
      stringArray0[2] = ")R9FzSUfno";
      stringArray0[3] = ")R9FzSUfno";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")R9FzSUfno");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte)42;
      byteArray0[8] = (byte) (-14);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")R9FzSUfno");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, 219);
      assertEquals("4:    i2l\n5:    lstore_3\n6:    astore_0\n7:    aload_0\n8:    <illegal opcode>\n", string0);
      
      String string1 = Utility.convertString("o79E[y\"-$,MNWbII#|");
      assertEquals("o79E[y\\\"-$,MNWbII#|", string1);
      
      String string2 = Utility.methodSignatureReturnType("T;x2zww=}Y*", false);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-80);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1412), (-315), false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("checkcast", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `checkcast'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(3110.305);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte byte0 = (byte)118;
      byte byte1 = (byte)17;
      byte[] byteArray0 = new byte[1];
      byte byte2 = (byte) (-58);
      byteArray0[0] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1, 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[9];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-125);
      Utility.codeToString(byteArray0, (ConstantPool) null, 1, 2048);
      Utility.compactClassName("ehx2J");
      Utility.searchOpcode("1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n");
      short short0 = Constants.DLOAD_1;
      assertEquals((short)39, short0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-63);
      Pattern.quote("UyS");
      Utility.convertString("QUySE");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-121);
      byte[] byteArray1 = new byte[7];
      byteArray1[1] = (byte) (-121);
      byteArray1[3] = (byte)18;
      byteArray1[6] = (byte) (-121);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)18, (int) (byte)18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-84);
      byteArray0[0] = (byte) (-84);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-84), (int) (byte) (-84), false);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("'+b$e<");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantPool0.copy();
      try { 
        Utility.typeOfSignature("0:    ireturn\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    ireturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-81);
      int int0 = (-1443);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1443), 1657);
      try { 
        Utility.typeOfSignature("lgZIQ-|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lgZIQ-|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(805);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteSequence1.close();
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-4204), 805, false);
      assertEquals("0:    iload_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(b7T|kGP|:#^<jM(", "baload", "(b7T|kGP|:#^<jM(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `b7T|kGP|:#^<jM('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)46;
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      Utility.compactClassName("<clinit>");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 37, 76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      ConstantUtf8.printStats();
      Constant[] constantArray0 = new Constant[0];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-126);
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte) (-53);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 18, (int) (byte) (-126), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "[q|e&:.PKbW'{>@]Q";
      stringArray0[1] = "[q|e&:.PKbW'{>@]Q";
      stringArray0[2] = "[q|e&:.PKbW'{>@]Q";
      stringArray0[3] = "[q|e&:.PKbW'{>@]Q";
      stringArray0[4] = "[q|e&:.PKbW'{>@]Q";
      stringArray0[5] = "[q|e&:.PKbW'{>@]Q";
      stringArray0[6] = "[q|e&:.PKbW'{>@]Q";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[q|e&:.PKbW'{>@]Q", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [q|e&:.PKbW'{>@]Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Utility.classOrInterface(805);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "interface");
      String string0 = "J#StV&UJ\"=+$";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("int");
      Utility.typeOfSignature("J#StV&UJ\"=+$");
      try { 
        Utility.methodSignatureReturnType("int", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `int'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      Utility.convertString("<illegal opcode>");
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("<illegal opcode>");
      Utility.methodTypeToSignature("<illegal opcode>", (String[]) null);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Constants.ILLEGAL_TYPE;
      Utility.printArray((Object[]) constantArray0);
      byte byte0 = ElementValue.PRIMITIVE_BYTE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte) (-120);
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)66;
      byteArray0[8] = (byte)66;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)66, (int) (byte)66);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<illegal opcode>");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "short");
      Utility.compactClassName("short", false);
      Utility.isJavaIdentifierPart('K');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteSequence0.mark((byte)52);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.getSignature("Wy<J.Z+`Zi");
      try { 
        Utility.methodSignatureReturnType("LWy<J/Z+`Zi;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LWy<J/Z+`Zi;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[27];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-58);
      String string0 = "%PS2Fx]";
      try { 
        Utility.typeOfSignature("%PS2Fx]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %PS2Fx]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-96);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-96), (int) (byte) (-96));
      try { 
        Utility.typeOfSignature("0:    if_icmpne\t\t#0\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    if_icmpne\t\t#0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("Y$ ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y$ 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" UyR;3b/>%7>");
      constantUtf8_0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("LocalVariableTable");
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(67, 85);
      Constant[] constantArray0 = new Constant[7];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(85, 2385);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantString constantString0 = new ConstantString(85);
      constantArray0[3] = (Constant) constantString0;
      Utility.printArray((Object[]) constantArray0);
      byte byte0 = ElementValue.PRIMITIVE_BYTE;
      constantString0.setStringIndex(2385);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)14;
      JavaClass.getComparator();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)66, (int) (byte)66);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("boolean", (String[]) null);
      assertEquals("()Z", string0);
      
      Utility.methodSignatureArgumentTypes("()Z");
      String string1 = Utility.compactClassName("invokestatic");
      assertEquals("invokestatic", string1);
      
      short short0 = Utility.searchOpcode("invokestatic");
      assertEquals((short)184, short0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte) (-36);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ConstantUtf8.getInstance("7");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("float", true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.decode(":LPKeofBqv7T(_hlE.$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-2030), (-2382));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 49408. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-76);
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      Pattern.quote("java.lang.");
      Utility.convertString("]vm1T'4yr7tO5|Vk7 ");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteSequence0.close();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("L<illegal;V", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1953, 170);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)103;
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)3;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1147, (int) (byte)3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte byte0 = (byte)112;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)112;
      int int0 = (-2338);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)112, (-2338));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false, false);
      Utility.compactClassName("java.lang.Object@324af5a, java.lang.Object@1316c367, java.lang.Object@460784fa, java.lang.Object@1bca9916, java.lang.Object@3db2ab4a, java.lang.Object@189a4a60");
      Utility.searchOpcode("java.lang.Object@324af5a, java.lang.Object@1316c367, java.lang.Object@460784fa, java.lang.Object@1bca9916, java.lang.Object@3db2ab4a, java.lang.Object@189a4a60");
      String string0 = "'y";
      try { 
        Utility.typeOfMethodSignature("'y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("InvaHid method signature: ");
      constantUtf8_0.toString();
      ConstantUtf8.printStats();
      constantUtf8_0.clone();
      int int0 = Utility.setBit(6, 3744);
      assertEquals(7, int0);
      
      String string0 = Utility.replace("Float", "{6X?i#i{aeEy_HM", "InvaHid method signature: ");
      assertEquals("Float", string0);
      
      String string1 = Utility.classOrInterface(6);
      assertEquals("class", string1);
      
      byte byte0 = Utility.typeOfSignature("StackMapTable");
      assertEquals((byte)9, byte0);
      
      int int1 = Utility.setBit((-1429), 163);
      assertEquals((-1429), int1);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((byte)24);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte byte0 = (byte)36;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)118;
      byteArray0[2] = (byte)24;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)31;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)24, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      int int0 = Pattern.CANON_EQ;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readFully(byteArray0);
      byteSequence2.skipBytes(3204);
      byteSequence2.mark(229);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      Utility.isSet((-544), (byte)36);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-112), (-1));
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.compactClassName("j1J!hxm{7QD1");
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.typeOfSignature("FjTeT)'!");
      try { 
        Utility.methodSignatureArgumentTypes("FjTeT)'!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: FjTeT)'!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("class", false);
      int int0 = 195;
      try { 
        Utility.methodSignatureReturnType("Nu@3`FvD;xw!hm=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Nu@3`FvD;xw!hm='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      int int0 = (-460);
      boolean boolean0 = false;
      String string0 = Constants.ILLEGAL_OPCODE;
      Utility.decode("<illegal opcode>", false);
      Constant[] constantArray0 = new Constant[4];
      Utility.fillup("float", (-460), false, 'y');
      String[] stringArray0 = new String[0];
      try { 
        Utility.typeOfMethodSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String[] stringArray0 = new String[4];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-26);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.mark((-2942));
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = "LocalVariableTable";
      // Undeclared exception!
      try { 
        Utility.typeOfSignature(stringArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-70);
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)124;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      int int0 = 37;
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      byte[] byteArray1 = Utility.decode("nH?`gaW[YaILG}xa", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 185, (int) (byte)90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteSequence1.readFloat();
      byteSequence1.readUnsignedByte();
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-735));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.read();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteSequence2);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(Throwable e) {
         //
         // invalid stream header: 7F000000
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      Utility.convertString("<illegal opcode>");
      Constant[] constantArray0 = new Constant[4];
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "IpV{>w+C%0,~Bz^#J");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      Utility.encode(byteArray0, false);
      Utility.methodSignatureReturnType("J");
      Utility.accessToString(41, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 250, (-1156));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "o>,9BY?z]0N");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.clearBit(837, 176);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-83);
      byte byte0 = (byte)6;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-49);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 40, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.convertString("<init>");
      byte[] byteArray0 = Utility.decode("<init>", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("O'F{U$#ffB%k`*'Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O'F{U$#ffB%k`*'Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)41;
      byteArray0[0] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byteSequence1.readInt();
      byteSequence0.readBoolean();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "dload_3";
      stringArray0[1] = "void";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = "dload_3";
      stringArray0[5] = null;
      stringArray0[6] = "dload_3";
      stringArray0[7] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)117;
      byteArray0[3] = (byte)117;
      byteArray0[5] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 117
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$5[");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(2137);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-99);
      byteArray1[1] = (byte)58;
      byteArray1[2] = (byte)58;
      byteArray1[3] = (byte)58;
      byteArray1[4] = (byte)94;
      byteArray1[5] = (byte)94;
      byteArray1[6] = (byte)94;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence1);
      // Undeclared exception!
      try { 
        constantFieldref0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantFieldref", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      short short0 = Constants.PUTSTATIC;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      String string0 = "fload_1";
      String string1 = "/ kwKxxOcq;";
      String string2 = "lcmp";
      Utility.replace("/ kwKxxOcq;", "fload_1", "lcmp");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)107;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-45), (int) (byte)107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      InputStream inputStream0 = null;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(540.5277752426294);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(40, 7);
      constantInterfaceMethodref0.clone();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-102), 212);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-85);
      byteArray0[5] = (byte) (-85);
      byte[] byteArray1 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence1.close();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence3, (ConstantPool) null);
      assertEquals("iload_2", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" UyR;!b/>%7R");
      constantUtf8_0.toString();
      constantUtf8_0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("LocalVariableTable");
      constantUtf8_0.copy();
      Constant[] constantArray0 = new Constant[7];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(109, 2385);
      constantArray0[0] = (Constant) constantMethodref0;
      Utility.printArray((Object[]) constantArray0);
      byte byte0 = ElementValue.PRIMITIVE_BYTE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)66;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)14;
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      Utility.signatureToString("CONSTANT_Utf8[1](\" UyR;!b/>%7R\")");
      Utility.searchOpcode("spy{[Ym>$/P");
      Utility.isJavaIdentifierPart('x');
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("LocalVariableTable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LocalVariableTable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[9];
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Constants.ILLEGAL_TYPE;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.markSupported();
      short short0 = Constants.F2I;
      Utility.clearBit((short)139, (short)139);
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-107);
      byteArray1[1] = (byte) (-67);
      Utility.classOrInterface((short)139);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<illegal type>");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (short)0, (int) (byte) (-67));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)77, (int) (byte) (-67));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)94;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1851), (-2151));
      assertEquals("0:    nop\n1:    dup2_x2\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      short short0 = Constants.FSTORE_2;
      ConstantDouble constantDouble0 = new ConstantDouble((short)69);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)36, (int) (short)69);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray1 = new byte[8];
      byteArray0[0] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readFully(byteArray1);
      byteSequence0.skip((-636L));
      byteSequence0.close();
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-110);
      byteArray2[1] = (byte) (-109);
      byteArray2[2] = (byte)8;
      byteArray2[3] = (byte)99;
      byteArray2[4] = (byte) (-1);
      String string0 = Utility.codeToString(byteArray2, (ConstantPool) null, (int) (byte)0, 65536, false);
      assertEquals("0:    i2c\n1:    i2s\n2:    iconst_5\n3:    dadd\n4:    impdep2\n", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-20);
      byteArray0[4] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[7] = (byte) (-20);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantMethodref0.setClassIndex(598);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = constantPool0.copy();
      constantPool2.toString();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = Utility.methodSignatureReturnType("Z,[LB <", false);
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.convertString("<illegal type>");
      byte[] byteArray0 = Utility.decode("float", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes(182);
      try { 
        Utility.typeOfSignature("!H0Zx^s~#Ky");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H0Zx^s~#Ky
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      String string1 = Constants.CONSTRUCTOR_NAME;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string2 = "nS2'Pg>4XC\"0%G |%U";
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte)17;
      byte byte0 = (byte)11;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)33, (-4904));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JavaClass.getComparator();
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = Utility.decode("3Rd;", false);
      String string1 = Utility.printArray((Object[]) constantArray0, true);
      assertEquals("{null, null}", string1);
      
      short short0 = Utility.searchOpcode("newarray");
      assertEquals((short)188, short0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("<illegal type>");
      mockPrintStream0.format("<illegal type>", (Object[]) constantArray0);
      String string2 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-7), (int) (byte) (-58), true);
      assertEquals("0:    baload\n1:    dastore\n2:    isub\n3:    istore_0\n", string2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{null, null}";
      String string3 = Utility.methodTypeToSignature("N", stringArray0);
      String string4 = Utility.compactClassName("(L{null,;)LN;");
      assertTrue(string4.equals((Object)string3));
      
      boolean boolean0 = Utility.isJavaIdentifierPart('T');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = "6IGJM&2u\\./^ffN";
      try { 
        Utility.typeOfSignature("6IGJM&2u./^ffN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6IGJM&2u./^ffN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 937, (int) (byte)41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Utility.getSignature("\n     ");
      Utility.convertString("L;");
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-96);
      String string0 = Constants.ILLEGAL_OPCODE;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-3778), (int) (byte)45);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("\n     ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `
         //      '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[15];
      byteArray0[1] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.read(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("dv]-4");
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = "putfield";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("S", "putfield", " read ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      constantPool0.toString();
      Utility.convertString("1)null\n2)null\n");
      Pattern.quote("1)null\n2)null\n");
      Utility.isJavaIdentifierPart('(');
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q1)null\n2)null\nE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q1)null
         // 2)null
         // E'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      String string1 = Constants.CONSTRUCTOR_NAME;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-62);
      byte byte0 = (byte)123;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)113;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 8, (int) (byte)6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte byte0 = ObjectStreamConstants.TC_MAX;
      byteSequence0.mark((byte)19);
      ConstantDouble constantDouble0 = new ConstantDouble(540.5277752426294);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble2 = new ConstantDouble((byte) (-53));
      constantDouble2.clone();
      constantDouble0.setBytes((byte)19);
      constantDouble0.toString();
      constantDouble2.setBytes(1048.7340998004988);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantDouble1;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble1;
      constantArray0[3] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 81, (int) (byte)19);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = "i:return";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i:return");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-57);
      byteArray0[2] = (byte)59;
      byteArray0[4] = (byte)108;
      short short0 = Constants.F2I;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = new ConstantDouble((byte)108);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("ifnonnull\t\t#59");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnonnull\t\t#59
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[15];
      byteArray0[1] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.read(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.reset();
      constantPool0.copy();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.getSignature("0:");
      String string0 = "Ra\\Qj4#qDvYIZIi";
      try { 
        Utility.typeOfSignature("7p@FYY>^uI9g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7p@FYY>^uI9g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.mark(78);
      byteSequence0.close();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, (int) (byte) (-23));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      String string1 = Constants.CONSTRUCTOR_NAME;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.decode("<illegal opcode>", false);
      String string2 = "{HHQG+lqn:{j";
      try { 
        Utility.typeOfSignature("3\"6>n_{'(~|&E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3\"6>n_{'(~|&E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-108));
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lcmp", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      constantDouble0.clone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[0] = (byte) (-96);
      byte byte0 = (byte) (-53);
      byteArray0[5] = (byte) (-53);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)88;
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      constantPool1.copy();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Utility.getSignature("0:");
      try { 
        Utility.typeOfSignature("&!+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &!+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[0] = (byte)19;
      ConstantPool constantPool0 = null;
      int int0 = 50;
      String string0 = ",\"&";
      byte[] byteArray1 = Utility.decode(",\"&", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)19, 1900);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte byte0 = ObjectStreamConstants.TC_MAX;
      byteSequence0.mark((byte)19);
      ConstantDouble constantDouble0 = new ConstantDouble(540.5277752426294);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble2 = new ConstantDouble((byte) (-53));
      constantDouble2.clone();
      constantDouble0.setBytes((byte)19);
      constantDouble0.toString();
      constantDouble2.setBytes(1048.7340998004988);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantDouble1;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble1;
      constantArray0[3] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-53), (int) (byte)88, false);
      assertEquals("0:    ldc_w\t\t540.5277752426294\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = ObjectStreamConstants.SC_ENUM;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)16, 91);
      byte byte1 = ElementValue.PRIMITIVE_BYTE;
      Method.getComparator();
      Utility.clearBit((byte)66, 599);
      try { 
        Utility.typeOfSignature("QC^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QC^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)94;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 122, 251);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-114);
      byteArray0[0] = (byte) (-114);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 687, (int) (byte) (-114));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((-3624));
      ConstantDouble constantDouble1 = new ConstantDouble((-3624));
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantDouble1;
      constantDouble0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Utility.fillup("object", 48, false, 'y');
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-112);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)36, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte)71;
      Constant[] constantArray0 = new Constant[3];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-105), (byte)67);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantLong constantLong0 = new ConstantLong(1L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)42);
      constantArray0[2] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-105), (int) (byte)42);
      assertEquals("0:    iaload\n1:    fstore_0\n2:    <illegal opcode>\n3:    lconst_0\n4:    fload_3\n5:    dcmpl\n6:    aload_0\n7:    dstore_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-104);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 148, 114);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte) (-99);
      byteArray0[8] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)121);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      classLoaderRepository0.findClass("Ltl[YBnz&p2 A!");
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, (Visitor) null);
      // Undeclared exception!
      try { 
        constantFieldref0.accept(descendingVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantFieldref", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-100);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-71), (int) (byte) (-71));
      Utility.compactClassName("wide");
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("M$5D", false);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)5;
      byteArray0[0] = (byte)5;
      byte byte1 = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)109;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)109, (int) (byte)14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile1 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.format(364, 78, false, 'P');
      try { 
        Utility.typeOfSignature("PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP364");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP364
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Utility.searchOpcode("sQ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte)113;
      byteArray0[7] = (byte)26;
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)18);
      constantArray0[0] = (Constant) constantInteger0;
      Constant constant0 = constantInteger0.copy();
      constantArray0[1] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)0, (int) (byte) (-46), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 4818. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-94);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-412), (-1980));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-122);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1682, 512);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("M$5D", false);
      Utility.compactClassName("M$5D");
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1984);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("M$5D");
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)12;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1728, 1611, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)28;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      String string0 = "<illegal";
      String string1 = "/@ZtH_f";
      try { 
        Utility.typeOfSignature("/@ZtH_f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /@ZtH_f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2211);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)23;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)23, (int) (byte)23);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-2311));
      Utility.fillup("0:    nop\n1:    nop\n", (byte)0, true, '\u0082');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.markSupported();
      Object object0 = new Object();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)106;
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)0, 40);
      byteSequence1.readShort();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.methodSignatureReturnType("0:    nop\n1:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    nop
         // 1:    nop
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-85);
      byteArray0[5] = (byte) (-85);
      byte[] byteArray1 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-85), (int) (byte)30);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lload_0
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("7");
      byte[] byteArray0 = new byte[17];
      byte byte0 = (byte) (-79);
      byteArray0[0] = (byte) (-79);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-79));
      ConstantPool constantPool0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("7");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      int int0 = 97;
      String string0 = Utility.format(97, 1580, false, 'X');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-85);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.accept(emptyVisitor0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)28, 175);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "!,e7G9";
      stringArray0[1] = "lload\t\t%71";
      stringArray0[2] = "lload\t\t%71";
      stringArray0[3] = "lload\t\t%71";
      stringArray0[4] = "lload\t\t%71";
      stringArray0[5] = "lload\t\t%71";
      stringArray0[6] = "lload\t\t%71";
      stringArray0[7] = "lload\t\t%71";
      Utility.methodTypeToSignature("lload\t\t%71", stringArray0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      constantPool0.toString();
      Utility.convertString("1)null\n2)null\n");
      Pattern.quote("1)null\n2)null\n");
      Utility.isJavaIdentifierPart('(');
      Utility.compactClassName("1)null\n2)null\n", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte) (-78);
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)27, 1887);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -18
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byte byte0 = (byte) (-78);
      byteArray0[0] = (byte) (-78);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-78), (int) (byte) (-78));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[10] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      constantPool0.copy();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("?v]'S <j%>&\"%:0mn+/");
      constantUtf8_0.toString();
      ConstantUtf8.printStats();
      constantUtf8_0.clone();
      // Undeclared exception!
      try { 
        Utility.getSignature("CONSTANT_Utf8[1](\"?v]'S <j%>&\"%:0mn+/\")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[1](\"?v]'S <j%>&\"%:0mn+/\")
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)22;
      byte byte0 = (byte)67;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      boolean boolean0 = true;
      Utility.accessToString(569, true);
      Utility.compactClassName("1)null");
      try { 
        Utility.typeOfMethodSignature("1)null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1)null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      short short0 = Constants.PUTSTATIC;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-61);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (short)179, 118);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
