/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 21:32:11 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.UnknownHostException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import okhttp3.HttpUrl;
import okio.Buffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUrl_ESTest extends HttpUrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "x43Fg";
      boolean boolean0 = false;
      HttpUrl.canonicalize("x43Fg", "x43Fg", false, false, false, false);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string1 = " \"#<>\\^`{|}";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("x43Fg", " \"#<>^`{|}");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host(" \"#<>^`{|}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host:  \"#<>^`{|}
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.removeAllQueryParameters("]");
      httpUrl_Builder0.host("l");
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("l");
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment((-679), "\n");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "YL~T@B*G`D X\\uM5D";
      HttpUrl.queryStringToNamesAndValues(string0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("@");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockURL.URL("https", "https", 1, "https");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("https", (String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "YL~T@B*G`D X\\uM5D";
      HttpUrl.queryStringToNamesAndValues(string0);
      HttpUrl.decodeHexDigit('?');
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, string0, (-1), (-1), string0, true, true, true, true);
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addQueryParameter((String) null, "W:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedQuery("\n");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment((-591), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("H{+");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "{c<nivb#p";
      HttpUrl.parse("{c<nivb#p");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.parse((HttpUrl) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("j");
      try { 
        HttpUrl.getChecked("j");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for j
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ":u@";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath(":u@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: :u@
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = 0;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 0
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HttpUrl.decodeHexDigit('q');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -1
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "=";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("=");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      httpUrl_Builder2.password("");
      httpUrl_Builder2.encodedUsername("Expected leading [0-9a-fA-F] character but was %#x");
      try { 
        MockURL.URL("=");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: =
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "gYS/ck8tSxNj95";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.password((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // password == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.fragment("\u2026");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.query(".%2e");
      String string0 = "::";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegment("@/?%23");
      String string0 = "::";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("", "");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.username("");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedPath("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "::";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedQueryParameter((String) null, "..");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setEncodedQueryParameter(":", (String) null);
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockURL.getHttpExample();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.username((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // username == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("e\"V");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegments("");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setQueryParameter("", "");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.removePathSegment(1728);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1728, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 0;
      String string0 = "inflater == null";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removePathSegment(0);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.scheme("http::");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: http::
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedFragment("]");
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "quAu";
      try { 
        HttpUrl.getChecked("quAu");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for quAu
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "YL~T@B*G`D X\\uUM5D";
      HttpUrl.queryStringToNamesAndValues(string0);
      try { 
        HttpUrl.getChecked(string0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for YL~T@B*G`D X\\uUM5D
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HttpUrl.decodeHexDigit('D');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("tdG^'mL5`f^42");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: tdG^'mL5`f^42
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("", "");
      String string0 = "ar3:T1>";
      // Undeclared exception!
      try { 
        httpUrl_Builder2.scheme("ar3:T1>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: ar3:T1>
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "\r";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("\r");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("\r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: \r
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      String string1 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder2.addEncodedPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      httpUrl_Builder0.encodedQueryNamesAndValues = list0;
      httpUrl_Builder0.reencodeForUri();
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "";
      HttpUrl.queryStringToNamesAndValues("");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("69`.8fRX_LW");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedUsername("69`.8fRX_LW");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegments("");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.host("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("okio.Segment");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setPathSegment(0, "okio.Segment");
      httpUrl_Builder2.host("okio.Segment");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.username("okio.Segment");
      httpUrl_Builder3.encodedFragment = "okio.Segment";
      httpUrl_Builder3.addEncodedPathSegments("Expected leading [0-9] or '-' character but was 0x");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removePathSegment(0);
      // Undeclared exception!
      try { 
        httpUrl_Builder4.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPath("/%0D");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("/%0D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: /%0D
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:u");
      assertEquals("http://u/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPath("/");
      httpUrl_Builder1.encodedPassword("/");
      try { 
        HttpUrl.getChecked("\r");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for \r
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "K1";
      httpUrl_Builder0.host("K1");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HttpUrl.decodeHexDigit('c');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.effectivePort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('M');
      int int1 = HttpUrl.defaultPort("|B694 d`MI?wvvq");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "http::";
      try { 
        HttpUrl.getChecked("http::");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http::
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(61);
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      try { 
        HttpUrl.getChecked("E:h)kBl1?78%");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for E:h)kBl1?78%
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("okhttp3.HttpUrl$Builder$ParseResult");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("", "");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegments("");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removePathSegment(0);
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.removeAllEncodedQueryParameters("okhttp3.HttpUrl$Builder$ParseResult");
      httpUrl_Builder5.encodedFragment("HjWa_Ws0l84p+eS9^");
      StringBuilder stringBuilder0 = new StringBuilder();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockInetAddress.toString(inetAddress0);
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "/192.168.1.42", 0, 0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'a';
      charArray0[1] = 'O';
      charArray0[2] = '3';
      charArray0[3] = '.';
      charArray0[4] = 'O';
      charArray0[5] = '.';
      charArray0[6] = '3';
      StringBuilder stringBuilder2 = stringBuilder1.append(charArray0);
      int int0 = 10;
      // Undeclared exception!
      try { 
        stringBuilder2.insert(10, (float) 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 10
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "https";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(2731, "+");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2731, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("a&");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("a&");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "s == null";
      httpUrl_Builder0.encodedFragment("s == null");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("data");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.effectivePort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegment("\n");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setEncodedPathSegment(0, "");
      // Undeclared exception!
      try { 
        HttpUrl.get((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("u#5|\"MgiH");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("u#5|\"MgiH", "u#5|\"MgiH");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter("u#5|\"MgiH", "Expected leading [0-9] or '-' character but was %#x");
      String string0 = null;
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.query((String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder4.setEncodedPathSegment(1885, "u#5|\"MgiH");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1885, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("u#5|\"MgiH");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("u#5|\"MgiH", "u#5|\"MgiH");
      httpUrl_Builder1.addPathSegments("+{v},&4cx|R>_/Ss");
      httpUrl_Builder1.encodedPassword("XAD");
      httpUrl_Builder2.setQueryParameter("Q![lo.H+1=@RmTDuyU9", "%40");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.removePathSegment(64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 64, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`|/_xUh[?i");
      httpUrl_Builder0.encodedQuery("8+ ]");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("4.:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 4.:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("source == null");
      httpUrl_Builder1.query("scheme == null");
      httpUrl_Builder1.addEncodedPathSegments("");
      boolean boolean0 = HttpUrl.percentEncoded("Lj}om,n08^wM8Ud)^S", 90, (-1082));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("^3= X");
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "u#5|\"MgiH";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("u#5|\"MgiH");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("u#5|\"MgiH", "u#5|\"MgiH");
      String string1 = "CnHM^a/8X<X/";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setQueryParameter("CnHM^a/8X<X/", "u#5|\"MgiH");
      httpUrl_Builder3.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath("CnHM^a/8X<X/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: CnHM^a/8X<X/
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("a&Vk!Qi,JucQ{e=pvJ");
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "YL~T@B*G`D X\\uM5D";
      HttpUrl.queryStringToNamesAndValues(string0);
      String string1 = "Expected leading [0-9] or '-' character but was %#x";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string2 = ":@";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment(":@");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("hex == null");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.removeAllEncodedQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "b-*>Ih(";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "YL~T@B*G`D X\\uM5D";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters(string0);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(246);
      String string1 = " \"#<>\\^`{|}";
      httpUrl_Builder1.addPathSegment(" \"#<>^`{|}");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host(" \"#<>^`{|}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host:  \"#<>^`{|}
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.port(58);
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(58, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.queryStringToNamesAndValues("/");
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      httpUrl_Builder0.addPathSegments("jb=Jb(/g'P]Se~VVj");
      String string0 = null;
      httpUrl_Builder1.encodedPassword("/");
      httpUrl_Builder1.query("");
      int int0 = (-1007);
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedPassword = "GN{*I(";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(".%2e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: .%2e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :@
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "UTF-16LE";
      try { 
        HttpUrl.getChecked("UTF-16LE");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for UTF-16LE
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "YL~T@B*G`D X\\uUM5D";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment(string0);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("U?WjUUgK/79zw&k");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedQueryParameter(string0, string0);
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("%s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: %s
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "WujoVN8] R-ivh;";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("WujoVN8] R-ivh;");
      String string1 = null;
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("WujoVN8] R-ivh;", (String) null);
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      String string2 = "%2B";
      httpUrl_Builder2.encodedQuery("(:{OK(\"W Is.!w[");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllEncodedQueryParameters("%2B");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.setQueryParameter((String) null, "%2B");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("3z0G6Q#^R\"lDUW`y", "3z0G6Q#^R\"lDUW`y");
      String string0 = "http:/";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters("http:/");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedUsername("]<$;v+l/Xvn1`h<7N");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addQueryParameter("encodedUsername == null", "3z0G6Q#^R\"lDUW`y");
      String string1 = "1$YT$M{V8PT ArL";
      // Undeclared exception!
      try { 
        httpUrl_Builder4.setPathSegment(3, "1$YT$M{V8PT ArL");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "%2B";
      HttpUrl.queryStringToNamesAndValues("%2B");
      HttpUrl.defaultPort("%2B");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removePathSegment(5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("|Gz(@3.`");
      StringBuilder stringBuilder0 = new StringBuilder();
      HttpUrl.namesAndValuesToQueryString(stringBuilder0, list0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setEncodedPathSegment(1439, "|Gz(@3.`");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1439, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("/@");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("/@");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("/@", "/@");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedQuery((String) null);
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.fragment("/@");
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("3{e/$Y$7u\"3o9");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("<opZ0=rL");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setQueryParameter("1$yt$m%7bv8pt%20arl", "yH8gk#w.^D#'%HF");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedQuery("3{e/$Y$7u\"3o9");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.query("yH8gk#w.^D#'%HF");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.encodedPassword("GMT");
      httpUrl_Builder6.setEncodedQueryParameter("MD5", (String) null);
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("Jn#pOc7%-mD+D ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: Jn#pOc7%-mD+D 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "UNSUPPORTED_SCHEME";
      HttpUrl.queryStringToNamesAndValues("UNSUPPORTED_SCHEME");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("9'Ds+M#bxj");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("=}9 9+x~");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.host("UNSUPPORTED_SCHEME");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("-$2?2ka:9`!hv6tS^");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments(";Zo");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllQueryParameters("-$2?2ka:9`!hv6tS^");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.scheme("-$2?2ka:9`!hv6tS^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: -$2?2ka:9`!hv6tS^
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("4WspN{0");
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.host();
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", 36, "");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(36);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("4WspN{0");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment((String) null);
      int int0 = (-1531);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setPathSegment((-1531), "~");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("vRp~xFvJaDc0D");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("vRp~xFvJaDc0D", "U5e\"");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPath("/");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.username("http");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegments("vRp~xFvJaDc0D");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.removePathSegment((-1072));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HttpUrl.parse("1dI,+R\"<`h,>");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("1dI,+R\"<`h,>", "%2e.");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("1dI,+R\"<`h,>", "1dI,+R\"<`h,>");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegments(".");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setEncodedQueryParameter(".", "|V06ht");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.setPathSegment((-1207), "+H4T)Y>Jh");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("ISIZE");
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("ISIZE");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query("ISIZE");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.port(248);
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "E:h)kBl1?78%";
      try { 
        HttpUrl.getChecked("E:h)kBl1?78%");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for E:h)kBl1?78%
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", 4995, "");
      assertEquals("https://https:4995", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("https://https:4995", uRL0.toExternalForm());
      assertEquals("", uRL0.getPath());
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals(4995, uRL0.getPort());
      assertEquals("https", uRL0.getHost());
      assertEquals("https:4995", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("https://https:4995", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("https://https:4995", uRL0.toExternalForm());
      assertEquals("", uRL0.getPath());
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals(4995, uRL0.getPort());
      assertEquals("https", uRL0.getHost());
      assertEquals("https:4995", uRL0.getAuthority());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(4995, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertEquals("https", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https://https:4995/", httpUrl0.toString());
      assertTrue(httpUrl0.isHttps());
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("-DOWo?rmmVA,U=mub");
      assertEquals("https://https:4995", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("https://https:4995", uRL0.toExternalForm());
      assertEquals("", uRL0.getPath());
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals(4995, uRL0.getPort());
      assertEquals("https", uRL0.getHost());
      assertEquals("https:4995", uRL0.getAuthority());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(4995, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertEquals("https", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https://https:4995/", httpUrl0.toString());
      assertTrue(httpUrl0.isHttps());
      assertNotNull(httpUrl_Builder0);
      
      String string0 = httpUrl0.host();
      assertEquals("https://https:4995", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("https://https:4995", uRL0.toExternalForm());
      assertEquals("", uRL0.getPath());
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals(4995, uRL0.getPort());
      assertEquals("https", uRL0.getHost());
      assertEquals("https:4995", uRL0.getAuthority());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(4995, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertEquals("https", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https://https:4995/", httpUrl0.toString());
      assertTrue(httpUrl0.isHttps());
      assertNotNull(string0);
      assertEquals("https", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", 1, "https");
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("https://https:1https", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("https://https:1https", uRL0.toString());
      assertEquals("https", uRL0.getFile());
      assertEquals("https:1", uRL0.getAuthority());
      assertEquals(1, uRL0.getPort());
      assertEquals("https", uRL0.getPath());
      assertEquals("https", uRL0.getHost());
      assertNotNull(uRL0);
      
      URL uRL1 = MockURL.URL(uRL0, "https");
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("https://https:1https", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("https://https:1https", uRL0.toString());
      assertEquals("https", uRL0.getFile());
      assertEquals("https:1", uRL0.getAuthority());
      assertEquals(1, uRL0.getPort());
      assertEquals("https", uRL0.getPath());
      assertEquals("https", uRL0.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals(1, uRL1.getPort());
      assertEquals("https://https:1/https", uRL1.toString());
      assertEquals("https", uRL1.getProtocol());
      assertEquals("https://https:1/https", uRL1.toExternalForm());
      assertEquals("https:1", uRL1.getAuthority());
      assertEquals("https", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("https://https:1https", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("https://https:1https", uRL0.toString());
      assertEquals("https", uRL0.getFile());
      assertEquals("https:1", uRL0.getAuthority());
      assertEquals(1, uRL0.getPort());
      assertEquals("https", uRL0.getPath());
      assertEquals("https", uRL0.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals(1, uRL1.getPort());
      assertEquals("https://https:1/https", uRL1.toString());
      assertEquals("https", uRL1.getProtocol());
      assertEquals("https://https:1/https", uRL1.toExternalForm());
      assertEquals("https:1", uRL1.getAuthority());
      assertEquals("https", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals("", httpUrl0.username());
      assertTrue(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.host());
      assertEquals("https://https:1/https", httpUrl0.toString());
      assertEquals(1, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertNotNull(httpUrl0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      String string0 = httpUrl0.encodedPassword();
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("https://https:1https", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("https://https:1https", uRL0.toString());
      assertEquals("https", uRL0.getFile());
      assertEquals("https:1", uRL0.getAuthority());
      assertEquals(1, uRL0.getPort());
      assertEquals("https", uRL0.getPath());
      assertEquals("https", uRL0.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals(1, uRL1.getPort());
      assertEquals("https://https:1/https", uRL1.toString());
      assertEquals("https", uRL1.getProtocol());
      assertEquals("https://https:1/https", uRL1.toExternalForm());
      assertEquals("https:1", uRL1.getAuthority());
      assertEquals("https", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals("", httpUrl0.username());
      assertTrue(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.host());
      assertEquals("https://https:1/https", httpUrl0.toString());
      assertEquals(1, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertNotNull(string0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals("", string0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("cu:t:");
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", 65280, "");
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals("https:65280", uRL0.getAuthority());
      assertEquals("https://https:65280", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("https", uRL0.getHost());
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals(65280, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("https://https:65280", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals("https:65280", uRL0.getAuthority());
      assertEquals("https://https:65280", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("https", uRL0.getHost());
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals(65280, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("https://https:65280", uRL0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://https:65280/", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertTrue(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(65280, httpUrl0.port());
      assertEquals("https", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.encodedUsername();
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals("https:65280", uRL0.getAuthority());
      assertEquals("https://https:65280", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("https", uRL0.getHost());
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals(65280, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("https://https:65280", uRL0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://https:65280/", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertTrue(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(65280, httpUrl0.port());
      assertEquals("https", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertNotNull(string0);
      assertEquals("", string0);
      
      List<String> list0 = httpUrl0.encodedPathSegments();
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals("https:65280", uRL0.getAuthority());
      assertEquals("https://https:65280", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("https", uRL0.getHost());
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals(65280, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("https://https:65280", uRL0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://https:65280/", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertTrue(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(65280, httpUrl0.port());
      assertEquals("https", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", 14, "\\");
      assertEquals(14, uRL0.getPort());
      assertEquals("\\", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("https:14", uRL0.getAuthority());
      assertEquals("https://https:14\\", uRL0.toExternalForm());
      assertEquals("https", uRL0.getHost());
      assertEquals("\\", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals("https://https:14\\", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals(14, uRL0.getPort());
      assertEquals("\\", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("https:14", uRL0.getAuthority());
      assertEquals("https://https:14\\", uRL0.toExternalForm());
      assertEquals("https", uRL0.getHost());
      assertEquals("\\", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals("https://https:14\\", uRL0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("https", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(14, httpUrl0.port());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https://https:14/", httpUrl0.toString());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      try { 
        HttpUrl.getChecked("http:");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('A');
      assertEquals(10, int0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = null;
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment((String) null);
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.removePathSegment(800);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 800, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("size=%s offset=%s byteCount=%s", "size=%s offset=%s byteCount=%s");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedUsername("*K];og");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter("ID1ID2", "*K];og");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.removeAllEncodedQueryParameters("\u2026");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder3.addQueryParameter("`t87~qGk", "size=%s offset=%s byteCount=%s");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.username("`t87~qGk");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder2.reencodeForUri();
      assertNotNull(httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      
      HttpUrl.Builder httpUrl_Builder8 = httpUrl_Builder6.encodedQuery("`t87~qGk");
      assertNotNull(httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder8);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder7);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder8);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder8);
      assertSame(httpUrl_Builder6, httpUrl_Builder7);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder5);
      assertSame(httpUrl_Builder8, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder7);
      assertSame(httpUrl_Builder8, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder6);
      
      HttpUrl.Builder httpUrl_Builder9 = httpUrl_Builder3.setEncodedQueryParameter("U", "`t87~qGk");
      assertNotNull(httpUrl_Builder9);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder9);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder9);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder7);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder9);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder8);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder8);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder9);
      assertSame(httpUrl_Builder9, httpUrl_Builder7);
      assertSame(httpUrl_Builder9, httpUrl_Builder0);
      assertSame(httpUrl_Builder9, httpUrl_Builder2);
      assertSame(httpUrl_Builder9, httpUrl_Builder4);
      assertSame(httpUrl_Builder9, httpUrl_Builder8);
      assertSame(httpUrl_Builder9, httpUrl_Builder5);
      assertSame(httpUrl_Builder9, httpUrl_Builder6);
      assertSame(httpUrl_Builder9, httpUrl_Builder3);
      assertSame(httpUrl_Builder9, httpUrl_Builder1);
      
      String string0 = "%g]asxc";
      try { 
        MockURI.URI("`t87~qGk", "okio.GzipSource", "\u2026", (-23), "%g]asxc", "\u2026", "size=%s offset=%s byteCount=%s");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: `t87~qGk://okio.GzipSource@\u2026:-23%25g%5Dasxc?\u2026#size=%25s%20offset=%25s%20byteCount=%25s
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "\u2026";
      httpUrl_Builder0.encodedUsername = "\u2026";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(3632, "\u2026");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3632, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('\'');
      assertEquals((-1), int0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("\n");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query("\n");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      String string0 = "k_S>g|j 8Ei/CA,\\Qv";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("k_S>g|j 8Ei/CA,Qv");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder3.removePathSegment((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "gYS/ck8tSxNj95";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("size%3D%s%20offset%3D%s%20byteCount%3D%s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: size%3D%s%20offset%3D%s%20byteCount%3D%s
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("eBrM+qqJWr53yj[eTQ");
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("eBrM+qqJWr53yj[eTQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: eBrM+qqJWr53yj[eTQ
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "#m+";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("#m+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: #m+
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("xZd");
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("xZd");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(46);
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("%2e.");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setEncodedQueryParameter("xZd", (String) null);
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder4.setEncodedPathSegment(646, "unexpected encodedPath: ");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 646, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("..");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.scheme("..");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: ..
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/fooexample");
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals(443, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://www.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertTrue(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertNotNull(httpUrl0);
      
      httpUrl0.hashCode();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      
      HttpUrl httpUrl1 = httpUrl0.resolve("4GL[Mw");
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/4GL[Mw", httpUrl1.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertNull(httpUrl1.fragment());
      assertNotNull(httpUrl1);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertNotNull(httpUrl_Builder0);
      assertNotSame(httpUrl0, httpUrl1);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("rL^*w.\"b");
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertNotNull(httpUrl_Builder1);
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", 65237, "");
      assertEquals("https", uRL0.getHost());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("", uRL0.getPath());
      assertEquals(65237, uRL0.getPort());
      assertEquals("https://https:65237", uRL0.toExternalForm());
      assertEquals("https://https:65237", uRL0.toString());
      assertEquals("https:65237", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("https", uRL0.getHost());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("", uRL0.getPath());
      assertEquals(65237, uRL0.getPort());
      assertEquals("https://https:65237", uRL0.toExternalForm());
      assertEquals("https://https:65237", uRL0.toString());
      assertEquals("https:65237", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals("", httpUrl0.username());
      assertTrue(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals(65237, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://https:65237/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https", httpUrl0.host());
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      assertEquals("https", uRL0.getHost());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("", uRL0.getPath());
      assertEquals(65237, uRL0.getPort());
      assertEquals("https://https:65237", uRL0.toExternalForm());
      assertEquals("https://https:65237", uRL0.toString());
      assertEquals("https:65237", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals("", httpUrl0.username());
      assertTrue(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals(65237, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://https:65237/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https", httpUrl0.host());
      assertNotNull(httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", 1, "https");
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("https://https:1https", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("https://https:1https", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("https", uRL0.getFile());
      assertEquals("https:1", uRL0.getAuthority());
      assertEquals(1, uRL0.getPort());
      assertEquals("https", uRL0.getPath());
      assertEquals("https", uRL0.getHost());
      assertNotNull(uRL0);
      
      URL uRL1 = MockURL.URL(uRL0, "https");
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("https://https:1https", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("https://https:1https", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("https", uRL0.getFile());
      assertEquals("https:1", uRL0.getAuthority());
      assertEquals(1, uRL0.getPort());
      assertEquals("https", uRL0.getPath());
      assertEquals("https", uRL0.getHost());
      assertEquals("https", uRL1.getProtocol());
      assertEquals("https://https:1/https", uRL1.toExternalForm());
      assertEquals("https:1", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("https://https:1/https", uRL1.toString());
      assertNull(uRL1.getUserInfo());
      assertEquals(1, uRL1.getPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertEquals("https", uRL1.getHost());
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("https://https:1https", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("https://https:1https", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("https", uRL0.getFile());
      assertEquals("https:1", uRL0.getAuthority());
      assertEquals(1, uRL0.getPort());
      assertEquals("https", uRL0.getPath());
      assertEquals("https", uRL0.getHost());
      assertEquals("https", uRL1.getProtocol());
      assertEquals("https://https:1/https", uRL1.toExternalForm());
      assertEquals("https:1", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("https://https:1/https", uRL1.toString());
      assertNull(uRL1.getUserInfo());
      assertEquals(1, uRL1.getPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertEquals("https", uRL1.getHost());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https://https:1/https", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.fragment());
      assertEquals("https", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNotNull(httpUrl0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      String string0 = httpUrl0.encodedQuery();
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("https://https:1https", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("https://https:1https", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("https", uRL0.getFile());
      assertEquals("https:1", uRL0.getAuthority());
      assertEquals(1, uRL0.getPort());
      assertEquals("https", uRL0.getPath());
      assertEquals("https", uRL0.getHost());
      assertEquals("https", uRL1.getProtocol());
      assertEquals("https://https:1/https", uRL1.toExternalForm());
      assertEquals("https:1", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("https://https:1/https", uRL1.toString());
      assertNull(uRL1.getUserInfo());
      assertEquals(1, uRL1.getPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertEquals("https", uRL1.getHost());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https://https:1/https", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.fragment());
      assertEquals("https", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNull(string0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      
      URI uRI0 = httpUrl0.uri();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getRawAuthority());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRI0.toString());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getHost());
      assertNotNull(uRI0);
      
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      HttpUrl.percentDecode(buffer0, "u%", 525, (-2311), true);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      httpUrl0.hashCode();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(3483);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = HttpUrl.percentDecode("uH%dqtmU#Efv'P!", true);
      assertNotNull(string0);
      assertEquals("uH%dqtmU#Efv'P!", string0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("i/qHi%OA");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", 36, "");
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals("https://https:36", uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertEquals(36, uRL0.getPort());
      assertEquals("https:36", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("https://https:36", uRL0.toExternalForm());
      assertEquals("https", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals("https://https:36", uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertEquals(36, uRL0.getPort());
      assertEquals("https:36", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("https://https:36", uRL0.toExternalForm());
      assertEquals("https", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("https", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(36, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https://https:36/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.query();
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals("https://https:36", uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertEquals(36, uRL0.getPort());
      assertEquals("https:36", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("https://https:36", uRL0.toExternalForm());
      assertEquals("https", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("https", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(36, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https://https:36/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNull(string0);
      
      String string1 = httpUrl0.queryParameter("");
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals("https://https:36", uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertEquals(36, uRL0.getPort());
      assertEquals("https:36", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("https://https:36", uRL0.toExternalForm());
      assertEquals("https", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("https", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(36, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https://https:36/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNotNull(httpUrl0);
      
      httpUrl0.hashCode();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      
      String string0 = httpUrl0.query();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(string0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("4GL[Mw");
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/4GL[Mw", httpUrl1.toString());
      assertEquals("", httpUrl1.password());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertNotNull(httpUrl1);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      String string1 = httpUrl0.encodedPath();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNotNull(string1);
      assertNotSame(httpUrl0, httpUrl1);
      assertEquals("/fooExample", string1);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      URL uRL0 = MockURL.URL("https", "https", 36, "");
      assertEquals("https", uRL0.getProtocol());
      assertEquals("https://https:36", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals(36, uRL0.getPort());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("https", uRL0.getHost());
      assertEquals("https://https:36", uRL0.toString());
      assertEquals("https:36", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("https", uRL0.getProtocol());
      assertEquals("https://https:36", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals(36, uRL0.getPort());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("https", uRL0.getHost());
      assertEquals("https://https:36", uRL0.toString());
      assertEquals("https:36", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://https:36/", httpUrl0.toString());
      assertEquals(36, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https", httpUrl0.host());
      assertNotNull(httpUrl0);
      
      List<String> list0 = httpUrl0.queryParameterValues("c4.:");
      assertEquals("https", uRL0.getProtocol());
      assertEquals("https://https:36", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals(36, uRL0.getPort());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("https", uRL0.getHost());
      assertEquals("https://https:36", uRL0.toString());
      assertEquals("https:36", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://https:36/", httpUrl0.toString());
      assertEquals(36, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https", httpUrl0.host());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNotNull(httpUrl0);
      
      httpUrl0.hashCode();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      
      HttpUrl httpUrl1 = HttpUrl.get(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.password());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertFalse(httpUrl1.isHttps());
      assertEquals(1, httpUrl1.pathSize());
      assertNotNull(httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNotNull(httpUrl_Builder0);
      assertNotSame(httpUrl0, httpUrl1);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      
      List<String> list0 = httpUrl1.queryParameterValues(" (to read code point prefixed 0x");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.password());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertFalse(httpUrl1.isHttps());
      assertEquals(1, httpUrl1.pathSize());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      String string0 = httpUrl1.toString();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.password());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertFalse(httpUrl1.isHttps());
      assertEquals(1, httpUrl1.pathSize());
      assertNotNull(string0);
      assertNotSame(httpUrl1, httpUrl0);
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", string0);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertNotNull(httpUrl0);
      
      httpUrl0.hashCode();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      
      String string0 = httpUrl0.query();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertNull(string0);
      
      String string1 = " \"'<>#";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("4GL[Mw");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      String string2 = "c4lmh:";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedUsername("c4lmh:");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host("c4lmh:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: c4lmh:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "f:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("f:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: f:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "fV:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("fV:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: fV:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNotNull(httpUrl0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("-[Yp9\"YF");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("-[Yp9\"YF", "-[Yp9\"YF");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedQueryParameter("encodedPath == null", "-[Yp9\"YF");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedUsername("-[Yp9\"YF");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedPathSegments("[");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder2.setQueryParameter("-[Yp9\"YF", "-[Yp9\"YF");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      
      // Undeclared exception!
      try { 
        HttpUrl.queryStringToNamesAndValues((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      
      httpUrl0.hashCode();
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      
      String string0 = httpUrl0.query();
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(string0);
      
      String string1 = " \"'<>#";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("4GL[Mw");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedUsername(" \"'<>#");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("%G]AsxC");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("%G]AsxC");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedPathSegment(0, "okio.GzipSource");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.removeAllQueryParameters("fooexample");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(httpUrl0);
      
      URI uRI0 = httpUrl0.uri();
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getHost());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNotNull(uRI0);
      
      HttpUrl httpUrl1 = HttpUrl.get(uRI0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getHost());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.username());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertNotNull(httpUrl1);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl httpUrl2 = httpUrl1.resolve("%G]AsxC");
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getHost());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.username());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("http", httpUrl2.scheme());
      assertEquals("", httpUrl2.username());
      assertNull(httpUrl2.fragment());
      assertEquals("", httpUrl2.password());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals(80, httpUrl2.port());
      assertFalse(httpUrl2.isHttps());
      assertEquals(0, httpUrl2.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/%G]AsxC", httpUrl2.toString());
      assertNotNull(httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      
      List<String> list0 = httpUrl2.pathSegments();
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getHost());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.username());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("http", httpUrl2.scheme());
      assertEquals("", httpUrl2.username());
      assertNull(httpUrl2.fragment());
      assertEquals("", httpUrl2.password());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals(80, httpUrl2.port());
      assertFalse(httpUrl2.isHttps());
      assertEquals(0, httpUrl2.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("http://www.somefakebutwellformedurl.org/%G]AsxC", httpUrl2.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      
      String string0 = httpUrl1.encodedFragment();
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getHost());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.username());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertNull(string0);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", 47, "?");
      assertEquals("", uRL0.getQuery());
      assertEquals(47, uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("?", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getPath());
      assertEquals("https:47", uRL0.getAuthority());
      assertEquals("https://https:47?", uRL0.toExternalForm());
      assertEquals("https", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("https://https:47?", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("", uRL0.getQuery());
      assertEquals(47, uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("?", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getPath());
      assertEquals("https:47", uRL0.getAuthority());
      assertEquals("https://https:47?", uRL0.toExternalForm());
      assertEquals("https", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("https://https:47?", uRL0.toString());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://https:47/?", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https", httpUrl0.host());
      assertEquals(47, httpUrl0.port());
      assertNotNull(httpUrl0);
      
      List<String> list0 = httpUrl0.queryParameterValues("https");
      assertEquals("", uRL0.getQuery());
      assertEquals(47, uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("?", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getPath());
      assertEquals("https:47", uRL0.getAuthority());
      assertEquals("https://https:47?", uRL0.toExternalForm());
      assertEquals("https", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("https://https:47?", uRL0.toString());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://https:47/?", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https", httpUrl0.host());
      assertEquals(47, httpUrl0.port());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      String string0 = httpUrl0.encodedUsername();
      assertEquals("", uRL0.getQuery());
      assertEquals(47, uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("?", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getPath());
      assertEquals("https:47", uRL0.getAuthority());
      assertEquals("https://https:47?", uRL0.toExternalForm());
      assertEquals("https", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("https://https:47?", uRL0.toString());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://https:47/?", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https", httpUrl0.host());
      assertEquals(47, httpUrl0.port());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", 65280, "");
      assertEquals("https://https:65280", uRL0.toString());
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getPath());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals(65280, uRL0.getPort());
      assertEquals("", uRL0.getFile());
      assertEquals("https:65280", uRL0.getAuthority());
      assertEquals("https://https:65280", uRL0.toExternalForm());
      assertEquals("https", uRL0.getHost());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("https://https:65280", uRL0.toString());
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getPath());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals(65280, uRL0.getPort());
      assertEquals("", uRL0.getFile());
      assertEquals("https:65280", uRL0.getAuthority());
      assertEquals("https://https:65280", uRL0.toExternalForm());
      assertEquals("https", uRL0.getHost());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("https", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals(65280, httpUrl0.port());
      assertEquals("https://https:65280/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.username();
      assertEquals("https://https:65280", uRL0.toString());
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getPath());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals(65280, uRL0.getPort());
      assertEquals("", uRL0.getFile());
      assertEquals("https:65280", uRL0.getAuthority());
      assertEquals("https://https:65280", uRL0.toExternalForm());
      assertEquals("https", uRL0.getHost());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("https", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals(65280, httpUrl0.port());
      assertEquals("https://https:65280/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = httpUrl0.querySize();
      assertEquals("https://https:65280", uRL0.toString());
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getPath());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals(65280, uRL0.getPort());
      assertEquals("", uRL0.getFile());
      assertEquals("https:65280", uRL0.getAuthority());
      assertEquals("https://https:65280", uRL0.toExternalForm());
      assertEquals("https", uRL0.getHost());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("https", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals(65280, httpUrl0.port());
      assertEquals("https://https:65280/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNotNull(httpUrl0);
      
      httpUrl0.hashCode();
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      
      URL uRL1 = MockURL.URL(uRL0, "Lnb,(5bEqV?|hZQ<o");
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/Lnb,(5bEqV?|hZQ<o", uRL1.toString());
      assertEquals("|hZQ<o", uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/Lnb,(5bEqV?|hZQ<o", uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl1 = HttpUrl.get(uRL1);
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/Lnb,(5bEqV?|hZQ<o", uRL1.toString());
      assertEquals("|hZQ<o", uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/Lnb,(5bEqV?|hZQ<o", uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("http://www.somefakebutwellformedurl.org/Ln%7Fb,(5bEqV?|hZQ%7F%3Co", httpUrl1.toString());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertNotNull(httpUrl1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      List<String> list0 = httpUrl1.queryParameterValues("*QLSLM");
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/Lnb,(5bEqV?|hZQ<o", uRL1.toString());
      assertEquals("|hZQ<o", uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/Lnb,(5bEqV?|hZQ<o", uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("http://www.somefakebutwellformedurl.org/Ln%7Fb,(5bEqV?|hZQ%7F%3Co", httpUrl1.toString());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      String string0 = httpUrl1.toString();
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/Lnb,(5bEqV?|hZQ<o", uRL1.toString());
      assertEquals("|hZQ<o", uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/Lnb,(5bEqV?|hZQ<o", uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("http://www.somefakebutwellformedurl.org/Ln%7Fb,(5bEqV?|hZQ%7F%3Co", httpUrl1.toString());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertNotNull(string0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(httpUrl1, httpUrl0);
      assertEquals("http://www.somefakebutwellformedurl.org/Ln%7Fb,(5bEqV?|hZQ%7F%3Co", string0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("http://www.somefakebutwellformedurl.org/Ln%7Fb,(5bEqV?|hZQ%7F%3Co");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(1);
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addQueryParameter("Lnb,(5bEqV?|hZQ<o", "http://www.somefakebutwellformedurl.org/Ln%7Fb,(5bEqV?|hZQ%7F%3Co");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      
      int int0 = httpUrl0.querySize();
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertNotSame(uRL0, uRL1);
      assertNotSame(httpUrl0, httpUrl1);
      assertEquals(0, int0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder3.encodedFragment("Lnb,(5bEqV?|hZQ<o");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(httpUrl0);
      
      httpUrl0.hashCode();
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      
      HttpUrl httpUrl1 = HttpUrl.get(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertNotNull(httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(httpUrl_Builder0);
      assertNotSame(httpUrl0, httpUrl1);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      
      String string0 = httpUrl1.toString();
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertFalse(httpUrl1.isHttps());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertNotNull(string0);
      assertNotSame(httpUrl1, httpUrl0);
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", string0);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("http://www.somefakebutwellformedurl.org/fooExample");
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(httpUrl_Builder1);
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      
      String string1 = httpUrl_Builder1.toString();
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(string1);
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertEquals("http://http%3A%2F%2Fwww.somefakebutwellformedurl.org%2FfooExample@www.somefakebutwellformedurl.org/fooExample", string1);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setEncodedPathSegment(2, "O#==aUV6<0e4 2M@");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(46);
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(10);
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("%2e.");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.setEncodedQueryParameter("%2e.", "/...");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder3.setEncodedPathSegment(10, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('r');
      assertEquals((-1), int0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNotNull(httpUrl0);
      
      int int1 = httpUrl0.hashCode();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertFalse(int1 == int0);
      
      String string0 = httpUrl0.host();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNotNull(string0);
      assertEquals("www.somefakebutwellformedurl.org", string0);
      
      String string1 = httpUrl0.password();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      URI uRI0 = httpUrl0.uri();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertNotNull(uRI0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals(80, httpUrl1.port());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertEquals("", httpUrl1.encodedPassword());
      assertNull(httpUrl1.fragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(1, httpUrl1.pathSize());
      assertNotNull(httpUrl1);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.removePathSegment((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      URL uRL0 = MockURL.URL("http", "GVXA|Onh", 1, "http");
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http://GVXA|Onh:1http", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://GVXA|Onh:1http", uRL0.toString());
      assertEquals("GVXA|Onh", uRL0.getHost());
      assertEquals("http", uRL0.getFile());
      assertEquals("http", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertEquals("GVXA|Onh:1", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      URL uRL1 = MockURL.URL(uRL0, "R#l\"N");
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http://GVXA|Onh:1http", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://GVXA|Onh:1http", uRL0.toString());
      assertEquals("GVXA|Onh", uRL0.getHost());
      assertEquals("http", uRL0.getFile());
      assertEquals("http", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertEquals("GVXA|Onh:1", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL1.getQuery());
      assertEquals("http://GVXA|Onh:1/R#l\"N", uRL1.toString());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://GVXA|Onh:1/R#l\"N", uRL1.toExternalForm());
      assertEquals("l\"N", uRL1.getRef());
      assertEquals("GVXA|Onh:1", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals(1, uRL1.getPort());
      assertEquals("GVXA|Onh", uRL1.getHost());
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertEquals(1, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http://GVXA|Onh:1http", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://GVXA|Onh:1http", uRL0.toString());
      assertEquals("GVXA|Onh", uRL0.getHost());
      assertEquals("http", uRL0.getFile());
      assertEquals("http", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertEquals("GVXA|Onh:1", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL1.getQuery());
      assertEquals("http://GVXA|Onh:1/R#l\"N", uRL1.toString());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://GVXA|Onh:1/R#l\"N", uRL1.toExternalForm());
      assertEquals("l\"N", uRL1.getRef());
      assertEquals("GVXA|Onh:1", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals(1, uRL1.getPort());
      assertEquals("GVXA|Onh", uRL1.getHost());
      assertEquals("http://gvxa|onh:1/R#l\"N", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("l\"N", httpUrl0.encodedFragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("gvxa|onh", httpUrl0.host());
      assertEquals("l\"N", httpUrl0.fragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.port());
      assertNotNull(httpUrl0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(httpUrl0);
      
      httpUrl0.hashCode();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      httpUrl0.hashCode();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      
      HttpUrl httpUrl1 = httpUrl0.resolve(" \"'<>#");
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/%22'%3C%3E#", httpUrl1.toString());
      assertNotNull(httpUrl1);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      String string0 = httpUrl0.host();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(string0);
      assertNotSame(httpUrl0, httpUrl1);
      assertEquals("www.somefakebutwellformedurl.org", string0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      
      String string1 = httpUrl0.password();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(string1);
      assertNotSame(httpUrl0, httpUrl1);
      assertEquals("", string1);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(string1.equals((Object)string0));
      
      URI uRI0 = httpUrl1.uri();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/%22'%3C%3E#", httpUrl1.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/%22'%3C%3E", uRI0.getRawPath());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getHost());
      assertEquals("", uRI0.getRawFragment());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http://www.somefakebutwellformedurl.org/%22'%3C%3E#", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNotNull(uRI0);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('t');
      assertEquals((-1), int0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotNull(httpUrl0);
      
      String string0 = "/...";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("\n");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedUsername("\n");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.removePathSegment(51);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(httpUrl0);
      
      httpUrl0.hashCode();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      
      HttpUrl httpUrl1 = HttpUrl.get(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertNotNull(httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl httpUrl2 = httpUrl1.resolve("[]");
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertEquals(80, httpUrl2.port());
      assertEquals(0, httpUrl2.querySize());
      assertFalse(httpUrl2.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/[]", httpUrl2.toString());
      assertEquals(1, httpUrl2.pathSize());
      assertNull(httpUrl2.encodedFragment());
      assertNull(httpUrl2.fragment());
      assertEquals("", httpUrl2.password());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("http", httpUrl2.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals("", httpUrl2.username());
      assertNotNull(httpUrl2);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      
      HttpUrl httpUrl3 = httpUrl1.resolve("c4.mh:");
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertNull(httpUrl3);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl2.newBuilder();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertEquals(80, httpUrl2.port());
      assertEquals(0, httpUrl2.querySize());
      assertFalse(httpUrl2.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/[]", httpUrl2.toString());
      assertEquals(1, httpUrl2.pathSize());
      assertNull(httpUrl2.encodedFragment());
      assertNull(httpUrl2.fragment());
      assertEquals("", httpUrl2.password());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("http", httpUrl2.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals("", httpUrl2.username());
      assertNotNull(httpUrl_Builder1);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(httpUrl0);
      
      String string0 = HttpUrl.percentDecode("file:", false);
      assertNotNull(string0);
      assertEquals("file:", string0);
      
      String string1 = HttpUrl.percentDecode("mM1&p", true);
      assertNotNull(string1);
      assertEquals("mM1&p", string1);
      assertFalse(string1.equals((Object)string0));
      
      httpUrl0.hashCode();
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      
      boolean boolean0 = httpUrl0.equals("mM1&p");
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "::";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("::");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("\n not found: size=");
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl_Builder0);
      
      httpUrl0.hashCode();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      
      HttpUrl httpUrl1 = httpUrl0.resolve("pO)Dfc^n]f");
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.fragment());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertFalse(httpUrl1.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/pO)Dfc%5En]f", httpUrl1.toString());
      assertNotNull(httpUrl1);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl httpUrl2 = httpUrl0.resolve("%2e.");
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl2.port());
      assertEquals(0, httpUrl2.querySize());
      assertEquals("http://www.somefakebutwellformedurl.org/", httpUrl2.toString());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertFalse(httpUrl2.isHttps());
      assertEquals("", httpUrl2.password());
      assertEquals("", httpUrl2.username());
      assertEquals("http", httpUrl2.scheme());
      assertNull(httpUrl2.fragment());
      assertNull(httpUrl2.encodedFragment());
      assertNotNull(httpUrl2);
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl1.newBuilder();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.fragment());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertFalse(httpUrl1.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/pO)Dfc%5En]f", httpUrl1.toString());
      assertNotNull(httpUrl_Builder1);
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      
      httpUrl0.hashCode();
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      
      String string0 = httpUrl0.query();
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(string0);
      
      String string1 = httpUrl0.redact();
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(string1);
      assertEquals("http://www.somefakebutwellformedurl.org/...", string1);
      
      URI uRI0 = httpUrl0.uri();
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(uRI0.getRawQuery());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getHost());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRI0.toString());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertNotNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertNotNull(httpUrl0);
      
      String string0 = HttpUrl.percentDecode("mM1&p", true);
      assertNotNull(string0);
      assertEquals("mM1&p", string0);
      
      boolean boolean0 = httpUrl0.equals("mM1&p");
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertFalse(boolean0);
      
      int int0 = httpUrl0.pathSize();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNotNull(httpUrl0);
      
      int int0 = httpUrl0.port;
      assertEquals(80, int0);
      
      String string0 = httpUrl0.query();
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNull(string0);
      
      String string1 = httpUrl0.fragment();
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNull(string1);
      
      boolean boolean0 = httpUrl0.isHttps();
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("[::");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [::
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      int int0 = 1088;
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(1088);
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      String string0 = "http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/wxs*|0=q-/ (/yl~t@b*g`d x\\um5d";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedUsername(string0);
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegments(string0);
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.username("timeout");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder4.host("[c4lmh:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [c4lmh:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "fQ}F\"";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("fQ}F\"");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("$VALUES");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllQueryParameters("fQ}F\"");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addPathSegments("..");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedQueryParameter("fQ}F\"", "d/cI]z|y!@NW>cww5");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.encodedUsername("Content-Length (");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder5.host("%25GPfsxC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: %25GPfsxC
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", (String) null, 24, "https");
      assertEquals("https:https", uRL0.toExternalForm());
      assertEquals("https:https", uRL0.toString());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getHost());
      assertEquals("https", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("https", uRL0.getPath());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("https:https", uRL0.toExternalForm());
      assertEquals("https:https", uRL0.toString());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getHost());
      assertEquals("https", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("https", uRL0.getPath());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("https", httpUrl0.host());
      assertTrue(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("https://https/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      
      Set<String> set0 = httpUrl0.queryParameterNames();
      assertEquals("https:https", uRL0.toExternalForm());
      assertEquals("https:https", uRL0.toString());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getHost());
      assertEquals("https", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("https", uRL0.getPath());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("https", httpUrl0.host());
      assertTrue(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("https://https/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", 65280, "");
      assertEquals("https", uRL0.getHost());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("https://https:65280", uRL0.toExternalForm());
      assertEquals("https:65280", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals(65280, uRL0.getPort());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("https://https:65280", uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("https", uRL0.getHost());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("https://https:65280", uRL0.toExternalForm());
      assertEquals("https:65280", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals(65280, uRL0.getPort());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("https://https:65280", uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("https://https:65280/", httpUrl0.toString());
      assertTrue(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(65280, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(65280);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNotNull(httpUrl0);
      
      httpUrl0.hashCode();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve(" \"'<>#");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl1.password());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/%22'%3C%3E#", httpUrl1.toString());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.fragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals(1, httpUrl1.pathSize());
      assertNotNull(httpUrl1);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      String string0 = httpUrl1.username();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl1.password());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/%22'%3C%3E#", httpUrl1.toString());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.fragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals(1, httpUrl1.pathSize());
      assertNotNull(string0);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertEquals("", string0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNotNull(httpUrl0);
      
      URL uRL1 = httpUrl0.url();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL1.toExternalForm());
      assertEquals("www.somefakebutwellformedurl.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRL1.toString());
      assertEquals("www.somefakebutwellformedurl.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      List<String> list0 = httpUrl0.queryParameterValues("ye;Qb98.Qm|2)Y");
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertNotSame(uRL0, uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      
      httpUrl0.hashCode();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNotSame(uRL0, uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(3722);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertNotNull(httpUrl0);
      
      httpUrl0.hashCode();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      
      Set<String> set0 = httpUrl0.queryParameterNames();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      boolean boolean0 = httpUrl0.equals(set0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(boolean0);
      
      String string0 = httpUrl0.fragment();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertNull(string0);
      
      String string1 = httpUrl0.encodedPassword();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = httpUrl0.scheme();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertNotNull(string2);
      assertEquals("http", string2);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNotNull(httpUrl0);
      
      httpUrl0.hashCode();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      
      HttpUrl httpUrl1 = httpUrl0.resolve("`F");
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/%60F", httpUrl1.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNotNull(httpUrl1);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl1.newBuilder();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/%60F", httpUrl1.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNotNull(httpUrl_Builder0);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(3157);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/%60F", httpUrl1.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNotNull(httpUrl_Builder1);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      int int0 = httpUrl0.port();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNotSame(httpUrl0, httpUrl1);
      assertEquals(80, int0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedUsername("duration <= 0: ");
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/%60F", httpUrl1.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNotNull(httpUrl_Builder2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "3177:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("3177:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 3177:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("2xD34Em.");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("E::)kBl1?78%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: E::)kBl1?78%
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("@");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("P~h^u0~;Y1.-Zla}?6");
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/P~h%5Eu0~;Y1.-Zla%7D?6", httpUrl1.toString());
      assertEquals(1, httpUrl1.querySize());
      assertFalse(httpUrl1.isHttps());
      assertEquals(80, httpUrl1.port());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertNotNull(httpUrl1);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      String string0 = httpUrl1.query();
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://www.somefakebutwellformedurl.org/P~h%5Eu0~;Y1.-Zla%7D?6", httpUrl1.toString());
      assertEquals(1, httpUrl1.querySize());
      assertFalse(httpUrl1.isHttps());
      assertEquals(80, httpUrl1.port());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertNotNull(string0);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertEquals("6", string0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      boolean boolean0 = HttpUrl.percentEncoded("", (-1082), (-1082));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "http::";
      try { 
        HttpUrl.getChecked("http::");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http::
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("f.:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: f.:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("c4.mh:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: c4.mh:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = ".";
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(1473, ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "%G]AsxC";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("%G]AsxC");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("%G]AsxC");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.setEncodedPathSegment(0, ".%2e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .%2e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNotNull(httpUrl0);
      
      boolean boolean0 = httpUrl0.equals(httpUrl0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "y", 1, "https");
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("y:1", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals(1, uRL0.getPort());
      assertEquals("https://y:1https", uRL0.toExternalForm());
      assertEquals("y", uRL0.getHost());
      assertEquals("https", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertEquals("https://y:1https", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("https", uRL0.getFile());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("y:1", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals(1, uRL0.getPort());
      assertEquals("https://y:1https", uRL0.toExternalForm());
      assertEquals("y", uRL0.getHost());
      assertEquals("https", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertEquals("https://y:1https", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("https", uRL0.getFile());
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adapt5ve/projects/7Zokhttp/%2e%2e/%2e%2e");
      assertEquals("http://mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adapt5ve/", httpUrl0.toString());
      assertEquals(8, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("mnt", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertNotNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      URL uRL1 = MockURL.URL(uRL0, "https:/www.somefakebutwellformed?r.org/5coa vp'i&ugs~");
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("https:/www.somefakebutwellformed?r.org/5coa vp'i&ugs~", uRL1.toExternalForm());
      assertEquals("https:/www.somefakebutwellformed?r.org/5coa vp'i&ugs~", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertEquals("r.org/5coa vp'i&ugs~", uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getAuthority());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("https", uRL1.getProtocol());
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("https:/www.somefakebutwellformed?r.org/5coa vp'i&ugs~", uRL1.toExternalForm());
      assertEquals("https:/www.somefakebutwellformed?r.org/5coa vp'i&ugs~", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertEquals("r.org/5coa vp'i&ugs~", uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getAuthority());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("https", uRL1.getProtocol());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(2, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformed", httpUrl0.host());
      assertEquals("https://www.somefakebutwellformed/?r.org/5coa%20vp%27i&ugs~", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertNotNull(httpUrl0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      URI uRI0 = httpUrl0.uri();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("https:/www.somefakebutwellformed?r.org/5coa vp'i&ugs~", uRL1.toExternalForm());
      assertEquals("https:/www.somefakebutwellformed?r.org/5coa vp'i&ugs~", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertEquals("r.org/5coa vp'i&ugs~", uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getAuthority());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("https", uRL1.getProtocol());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(2, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformed", httpUrl0.host());
      assertEquals("https://www.somefakebutwellformed/?r.org/5coa%20vp%27i&ugs~", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformed", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("https://www.somefakebutwellformed/?r.org/5coa%20vp%27i&ugs~", uRI0.toString());
      assertEquals("r.org/5coa%20vp%27i&ugs~", uRI0.getRawQuery());
      assertEquals("www.somefakebutwellformed", uRI0.getRawAuthority());
      assertEquals("/", uRI0.getRawPath());
      assertEquals((-1), uRI0.getPort());
      assertEquals("https", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNotNull(uRI0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      String string0 = httpUrl0.encodedQuery();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("https:/www.somefakebutwellformed?r.org/5coa vp'i&ugs~", uRL1.toExternalForm());
      assertEquals("https:/www.somefakebutwellformed?r.org/5coa vp'i&ugs~", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertEquals("r.org/5coa vp'i&ugs~", uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getAuthority());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("https", uRL1.getProtocol());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(2, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformed", httpUrl0.host());
      assertEquals("https://www.somefakebutwellformed/?r.org/5coa%20vp%27i&ugs~", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertNotNull(string0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals("r.org/5coa%20vp%27i&ugs~", string0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      URL uRL0 = MockURL.URL("https:/www.somefakebutwellformed?r.org/5coa vp'i&ugs~");
      assertNull(uRL0.getAuthority());
      assertEquals("r.org/5coa vp'i&ugs~", uRL0.getQuery());
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("https:/www.somefakebutwellformed?r.org/5coa vp'i&ugs~", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("https:/www.somefakebutwellformed?r.org/5coa vp'i&ugs~", uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.somefakebutwellformed?r.org/5coa vp'i&ugs~");
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformed", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(2, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://www.somefakebutwellformed/?r.org/5coa%20vp%27i&ugs~", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(443, httpUrl0.port());
      assertNotNull(httpUrl0);
      
      URI uRI0 = httpUrl0.uri();
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformed", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(2, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://www.somefakebutwellformed/?r.org/5coa%20vp%27i&ugs~", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", uRI0.getScheme());
      assertEquals("www.somefakebutwellformed", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("r.org/5coa%20vp%27i&ugs~", uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.somefakebutwellformed", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("https://www.somefakebutwellformed/?r.org/5coa%20vp%27i&ugs~", uRI0.toString());
      assertEquals("/", uRI0.getRawPath());
      assertNotNull(uRI0);
      
      HttpUrl httpUrl1 = HttpUrl.get(uRI0);
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformed", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(2, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://www.somefakebutwellformed/?r.org/5coa%20vp%27i&ugs~", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", uRI0.getScheme());
      assertEquals("www.somefakebutwellformed", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("r.org/5coa%20vp%27i&ugs~", uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.somefakebutwellformed", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("https://www.somefakebutwellformed/?r.org/5coa%20vp%27i&ugs~", uRI0.toString());
      assertEquals("/", uRI0.getRawPath());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(2, httpUrl1.querySize());
      assertEquals("", httpUrl1.password());
      assertEquals("www.somefakebutwellformed", httpUrl1.host());
      assertEquals("https", httpUrl1.scheme());
      assertTrue(httpUrl1.isHttps());
      assertEquals("https://www.somefakebutwellformed/?r.org/5coa%20vp%27i&ugs~", httpUrl1.toString());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(443, httpUrl1.port());
      assertNull(httpUrl1.fragment());
      assertNotNull(httpUrl1);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      
      String string0 = MockURI.getQuery(uRI0);
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformed", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(2, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://www.somefakebutwellformed/?r.org/5coa%20vp%27i&ugs~", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", uRI0.getScheme());
      assertEquals("www.somefakebutwellformed", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("r.org/5coa%20vp%27i&ugs~", uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.somefakebutwellformed", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("https://www.somefakebutwellformed/?r.org/5coa%20vp%27i&ugs~", uRI0.toString());
      assertEquals("/", uRI0.getRawPath());
      assertNotNull(string0);
      assertNotSame(httpUrl0, httpUrl1);
      assertEquals("r.org/5coa vp'i&ugs~", string0);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      
      String string1 = httpUrl1.queryParameter("efbbbf");
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformed", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(2, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://www.somefakebutwellformed/?r.org/5coa%20vp%27i&ugs~", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", uRI0.getScheme());
      assertEquals("www.somefakebutwellformed", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("r.org/5coa%20vp%27i&ugs~", uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.somefakebutwellformed", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("https://www.somefakebutwellformed/?r.org/5coa%20vp%27i&ugs~", uRI0.toString());
      assertEquals("/", uRI0.getRawPath());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(2, httpUrl1.querySize());
      assertEquals("", httpUrl1.password());
      assertEquals("www.somefakebutwellformed", httpUrl1.host());
      assertEquals("https", httpUrl1.scheme());
      assertTrue(httpUrl1.isHttps());
      assertEquals("https://www.somefakebutwellformed/?r.org/5coa%20vp%27i&ugs~", httpUrl1.toString());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(443, httpUrl1.port());
      assertNull(httpUrl1.fragment());
      assertNull(string1);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", 31, "?");
      assertEquals("", uRL0.getQuery());
      assertEquals("https://https:31?", uRL0.toExternalForm());
      assertEquals("?", uRL0.getFile());
      assertEquals("https://https:31?", uRL0.toString());
      assertEquals("https:31", uRL0.getAuthority());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("https", uRL0.getProtocol());
      assertEquals(31, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("https", uRL0.getHost());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("", uRL0.getQuery());
      assertEquals("https://https:31?", uRL0.toExternalForm());
      assertEquals("?", uRL0.getFile());
      assertEquals("https://https:31?", uRL0.toString());
      assertEquals("https:31", uRL0.getAuthority());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("https", uRL0.getProtocol());
      assertEquals(31, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("https", uRL0.getHost());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("https", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https://https:31/?", httpUrl0.toString());
      assertEquals(31, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.queryParameter("+");
      assertEquals("", uRL0.getQuery());
      assertEquals("https://https:31?", uRL0.toExternalForm());
      assertEquals("?", uRL0.getFile());
      assertEquals("https://https:31?", uRL0.toString());
      assertEquals("https:31", uRL0.getAuthority());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("https", uRL0.getProtocol());
      assertEquals(31, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("https", uRL0.getHost());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("https", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https://https:31/?", httpUrl0.toString());
      assertEquals(31, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "=?0 nv8@O@D:o@z^", 47, "https");
      assertEquals("[=?0 nv8@O@D:o@z^]:47", uRL0.getAuthority());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("https://[=?0 nv8@O@D:o@z^]:47https", uRL0.toString());
      assertEquals("https", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("https://[=?0 nv8@O@D:o@z^]:47https", uRL0.toExternalForm());
      assertEquals(47, uRL0.getPort());
      assertEquals("[=?0 nv8@O@D:o@z^]", uRL0.getHost());
      assertEquals("https", uRL0.getPath());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("[=?0 nv8@O@D:o@z^]:47", uRL0.getAuthority());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("https://[=?0 nv8@O@D:o@z^]:47https", uRL0.toString());
      assertEquals("https", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("https://[=?0 nv8@O@D:o@z^]:47https", uRL0.toExternalForm());
      assertEquals(47, uRL0.getPort());
      assertEquals("[=?0 nv8@O@D:o@z^]", uRL0.getHost());
      assertEquals("https", uRL0.getPath());
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      URL uRL1 = MockURL.getHttpExample();
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNotNull(uRL1);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.somefakebutwellformed?r.org/5coa vp'i&ugs~");
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformed", httpUrl0.host());
      assertEquals("https://www.somefakebutwellformed/?r.org/5coa%20vp%27i&ugs~", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(2, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(httpUrl0);
      
      Set<String> set0 = httpUrl0.queryParameterNames();
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals("www.somefakebutwellformed", httpUrl0.host());
      assertEquals("https://www.somefakebutwellformed/?r.org/5coa%20vp%27i&ugs~", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(2, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", 4965, "?");
      assertNull(uRL0.getUserInfo());
      assertEquals("?", uRL0.getFile());
      assertEquals("", uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("https://https:4965?", uRL0.toExternalForm());
      assertEquals("https://https:4965?", uRL0.toString());
      assertEquals(4965, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("https", uRL0.getHost());
      assertEquals("https:4965", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals("?", uRL0.getFile());
      assertEquals("", uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("https://https:4965?", uRL0.toExternalForm());
      assertEquals("https://https:4965?", uRL0.toString());
      assertEquals(4965, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("https", uRL0.getHost());
      assertEquals("https:4965", uRL0.getAuthority());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https://https:4965/?", httpUrl0.toString());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(4965, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      
      Set<String> set0 = httpUrl0.queryParameterNames();
      assertNull(uRL0.getUserInfo());
      assertEquals("?", uRL0.getFile());
      assertEquals("", uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("https://https:4965?", uRL0.toExternalForm());
      assertEquals("https://https:4965?", uRL0.toString());
      assertEquals(4965, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("https", uRL0.getHost());
      assertEquals("https:4965", uRL0.getAuthority());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https://https:4965/?", httpUrl0.toString());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(4965, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      String string0 = httpUrl0.encodedUsername();
      assertNull(uRL0.getUserInfo());
      assertEquals("?", uRL0.getFile());
      assertEquals("", uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("https://https:4965?", uRL0.toExternalForm());
      assertEquals("https://https:4965?", uRL0.toString());
      assertEquals(4965, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("https", uRL0.getHost());
      assertEquals("https:4965", uRL0.getAuthority());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https://https:4965/?", httpUrl0.toString());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(4965, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = httpUrl0.pathSize();
      assertNull(uRL0.getUserInfo());
      assertEquals("?", uRL0.getFile());
      assertEquals("", uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("https://https:4965?", uRL0.toExternalForm());
      assertEquals("https://https:4965?", uRL0.toString());
      assertEquals(4965, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("https", uRL0.getHost());
      assertEquals("https:4965", uRL0.getAuthority());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https://https:4965/?", httpUrl0.toString());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(1, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(4965, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.somfakebutwellformed?r.org/5coa vp'i&ugs~");
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(443, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somfakebutwellformed", httpUrl0.host());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.encodedPassword());
      assertTrue(httpUrl0.isHttps());
      assertEquals(2, httpUrl0.querySize());
      assertEquals("https://www.somfakebutwellformed/?r.org/5coa%20vp%27i&ugs~", httpUrl0.toString());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertNotNull(httpUrl0);
      
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(2269);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4539, Size: 4
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = 3;
      boolean boolean0 = HttpUrl.percentEncoded(".afec-]%5e6_:hy-%7f%7bs", 3, 546);
      assertFalse(boolean0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username(".afec-]%5e6_:hy-%7f%7bs");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedFragment(".afec-]%5e6_:hy-%7f%7bs");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.addEncodedQueryParameter(".afec-]%5e6_:hy-%7f%7bs", ".afec-]%5e6_:hy-%7f%7bs");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.somfakebutwellformed?r.org/5coa vp'i&ugs~");
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("www.somfakebutwellformed", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https://www.somfakebutwellformed/?r.org/5coa%20vp%27i&ugs~", httpUrl0.toString());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals(2, httpUrl0.querySize());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = HttpUrl.get(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.fragment());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertEquals("", httpUrl1.password());
      assertFalse(httpUrl1.isHttps());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertNotNull(httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(61);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 122, Size: 4
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "@/?%23", 52, "https");
      assertNull(uRL0.getUserInfo());
      assertEquals("https://@/?%23:52https", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("https://@/?%23:52https", uRL0.toString());
      assertEquals("@/?%23", uRL0.getHost());
      assertEquals("https", uRL0.getPath());
      assertEquals(52, uRL0.getPort());
      assertEquals("https", uRL0.getFile());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("@/?%23:52", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals("https://@/?%23:52https", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("https://@/?%23:52https", uRL0.toString());
      assertEquals("@/?%23", uRL0.getHost());
      assertEquals("https", uRL0.getPath());
      assertEquals(52, uRL0.getPort());
      assertEquals("https", uRL0.getFile());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("@/?%23:52", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      URI uRI0 = MockURI.URI("https", "https", "%22%7F1RORI");
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("https", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("%2522%257F1RORI", uRI0.getRawFragment());
      assertEquals("https:https#%2522%257F1RORI", uRI0.toString());
      assertTrue(uRI0.isOpaque());
      assertNotNull(uRI0);
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("https", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("%2522%257F1RORI", uRI0.getRawFragment());
      assertEquals("https:https#%2522%257F1RORI", uRI0.toString());
      assertTrue(uRI0.isOpaque());
      assertEquals("https", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("%2522%257F1RORI", uRL0.getRef());
      assertEquals("https", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals("https:https#%2522%257F1RORI", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getAuthority());
      assertEquals("https", uRL0.getPath());
      assertEquals("https:https#%2522%257F1RORI", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("https", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("%2522%257F1RORI", uRI0.getRawFragment());
      assertEquals("https:https#%2522%257F1RORI", uRI0.toString());
      assertTrue(uRI0.isOpaque());
      assertEquals("https", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("%2522%257F1RORI", uRL0.getRef());
      assertEquals("https", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals("https:https#%2522%257F1RORI", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getAuthority());
      assertEquals("https", uRL0.getPath());
      assertEquals("https:https#%2522%257F1RORI", uRL0.toString());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.host());
      assertEquals("https://https/#%2522%257F1RORI", httpUrl0.toString());
      assertEquals("%2522%257F1RORI", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals("%22%7F1RORI", httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.encodedPath();
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("https", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("%2522%257F1RORI", uRI0.getRawFragment());
      assertEquals("https:https#%2522%257F1RORI", uRI0.toString());
      assertTrue(uRI0.isOpaque());
      assertEquals("https", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("%2522%257F1RORI", uRL0.getRef());
      assertEquals("https", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals("https:https#%2522%257F1RORI", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getAuthority());
      assertEquals("https", uRL0.getPath());
      assertEquals("https:https#%2522%257F1RORI", uRL0.toString());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.host());
      assertEquals("https://https/#%2522%257F1RORI", httpUrl0.toString());
      assertEquals("%2522%257F1RORI", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals("%22%7F1RORI", httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(string0);
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("\"1RORI#xYf,2#");
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("xYf,2#", httpUrl1.fragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("http://www.somefakebutwellformedurl.org/%22%7F1RORI#xYf,2#", httpUrl1.toString());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.username());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals("xYf,2#", httpUrl1.encodedFragment());
      assertNotNull(httpUrl1);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl httpUrl2 = HttpUrl.get(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl2.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("", httpUrl2.username());
      assertEquals(0, httpUrl2.querySize());
      assertEquals("http", httpUrl2.scheme());
      assertEquals(80, httpUrl2.port());
      assertNull(httpUrl2.encodedFragment());
      assertNull(httpUrl2.fragment());
      assertFalse(httpUrl2.isHttps());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("", httpUrl2.password());
      assertNotNull(httpUrl2);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertTrue(httpUrl2.equals((Object)httpUrl0));
      
      boolean boolean0 = httpUrl1.equals(httpUrl2);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("xYf,2#", httpUrl1.fragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("http://www.somefakebutwellformedurl.org/%22%7F1RORI#xYf,2#", httpUrl1.toString());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.username());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals("xYf,2#", httpUrl1.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl2.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("", httpUrl2.username());
      assertEquals(0, httpUrl2.querySize());
      assertEquals("http", httpUrl2.scheme());
      assertEquals(80, httpUrl2.port());
      assertNull(httpUrl2.encodedFragment());
      assertNull(httpUrl2.fragment());
      assertFalse(httpUrl2.isHttps());
      assertEquals(1, httpUrl2.pathSize());
      assertEquals("", httpUrl2.password());
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl2);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
      assertFalse(boolean0);
      assertTrue(httpUrl0.equals((Object)httpUrl2));
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertTrue(httpUrl2.equals((Object)httpUrl0));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "https";
      URL uRL0 = MockURL.URL("https", "-mn", "https");
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("https://-mnhttps", uRL0.toExternalForm());
      assertEquals("https://-mnhttps", uRL0.toString());
      assertEquals("https", uRL0.getFile());
      assertEquals("https", uRL0.getPath());
      assertEquals((-1), uRL0.getPort());
      assertEquals("-mn", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("-mn", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("https://-mnhttps", uRL0.toExternalForm());
      assertEquals("https://-mnhttps", uRL0.toString());
      assertEquals("https", uRL0.getFile());
      assertEquals("https", uRL0.getPath());
      assertEquals((-1), uRL0.getPort());
      assertEquals("-mn", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("-mn", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("-mnhttps", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https://-mnhttps/", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals(443, httpUrl0.port());
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("-mn");
      assertEquals("https", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("https://-mnhttps", uRL0.toExternalForm());
      assertEquals("https://-mnhttps", uRL0.toString());
      assertEquals("https", uRL0.getFile());
      assertEquals("https", uRL0.getPath());
      assertEquals((-1), uRL0.getPort());
      assertEquals("-mn", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("-mn", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("-mnhttps", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https://-mnhttps/", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals(443, httpUrl0.port());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.password());
      assertEquals(443, httpUrl1.port());
      assertEquals("-mnhttps", httpUrl1.host());
      assertEquals("https://-mnhttps/-mn", httpUrl1.toString());
      assertTrue(httpUrl1.isHttps());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("https", httpUrl1.scheme());
      assertNotNull(httpUrl1);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(56320, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 56320, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = ".";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(0, ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      try { 
        HttpUrl.getChecked("https:f[{");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: https:f[{
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "..", 36, "");
      assertEquals("https://..:36", uRL0.toString());
      assertEquals("..:36", uRL0.getAuthority());
      assertEquals("https://..:36", uRL0.toExternalForm());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("..", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals(36, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("https://..:36", uRL0.toString());
      assertEquals("..:36", uRL0.getAuthority());
      assertEquals("https://..:36", uRL0.toExternalForm());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("..", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals(36, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertNull(httpUrl0);
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("..");
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("/ for ");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.addPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "UxjBb*laik~%5n+";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("UxjBb*laik~%5n+");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      String string1 = "UTF-16LE";
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{=YoW48m");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.setQueryParameter("UTF-16LE", (String) null);
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.setEncodedQueryParameter("UxjBb*laik~%5n+", "UTF-16LE");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.reencodeForUri();
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      
      int int0 = 119;
      // Undeclared exception!
      try { 
        httpUrl_Builder4.removePathSegment(119);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 119, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(3055);
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      String string0 = "94.:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("94.:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 94.:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "http";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("http");
      assertNotNull(httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("http");
      assertNotNull(httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.scheme("http");
      assertNotNull(httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      
      String string1 = "D`2vP+k+W";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.host("D`2vP+k+W");
      assertNotNull(httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder3.password("x^{mC+~Y");
      assertNotNull(httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder3.addEncodedQueryParameter("D`2vP+k+W", "http");
      assertNotNull(httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      HttpUrl httpUrl0 = httpUrl_Builder1.build();
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("x^{mC+~Y", httpUrl0.password());
      assertEquals("d`2vp+k+w", httpUrl0.host());
      assertEquals(2, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("x%5E%7BmC+~Y", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertNotNull(httpUrl0);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("D`2vP+k+W");
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("x^{mC+~Y", httpUrl0.password());
      assertEquals("d`2vp+k+w", httpUrl0.host());
      assertEquals(2, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("x%5E%7BmC+~Y", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("x^{mC+~Y", httpUrl1.password());
      assertEquals("", httpUrl1.username());
      assertEquals("d`2vp+k+w", httpUrl1.host());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertFalse(httpUrl1.isHttps());
      assertEquals("x%5E%7BmC+~Y", httpUrl1.encodedPassword());
      assertNotNull(httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      List<String> list0 = httpUrl1.queryParameterValues("D`2vP+k+W");
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("x^{mC+~Y", httpUrl0.password());
      assertEquals("d`2vp+k+w", httpUrl0.host());
      assertEquals(2, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("x%5E%7BmC+~Y", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("x^{mC+~Y", httpUrl1.password());
      assertEquals("", httpUrl1.username());
      assertEquals("d`2vp+k+w", httpUrl1.host());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertFalse(httpUrl1.isHttps());
      assertEquals("x%5E%7BmC+~Y", httpUrl1.encodedPassword());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterName(90);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      URL uRL0 = MockURL.URL("https", "https", 65280, "7");
      assertEquals("https://https:652807", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("7", uRL0.getPath());
      assertEquals("https://https:652807", uRL0.toString());
      assertEquals("https:65280", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("7", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals(65280, uRL0.getPort());
      assertEquals("https", uRL0.getHost());
      assertNotNull(uRL0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals("https://https:652807", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("7", uRL0.getPath());
      assertEquals("https://https:652807", uRL0.toString());
      assertEquals("https:65280", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("https", uRL0.getProtocol());
      assertEquals("7", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals(65280, uRL0.getPort());
      assertEquals("https", uRL0.getHost());
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("c:a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: c:a
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }
}
