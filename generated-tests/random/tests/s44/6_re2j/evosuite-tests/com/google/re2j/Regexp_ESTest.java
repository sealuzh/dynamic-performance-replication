/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 05:30:51 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Regexp_ESTest extends Regexp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = 5582;
      regexp0.min = 997;
      regexp0.min = 997;
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      regexp0.min = 19;
      regexp0.cap = 1551;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op.values();
      regexp0.toString();
      assertTrue(regexp0.equals((Object)regexp1));
      
      regexp_Op0.isPseudo();
      boolean boolean0 = regexp_Op0.isPseudo();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = 20;
      regexp0.flags = (-2493);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[8];
      intArray0[0] = 20;
      intArray0[1] = (-2493);
      intArray0[2] = 20;
      intArray0[3] = (-2493);
      intArray0[4] = (-2493);
      intArray0[5] = (-2493);
      regexp1.max = 20;
      intArray0[6] = 20;
      intArray0[7] = 20;
      regexp1.runes = intArray0;
      regexp1.toString();
      regexp0.cap = 20;
      regexp1.toString();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexp1.min = 15;
      regexp1.name = ">";
      regexp1.flags = 15;
      regexp2.min = 2343;
      regexp1.equals(regexp2);
      regexp1.cap = 2343;
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = 123;
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.name = null;
      String string0 = "6GE~zoJo|uU";
      regexp0.name = "_Tn)@+aoBCsPv^&";
      regexp1.name = "}xgg@";
      regexp1.max = 2517;
      regexp1.max = 2517;
      regexp1.equals(regexp0);
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[3];
      intArray0[0] = 12;
      regexp0.max = 93;
      regexp0.reinit();
      intArray0[1] = 12;
      intArray0[2] = 14;
      regexp0.runes = intArray0;
      regexp0.runes = null;
      regexp0.flags = 970;
      regexp0.max = 12;
      regexp0.toString();
      Regexp.Op.values();
      boolean boolean0 = regexp_Op0.isPseudo();
      boolean boolean1 = regexp_Op0.isPseudo();
      assertFalse(boolean1);
      
      Regexp regexp1 = new Regexp(regexp0);
      boolean boolean2 = regexp0.equals(regexp1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.toString();
      regexp0.maxCap();
      Object object0 = new Object();
      regexp1.equals(object0);
      regexp1.equals(regexp_Op0);
      Regexp regexp2 = new Regexp(regexp1);
      int[] intArray0 = new int[3];
      regexp2.name = "VERTICAL_BAR";
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp2;
      regexp0.subs = regexpArray0;
      Regexp.Op regexp_Op1 = Regexp.Op.PLUS;
      regexp0.op = regexp_Op1;
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      regexp0.runes = intArray0;
      regexp0.equals(regexp2);
      regexp0.toString();
      regexp_Op0.isPseudo();
      regexp_Op0.isPseudo();
      regexp0.equals("(?:VERTICAL_BAR)+");
      regexp_Op0.isPseudo();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.flags = (-1621);
      regexp1.max = 1556;
      regexp0.cap = 1556;
      regexp1.max = 42892;
      regexp1.equals(regexp0);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.equals(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 15;
      intArray0[2] = (-1103);
      intArray0[3] = 2;
      intArray0[4] = 7;
      intArray0[5] = 36;
      intArray0[6] = (-1842);
      intArray0[7] = 2;
      intArray0[8] = (-2156);
      regexp1.runes = intArray0;
      // Undeclared exception!
      try { 
        regexp1.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp regexp2 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-7);
      intArray0[1] = 4933;
      intArray0[2] = 1446;
      regexp1.runes = intArray0;
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp1;
      Regexp regexp3 = new Regexp(regexp0);
      regexpArray0[4] = regexp3;
      regexpArray0[2].cap = 125;
      regexp0.subs = regexpArray0;
      regexp1.maxCap();
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "M}8*/cXFP";
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp1.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexp1.toString();
      regexpArray0[2] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      regexp1.max = (-2030);
      regexpArray0[2].op = regexp_Op1;
      regexp0.subs = regexpArray0;
      regexp0.toString();
      regexp0.equals(regexp_Op0);
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.toString();
      regexp1.equals("");
      regexp0.reinit();
      boolean boolean0 = regexp0.equals(regexp1);
      boolean boolean1 = regexp0.equals("(?-s:.)");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[4];
      intArray0[0] = 2092;
      regexp0.reinit();
      intArray0[1] = (-479);
      regexp0.min = (-479);
      intArray0[2] = (-848);
      regexp0.reinit();
      intArray0[3] = 11;
      regexp0.max = 11;
      regexp0.runes = intArray0;
      Object object0 = new Object();
      regexp0.equals(object0);
      regexp0.toString();
      String string0 = null;
      regexp0.min = 3972;
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "";
      regexp0.cap = 1324;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp1;
      int[] intArray0 = new int[4];
      intArray0[0] = 1324;
      intArray0[1] = 1324;
      intArray0[2] = 1324;
      intArray0[3] = 1324;
      regexp1.runes = intArray0;
      regexpArray0[0].op = regexp_Op0;
      regexpArray0[1] = regexp2;
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.flags = (-2387);
      regexp0.op = regexp_Op0;
      Object object0 = new Object();
      regexp0.equals(object0);
      regexp0.equals(regexp_Op0);
      regexp0.name = "";
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[0];
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp2;
      regexp0.subs = regexpArray0;
      regexp1.op = regexp_Op1;
      regexp1.runes = intArray0;
      regexp1.toString();
      regexp1.reinit();
      regexp1.max = 0;
      regexp1.cap = 0;
      regexp_Op0.isPseudo();
      regexp0.maxCap();
      regexp1.maxCap();
      regexp0.min = 32;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = 1009;
      regexp0.cap = 779;
      int[] intArray0 = new int[7];
      intArray0[0] = 779;
      intArray0[1] = 779;
      Regexp.Op regexp_Op1 = Regexp.Op.LITERAL;
      regexp0.op = regexp_Op1;
      intArray0[2] = 779;
      regexp0.reinit();
      regexp0.flags = 779;
      int[] intArray1 = new int[7];
      intArray1[0] = 779;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 779;
      intArray1[4] = 1009;
      intArray1[5] = 779;
      intArray1[6] = 779;
      regexp0.runes = intArray1;
      intArray0[3] = 779;
      intArray0[4] = 0;
      intArray0[5] = 779;
      regexp0.toString();
      intArray0[6] = 0;
      regexp0.runes = intArray0;
      regexp0.reinit();
      regexp0.min = 779;
      regexp0.maxCap();
      regexp0.maxCap();
      regexp0.equals(regexp_Op0);
      regexp0.maxCap();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexp0.subs = regexpArray0;
      regexp1.maxCap();
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "P>8{}@{";
      Regexp.Op regexp_Op1 = Regexp.Op.QUEST;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexp0.equals(regexp1);
      regexp0.max = 2;
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      regexp1.runes = intArray0;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.cap = (-2897);
      Regexp regexp2 = new Regexp(regexp1);
      regexp2.max = (-1192);
      regexp1.equals(regexp2);
      String string0 = "9G0hh-X 2P?MVGjc";
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("9G0hh-X 2P?MVGjc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.9G0hh-X 2P?MVGjc
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp0);
      String string0 = regexp0.toString();
      assertEquals("(?:)", string0);
      
      boolean boolean0 = regexp1.equals(regexp2);
      assertTrue(boolean0);
      
      regexp1.reinit();
      Object object0 = new Object();
      boolean boolean1 = regexp1.equals(object0);
      regexp1.maxCap();
      regexp2.maxCap();
      boolean boolean2 = regexp_Op0.isPseudo();
      assertTrue(boolean2 == boolean1);
      
      Regexp.Op.values();
      int int0 = regexp2.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int int0 = 0;
      regexp0.flags = 0;
      regexp0.max = (-2296);
      regexp0.flags = 13;
      regexp1.min = (-2214);
      regexp1.min = (-2214);
      int[] intArray0 = new int[0];
      regexp1.runes = intArray0;
      Regexp regexp2 = new Regexp(regexp1);
      Regexp.Op.values();
      Regexp regexp3 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp2.equals(regexp3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.name = "[invalid char class]";
      regexp0.max = (-371);
      Regexp regexp1 = new Regexp(regexp0);
      Object object0 = new Object();
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      regexp1.equals(object0);
      regexp0.equals(regexp1);
      regexp1.toString();
      regexp1.cap = 45;
      regexp1.toString();
      regexp1.maxCap();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.^
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexp0.equals(regexp1);
      Object object0 = new Object();
      regexp0.toString();
      regexp1.equals(object0);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("[^x00-x{10FFFF}]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.[^x00-x{10FFFF}]
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = 16;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.max = 13;
      Object object0 = new Object();
      regexp0.max = 3085;
      regexp0.cap = 19;
      regexp1.equals(object0);
      Regexp.Op.values();
      regexp1.toString();
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      regexp0.op = regexp_Op1;
      Regexp.Op.values();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.flags = 16;
      regexp1.equals(regexp0);
      regexp1.max = 10;
      regexp1.equals(regexp0);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = 20;
      regexp0.flags = (-2493);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[9];
      intArray0[0] = 20;
      intArray0[1] = (-2493);
      intArray0[2] = 20;
      intArray0[3] = (-2493);
      intArray0[4] = (-2493);
      intArray0[5] = (-2493);
      intArray0[6] = 20;
      intArray0[7] = 20;
      intArray0[8] = 20;
      regexp1.runes = intArray0;
      regexp1.toString();
      regexp0.cap = 17;
      regexp1.toString();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      regexp0.op = regexp_Op1;
      regexp1.equals(regexp2);
      regexp2.min = (-137);
      regexp2.runes = null;
      Regexp.Op.valueOf("PLUS");
      regexp0.equals("Inscriptional_Parthian");
      regexp2.maxCap();
      Regexp.Op.values();
      regexp_Op0.isPseudo();
      regexp0.equals((Object) null);
      regexp2.equals(regexp0);
      int int0 = regexp1.maxCap();
      assertFalse(regexp1.equals((Object)regexp0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp2;
      regexpArray0[2] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.toString();
      Regexp regexp3 = new Regexp(regexp0);
      Regexp regexp4 = new Regexp(regexp3);
      int[] intArray0 = new int[2];
      intArray0[0] = (-124);
      intArray0[1] = 94;
      regexp4.runes = intArray0;
      boolean boolean0 = regexp1.equals(regexp2);
      boolean boolean1 = regexp_Op0.isPseudo();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      boolean boolean0 = regexp0.equals("");
      Regexp regexp1 = new Regexp(regexp0);
      boolean boolean1 = regexp1.equals(regexp0);
      assertFalse(boolean1 == boolean0);
      
      regexp0.toString();
      assertTrue(regexp0.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.op = regexp_Op0;
      regexp1.reinit();
      Regexp[] regexpArray0 = new Regexp[0];
      regexp1.min = 42752;
      regexp1.flags = 7466;
      regexp0.subs = regexpArray0;
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      regexp1.op = regexp_Op1;
      int int0 = regexp1.maxCap();
      assertEquals(0, int0);
      
      boolean boolean0 = regexp1.op.isPseudo();
      assertFalse(boolean0);
      
      regexp0.maxCap();
      regexp0.reinit();
      Regexp.Op.values();
      int int1 = regexp0.maxCap();
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = (-2387);
      regexp0.op = regexp_Op0;
      Object object0 = new Object();
      regexp0.equals(object0);
      regexp0.equals(regexp_Op0);
      regexp0.name = "";
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[0];
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR_NOT_NL;
      regexp1.op = regexp_Op1;
      regexp1.runes = intArray0;
      regexp1.toString();
      regexp1.reinit();
      regexp1.max = 0;
      regexp1.cap = 0;
      boolean boolean0 = regexp_Op0.isPseudo();
      regexp0.maxCap();
      regexp1.maxCap();
      regexp0.min = 32;
      regexp0.toString();
      Regexp.Op.values();
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
      
      boolean boolean1 = regexp0.equals("");
      assertTrue(boolean1 == boolean0);
      
      Regexp.Op.values();
      regexp1.toString();
      boolean boolean2 = regexp1.op.isPseudo();
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = (-1);
      regexp0.maxCap();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp1.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      regexp_Op0.isPseudo();
      regexp_Op0.isPseudo();
      regexp_Op0.isPseudo();
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.name = "H#R1:d@Zl#";
      regexp0.reinit();
      regexp0.toString();
      regexp_Op0.isPseudo();
      regexp1.maxCap();
      Regexp.Op.values();
      regexp0.toString();
      regexp0.toString();
      Regexp.Op.values();
      regexp0.max = 15;
      Regexp.Op.values();
      regexp_Op0.isPseudo();
      regexp0.equals("H#R1:d@Zl#");
      Object object0 = new Object();
      regexp0.equals(object0);
      regexp_Op0.isPseudo();
      String string0 = regexp1.toString();
      assertEquals("$", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      regexp0.reinit();
      Regexp[] regexpArray0 = new Regexp[0];
      regexp0.subs = regexpArray0;
      String string0 = "";
      regexp0.op = regexp_Op0;
      regexp0.min = (-1717);
      regexp0.equals("");
      regexp0.maxCap();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 8;
      regexp0.name = "*";
      regexp0.reinit();
      regexp0.max = 16;
      regexp0.toString();
      regexp0.equals("*");
      Regexp.Op.values();
      Regexp.Op.values();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.*
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = (-2593);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[0];
      regexp0.flags = (-2593);
      regexp1.toString();
      Object object0 = new Object();
      int[] intArray1 = new int[6];
      intArray1[0] = (-2593);
      intArray1[1] = (-2593);
      intArray1[2] = (-2593);
      intArray1[3] = (-2593);
      intArray1[4] = (-2593);
      intArray1[5] = (-2593);
      regexp1.runes = intArray1;
      regexp0.toString();
      regexp0.flags = (-2593);
      regexp1.equals(object0);
      regexp0.flags = 13;
      regexp1.runes = intArray0;
      regexp0.equals(regexp1);
      regexp1.maxCap();
      Regexp.Op.values();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("(?s:.)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.(?s:.)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Object object0 = new Object();
      regexp0.min = 5;
      regexp0.equals(object0);
      regexp0.maxCap();
      regexp0.op = regexp_Op0;
      regexp0.cap = 0;
      Regexp[] regexpArray0 = new Regexp[0];
      String string0 = regexp0.toString();
      regexp0.subs = regexpArray0;
      regexp0.max = 977;
      regexp0.maxCap();
      regexp0.equals(object0);
      regexp_Op0.isPseudo();
      regexp0.equals(regexp_Op0);
      regexp0.maxCap();
      regexp0.equals("");
      regexp0.equals(object0);
      regexp0.maxCap();
      regexp0.equals("^");
      String string1 = regexp0.toString();
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.max = 871;
      regexp0.flags = 871;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp2;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[6] = regexp3;
      regexp0.subs = regexpArray0;
      regexp2.min = 871;
      regexpArray0[0].cap = 871;
      regexp2.toString();
      regexp0.equals(regexp2);
      Regexp.Op.valueOf("BEGIN_TEXT");
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("F|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.F|
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      regexp_Op0.isPseudo();
      regexp_Op0.isPseudo();
      regexp_Op0.isPseudo();
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.name = "H#R1:d@Zl#";
      regexp0.reinit();
      regexp0.toString();
      regexp_Op0.isPseudo();
      regexp1.maxCap();
      Regexp.Op.values();
      String string0 = regexp0.toString();
      regexp0.toString();
      Regexp.Op.values();
      regexp0.max = 15;
      Regexp.Op.values();
      regexp_Op0.isPseudo();
      regexp0.equals("H#R1:d@Zl#");
      Object object0 = new Object();
      regexp0.equals(object0);
      regexp_Op0.isPseudo();
      String string1 = regexp1.toString();
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "Nko";
      regexp0.name = "v:2Z '<sRNJ)0%";
      regexp0.reinit();
      Object object0 = new Object();
      boolean boolean0 = regexp0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.min = 65510;
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[6];
      intArray0[0] = 561;
      intArray0[1] = 9423;
      intArray0[2] = 1942;
      intArray0[3] = 2683;
      intArray0[1] = 7;
      intArray0[5] = (-2403);
      regexp0.runes = intArray0;
      regexp1.equals((Object) null);
      regexp0.subs = null;
      regexp1.equals(regexp_Op0);
      regexp1.subs = null;
      regexp0.toString();
      regexp1.equals("[\u0231-x07\u0796-x{a7b}x00-xfffff69d]");
      Regexp.Op.values();
      regexp0.maxCap();
      Regexp.Op.values();
      regexp0.toString();
      regexp1.equals((Object) null);
      regexp1.equals(regexp0);
      Regexp.Op.values();
      regexp1.equals((Object) null);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("Khmer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.Khmer
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.op = regexp_Op0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.reinit();
      regexp1.min = 2333;
      regexp0.op.isPseudo();
      regexp1.reinit();
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      int[] intArray0 = new int[9];
      intArray0[0] = (-3378);
      intArray0[1] = 19;
      intArray0[2] = (-2592);
      intArray0[3] = 294;
      intArray0[4] = 19;
      intArray0[5] = 711;
      intArray0[6] = 12688;
      intArray0[7] = 7;
      intArray0[8] = (-137);
      regexp0.runes = intArray0;
      regexp0.flags = 2544;
      regexp0.name = "roHt!_560WZ.XswL>$";
      regexp0.toString();
      regexp0.cap = 2486;
      regexp0.maxCap();
      regexp0.equals("roHt!_560WZ.XswL>$");
      regexp0.equals("[^x00-x{10FFFF}]");
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("roHt!_560WZ.XswL>$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.roHt!_560WZ.XswL>$
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = 40982;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.max = 40982;
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      regexp1.op = regexp_Op1;
      regexp1.equals(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp1;
      regexpArray0[7] = regexp1;
      regexpArray0[8] = regexp0;
      regexp0.subs = regexpArray0;
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.(
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.equals(regexp0);
      regexp0.cap = 747;
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp1;
      regexp0.max = 3389;
      regexp1.reinit();
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp1;
      regexpArray0[6] = regexp1;
      regexpArray0[7] = regexp0;
      regexpArray0[8] = regexp0;
      regexp0.subs = regexpArray0;
      regexp_Op0.isPseudo();
      int[] intArray0 = new int[5];
      intArray0[0] = 3389;
      intArray0[1] = 3389;
      intArray0[2] = 3389;
      intArray0[3] = 3389;
      intArray0[4] = 5;
      regexpArray0[7].runes = intArray0;
      String string0 = "";
      regexp1.equals("");
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }
}
