/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 02:40:38 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import okhttp3.CacheControl;
import okhttp3.Headers;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheControl_ESTest extends CacheControl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(2062, timeUnit0);
      cacheControl_Builder1.maxAge(0, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noTransform();
      cacheControl_Builder2.noCache();
      cacheControl_Builder2.maxAge(2062, timeUnit0);
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      boolean boolean0 = cacheControl0.isPrivate();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(1333, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxAge(2, timeUnit1);
      assertSame(cacheControl_Builder2, cacheControl_Builder0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noTransform();
      int int0 = 5777;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.maxStale(5777, timeUnit0);
      cacheControl_Builder2.noTransform();
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.minFresh(5777, timeUnit1);
      cacheControl_Builder4.build();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      // Undeclared exception!
      try { 
        headers_Builder0.add("1k|[(tOj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected header: 1k|[(tOj
         //
         verifyException("okhttp3.Headers$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.FORCE_CACHE.toString();
      cacheControl0.FORCE_NETWORK.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "!x9e.0Ch#QR";
      stringArray0[1] = "max-stale=2147483647, only-if-cached";
      stringArray0[2] = "no-cache";
      stringArray0[3] = "max-stale=2147483647, only-if-cached";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl.parse(headers0);
      cacheControl0.noCache();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      int int0 = (-2450);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      // Undeclared exception!
      try { 
        cacheControl_Builder1.maxStale((-2450), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxStale < 0: -2450
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      boolean boolean0 = cacheControl0.noStore();
      assertFalse(boolean0);
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.noCache());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.mustRevalidate();
      cacheControl0.toString();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      // Undeclared exception!
      try { 
        headers_Builder0.add("max-stale=2147483647, only-if-cached");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected header: max-stale=2147483647, only-if-cached
         //
         verifyException("okhttp3.Headers$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.FORCE_CACHE.headerValue = ",|/|/mW";
      cacheControl0.FORCE_NETWORK.toString();
      cacheControl0.onlyIfCached();
      cacheControl0.noTransform();
      cacheControl0.noCache();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxAge((-4560), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -4560
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(1220, timeUnit0);
      cacheControl_Builder0.noCache();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.onlyIfCached();
      cacheControl_Builder1.noCache();
      cacheControl_Builder2.noTransform();
      cacheControl_Builder2.noCache();
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.addLenient("Ok,bTJeg/-fjEPJ})~3");
      Headers.Builder headers_Builder2 = headers_Builder1.removeAll("nhz@uT+,_");
      Headers headers0 = headers_Builder2.build();
      CacheControl.parse(headers0);
      boolean boolean0 = cacheControl0.noCache();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.toString();
      cacheControl0.FORCE_CACHE.toString();
      cacheControl0.FORCE_CACHE.headerValue = "no-cache";
      cacheControl0.FORCE_NETWORK.toString();
      cacheControl0.minFreshSeconds();
      cacheControl0.isPrivate();
      cacheControl0.noCache();
      cacheControl0.mustRevalidate();
      cacheControl0.toString();
      cacheControl0.isPublic();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(0, timeUnit0);
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noStore();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.onlyIfCached();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      cacheControl_Builder3.maxStale(Integer.MAX_VALUE, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      cacheControl_Builder3.noTransform();
      cacheControl_Builder0.noTransform();
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.minFresh(2032, timeUnit1);
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder4.maxStale(2032, timeUnit1);
      cacheControl_Builder5.noTransform();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.FORCE_NETWORK.toString();
      cacheControl0.noStore();
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.onlyIfCached());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers headers0 = new Headers(headers_Builder0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl0.FORCE_CACHE.headerValue = "i.-CyhSKerH";
      cacheControl1.FORCE_CACHE.headerValue = "i.-CyhSKerH";
      cacheControl0.noTransform();
      cacheControl0.toString();
      cacheControl1.sMaxAgeSeconds();
      cacheControl1.mustRevalidate();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      cacheControl1.noStore();
      cacheControl_Builder1.noStore();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxAge((-1), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -1
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(Integer.MAX_VALUE, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.onlyIfCached();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noTransform();
      cacheControl_Builder0.maxAge(Integer.MAX_VALUE, timeUnit0);
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.noCache();
      CacheControl cacheControl0 = cacheControl_Builder4.build();
      cacheControl0.maxAgeSeconds();
      TimeUnit timeUnit1 = TimeUnit.NANOSECONDS;
      cacheControl_Builder1.noCache();
      cacheControl0.FORCE_CACHE.headerValue = "MaS? #H(";
      cacheControl_Builder4.maxStale(Integer.MAX_VALUE, timeUnit1);
      cacheControl0.maxStaleSeconds();
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder1.noTransform();
      assertSame(cacheControl_Builder5, cacheControl_Builder2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.toString();
      cacheControl0.maxAgeSeconds();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Cache-Control";
      stringArray0[1] = "Cache-Control";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl1 = CacheControl.FORCE_NETWORK;
      CacheControl.parse(headers0);
      int int0 = 48;
      HashMap<String, String> hashMap0 = null;
      try {
        hashMap0 = new HashMap<String, String>((-1), (-1842.744F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      String string0 = cacheControl0.FORCE_NETWORK.toString();
      assertEquals("no-cache", string0);
      
      cacheControl0.headerValue = "y%lpf6h(tn!";
      cacheControl0.maxAgeSeconds();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "no-cache";
      stringArray0[1] = "y%lpf6h(tn!";
      stringArray0[2] = "no-cache";
      stringArray0[3] = "y%lpf6h(tn!";
      stringArray0[4] = "y%lpf6h(tn!";
      stringArray0[5] = "no-cache";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      CacheControl cacheControl2 = CacheControl.parse(headers0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>(31, 31);
      Headers headers1 = Headers.of((Map<String, String>) hashMap0);
      CacheControl.parse(headers1);
      cacheControl1.FORCE_CACHE.headerValue = "must-revalidate";
      cacheControl2.FORCE_NETWORK.headerValue = "";
      cacheControl2.FORCE_CACHE.headerValue = "no-cache";
      cacheControl2.FORCE_CACHE.toString();
      int int0 = cacheControl1.minFreshSeconds();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noStore();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      cacheControl_Builder1.noStore();
      cacheControl0.isPrivate();
      CacheControl cacheControl3 = CacheControl.parse(headers0);
      int int1 = cacheControl0.maxAgeSeconds();
      assertTrue(int1 == int0);
      
      cacheControl0.toString();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      cacheControl_Builder1.maxAge(154, timeUnit0);
      boolean boolean0 = cacheControl3.noCache();
      assertFalse(cacheControl3.noStore());
      assertEquals((-1), cacheControl3.maxAgeSeconds());
      assertEquals((-1), cacheControl3.sMaxAgeSeconds());
      assertFalse(cacheControl3.isPublic());
      assertFalse(cacheControl3.mustRevalidate());
      assertFalse(cacheControl3.onlyIfCached());
      assertFalse(boolean0);
      assertFalse(cacheControl3.noTransform());
      assertEquals((-1), cacheControl3.maxStaleSeconds());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.toString();
      cacheControl0.maxAgeSeconds();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "max-stale=2147483647, only-if-cached";
      stringArray0[1] = "y%lpf6h(tn!";
      stringArray0[2] = "Cache-Control";
      stringArray0[3] = "([^ \"=]*)";
      stringArray0[4] = "y%lpf6h(tn!";
      stringArray0[5] = "EEE,dd-MMM-yyyy HH:mm:ss z";
      stringArray0[6] = "y%lpf6h(tn!";
      stringArray0[7] = "max-stale=2147483647, only-if-cached";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl.parse(headers0);
      HashMap<String, String> hashMap0 = null;
      try {
        hashMap0 = new HashMap<String, String>((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.toString();
      cacheControl0.maxAgeSeconds();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Cache-Control";
      stringArray0[1] = "EEE,dd-MMM-yyyy HH:mm:ss z";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl.parse(headers0);
      HashMap<String, String> hashMap0 = null;
      try {
        hashMap0 = new HashMap<String, String>((-1728292913), 1028.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1728292913
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.toString();
      int int0 = cacheControl0.maxAgeSeconds();
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Cache-Control";
      stringArray0[1] = "Cache-Control";
      stringArray0[2] = "Cache-Control";
      stringArray0[3] = "no-cache";
      stringArray0[4] = "bytes is empty";
      stringArray0[5] = "no-cache";
      stringArray0[6] = "Cache-Control";
      stringArray0[7] = "[text=";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      CacheControl.parse(headers0);
      cacheControl1.toString();
      cacheControl0.minFreshSeconds();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noStore();
      CacheControl.Builder cacheControl_Builder1 = new CacheControl.Builder();
      cacheControl_Builder1.noStore();
      cacheControl1.isPrivate();
      int int1 = MockThread.MAX_PRIORITY;
      String string0 = cacheControl1.toString();
      assertEquals("no-cache", string0);
  }
}
