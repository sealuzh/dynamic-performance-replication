/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 04:34:29 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.LineNumberReader;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.math.BigDecimal;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.util.Calendar;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("BtGA.@V~y-IK", 2371);
      char[] charArray0 = new char[2];
      jSONScanner0.sbuf = charArray0;
      charArray0[0] = '&';
      charArray0[1] = '6';
      jSONScanner0.sbuf = charArray0;
      jSONScanner0.scanUUID('l');
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(2371, 2371);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 512);
      jSONReaderScanner0.scanUUID('9');
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2824);
      jSONReaderScanner0.isBlankInput();
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = '@';
      charArray0[0] = '@';
      char char1 = '{';
      charArray0[1] = '{';
      charArray0[2] = 'p';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.close();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanBoolean('@');
      jSONReaderScanner0.next();
      char[] charArray1 = new char[7];
      charArray1[0] = '{';
      charArray1[1] = '{';
      charArray1[2] = '{';
      Class<Feature> class0 = Feature.class;
      SymbolTable symbolTable0 = new SymbolTable(43);
      symbolTable0.addSymbol(charArray1, 0, 0, 0);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '\u001A');
      charArray1[3] = '{';
      charArray1[4] = '{';
      charArray1[5] = '\u001A';
      charArray1[6] = '@';
      JSONScanner jSONScanner0 = new JSONScanner(charArray1, 0, (-1));
      SymbolTable symbolTable1 = null;
      try {
        symbolTable1 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined", (-2699));
      jSONScanner0.intValue();
      jSONScanner0.pos = (-2699);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5hI$-4m");
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      SymbolTable symbolTable0 = new SymbolTable(32);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, '1');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]$]");
      boolean boolean0 = jSONReaderScanner0.scanBoolean('b');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 46);
      assertEquals(0, jSONScanner0.matchStat);
      
      Class<Feature> class0 = Feature.class;
      SymbolTable symbolTable0 = new SymbolTable(46);
      jSONScanner0.scanEnum(class0, symbolTable0, 'W');
      jSONScanner0.putChar('W');
      assertEquals(46, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("Ebnj7rO");
      jSONScanner0.close();
      jSONScanner0.scanDecimal('V');
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("F' l0/73:1TTT");
      jSONScanner0.nextToken(772);
      jSONScanner0.scanFieldString(charArray0);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 39);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      int int0 = Calendar.MONTH;
      jSONReaderScanner0.nextIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONScanner0.nextToken(767);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.scanString('Q');
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 0;
      JSONScanner jSONScanner0 = new JSONScanner("*", 0);
      char char0 = 'u';
      jSONScanner0.scanInt('u');
      jSONScanner0.nextIdent();
      char char1 = 'D';
      jSONScanner0.scanDouble('D');
      jSONScanner0.getTimeZone();
      jSONScanner0.intValue();
      jSONScanner0.isEOF();
      jSONScanner0.scanString('D');
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 512);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '$';
      charArray0[1] = 'y';
      charArray0[2] = 'r';
      charArray0[3] = 'j';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.np = 675;
      jSONReaderScanner0.longValue();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      jSONReaderScanner0.setTimeZone(timeZone0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[0];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 76);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.skipWhitespace();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2824);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JSONScanner jSONScanner0 = new JSONScanner("NaN");
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertFalse(boolean0);
      
      jSONScanner0.close();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("m");
      jSONScanner0.scanDecimal('}');
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("PKuw7", 587);
      jSONScanner0.isEnabled(114);
      char char0 = '?';
      char char1 = 'q';
      char char2 = 'o';
      int int0 = 0;
      jSONScanner0.np = 0;
      jSONScanner0.skipWhitespace();
      jSONScanner0.np = 0;
      char char3 = 'v';
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('o');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match o - P, info : pos 0, json : PKuw7
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2785);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = Calendar.AM;
      SymbolTable symbolTable0 = new SymbolTable(1684);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("y:UfBG");
      Feature feature0 = Feature.DisableFieldSmartMatch;
      jSONReaderScanner0.config(feature0, true);
      int int0 = jSONReaderScanner0.scanType("y:UfBG");
      assertEquals(525277, jSONReaderScanner0.getFeatures());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5hI$-4m");
      jSONScanner0.putChar('*');
      jSONScanner0.scanDecimal('D');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "Ebnj7rO$Rwr$1{4!0";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Ebnj7rO$Rwr$1{4!0");
      char[] charArray0 = new char[4];
      charArray0[0] = 'd';
      charArray0[1] = 'j';
      charArray0[2] = 'i';
      charArray0[3] = 'N';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("Ebnj7rO$Rwr$1{4!0", (-2));
      jSONScanner0.scanBoolean('x');
      jSONReaderScanner0.putChar('d');
      jSONScanner0.scanFieldBoolean(charArray0);
      char[] charArray1 = new char[5];
      charArray1[0] = 'j';
      charArray1[1] = 'j';
      charArray1[2] = 'j';
      charArray1[3] = 'd';
      charArray1[4] = 'G';
      jSONReaderScanner0.scanFieldInt(charArray1);
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.scanIdent();
      int int0 = 684;
      jSONReaderScanner0.indexOf('i', 684);
      jSONScanner0.scanInt('N');
      jSONReaderScanner0.token();
      jSONScanner0.scanLong('j');
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('5', '5', 'X');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 22);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.scanIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[10];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 120);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '0';
      charArray0[1] = 'H';
      charArray0[2] = '0';
      charArray0[3] = '^';
      charArray0[4] = 'X';
      int int0 = 0;
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.tokenName();
      jSONScanner0.scanDate('w');
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare((String) null, (-1), charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("read string from reader error");
      jSONScanner0.scanDecimal('4');
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldString(charArray0);
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.ParserConfig", 1746);
      jSONReaderScanner0.setToken((-2377));
      assertEquals((-2377), jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2785);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanNumber();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = '$';
      charArray0[0] = '$';
      char char1 = 'y';
      char char2 = 'o';
      int int0 = 0;
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 31);
      jSONScanner0.skipWhitespace();
      char char3 = 'v';
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('o');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match o - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      charArray0[1] = 'y';
      charArray0[2] = 'j';
      charArray0[3] = 'r';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 14, 6);
      jSONReaderScanner0.longValue();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      TimeZone.getTimeZone((ZoneId) zoneOffset0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(213, "scan false error", 0, 0, 0, 97, (-1398), 397, (-1615), 675, 97, (-123008), 255);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal end month 397
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "PKuw7";
      int int0 = 587;
      JSONScanner jSONScanner0 = new JSONScanner("PKuw7", 587);
      jSONScanner0.isEnabled(114);
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 587);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charAt((-1466363380));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 121);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.skipWhitespace();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = '$';
      charArray0[0] = '$';
      char char1 = 'y';
      charArray0[1] = 'y';
      char char2 = 'r';
      charArray0[2] = 'r';
      char char3 = 'j';
      charArray0[3] = 'j';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFloat('$');
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-1), 44);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("]sv=}\t^");
      jSONScanner0.skipWhitespace();
      assertEquals(0, jSONScanner0.matchStat);
      
      float float0 = jSONScanner0.scanFloat('_');
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2824);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      jSONReaderScanner0.scanDouble('&');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "scan false error";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan false error", 0);
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = 'x';
      charArray0[2] = 'J';
      jSONReaderScanner0.scanDouble('>');
      charArray0[3] = 't';
      charArray0[4] = 'Z';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("LdlUu~;ln_3=", 553);
      jSONReaderScanner0.scanDouble('i');
      jSONReaderScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. L
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1700);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.scanInt('2');
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("M,`9-m]NKR7#5LBQ");
      jSONReaderScanner0.isRef();
      Object[] objectArray0 = new Object[9];
      char[] charArray0 = new char[8];
      jSONReaderScanner0.scanInt('+');
      charArray0[0] = ';';
      charArray0[1] = '9';
      charArray0[2] = '*';
      charArray0[3] = ':';
      charArray0[4] = '+';
      charArray0[5] = '0';
      charArray0[6] = 'd';
      charArray0[7] = ' ';
      jSONReaderScanner0.features = 93;
      jSONReaderScanner0.scanFieldFloat(charArray0);
      objectArray0[0] = (Object) jSONReaderScanner0;
      objectArray0[1] = (Object) "M,`9-m]NKR7#5LBQ";
      jSONReaderScanner0.charAt(112);
      objectArray0[2] = (Object) "M,`9-m]NKR7#5LBQ";
      objectArray0[3] = (Object) "M,`9-m]NKR7#5LBQ";
      objectArray0[4] = (Object) jSONReaderScanner0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) jSONReaderScanner0;
      objectArray0[7] = (Object) "M,`9-m]NKR7#5LBQ";
      objectArray0[8] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("M,`9-m]NKR7#5LBQ", objectArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. M
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ogz<-@", 1326);
      jSONReaderScanner0.scanInt('6');
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 512);
      int int0 = Calendar.LONG_STANDALONE;
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = '@';
      charArray0[0] = '@';
      char char1 = '{';
      charArray0[1] = '{';
      charArray0[2] = 'p';
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.close();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanBoolean('@');
      jSONReaderScanner0.next();
      char[] charArray1 = new char[7];
      charArray1[0] = '{';
      charArray1[1] = '{';
      charArray1[2] = '{';
      Class<Feature> class0 = Feature.class;
      SymbolTable symbolTable0 = new SymbolTable(43);
      int int1 = 0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan false error", 0);
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      jSONReaderScanner0.scanFloat(' ');
      charArray0[1] = 'x';
      charArray0[2] = 'J';
      charArray0[3] = 't';
      charArray0[4] = 'Z';
      charArray0[5] = 'J';
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.stringDefaultValue();
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse new");
      jSONScanner0.nextToken(15);
      assertEquals(1, jSONScanner0.token());
      
      jSONScanner0.pos();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("M,`9-m]NKR7#5LBQ");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"4yC;");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(2046);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 76);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.stringVal();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.util.concurrent.atomic.LongAdder");
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      jSONScanner0.scanStringArray(set0, '[');
      jSONScanner0.resetStringPosition();
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan false error", 0);
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = 'x';
      charArray0[2] = 'J';
      charArray0[3] = 'w';
      charArray0[4] = 'Z';
      charArray0[5] = 'J';
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.stringDefaultValue();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      jSONReaderScanner0.scanStringArray(set0, 'x');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 2824;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2824);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      jSONReaderScanner0.setLocale((Locale) null);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 512);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2824);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2824);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.isEnabled(120, 92);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 76);
      char char0 = 'F';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 519);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanFieldString(charArray0);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2824);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.isEnabled(2824, 2824);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 512);
      jSONReaderScanner0.scanFieldLong(charArray0);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 512);
      jSONReaderScanner0.next();
      int int0 = Calendar.LONG_STANDALONE;
      jSONReaderScanner0.scanFieldDouble(charArray0);
      int int1 = jSONReaderScanner0.pos();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"");
      SymbolTable symbolTable0 = new SymbolTable(103);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 512);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char[] charArray0 = new char[6];
      int int0 = 76;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 76);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField(charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 120);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.skipWhitespace();
      int int0 = jSONReaderScanner0.scanType(">Odlz&_UAdAdv[");
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("OEjH?L6w@M");
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 19);
      char[] charArray1 = new char[4];
      charArray1[0] = 'q';
      charArray1[1] = 'c';
      charArray1[3] = '1';
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray1, class0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("JvLl#`ITg");
      jSONReaderScanner1.scanFieldInt(charArray0);
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2824);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      jSONReaderScanner0.sp = 24;
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("3");
      jSONScanner0.nextToken(772);
      jSONScanner0.scanFieldString(charArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("cO[6D]Q", 1617);
      jSONScanner0.nextToken(4419);
      assertEquals('O', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("m");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanType("m");
      char char0 = jSONScanner0.getCurrent();
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@");
      BigDecimal bigDecimal0 = new BigDecimal(0);
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertFalse(boolean0);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONScanner jSONScanner0 = new JSONScanner("3");
      jSONScanner0.scanDecimal('u');
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertNull(string0);
      
      jSONScanner0.getLocale();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{E");
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = ']';
      charArray0[2] = ']';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4);
      jSONReaderScanner0.isEnabled(0, 34);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONScanner0.bytesValue();
      assertEquals(0, jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner("m");
      SymbolTable symbolTable0 = new SymbolTable(39);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      jSONScanner0.scanDecimal('u');
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertNull(string0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("pq", (-2412));
      SymbolTable symbolTable0 = new SymbolTable(3600);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'B';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanBoolean('n');
      int int0 = 2291;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 2710, 2291);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("oUHz@}\"L]R[");
      JSONScanner jSONScanner1 = new JSONScanner("java.util.concurrent.atomic.LongAdder");
      jSONScanner1.scanDecimal('~');
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      jSONScanner1.nextToken(112);
      charArray0[1] = '~';
      charArray0[2] = '~';
      jSONScanner1.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner1.nextTokenWithColon(112);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - a, info : pos 1, json : java.util.concurrent.atomic.LongAdder
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined", (-2699));
      SymbolTable symbolTable0 = new SymbolTable(69);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.pos = (-2699);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 45);
      jSONReaderScanner0.scanDate('o');
      jSONReaderScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      char[] charArray0 = new char[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("AI", 76);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONLexerBase.isWhitespace('S');
      jSONReaderScanner0.scanDate('5');
      assertEquals(76, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@ qf>!IUp:4");
      jSONReaderScanner0.scanDate('%');
      jSONReaderScanner0.eofPos = 1326;
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2WvM$7/)kf|");
      SymbolTable symbolTable0 = new SymbolTable(512);
      jSONScanner0.scanSymbol(symbolTable0, '7');
      jSONScanner0.scanDecimal('7');
      int int0 = jSONScanner0.intValue();
      assertEquals('/', jSONScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Ebnj7rO");
      jSONScanner0.close();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ebnj7rO");
      SymbolTable symbolTable0 = new SymbolTable(2753);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'K');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'g';
      charArray0[1] = '{';
      charArray0[2] = 'o';
      charArray0[3] = 'g';
      charArray0[4] = 'W';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 24, 2);
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.setTimeZone(timeZone0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 76);
      jSONReaderScanner0.eofPos = 76;
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.getCalendar();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("error parse true", 512);
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.nextIdent();
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(512, charArray0, 1975, 512);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(">uH 6rU)~ ");
      jSONReaderScanner0.isBlankInput();
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals(0, int0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[4];
      charArray1[1] = 'f';
      charArray1[2] = '{';
      charArray1[3] = '#';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, 512);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken((-569));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 58);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 91);
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner1.scanFieldDecimal(charArray0);
      jSONReaderScanner0.scanUUID(')');
      int int0 = jSONReaderScanner1.scanType("pUO");
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2785);
      jSONReaderScanner0.ch = '`';
      Locale locale0 = Locale.GERMANY;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      jSONReaderScanner0.locale = locale0;
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.scanLong('i');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 48);
      jSONReaderScanner0.bytesValue();
      long long0 = jSONReaderScanner0.scanLong('d');
      assertEquals(0L, long0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(48, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed single-quote string");
      Class<Object> class0 = Object.class;
      jSONScanner0.scanEnum(class0, (SymbolTable) null, 'F');
      jSONScanner0.nextToken((-2730));
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ')';
      charArray0[1] = '<';
      charArray0[2] = 'b';
      charArray0[3] = 's';
      charArray0[4] = 'S';
      charArray0[5] = 'Y';
      charArray0[6] = '{';
      charArray0[7] = 'd';
      charArray0[8] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 22, (-2919));
      SymbolTable symbolTable0 = new SymbolTable(40);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '{');
      jSONReaderScanner0.nextToken();
      assertEquals(11, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = " - ";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" - ");
      char[] charArray0 = new char[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 1079;
      jSONReaderScanner0.nextToken(1079);
      charArray0[0] = '>';
      charArray0[1] = 'A';
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      jSONReaderScanner0.config(feature0, false);
      char char0 = 'E';
      int int1 = 2;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.scanDecimal('D');
      jSONScanner0.scanBoolean('(');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "q";
      JSONScanner jSONScanner0 = new JSONScanner("q");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(sp/r1W}:e.Bl");
      jSONReaderScanner0.nextToken();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = 'D';
      charArray0[4] = '`';
      charArray0[5] = 'D';
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.nextToken(2048);
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertNull(string0);
      
      int int0 = jSONScanner0.intValue();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed str");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      BigDecimal bigDecimal0 = new BigDecimal((-2));
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("3");
      JSONScanner jSONScanner1 = new JSONScanner("m");
      jSONScanner0.nextToken((-1177));
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner1.scanFieldUUID(charArray0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-130));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("F' l0/73:1TTT");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 256);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("F' l0/73:1TTT", 2287);
      jSONReaderScanner1.scanFieldFloat(charArray0);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner1.skipWhitespace();
      assertEquals((-1), jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanFloat('?');
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 121);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      SymbolTable symbolTable0 = new SymbolTable(6);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '8');
      jSONReaderScanner0.scanFieldDouble(charArray0);
      int int0 = jSONReaderScanner0.getFeatures();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(989, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("3");
      JSONScanner jSONScanner1 = new JSONScanner("m");
      jSONScanner0.nextToken((-1177));
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner1.scanFieldUUID(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3");
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@ Bf>!IUp:4", 1326);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      int int0 = jSONReaderScanner0.getFeatures();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(1326, int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.util.concurrent.atomic.LongAdder");
      JSONScanner jSONScanner1 = new JSONScanner("unclosed string : ");
      jSONScanner1.nextToken(0);
      jSONScanner1.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner1.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(":");
      JSONScanner jSONScanner1 = new JSONScanner("m");
      jSONScanner0.nextToken((-1177));
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner1.scanFieldUUID(charArray0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-130));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]W?l}Et(u7|", (-442));
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextToken(772);
      JSONScanner jSONScanner1 = new JSONScanner("nA*L_B:n_YX%");
      SymbolTable symbolTable0 = new SymbolTable(10);
      char[] charArray0 = new char[1];
      charArray0[0] = '6';
      jSONScanner1.scanFieldSymbol(charArray0);
      jSONScanner1.scanSymbolWithSeperator(symbolTable0, '\"');
      assertEquals((-1), jSONScanner1.matchStat);
      
      jSONScanner1.scanDouble('6');
      assertEquals(989, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 2661);
      SymbolTable symbolTable0 = new SymbolTable(2661);
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      jSONScanner0.scanEnum(class0, symbolTable0, ')');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet");
      jSONReaderScanner0.features = 0;
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-3417), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2785);
      jSONReaderScanner0.scanUUID('Y');
      char[] charArray1 = new char[7];
      charArray1[0] = 'Y';
      charArray1[1] = 'Y';
      charArray1[2] = '%';
      charArray1[3] = 'Y';
      charArray1[4] = 'Y';
      charArray1[5] = 'Y';
      charArray1[6] = 'Y';
      SymbolTable symbolTable0 = new SymbolTable(826);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray1, 2785, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanString('I');
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextToken(772);
      JSONScanner jSONScanner1 = new JSONScanner("nA*L_B:n_YX%", 772);
      SymbolTable symbolTable0 = new SymbolTable(10);
      jSONScanner0.scanDecimal('6');
      jSONScanner1.scanString('b');
      jSONScanner0.scanBoolean('u');
      jSONScanner0.next();
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("q");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(sp/r1W}:e.Bl");
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[6];
      charArray0[2] = '`';
      charArray0[1] = '`';
      jSONScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, 'O');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SymbolTable symbolTable0 = new SymbolTable(5);
      JSONScanner jSONScanner0 = new JSONScanner("$ref", 83);
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      charArray0[1] = '~';
      charArray0[2] = 'M';
      charArray0[3] = 'p';
      charArray0[4] = 'B';
      charArray0[5] = '#';
      charArray0[6] = 'w';
      jSONScanner0.scanFieldStringArray(charArray0, 102, symbolTable0);
      SymbolTable symbolTable1 = new SymbolTable(127);
      jSONScanner0.scanSymbolUnQuoted(symbolTable1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONScanner0.scanDecimal('~');
      jSONScanner0.scanBoolean('B');
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      SymbolTable symbolTable0 = new SymbolTable(3023);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("m");
      jSONScanner0.nextToken(14);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("m");
      jSONScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("m", (-1));
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.util.concurrent.atomic.LongAdder");
      Locale locale0 = Locale.UK;
      Locale.setDefault(locale0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      locale0.getUnicodeLocaleKeys();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("pQ", 2287);
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.scanFloat('e');
      jSONScanner0.scanFieldLong(charArray0);
      int int0 = jSONReaderScanner0.getFeatures();
      assertEquals(2287, int0);
      
      jSONReaderScanner0.scanNumber();
      long long0 = jSONReaderScanner0.scanLong('e');
      assertEquals(0L, long0);
      assertEquals('p', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("OEjH?L6w@M");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("ILLyT!v");
      jSONReaderScanner1.scanFieldDate(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("ILLyT!v", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 512);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("error");
      jSONReaderScanner1.eofPos = 512;
      jSONReaderScanner1.scanFieldDecimal(charArray0);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.isRef();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M", 510);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("IfIn7:`oF#`iz!QW>", 1508);
      char[] charArray0 = new char[3];
      charArray0[0] = 'X';
      charArray0[1] = 'L';
      charArray0[2] = '?';
      String string0 = JSONLexerBase.readString(charArray0, 0);
      assertEquals("", string0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 1691, 123);
      char[] charArray1 = new char[9];
      charArray1[0] = 'L';
      charArray1[1] = '?';
      charArray1[2] = 'L';
      charArray1[3] = 'X';
      charArray1[4] = 'X';
      charArray1[5] = '?';
      charArray1[6] = 'X';
      charArray1[7] = '?';
      charArray1[8] = '?';
      boolean boolean0 = jSONReaderScanner1.matchField(charArray1);
      assertEquals(123, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1.6");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      jSONScanner0.scanStringArray(list0, ']');
      jSONScanner0.nextToken(102);
      jSONScanner0.lexError("1.6", (Object[]) null);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '6';
      charArray0[1] = 'o';
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.compatibleWithJavaBean");
      jSONScanner0.scanFieldString(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.compatibleWithJavaBean", (-2));
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.isEnabled(14, 14);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - c, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Ebnj7rO");
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      jSONScanner0.charArrayCompare(charArray0);
      jSONScanner0.scanNumber();
      assertEquals('b', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("OEjH?L6w@M");
      JSONScanner jSONScanner0 = new JSONScanner("OEjH?L6w@M", 0);
      jSONScanner0.close();
      jSONScanner0.next();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("java.awt.Font", 0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("{z\"3lj0=Hl");
      jSONReaderScanner2.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloatArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", (-801));
      jSONReaderScanner0.scanFieldFloat(charArray0);
      char[] charArray1 = new char[6];
      charArray1[0] = 'N';
      charArray1[2] = 'k';
      charArray1[3] = 'e';
      charArray1[4] = '0';
      jSONReaderScanner0.matchField(charArray1);
      boolean boolean0 = true;
      jSONReaderScanner0.next();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.longValue();
      jSONScanner0.hasSpecial = false;
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", (-801));
      jSONReaderScanner0.scanFieldFloat(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.nextToken(15);
      char[] charArray1 = new char[6];
      charArray1[0] = 'a';
      charArray1[1] = 'E';
      charArray1[2] = '';
      charArray1[3] = 'u';
      charArray1[4] = '^';
      charArray1[5] = '&';
      jSONScanner0.scanFieldString(charArray1);
      int int0 = jSONScanner0.intValue();
      assertEquals(8, jSONScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.nextToken(120);
      int int0 = jSONScanner0.intValue();
      assertEquals(8, jSONScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'=;X");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse false");
      char[] charArray0 = new char[6];
      jSONScanner0.scanNumber();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "error parse false");
      charArray0[0] = '-';
      charArray0[1] = 'S';
      jSONScanner0.scanFieldFloat(charArray0);
      charArray0[2] = 'R';
      charArray0[3] = ';';
      charArray0[4] = '-';
      jSONScanner0.nextToken(16);
      jSONScanner0.matchField2(charArray0);
      charArray0[5] = 'H';
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.nextToken(2997);
      jSONScanner0.bytesValue();
      // Undeclared exception!
      try { 
        jSONScanner0.subString(110, 110);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse null or new");
      jSONScanner0.nextToken(16);
      assertEquals('r', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n6");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(4147);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[6];
      String string0 = "n6";
      JSONScanner jSONScanner0 = new JSONScanner("n6", 47);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      charArray0[1] = 'J';
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("iAARk'!qCPa&K7utuQ", 102);
      jSONReaderScanner0.next();
      jSONReaderScanner0.scanSymbol((SymbolTable) null);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse false");
      char[] charArray0 = new char[6];
      jSONScanner0.scanNumber();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "error parse false");
      charArray0[0] = '-';
      charArray0[1] = 'S';
      jSONScanner0.scanFieldFloat(charArray0);
      charArray0[2] = 'R';
      jSONScanner0.scanUUID('!');
      assertEquals(3, jSONScanner0.token());
      
      JSONScanner jSONScanner1 = new JSONScanner("f7aMk<bd", (-1406));
      jSONScanner1.scanBoolean('}');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("o", 259);
      jSONReaderScanner0.bytesValue();
      assertEquals(259, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan false error");
      JSONScanner jSONScanner1 = new JSONScanner("scan false error", (-441));
      jSONScanner1.nextToken(5);
      char[] charArray0 = new char[5];
      charArray0[0] = ':';
      charArray0[1] = '_';
      charArray0[2] = 'm';
      charArray0[3] = 'f';
      charArray0[4] = 'z';
      jSONScanner1.scanFieldString(charArray0);
      jSONScanner1.scanFieldUUID(charArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan false error");
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.isEOF();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 18);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("error");
      jSONReaderScanner1.scanFieldDecimal(charArray0);
      jSONReaderScanner0.nextIdent();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner1.isRef();
      assertEquals((-2), jSONReaderScanner1.matchStat());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONScanner jSONScanner1 = new JSONScanner(".39/");
      jSONScanner1.nextToken(0);
      assertEquals('3', jSONScanner1.getCurrent());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1NThKlf!c3Xp)9c", 13);
      jSONReaderScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("OrderedField");
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("");
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = 'x';
      charArray0[2] = 'w';
      charArray0[3] = 'l';
      charArray0[4] = ')';
      charArray0[5] = 'Y';
      charArray0[6] = '\'';
      charArray0[7] = '=';
      charArray0[8] = '\'';
      jSONReaderScanner2.scanFieldDecimal(charArray0);
      jSONReaderScanner2.nextIdent();
      jSONReaderScanner1.isRef();
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("iW0");
      jSONScanner0.nextToken(17);
      char[] charArray0 = new char[8];
      charArray0[0] = '.';
      charArray0[1] = 'G';
      charArray0[2] = '=';
      charArray0[3] = 'm';
      charArray0[4] = 'p';
      charArray0[5] = ',';
      charArray0[6] = '$';
      charArray0[7] = 'z';
      jSONScanner0.charArrayCompare(charArray0);
      assertEquals('W', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 512);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONReaderScanner0.resetStringPosition();
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.nextToken(114);
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.intValue();
      jSONScanner0.isEnabled((-214748364));
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ILLyT!v");
      jSONReaderScanner0.scanFieldDate(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.nextToken((-1));
      jSONReaderScanner0.scanType("Y");
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@", 2785);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.matchField(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("@");
      jSONScanner0.nextToken(7);
      jSONScanner0.scanFieldString(charArray0);
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-9`4+.");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONScanner jSONScanner1 = new JSONScanner("fastjson", 1);
      // Undeclared exception!
      try { 
        jSONScanner1.nextToken(2048);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanISO8601DateIfMatch(true);
      jSONScanner0.scanDecimal('E');
      char char0 = jSONScanner0.getCurrent();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('n', char0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.nextToken(13);
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.charArrayCompare(charArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("n6", 121);
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = 'S';
      charArray0[2] = 'q';
      charArray0[3] = '(';
      jSONReaderScanner0.scanDecimal('V');
      charArray0[4] = 'B';
      charArray0[5] = 'e';
      charArray0[6] = '_';
      charArray0[7] = '*';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      boolean boolean0 = JSONScanner.checkDate('h', '8', 'h', 'B', '8', '*', (-2), 125);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      System.setCurrentTimeMillis((-59570L));
      StringReader stringReader0 = new StringReader("treeset");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(lineNumberReader0);
      boolean boolean0 = jSONReaderScanner0.scanBoolean(':');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanDecimal('1');
      SymbolTable symbolTable0 = new SymbolTable(4);
      String string0 = jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      assertNull(string0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("25 GurTj^,1%gX");
      jSONScanner0.nextToken((-796));
      int int0 = jSONScanner0.intValue();
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(25, int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3");
      JSONScanner jSONScanner0 = new JSONScanner(".");
      char[] charArray0 = new char[6];
      charArray0[0] = 'v';
      charArray0[1] = ' ';
      charArray0[2] = '#';
      charArray0[3] = '[';
      charArray0[4] = '\\';
      charArray0[5] = 'A';
      jSONScanner0.matchField(charArray0);
      char[] charArray1 = new char[9];
      jSONReaderScanner0.matchField(charArray1);
      charArray1[0] = 'U';
      charArray1[1] = 'e';
      charArray1[2] = 'a';
      charArray1[3] = '2';
      charArray1[4] = '(';
      jSONScanner0.scanNumber();
      charArray1[5] = '-';
      charArray1[6] = 'g';
      charArray1[7] = 'S';
      charArray1[8] = 'M';
      jSONScanner0.scanFieldString(charArray1);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      
      jSONReaderScanner0.resetStringPosition();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("pq", 18);
      jSONScanner0.nextToken(18);
      char[] charArray0 = new char[9];
      charArray0[1] = '=';
      charArray0[2] = 'f';
      charArray0[3] = 'h';
      charArray0[4] = 'X';
      charArray0[5] = 'r';
      charArray0[6] = 'u';
      charArray0[7] = 'a';
      charArray0[8] = '4';
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 693, 693);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5hxIl-Um");
      jSONScanner0.nextIdent();
      int int0 = Calendar.SECOND;
      jSONScanner0.floatValue();
      jSONScanner0.isEOF();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5hI$-4m");
      jSONScanner0.resetStringPosition();
      jSONScanner0.nextToken(0);
      jSONScanner0.floatValue();
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(1264, 1264);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "i/kNWwIk");
      JSONScanner jSONScanner0 = new JSONScanner("java.time.", 19);
      jSONScanner0.nextToken(19);
      long long0 = jSONScanner0.longValue();
      assertEquals('a', jSONScanner0.getCurrent());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-9`4+.");
      jSONScanner0.nextToken(84);
      assertEquals(2, jSONScanner0.token());
      
      long long0 = jSONScanner0.longValue();
      assertEquals((-9L), long0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&");
      jSONScanner0.nextToken(368);
      SymbolTable symbolTable0 = new SymbolTable(53);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u001Apos 0, json : &
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-9`4+.");
      JSONScanner jSONScanner1 = new JSONScanner("jq{_@ -y@Wcqb1!");
      jSONScanner1.nextToken(0);
      // Undeclared exception!
      try { 
        jSONScanner0.longValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.scanInt('+');
      jSONScanner0.ch = '+';
      jSONScanner0.nextToken(2048);
      long long0 = jSONScanner0.longValue();
      assertEquals('r', jSONScanner0.getCurrent());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "i/kNWwIk");
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.alibaba.fastjson.JSONObject");
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      jSONScanner0.nextToken(19);
      JSONScanner jSONScanner1 = new JSONScanner("q");
      jSONScanner1.intValue();
      boolean boolean1 = JSONLexerBase.isWhitespace('!');
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5hxIl-Um");
      int int0 = Calendar.SECOND;
      float float0 = jSONScanner0.scanFloat('\u0018');
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(5.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-9`4+.");
      jSONScanner0.scanUUID(' ');
      char[] charArray0 = new char[5];
      float float0 = jSONScanner0.scanFloat(' ');
      assertEquals((-9.0F), float0, 0.01F);
      
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = ' ';
      charArray0[3] = ' ';
      charArray0[4] = ' ';
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertNull(string0);
      
      jSONScanner0.charArrayCompare(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("]");
      jSONScanner0.nextToken(11);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-9`4+.");
      JSONScanner jSONScanner1 = new JSONScanner("-9`4+.", 0);
      // Undeclared exception!
      try { 
        jSONScanner1.intValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-9`4+.");
      // Undeclared exception!
      try { 
        jSONScanner0.intValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\u0000");
      JSONScanner jSONScanner1 = new JSONScanner("xn\";13io9{N", (-2641));
      // Undeclared exception!
      try { 
        jSONScanner1.nextToken((-3908));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. n
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&");
      jSONScanner0.nextToken(20);
      JSONScanner jSONScanner1 = new JSONScanner("m_");
      long long0 = jSONScanner0.longValue();
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5");
      JSONScanner jSONScanner1 = new JSONScanner("unclosed");
      jSONScanner1.nextToken(8);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      BigDecimal bigDecimal0 = new BigDecimal((int) 'X');
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.scanDecimal('X');
      jSONScanner0.nextToken(99999);
      assertEquals(7, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONScanner0.nextToken(0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1NThKlf!c3Xp)9c", 13);
      jSONReaderScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("OrderedField");
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("");
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      charArray0[1] = 'x';
      charArray0[2] = 'w';
      charArray0[3] = 'l';
      charArray0[4] = ')';
      charArray0[5] = 'Y';
      charArray0[6] = '\'';
      charArray0[7] = '=';
      charArray0[8] = '\'';
      jSONReaderScanner2.scanFieldDecimal(charArray0);
      jSONReaderScanner2.nextIdent();
      assertEquals((-2), jSONReaderScanner2.matchStat);
      
      jSONReaderScanner1.isRef();
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'=;X");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5hI$-4m", 455);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5hI$-4m");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5hI$-4m");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6xHs8U-J=^B");
      jSONReaderScanner0.scanLong('V');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONScanner jSONScanner0 = new JSONScanner("5hI$-4m");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5hI$-4m");
      jSONReaderScanner0.bytesValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanLong(',');
      jSONReaderScanner0.skipWhitespace();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\u0000");
      jSONScanner0.nextToken(9);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanUUID(' ');
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not support type ", 14);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("+]]", 2);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "not support type ");
      jSONReaderScanner1.setTimeZone(simpleTimeZone0);
      jSONReaderScanner1.bytesValue();
      long long0 = jSONReaderScanner0.scanLong('X');
      assertEquals(0L, long0);
      assertEquals(14, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)84;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONScanner jSONScanner0 = new JSONScanner("5hxIl-Um");
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5hI$-4m");
      jSONScanner0.nextToken(0);
      assertEquals(2, jSONScanner0.token());
      
      jSONScanner0.decimalValue(false);
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      Class<Feature> class0 = Feature.class;
      SymbolTable symbolTable0 = new SymbolTable(46);
      jSONScanner0.scanEnum(class0, symbolTable0, 'W');
      jSONScanner0.nextToken(4);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\u0000");
      jSONScanner0.nextToken(4);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nul");
      jSONScanner0.scanDecimal('D');
      SymbolTable symbolTable0 = new SymbolTable(2332);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(2332, 2332, 2332, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.util.O3tionaLong");
      char[] charArray0 = new char[9];
      jSONScanner0.nextIdent();
      charArray0[0] = '';
      charArray0[1] = 'W';
      charArray0[2] = 'N';
      charArray0[3] = 'o';
      charArray0[4] = '`';
      charArray0[5] = 'D';
      charArray0[6] = 'a';
      charArray0[7] = ':';
      charArray0[8] = 'v';
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.integerValue();
      assertEquals('.', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5hI$-4m");
      jSONScanner0.nextToken(0);
      jSONScanner0.integerValue();
      assertEquals('h', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.util.O3tionaLong");
      char[] charArray0 = new char[9];
      jSONScanner0.nextIdent();
      charArray0[1] = 'W';
      charArray0[2] = 'N';
      charArray0[3] = 'o';
      charArray0[4] = '`';
      charArray0[5] = 'D';
      charArray0[6] = 'a';
      charArray0[7] = 'N';
      charArray0[8] = 'v';
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.integerValue();
      assertEquals('.', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" LLyT!%");
      jSONScanner0.skipWhitespace();
      assertEquals('L', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("b^u3k{-Z");
      jSONScanner0.scanType("b^u3k{-Z");
      jSONScanner0.nextToken(12);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[W", 46);
      jSONScanner0.nextToken(46);
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char char0 = ',';
      jSONScanner0.scanFloat(',');
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - n, info : pos 0, json : null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertEquals(0, jSONScanner0.matchStat);
      
      float float0 = jSONScanner0.scanFloat('b');
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      jSONScanner0.scanStringArray(set0, '/');
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('W');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nclosed str");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONReaderScanner0.scanStringArray(linkedHashSet0, '!');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-1688), "nclosed str", (-1480), 2492, (-1688), (-5130), (-1405), 13, (-322), 97, (-1405), (-5130), (-451));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -1480
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" LLyT!%");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONScanner jSONScanner0 = new JSONScanner(" LLyT!%", (-189));
      assertEquals(0, jSONScanner0.matchStat);
      
      int int0 = jSONScanner0.scanType(" LLyT!%");
      assertEquals((-2), int0);
      
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertFalse(boolean0);
      assertEquals((-189), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5hxIl-Um");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5hxIl-Um", 0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'z';
      charArray0[2] = 'D';
      charArray0[3] = 'b';
      charArray0[4] = '%';
      charArray0[5] = 't';
      charArray0[6] = '\\';
      charArray0[7] = 'h';
      jSONReaderScanner0.scanDouble('h');
      charArray0[8] = '0';
      jSONReaderScanner0.scanFieldDate(charArray0);
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5hxIl-U,m");
      int int0 = Calendar.LONG;
      jSONScanner0.nextToken(2);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-9`4+.");
      jSONScanner0.nextToken(36);
      jSONScanner0.integerValue();
      jSONScanner0.integerValue();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.nextToken(4);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("S");
      int int0 = Calendar.LONG;
      jSONScanner0.nextToken(2);
      jSONScanner0.stringDefaultValue();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nbA l");
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      jSONScanner0.config(feature0, true);
      jSONScanner0.scanFloat('\u0018');
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nu%l");
      jSONScanner0.scanFloat('b');
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("S");
      int int0 = Calendar.LONG;
      jSONScanner0.nextToken(2);
      jSONScanner0.nextToken(2);
      jSONScanner0.stringDefaultValue();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5hID-4m");
      jSONScanner0.scanIdent();
      jSONScanner0.isRef();
      jSONScanner0.scanDecimal('E');
      jSONScanner0.scanDouble('\\');
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6xH8U-J=:B");
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = '&';
      charArray0[2] = 'T';
      charArray0[3] = ':';
      charArray0[4] = 'W';
      jSONReaderScanner0.scanFieldDate(charArray0);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray1);
      jSONReaderScanner0.scanFieldBigInteger(charArray1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6xH8U-J=:B");
      char[] charArray0 = new char[9];
      charArray0[0] = '~';
      charArray0[1] = '/';
      charArray0[2] = 'I';
      charArray0[3] = '(';
      charArray0[4] = 'r';
      charArray0[5] = 'x';
      charArray0[6] = ',';
      charArray0[7] = 'Z';
      charArray0[8] = 'J';
      jSONReaderScanner0.scanFieldLong(charArray0);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray1);
      jSONReaderScanner0.scanInt('R');
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      jSONScanner0.nextToken(3);
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"4yC;");
      jSONScanner0.scanFloat('4');
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nbA ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nbA ");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONScanner0.scanUUID('i');
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6xHs8U-J=^B");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jSONScanner0;
      objectArray0[1] = (Object) jSONScanner0;
      objectArray0[2] = (Object) jSONScanner0;
      objectArray0[3] = (Object) "6xHs8U-J=^B";
      objectArray0[4] = (Object) "6xHs8U-J=^B";
      objectArray0[5] = (Object) jSONScanner0;
      objectArray0[6] = (Object) jSONScanner0;
      objectArray0[7] = (Object) "6xHs8U-J=^B";
      jSONScanner0.lexError("6xHs8U-J=^B", objectArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 6pos 0, json : 6xHs8U-J=^B
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-9-i+.");
      jSONScanner0.matchStat = (-469);
      jSONScanner0.scanFloat('7');
      jSONScanner0.info();
  }
}
