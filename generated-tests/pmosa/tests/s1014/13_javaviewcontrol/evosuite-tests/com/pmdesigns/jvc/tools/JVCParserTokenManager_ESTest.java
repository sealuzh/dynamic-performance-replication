/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 04:43:17 GMT 2018
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.JVCParserTokenManager;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import com.pmdesigns.jvc.tools.Token;
import java.io.ByteArrayInputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JVCParserTokenManager_ESTest extends JVCParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null);
      jVCParserTokenManager0.SwitchTo(0);
      jVCParserTokenManager0.debugStream = null;
      jVCParserTokenManager0.ReInit((SimpleCharStream) null);
      jVCParserTokenManager0.setDebugStream((PrintStream) null);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.jjFillToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null, 0);
      jVCParserTokenManager0.ReInit((SimpleCharStream) null);
      jVCParserTokenManager0.curLexState = 0;
      jVCParserTokenManager0.input_stream = null;
      jVCParserTokenManager0.ReInit((SimpleCharStream) null, 2);
      jVCParserTokenManager0.ReInit((SimpleCharStream) null, 0);
      jVCParserTokenManager0.SwitchTo(0);
      jVCParserTokenManager0.ReInit((SimpleCharStream) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      simpleCharStream0.maxNextCharInd = 4091;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.curLexState = (-1);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals("", token0.toString());
      assertEquals(1, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(1, token0.endColumn);
      
      jVCParserTokenManager0.SwitchTo(1);
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, token1.beginLine);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals("\u0000", token1.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      simpleCharStream0.maxNextCharInd = 4096;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals("\u0000", token0.toString());
      assertEquals(16, token0.kind);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 1);
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, token1.beginLine);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      simpleCharStream0.maxNextCharInd = 4096;
      char[] charArray0 = new char[7];
      charArray0[1] = 'W';
      charArray0[2] = '&';
      charArray0[3] = 'Y';
      charArray0[5] = 's';
      charArray0[6] = 'W';
      simpleCharStream0.buffer = charArray0;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token0.kind);
      assertEquals(1, token0.endColumn);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 1);
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals("W", token1.toString());
      assertEquals(1, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      simpleCharStream0.maxNextCharInd = 4096;
      char[] charArray0 = new char[7];
      charArray0[0] = 'J';
      charArray0[1] = 'W';
      charArray0[2] = '&';
      charArray0[3] = 'Y';
      charArray0[4] = 'z';
      charArray0[5] = 's';
      charArray0[6] = ',';
      simpleCharStream0.buffer = charArray0;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, token0.endLine);
      assertEquals(16, token0.kind);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 1);
      jVCParserTokenManager0.getNextToken();
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.beginColumn);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      simpleCharStream0.maxNextCharInd = 4096;
      char[] charArray0 = new char[7];
      charArray0[1] = 'W';
      charArray0[3] = '&';
      charArray0[0] = 's';
      charArray0[6] = '&';
      simpleCharStream0.buffer = charArray0;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.SwitchTo(1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      simpleCharStream0.maxNextCharInd = 4096;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token0.kind);
      assertEquals("\u0000", token0.toString());
      assertEquals(1, token0.endColumn);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 0);
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertEquals(1, token1.endLine);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals("", token0.toString());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)85;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, 24, (-62), (byte)85);
      jVCParserTokenManager0.ReInit(simpleCharStream1, 0);
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token1.kind);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals(24, token2.beginLine);
      assertEquals(24, token2.endLine);
      assertEquals((-61), token2.beginColumn);
      assertEquals("U", token2.toString());
      assertEquals((-61), token2.endColumn);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, token0.beginLine);
      assertEquals("", token0.toString());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[3] = (byte) (-102);
      byteArray0[2] = (byte)16;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, (byte)0, (byte) (-102), (byte)6);
      jVCParserTokenManager0.ReInit(simpleCharStream1, 0);
      jVCParserTokenManager0.getNextToken();
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token1.kind);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals((-100), token2.beginColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.endLine);
      assertEquals((-100), token2.endColumn);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte) (-9);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, 18, 10, (byte)6);
      jVCParserTokenManager0.ReInit(simpleCharStream1, 0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, 16);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 16. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      simpleCharStream0.maxNextCharInd = 4091;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte) (-9);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, (-1960), (byte) (-9), 34);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.ReInit(simpleCharStream1, (int) (byte)1);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream1, 22);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 22. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      simpleCharStream0.maxNextCharInd = 4096;
      char[] charArray0 = new char[7];
      charArray0[1] = 'W';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)16;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, 1302, (byte)122, 1302);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      jVCParserTokenManager0.getNextToken();
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token0.kind);
      assertEquals(1302, token0.beginLine);
      assertEquals(123, token0.endColumn);
      assertEquals(1302, token0.endLine);
      assertEquals("\u0010", token0.toString());
      assertEquals(123, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      simpleCharStream0.maxNextCharInd = 4096;
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-9);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, 32, 4, 9);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      jVCParserTokenManager0.ReInit(simpleCharStream1, 2);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      // Undeclared exception!
      try { 
        jVCParserTokenManager1.SwitchTo((-2159));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2159. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      simpleCharStream0.maxNextCharInd = 4096;
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-9);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, 32, 4, 9);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      jVCParserTokenManager0.ReInit(simpleCharStream1, 2);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, 32);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 32. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      simpleCharStream0.maxNextCharInd = 4096;
      char[] charArray0 = new char[7];
      simpleCharStream0.BeginToken();
      charArray0[1] = '\u0000';
      charArray0[3] = 'X';
      charArray0[5] = '\u0000';
      simpleCharStream0.buffer = charArray0;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token0.kind);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 2);
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertEquals(3, token1.beginColumn);
      assertEquals(16, token1.kind);
      assertEquals("\u0000", token1.toString());
      
      jVCParserTokenManager1.setDebugStream(jVCParserTokenManager0.debugStream);
      Token token2 = jVCParserTokenManager1.getNextToken();
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(4, token2.endColumn);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      simpleCharStream0.maxNextCharInd = 4096;
      char[] charArray0 = new char[7];
      simpleCharStream0.BeginToken();
      charArray0[1] = '\u0000';
      charArray0[2] = '&';
      charArray0[3] = 'e';
      charArray0[5] = '\u0000';
      charArray0[6] = '^';
      simpleCharStream0.buffer = charArray0;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token0.kind);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 2);
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertEquals(16, token1.kind);
      
      jVCParserTokenManager1.setDebugStream(jVCParserTokenManager0.debugStream);
      Token token2 = jVCParserTokenManager1.getNextToken();
      assertEquals(1, token2.endLine);
      assertEquals("e", token2.toString());
      assertEquals(4, token2.beginColumn);
      assertEquals(4, token2.endColumn);
      assertEquals(1, token2.beginLine);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)16;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)16;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, (byte)16, 4, 9);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token0.kind);
      
      jVCParserTokenManager0.ReInit(simpleCharStream1, 4);
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(5, token1.endColumn);
      
      jVCParserTokenManager0.setDebugStream(jVCParserTokenManager0.debugStream);
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token2.beginLine);
      assertEquals(6, token2.beginColumn);
      assertEquals(16, token2.kind);
      assertEquals(16, token2.endLine);
      assertEquals("\u0010", token2.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      simpleCharStream0.maxNextCharInd = 4092;
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-37);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, (byte)16, 4, 9);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1);
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager1.ReInit(simpleCharStream1, 4);
      jVCParserTokenManager1.getNextToken();
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream1);
      jVCParserTokenManager2.getNextToken();
      JVCParserTokenManager jVCParserTokenManager3 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager3.getNextToken();
      jVCParserTokenManager3.getNextToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(16);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 16. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      simpleCharStream0.maxNextCharInd = 4096;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte) (-119);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[[");
      byteArray0[7] = (byte) (-95);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, (byte) (-95), (-1019), 2020);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, (int) (byte)10);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 10. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      simpleCharStream0.maxNextCharInd = 4096;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, 1214, 1214, 126);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      jVCParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, (-2184));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2184. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }
}
