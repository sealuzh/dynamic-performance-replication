/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 12:08:47 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Map<Integer, Integer>>, HashMap<Object, Integer>, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Map<Integer, Integer>>, HashMap<Object, Integer>, String>();
      HashMap<Object, Map<Integer, Integer>> hashMap0 = new HashMap<Object, Map<Integer, Integer>>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      doubleKeyMap0.put(hashMap0, hashMap1, "");
      String string0 = doubleKeyMap0.put(hashMap0, hashMap1, "TTF3#.pf^$xsBI0^Lvu");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<HashMap<String, Map<Integer, Integer>>, Map<String, Integer>> hashMap0 = new HashMap<HashMap<String, Map<Integer, Integer>>, Map<String, Integer>>();
      HashMap<String, Map<Integer, Integer>> hashMap1 = new HashMap<String, Map<Integer, Integer>>();
      HashMap<String, Integer> hashMap2 = new HashMap<String, Integer>();
      hashMap0.put(hashMap1, hashMap2);
      DoubleKeyMap<HashMap<String, Map<Integer, Integer>>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Map<Integer, Integer>>, String, Integer>(hashMap0);
      Map<String, Integer> map0 = doubleKeyMap0.get(hashMap1);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, Integer, HashMap<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Integer, HashMap<Integer, Integer>>();
      DoubleKeyMap<HashMap<String, Object>, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, Object>, Object, Integer>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Integer integer0 = doubleKeyMap1.remove(hashMap0, (Object) doubleKeyMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(class0);
      String string0 = doubleKeyMap0.remove((String) null, "/},]kT");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>();
      Map<Object, Map<Integer, Map<Integer, Integer>>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, Map<Integer, Integer>> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Map<Integer, Integer>>(map0, class0);
      Integer integer0 = new Integer(1);
      Map<Integer, Integer> map1 = doubleKeyMap1.remove((Object) doubleKeyMap0, integer0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<String, Integer, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Integer, HashMap<Integer, Object>>();
      Map<Integer, HashMap<Integer, Object>> map0 = doubleKeyMap0.remove((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      Integer integer0 = new Integer((-1));
      HashMap<Object, Map<String, String>> hashMap0 = new HashMap<Object, Map<String, String>>();
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(hashMap0);
      Map<Integer, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, String, Object>(map0, class0);
      Object object0 = doubleKeyMap1.put(integer0, (String) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Object, Object>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Object, Integer>(class0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = new Object();
      Integer integer0 = new Integer((-1));
      Integer integer1 = doubleKeyMap0.put(hashMap0, object0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, Integer, HashMap<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Integer, HashMap<Integer, Integer>>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      Integer integer1 = doubleKeyMap1.put((Object) doubleKeyMap0, (Object) hashMap0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<String, Object>, Object, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Object, HashMap<Object, Object>>((Map<HashMap<String, Object>, Map<Object, HashMap<Object, Object>>>) null, class0);
      HashMap<Object, Object> hashMap0 = doubleKeyMap0.get((HashMap<String, Object>) null, (Object) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, Integer, HashMap<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Integer, HashMap<Integer, Integer>>();
      DoubleKeyMap<HashMap<String, Object>, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, Object>, Object, Integer>();
      Integer integer0 = doubleKeyMap1.get((HashMap<String, Object>) null, (Object) doubleKeyMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Object, Map<String, Integer>> hashMap0 = new HashMap<Object, Map<String, Integer>>();
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>(hashMap0);
      Object object0 = new Object();
      Integer integer0 = doubleKeyMap0.get(object0, "Pr~|#VB|rFKhj9[7/%");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Map> class0 = Map.class;
      HashMap<Object, Map<HashMap<String, Integer>, Object>> hashMap0 = new HashMap<Object, Map<HashMap<String, Integer>, Object>>();
      DoubleKeyMap<Object, HashMap<String, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, Integer>, Object>(hashMap0, class0);
      Map<HashMap<String, Integer>, Object> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, Integer, HashMap<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Integer, HashMap<Integer, Integer>>();
      DoubleKeyMap<Object, HashMap<String, String>, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<String, String>, Integer>();
      Map<HashMap<String, String>, Integer> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, Map<Integer, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Map<Integer, Integer>, Object>();
      Map<HashMap<String, Object>, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<String, Object>, String, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, Object>, String, Object>(map0, class0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((HashMap<String, Object>) null, "", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, Integer, HashMap<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Integer, HashMap<Integer, Integer>>();
      DoubleKeyMap<Object, HashMap<Object, Object>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Object, Object>, Object>();
      Map<HashMap<Object, Object>, Object> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Map<Integer, Integer>>, HashMap<Object, Integer>, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Map<Integer, Integer>>, HashMap<Object, Integer>, String>();
      HashMap<Object, Map<Integer, Integer>> hashMap0 = new HashMap<Object, Map<Integer, Integer>>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      doubleKeyMap0.put(hashMap0, hashMap1, "");
      String string0 = doubleKeyMap0.remove(hashMap0, (HashMap<Object, Integer>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Object, Map<Integer, Integer>, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Map<Integer, Integer>, Integer>();
      DoubleKeyMap<HashMap<Integer, Object>, String, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<Integer, Object>, String, Object>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      doubleKeyMap1.put(hashMap0, "us.codecraft.webmagic.utils.MultiKeyMapBase", (Object) doubleKeyMap0);
      Object object0 = doubleKeyMap1.get(hashMap0, "FWBQdUbes");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Map<Integer, Integer>>, HashMap<Object, Integer>, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Map<Integer, Integer>>, HashMap<Object, Integer>, String>();
      HashMap<Object, Map<Integer, Integer>> hashMap0 = new HashMap<Object, Map<Integer, Integer>>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      doubleKeyMap0.put(hashMap0, hashMap1, "");
      String string0 = doubleKeyMap0.remove(hashMap0, hashMap1);
      assertEquals("", string0);
  }
}
