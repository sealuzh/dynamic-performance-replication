/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 14:34:57 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader(").F@");
      StringReader stringReader1 = new StringReader(").F@");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)113;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)113, 1467, 1971);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(74, token0.kind);
      assertEquals("q", token0.toString());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("78R:KJh^yA;o");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 25, 31, 31);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(31);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 31. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("protected");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.inputStream = (Reader) stringReader0;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      javaCharStream0.FillBuff();
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(9, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("40+");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)24;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)24, (byte)24);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 24, column 25.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("void");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      javaParserTokenManager0.MoreLexicalActions();
      javaCharStream0.readChar();
      stringReader0.read();
      javaCharStream0.BeginToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      stringReader0.markSupported();
      javaParserTokenManager0.jjmatchedKind = 0;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-194));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -194. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)67;
      StringReader stringReader0 = new StringReader(",  dI >H>Zjo,N>");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 19, (byte)67, 578);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.readChar();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      assertEquals(73, javaCharStream0.getBeginColumn());
      assertEquals(73, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte) (-14);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2116, 85);
      StringReader stringReader0 = new StringReader("\"<=\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1737, (byte)67);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(70, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)67;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte) (-94);
      StringReader stringReader0 = new StringReader("Uz%%Fjy3Nt7rsSHa");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 63, (byte) (-94), (byte)86);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 1583);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1583. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 1482, 0, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("", token0.toString());
      assertEquals(0, token0.kind);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte) (-79);
      StringReader stringReader0 = new StringReader("-Bojw'I$X3YH6");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager2.jjFillToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(5, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cEv^i)c))jh(O%X=");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 25, 31, 2766);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-14);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0);
      StringReader stringReader0 = new StringReader("z!E\";PA");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (byte) (-14), (byte)77);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-1912));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1912. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1482);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 1482, 0, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C_YWuI&h9biSHqy");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.readChar();
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)67;
      byteArray0[5] = (byte)67;
      byteArray0[3] = (byte)86;
      StringReader stringReader0 = new StringReader("com.soops.CEN410.JMCA.JParsrTokenMgrError");
      StringReader stringReader1 = new StringReader(".NsVn\"28,");
      StringReader stringReader2 = new StringReader("");
      int int0 = (-3496);
      StringReader stringReader3 = new StringReader(".NsVn\"28,");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader3, (byte) (-14), 95);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(".");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"ze[");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)67, (byte)67, (byte)67);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"ze[");
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 67, column 71.  Encountered: <EOF> after : \"\\\"ze[\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("C-<4,{");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1687, 80, 1687);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager1.getNextToken();
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      
      javaParserTokenManager1.SkipLexicalActions(token0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(84, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1$+l7~KzK$c");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "1$+l7~KzK$c", 0, 0);
      char[] charArray0 = new char[0];
      charBuffer0.get(charArray0);
      charBuffer0.limit(0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.jjFillToken();
      javaCharStream0.bufcolumn = javaParserTokenManager0.jjnewLexState;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 66);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 66. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("40+");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 31, 25, 31);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)114;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)114, (byte)47, (-201));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("40+");
      mockPrintStream0.println(' ');
      PrintStream printStream0 = mockPrintStream0.format((Locale) null, "", (Object[]) javaParserTokenManager0.jjstrLiteralImages);
      javaParserTokenManager0.debugStream = printStream0;
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream1.bufpos);
      assertEquals("/=", token0.toString());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("![;RrJL\"C4SZ7,D #");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 594, 43, 1046);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.readChar();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(49, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QyU");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      StringReader stringReader1 = new StringReader("a");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager1.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C_YWuI&h9biSHqy");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.readChar();
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0, 1797, 3255, 41);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cEv^i)c))jh(O%X=");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 22, (-1), 251);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      byteArrayInputStream0.mark((-1));
      javaParserTokenManager1.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C_YWuI&h9biSHqy");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 5);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 5. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      StringReader stringReader0 = new StringReader("gVr3NBmY]`@Ezh_Ji'/");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-3101), (-3101));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager1.SkipLexicalActions(token0);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals("gVr3NBmY", token0.toString());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      StringReader stringReader0 = new StringReader("5De\"+uC7<6u<(");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 62, 28, 43);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      //  // Unstable assertion: assertEquals(2, javaCharStream0.bufpos);
      //  // Unstable assertion: assertEquals(30, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("rt&]");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1971, 77);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(105, token0.kind);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)67;
      StringReader stringReader0 = new StringReader(":c;#9");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 121, 43, (byte)67);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = new Token();
      javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(83, token1.kind);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("t^.Enx /evKyw&");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 124, 36);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("^", token0.toString());
      
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(6, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 596, 596, 596);
      javaCharStream0.prevCharIsLF = true;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParserTokenManager0.MoreLexicalActions();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5WVU?:`Rq/YS");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 46, (byte)88, 103);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.getNextToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      JavaCharStream javaCharStream1 = new JavaCharStream(sequenceInputStream0);
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream1);
      // Undeclared exception!
      try { 
        javaParserTokenManager3.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("--");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1971, 1971, 51);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 36);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 36. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)27;
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, (byte)60, 122, (byte)87);
      StringReader stringReader0 = new StringReader("throws");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-4095), (-322));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      assertEquals(5, javaCharStream1.bufpos);
      assertEquals((-322), javaCharStream1.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pu5(blic");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 5, 5, 30);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 3, (-1079));
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager2.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.MoreLexicalActions();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5WVU?:`Rq/YS");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 46, (byte)88, 103);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaCharStream0.readChar();
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
       //  fail("Expecting exception: Error");
       // Unstable assertion
      } catch(Error e) {
         //
         // Lexical error at line 46, column 94.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".h0_[+RnN?$<=tXfS\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 43, 37, 2356);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager1.setDebugStream((PrintStream) null);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-19);
      StringReader stringReader0 = new StringReader("assert");
      StringReader stringReader1 = new StringReader("r(");
      StringReader stringReader2 = new StringReader("assert");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, (byte) (-19), (byte)88);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wcMs\"8#P84(rRM@");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 32, 13);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, 583, (-195), 48);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.jjFillToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      assertEquals(0, javaCharStream2.bufpos);
      assertEquals(66, token0.kind);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".SP_5A#P?CK{[B");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Je*");
      StringReader stringReader1 = new StringReader("Je*");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (byte)67, (byte)67, (byte)67);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      Token token0 = new Token();
      javaParserTokenManager1.getNextToken();
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.kind);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      javaCharStream0.inBuf = 0;
      stringReader0.markSupported();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.nextCharInd = 0;
      stringReader0.reset();
      javaParserTokenManager0.jjround = 0;
      javaParserTokenManager0.jjmatchedKind = (-1);
      javaParserTokenManager0.ReInit(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      StringReader stringReader0 = new StringReader("(1q;Zx");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2810, (byte)87, 38);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      //  // Unstable assertion: assertEquals(1, javaCharStream0.bufpos);
      //  // Unstable assertion: assertEquals(89, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".h0_[+RnN?$<=tXfS\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 43, 43, 43);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token token0 = new Token();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(48, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1$+l7~KzK$c");
      StringReader stringReader1 = new StringReader("KZF&8k:e)Ge");
      StringReader stringReader2 = new StringReader("KZF&8k:e)Ge");
      StringReader stringReader3 = new StringReader("9X4.Q5?M0*QO%");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 0, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.ReInit((Reader) stringReader2, 0, 1153, 1153);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      token0.kind = 0;
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals("KZF", token0.toString());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'V';
      charArray0[1] = 'c';
      charArray0[2] = '}';
      charArray0[3] = 'F';
      charArray0[4] = '{';
      charArray0[5] = '_';
      charArray0[6] = 'h';
      javaCharStream0.buffer = charArray0;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)67;
      StringReader stringReader0 = new StringReader(" column ");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)67, 255, (byte)67);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.readChar();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("column");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      StringReader stringReader0 = new StringReader("HB(+KA x/");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 113, 68, 110);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.ReInit(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(71, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)87;
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.Token$GTToken");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      assertEquals(16, javaCharStream0.bufpos);
      assertEquals(11, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NBr./g+}z");
      int int0 = 5510;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 106, (-675), 94);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("IN_SINGLE_LINE_COMMENT");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QM*(Wm*@na<");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 13.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("e");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "y1~?I@iZY,#5");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("e");
      StringReader stringReader0 = new StringReader("e");
      stringReader0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0);
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-2627));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2627. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("e");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "y1~?I@iZY,#5");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("e");
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0);
      javaCharStream0.line = 107;
      javaCharStream0.BeginToken();
      StringReader stringReader0 = new StringReader("e");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 14, 0, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("rt&]");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "rt&]");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1971, 1687, 80);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 1688);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1688. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader(")");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"extends\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, token0.kind);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      StringReader stringReader0 = new StringReader("false");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2147483647), (-2147483647));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.kind);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y1~?I@iZY,#5");
      StringReader stringReader1 = new StringReader("y1~?I@iZY,#5");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1971, 1971, 46);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.readChar();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      assertEquals(1975, javaCharStream0.getBeginColumn());
      assertEquals(1975, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      StringReader stringReader0 = new StringReader("\"\n\"");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-2845), (-1079));
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\\n\" (10), after : \"\\\"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("try");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 124, 52);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 62);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 62. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-19);
      StringReader stringReader0 = new StringReader("*=");
      StringReader stringReader1 = new StringReader("r(");
      StringReader stringReader2 = new StringReader("*=");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, (byte) (-19), (byte)88);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".h0_[+RnN?$<=tXfS\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1971, 1971, 43);
      javaCharStream0.inBuf = (-1369);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      //  // Unstable assertion: assertEquals(1973, javaCharStream0.getBeginColumn());
      //  // Unstable assertion: assertEquals(1974, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y1~?I@iZY,#5");
      StringReader stringReader1 = new StringReader("4Hb X0q&HK");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 19, 1942, 8);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.readChar();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      //  // Unstable assertion: assertEquals(3, javaCharStream0.bufpos);
      //  // Unstable assertion: assertEquals(1949, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)87;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-51);
      byteArray1[1] = (byte)60;
      byteArray1[2] = (byte)60;
      byteArray1[3] = (byte)87;
      byteArray1[4] = (byte)87;
      byteArray1[5] = (byte)87;
      byteArray1[6] = (byte) (-2);
      byteArray1[7] = (byte)60;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 91, (-255), (byte)87);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjround = 37;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 91, column -255.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("40+");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 31, 25, 31);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)114;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)114, (byte)47, (-201));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)67;
      StringReader stringReader0 = new StringReader(".SP_5A#P?CK{[B");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Je*");
      StringReader stringReader1 = new StringReader("Je*");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 107, (byte)67, 107);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaParserTokenManager1.TokenLexicalActions(token0);
      Token token1 = token_GTToken0.next;
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      javaParserTokenManager1.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(68, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("e");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "y1~?I@iZY,#5");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("e");
      StringReader stringReader0 = new StringReader("e");
      FileSystemHandling.createFolder(evoSuiteFile0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1591), (-1591), 46);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      StringReader stringReader1 = new StringReader("com.soops.CEN4010.JMCA.JParser.Token$GTToken");
      CharBuffer charBuffer0 = CharBuffer.allocate(2254);
      stringReader1.read(charBuffer0);
      javaCharStream0.FillBuff();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 46, (-1), 49);
      javaParserTokenManager0.getNextToken();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 81);
      JavaCharStream javaCharStream2 = new JavaCharStream(pushbackInputStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2);
      javaParserTokenManager1.getNextToken();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token token0 = token_GTToken0.specialToken;
      javaParserTokenManager1.SkipLexicalActions((Token) null);
      javaParserTokenManager0.ReInit(javaCharStream0);
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"instanceof\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte) (-27);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)98;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager1.ReInit(javaCharStream1);
      // Undeclared exception!
      try { 
        javaParserTokenManager1.ReInit(javaCharStream1, 4800);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4800. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("t^.Enx /evKyw&");
      stringReader0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 124, 36);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token.newToken(2);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(4375);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4375. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C_YWuI&h9biSHqy");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-122);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 30, 30, (byte)124);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.jjFillToken();
      Token token0 = javaParserTokenManager1.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("|", token0.toString());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("\">>>\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2093), 1696, 1660);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      javaCharStream1.readChar();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      Token token0 = new Token();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.TokenLexicalActions(token0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.soops.CEN4010.JMCA.JParser.Token cannot be cast to com.soops.CEN4010.JMCA.JParser.Token$GTToken
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      javaParserTokenManager0.curChar = '9';
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.ReInit((JavaCharStream) null, 0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("e");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "y1~?I@iZY,#5");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("e");
      StringReader stringReader0 = new StringReader("e");
      FileSystemHandling.createFolder(evoSuiteFile0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1591), (-1591), 46);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      StringReader stringReader1 = new StringReader("com.soops.CEN4010.JMCA.JParser.Token$GTToken");
      javaCharStream0.FillBuff();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 46, (-1), 49);
      javaParserTokenManager0.getNextToken();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 81);
      JavaCharStream javaCharStream2 = new JavaCharStream(pushbackInputStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2);
      javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream2.bufpos);
      assertEquals(2, javaCharStream2.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("else");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 5523, 5523, 108);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("else");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NBr./g+}z");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 106, (-675), 94);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals((-672), javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".h0_[+RnN?$<=tXfS\"");
      StringReader stringReader1 = new StringReader("'Cb<C");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 24, 431);
      StringReader stringReader2 = new StringReader("==");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader2, 24, 431, 24);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(93, token0.kind);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1$+l7~KzK$c");
      StringReader stringReader1 = new StringReader("1$+l7~KzK$c");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 2147483631, 12, 12);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      //  // Unstable assertion: assertEquals(5, javaCharStream0.bufpos);
      //  // Unstable assertion: assertEquals(6, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pu85(bl;c");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 20, 20, 20);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 3, (-1079));
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager2.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      Token token0 = new Token();
      assertEquals(0, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1$+l7~KzK$c");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)27;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-2817), 15, 126);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(97, token0.kind);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1$+l7~KzK$c");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 12, 54, (byte)124);
      StringReader stringReader1 = new StringReader("1$+l7~KzK$c");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.readChar();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-1188));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1188. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)35;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)35, (byte)35);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (-1), 81);
      StringReader stringReader0 = new StringReader("=-b");
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream2.getBeginColumn());
      assertEquals(102, token0.kind);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i0DX+");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(4, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      StringReader stringReader0 = new StringReader("extends");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2224), 427, 427);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.getNextToken();
      assertEquals(433, javaCharStream0.getBeginColumn());
      assertEquals(433, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals("<<", token0.toString());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".h0_[+RnN?$<=tXfS\"");
      StringReader stringReader1 = new StringReader("'Cb<C");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 8, 16, 431);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"b\" (98), after : \"\\'C\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("C-<4,{");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1687, 1687, 1687);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjround = (-1);
      Token token0 = javaParserTokenManager0.getNextToken();
      stringReader0.close();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(1689, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wcMs\"8#P84(rRM@");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.tokenBegin = 107;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(103);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 103. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f2^pnVuPFL*EZi");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 47);
      javaCharStream0.ReadByte();
      javaCharStream0.readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      stringReader0.skip((-16384L));
      javaCharStream0.prevCharIsCR = true;
      javaParserTokenManager0.jjimageLen = (-2117);
      javaParserTokenManager0.SwitchTo(0);
      Token token0 = javaParserTokenManager0.jjFillToken();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token token1 = token_GTToken0.specialToken;
      token0.specialToken = null;
      stringReader0.skip(0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(1654);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1654. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("switch");
      StringReader stringReader1 = new StringReader("switch");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 92);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 92. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("float");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 27, 2412, 39);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.MoreLexicalActions();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager1.MoreLexicalActions();
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(2416, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("![;RrJL\"C4SZ7,D #");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1046, 80, 67);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      charArray0[1] = 'I';
      JavaCharStream javaCharStream2 = new JavaCharStream(pipedInputStream0, 111, 1046, 4096);
      JavaCharStream javaCharStream3 = new JavaCharStream(pipedInputStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream3);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals("[", token0.toString());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)124;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte) (-86);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)48, (byte)48, 42);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QM*(Wm*@na<");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 38, 3597, 1467);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.readChar();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager((JavaCharStream) null, 1467);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1467. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("AJ.@");
      StringReader stringReader1 = new StringReader("AJ.@");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1971, 1971, 46);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.readChar();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1974, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Tyt&hC]zJZ7P8J[");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(4, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rt&]");
      StringReader stringReader1 = new StringReader("-,q");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 18, 739);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(84, token0.kind);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1$+l7~KzK$c");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 27);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.jjFillToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      javaParserTokenManager0.jjFillToken();
      //  // Unstable assertion: assertEquals(2, javaCharStream0.bufpos);
      //  // Unstable assertion: assertEquals(2, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("public");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 5, 5, 30);
      StringReader stringReader1 = new StringReader("trDy)+!&g=n!xX-(");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      Token token0 = new Token();
      javaCharStream1.bufline = javaParserTokenManager0.jjnewLexState;
      javaParserTokenManager0.SkipLexicalActions(token0);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream1.bufpos);
      assertEquals(74, token1.kind);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-Bojw'I$X3YH6");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.mark(25);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.jjround = 1994;
      javaCharStream0.nextCharInd = 1;
      javaParserTokenManager1.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager((JavaCharStream) null);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 8.  Encountered: \"$\" (36), after : \"\\'I\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("p)/");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 36, 34, 1971);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 34);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 34. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QyU");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.readChar();
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.ReInit(javaCharStream0, 0);
      javaParserTokenManager1.ReInit(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cEv^i)c))jh(O%X=");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 22, (-1), 251);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.jjFillToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("g");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 45, 64, 1766);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(74, token0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals("", token2.toString());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.Token$GTToken");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token.newToken(1);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager2.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager1.jjFillToken();
      assertEquals(17, javaCharStream0.bufpos);
      assertEquals(18, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("e");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "y1~?I@iZY,#5");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)64;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\\'\" (39), after : \"\\'\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5WVU?:`Rq/YS");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("+", token0.toString());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("t^.Enx /evKyw&");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.jjFillToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager1.ReInit(javaCharStream0, 6);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 6. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-38);
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte)28;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (byte)47, 912, 1);
      StringReader stringReader0 = new StringReader("6sMitJVXj3ptU.-0");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1602), (byte) (-38), 4516);
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, (byte)28, 0, (byte)47);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      //  // Unstable assertion: assertEquals(14, javaCharStream2.bufpos);
      //  // Unstable assertion: assertEquals("-", token0.toString());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("e");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "y1~?I@iZY,#5");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("e");
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0);
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjFillToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
       //  fail("Expecting exception: Error");
       // Unstable assertion
      } catch(Error e) {
         //
         // Lexical error at line 2, column 0.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'Cb<C");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader1 = new StringReader("private");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 3182, 3182, 34);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(3188, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"instanceof\"");
      StringReader stringReader1 = new StringReader("2s");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 121, 121, 121);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = new Token();
      javaParserTokenManager0.getNextToken();
      //  // Unstable assertion: assertEquals(0, javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      //  // Unstable assertion: assertEquals("", token1.toString());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\">>>\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 908, 1696, 908);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      javaCharStream1.readChar();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      token0.endColumn = 1;
      Token token1 = token0.specialToken;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.TokenLexicalActions((Token) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 7.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      StringReader stringReader0 = new StringReader("enum");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)87, (byte)87);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      javaParserTokenManager1.getNextToken();
      assertEquals(90, javaCharStream0.getBeginColumn());
      assertEquals(90, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte) (-79);
      StringReader stringReader0 = new StringReader("-Bojw'I$X3YH6");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.nextCharInd = 1;
      javaParserTokenManager1.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager2.jjFillToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 8.  Encountered: \"$\" (36), after : \"\\'I\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("eG>");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1971, 1971, 1971);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      javaParserTokenManager0.setDebugStream((PrintStream) null);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(">", token0.toString());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("40+");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 64, 64, 45);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.TokenLexicalActions(token0);
      stringReader0.close();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.jjFillToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(65, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (byte)0, (byte)0, (-211));
      StringReader stringReader0 = new StringReader("catch");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-3109), (-4029), 39);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-3109), javaCharStream1.getBeginLine());
      assertEquals("", token0.toString());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)67;
      StringReader stringReader0 = new StringReader(".SP_5A#P?CK{[B");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 436, 80, 80);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 436, column 86.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("40+");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 64, 64, 45);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0, 309, 64);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream1, 64);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 64. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("long");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 99, 99);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.UpdateLineColumn('J');
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 83);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 83. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("[V|y<Jq+4@2A,");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)48, 1356, 39);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      Token token0 = new Token();
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream1.getBeginColumn());
      assertEquals("|", token1.toString());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("3^k\"C*1|C*'");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 64, 64, 45);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "3^k\"C*1|C*'");
      javaParserTokenManager0.curLexState = 39;
      javaParserTokenManager0.image = stringBuffer0;
      javaParserTokenManager0.getNextToken();
      Token token0 = new Token();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
       //  fail("Expecting exception: Error");
       // Unstable assertion
      } catch(Error e) {
         //
         // Lexical error at line 64, column 75.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)86;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-19), (byte)88, (byte) (-19));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjround = (int) (byte) (-19);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      assertEquals("X", token0.toString());
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("e");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "y1~?I@iZY,#5");
      StringReader stringReader0 = new StringReader("-=");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-469), 43, 21);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.getNextToken();
      Token token0 = javaParserTokenManager1.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.kind);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1454, 33, 1454);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = new Token();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 43);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 43. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-Bojw'I$X3YH6");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 113, (-3236), 113);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjnewStateCnt = 625;
      javaParserTokenManager0.jjround = 3847;
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("-", token0.toString());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("t^.Enx /evKyw&");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 124, 36);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.SwitchTo(1);
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(1, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 1939, (byte)87, 2378);
      StringReader stringReader0 = new StringReader("");
      StringReader stringReader1 = new StringReader("while");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 3683, 122);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertEquals(4, javaCharStream1.bufpos);
      assertEquals(126, javaCharStream1.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader("HuIA9%mC");
      stringReader0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 72, 29);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)96;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      javaParserTokenManager0.getNextToken();
      Token.newToken(1);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2);
      javaParserTokenManager1.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 2, column 2.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte) (-94);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("^Ua_");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(4, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("SGEn#!HU");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 8, 76, 1696);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      javaCharStream1.readChar();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 5.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5WVU?:`Rq/YS");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 46, (byte)88, 103);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaCharStream0.readChar();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 103);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 103. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1$+l7~KzK$c");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)86;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-19), (byte)88, (byte) (-19));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QyU");
      int int0 = 5510;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 5510, 5510, 94);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      token0.kind = 2;
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("<!q4G2}|Dno7{'F%dGc");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1$+l7~KzK$c");
      StringReader stringReader1 = new StringReader("KZF&8k:e)Ge");
      StringReader stringReader2 = new StringReader("KZF&8k:e)Ge");
      StringReader stringReader3 = new StringReader("9X4.Q5?M0*QO%");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 0, 0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader3, (-1528), 0, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(3, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wcMs\"8#P84(rRM@");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 32, 13);
      StringReader stringReader1 = new StringReader("wcMs\"8#P84(rRM@");
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.readChar();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 7.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)88;
      StringReader stringReader0 = new StringReader("Zsn^QnxW");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 865, 27, 27);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(29, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("\">>>\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2093), 1696, 1660);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      javaCharStream1.readChar();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(1, javaCharStream1.getEndLine());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)38;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 464, (byte)54);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(54, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("Je*");
      StringReader stringReader1 = new StringReader("^=");
      StringReader stringReader2 = new StringReader("^=");
      StringReader stringReader3 = new StringReader("^=");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader3, (-3496), (byte)67);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)67;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedInputStream0);
      javaCharStream1.ReInit((Reader) stringReader2, (int) (byte)67, 117, (int) (byte)67);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.jjFillToken();
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".w|");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 32, 123, (byte)124);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      token0.beginLine = 101;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(124, javaCharStream0.getBeginColumn());
      assertEquals(85, token0.kind);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wcMs\"8#P84(rRM@");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      javaParserTokenManager0.MoreLexicalActions();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-19);
      StringReader stringReader0 = new StringReader("boolean");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(7, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("Cui^:Xu");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)67, 19, 37);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      int int0 = (-141);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, int0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -141. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("e");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "y1~?I@iZY,#5");
      StringReader stringReader0 = new StringReader("-=");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-469), 43, 43);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaCharStream0.available = (-925);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.jjFillToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-469));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -469. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("double");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3401, 2264, 25);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjnewStateCnt = 3401;
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2269, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iQ\"5'Q3k&g~Z");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QyU");
      StringReader stringReader1 = new StringReader("QyU");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      javaCharStream0.readChar();
      stringReader1.read();
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjFillToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)48;
      StringReader stringReader0 = new StringReader("*v8q4I5@>h`uY#{l`h5");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)124, 1717986918, (byte)48);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(1717986924, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte byte0 = (byte) (-82);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte1 = (byte)64;
      StringReader stringReader0 = new StringReader("DEFAULT");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte) (-82), (-1857), (byte)64);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 40);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 40. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      StringReader stringReader0 = new StringReader("finally");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 37, (byte)38, (byte)38);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(44, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("40+");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 64, 64, 45);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager2.ReInit(javaCharStream0, 9);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 9. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C_YWuI&h9biSHqy");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)64;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, (-1925), (byte)64);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      javaParserTokenManager0.getNextToken();
      Token.newToken((-1925));
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-1925));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1925. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StringReader stringReader0 = new StringReader("public");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 5, 5, 30);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(10, javaCharStream0.getBeginColumn());
      assertEquals(10, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)60;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 464, (byte)27);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringReader stringReader0 = new StringReader("u_q=4Q[_;jD|");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1989, 1989, 1989);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.tokenBegin = (-40);
      javaCharStream0.ReInit((Reader) stringReader0, 35, (-1013), 1303);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 40);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 40. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("rt&]");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1971, 123, 1971);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.readChar();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjmatchedPos = 86;
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.kind);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      stringReader0.ready();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)24;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      javaCharStream0.line = 13;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.ReInit(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(13, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1$+177~Kz$c");
      stringReader0.ready();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2766, (byte)124, (byte)124);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjmatchedKind = (-1);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 2);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 2766, column 135.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("class");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 74, 1971, 74);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("class", "class");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // class
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StringReader stringReader0 = new StringReader("void");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      javaParserTokenManager0.MoreLexicalActions();
      javaCharStream0.readChar();
      stringReader0.read();
      javaCharStream0.BeginToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      stringReader0.markSupported();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.ReInit(javaCharStream0, 1);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(4, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StringReader stringReader0 = new StringReader("u_q=4Q[_;jD|");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1989, 1989, 1989);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(121);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 121. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("7)yX8gZf-t>");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 64, 64, 45);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = new Token();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      assertEquals(66, javaCharStream0.getBeginColumn());
      assertEquals(71, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*1l=1%b}v{xm(zQGBy[");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 15, 23, 2627);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 15);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 15. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/-h&0U@7,]D`b(2");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 2447);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2447. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wcMs\"8#P84(rRM@");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)64;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      Token token0 = Token.newToken(1);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, 0);
      javaParserTokenManager1.TokenLexicalActions(token0);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParserTokenManager2.ReInit(javaCharStream1, 0);
      // Undeclared exception!
      try { 
        javaParserTokenManager2.ReInit(javaCharStream1, (-744));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -744. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iQ\"5'Q3k&g~Z");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 13.  Encountered: <EOF> after : \"\\\"5\\'Q3k&g~Z\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("lzRWMlTH{$p<]x8r/");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1518), 106, 436);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(116, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-14);
      StringReader stringReader0 = new StringReader("r!jM");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)67, (byte) (-14), (byte)77);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 2376);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2376. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1$+l7~KzK$c");
      char[] charArray0 = new char[0];
      stringReader0.reset();
      JavaCharStream javaCharStream0 = null;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 0);
      javaParserTokenManager0.ReInit((JavaCharStream) null);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = "1$+l7~KzK$c";
      StringReader stringReader0 = new StringReader("1$+l7~KzK$c");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "1$+l7~KzK$c", 0, 0);
      char[] charArray0 = new char[0];
      charBuffer0.get(charArray0);
      charBuffer0.limit(0);
      stringReader0.read(charBuffer0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, (-2112), 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.nextCharInd = 2613;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column -2111.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-19);
      StringReader stringReader0 = new StringReader("*=");
      StringReader stringReader1 = new StringReader("r(");
      StringReader stringReader2 = new StringReader("*=");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, (byte) (-19), (byte)88);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.ReInit((Reader) stringReader1, (int) (byte) (-19), (int) (byte)88, 37);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      Token token0 = new Token();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-19), javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)60;
      StringReader stringReader0 = new StringReader("++");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)60, (byte)88);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      StringReader stringReader0 = new StringReader("extends");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2224), 427, 427);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.readChar();
      FileSystemHandling.shouldAllThrowIOExceptions();
      javaParserTokenManager1.getNextToken();
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("", token0.toString());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("t^.Enx /evKyw&");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjFillToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 15.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)7;
      byte byte0 = (byte)67;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte) (-27);
      StringReader stringReader0 = new StringReader("QyU");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.readChar();
      stringReader0.read();
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (byte) (-14));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -14. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = 'c';
      charArray0[2] = ',';
      charArray0[3] = '7';
      charArray0[4] = '.';
      charArray0[5] = 'H';
      charArray0[6] = '\"';
      charArray0[7] = '}';
      charArray0[8] = 'p';
      javaCharStream0.buffer = charArray0;
      javaCharStream0.maxNextCharInd = (-2551);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      javaCharStream0.inBuf = 83;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      //  // Unstable assertion: assertEquals(2, javaCharStream0.bufpos);
      //  // Unstable assertion: assertEquals(",", token0.toString());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      StringReader stringReader0 = new StringReader("P");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 321, (byte)6, (byte)6);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-517), 485, 66);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager1.jjFillToken();
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1, 668);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 668. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JavaCharStream javaCharStream0 = null;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      int int0 = 0;
      javaParserTokenManager0.jjimageLen = 0;
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, false);
      PrintStream printStream0 = mockPrintStream0.printf("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", (Object[]) javaParserTokenManager0.jjstrLiteralImages);
      javaParserTokenManager0.setDebugStream(printStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)27;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-1491), (-1491), 118);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1491), javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte) (-79);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2116, 85);
      byteArrayInputStream0.close();
      StringReader stringReader0 = new StringReader(">>=");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte) (-79), 1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      stringReader0.read();
      javaParserTokenManager1.jjmatchedPos = 122;
      javaParserTokenManager1.getNextToken();
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("", token0.toString());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Je*");
      StringReader stringReader0 = new StringReader("Je*");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)67, (byte)67, (byte)67);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.readChar();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(103, token0.kind);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nO$NJ0gi?/<2vc");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3682, 3682);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(3689, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StringReader stringReader0 = new StringReader(").F@");
      StringReader stringReader1 = new StringReader(").F@");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1971, 1971, 46);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.MoreLexicalActions();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1972, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".h0_[+RnN?$<=tXfS\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1971, 1971, 43);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.jjFillToken();
      assertEquals(1972, javaCharStream0.getBeginColumn());
      assertEquals(1974, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)124;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}XF*k(");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)87, 1467, 47);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(87, javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cEv^i)c))jh(O%X=");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)124;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-1967), 1, 1467);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-2769), 1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream1.bufpos);
      assertEquals(107, token0.kind);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StringReader stringReader0 = new StringReader("void");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1374, 40, 1374);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("<INTEGER_LITERAL>");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      StringReader stringReader0 = new StringReader("5De\"+uC7<6u<(");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
       //  fail("Expecting exception: Error");
       // Unstable assertion
      } catch(Error e) {
         //
         // Lexical error at line 1, column 14.  Encountered: <EOF> after : \"\\\"+uC7<6u<(\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e2Y>");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1971, 1971, 1971);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1973, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StringReader stringReader0 = new StringReader("eG>");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1971, 1971, 952);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.prevCharIsCR = false;
      javaCharStream0.ReInit((Reader) stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-2522), 952);
      javaParserTokenManager0.input_stream = javaCharStream1;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1$+177~Kz$c");
      StringReader stringReader1 = new StringReader("1$+177~Kz$c");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 6, 28, 28);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      //  // Unstable assertion: assertEquals(6, javaCharStream0.bufpos);
      //  // Unstable assertion: assertEquals(34, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("3^k\"C*1|C*'");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 64, 64, 45);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(65, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 596, 596, 596);
      javaCharStream0.prevCharIsLF = true;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParserTokenManager0.MoreLexicalActions();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token token0 = token_GTToken0.next;
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{'5s\"^cPZeJlD:_5");
      stringReader0.ready();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1563, 1563, 1563);
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      stringReader0.read(charArray0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      stringReader0.ready();
      javaParserTokenManager0.lengthOfMatch = (-1);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1563, column 1565.  Encountered: \"s\" (115), after : \"\\'5\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")6`z]");
      StringReader stringReader1 = new StringReader("L?}v$^79`n 1QI]\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 33, 516, 255);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.jjimageLen = (-2862);
      javaParserTokenManager0.ReInit(javaCharStream0);
      Token token0 = new Token();
      token0.beginColumn = 74;
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(74, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f2^pnVuPFL*EZi");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 47);
      javaCharStream0.ReadByte();
      javaCharStream0.readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      stringReader0.skip((-16384L));
      javaCharStream0.prevCharIsCR = true;
      javaParserTokenManager0.jjimageLen = (-2117);
      javaParserTokenManager0.SwitchTo(0);
      Token token0 = javaParserTokenManager0.jjFillToken();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token token1 = token_GTToken0.specialToken;
      token0.specialToken = null;
      javaParserTokenManager0.jjFillToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-609));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -609. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("sw Bh");
      StringReader stringReader1 = new StringReader("sw Bh");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "sw Bh");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager1.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager1.SkipLexicalActions(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals("", token1.toString());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y1~?I@iZY,#5");
      StringReader stringReader1 = new StringReader("y1~?I@iZY,#5");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1971, 1971, 46);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.readChar();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1974, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("e");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "y1~?I@iZY,#5");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("e");
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0);
      StringReader stringReader0 = new StringReader(";;FH!U}.");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), (-1));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(2, javaCharStream1.getColumn());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("3^k\"C*1|C*'");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 64, 64, 45);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 64, column 75.  Encountered: <EOF> after : \"\\\"C*1|C*\\'\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)86;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-19), (byte)88, (byte) (-19));
      byteArrayInputStream0.read(byteArray0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertEquals(0, token1.kind);
      assertEquals("", token1.toString());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 0, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParserTokenManager0.setDebugStream((PrintStream) null);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lJntZ4");
      StringReader stringReader1 = new StringReader("mKW9R%5#s^k");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 40, 1374, 4430);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("t^.Enx /evKyw&");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 124, 36);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.jjFillToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(".", token0.toString());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w+");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 31, 25, 31);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 31, 30);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("![;RrJL\"C4SZ7,D #");
      pipedInputStream0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1046, 80, 67);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      charArray0[1] = 'I';
      JavaCharStream javaCharStream2 = new JavaCharStream(pipedInputStream0, 111, 1046, 4096);
      JavaCharStream javaCharStream3 = new JavaCharStream(pipedInputStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream3);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(82, javaCharStream0.getBeginColumn());
      assertEquals(83, token0.kind);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)60;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 464, (byte)88);
      byteArrayInputStream0.markSupported();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0, 1);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(89, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("![;RrJL\"C4SZ7,D #");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1046, 80, 54);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      charArray0[1] = 'I';
      charArray0[2] = '3';
      charArray0[3] = 'T';
      charArray0[4] = ')';
      javaCharStream0.nextCharBuf = charArray0;
      javaParserTokenManager0.setDebugStream((PrintStream) null);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(80, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "private");
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("throw");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)48, (byte)48, (byte)48);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.kind);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)87;
      StringReader stringReader0 = new StringReader("q7wntz6&_cH&");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 25);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      StringBuffer stringBuffer0 = new StringBuffer(25);
      javaParserTokenManager0.image = stringBuffer0;
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(10, javaCharStream0.bufpos);
      assertEquals("_cH", token0.toString());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C_YWuI&h9biSHqy");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      byte[] byteArray0 = new byte[9];
      javaCharStream0.backup(2);
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)89;
      byteArray0[8] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 112, (byte)46, 782);
      char char0 = javaParserTokenManager0.curChar;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(105, token0.kind);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".h0_[+RnN?$<=tXfS\"");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("^", token0.toString());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)124;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 1467, 29, 29);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(88, token0.kind);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wcMs\"8#P84(rRM@");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wcMs\"8#P84(rRM@");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)64;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      StringReader stringReader1 = new StringReader("wcMs\"8#P84(rRM@");
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, 1, 827, (byte)39);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager2.getNextToken();
      javaParserTokenManager2.jjFillToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager2.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 16.  Encountered: <EOF> after : \"\\\"8#P84(rRM@\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("C-<4,{");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "E3k Lp{Dr:N+T*:blQ");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 80, 38, 1687);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(74, token0.kind);
      assertEquals("C", token0.toString());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JavaCharStream javaCharStream0 = null;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 0);
      javaParserTokenManager0.jjmatchedPos = 402;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }
}
