/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:29:07 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      compressedVector0.fold(vectorAccumulator0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.nonZeroIterator();
      assertEquals(4, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.pollLast();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      compressedVector0.nonZeroIterator();
      compressedVector0.iterator();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      Random.setNextRandom(2142);
      CompressedVector compressedVector0 = CompressedVector.zero(7, 7);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
      assertEquals(7, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      String string0 = compressedVector0.toCSV();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[2] = 0;
      intArray0[4] = 48;
      intArray0[5] = 48;
      intArray0[6] = 0;
      CompressedVector compressedVector0 = new CompressedVector(0, 48, doubleArray0, intArray0);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.blankOfLength(0);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(6);
      assertEquals(6, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero(6, 2428);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 2428.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(8);
      compressedVector0.setAll(8);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(8, 372);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Integer integer0 = new Integer(1315);
      Float float0 = new Float((-518.0F));
      hashMap0.put(integer0, float0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2925);
      compressedVector0.setAll(2925);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2925;
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(2925, 372);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance();
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toPattern());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toLocalizedPattern());
      assertEquals("\u00A4", decimalFormat0.getPositivePrefix());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-\u00A4", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertNotNull(decimalFormat0);
      
      String string0 = compressedVector0.mkString((NumberFormat) decimalFormat0);
      assertEquals("\u00A40.00", string0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toPattern());
      assertEquals("\u00A4#,##0.00", decimalFormat0.toLocalizedPattern());
      assertEquals("\u00A4", decimalFormat0.getPositivePrefix());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-\u00A4", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2793.1270827);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {(-2793.1270827)}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertArrayEquals(new double[] {(-2793.1270827)}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.swapElements((-452), 0);
      assertArrayEquals(new double[] {(-2793.1270827)}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(892);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      CompressedVector compressedVector0 = CompressedVector.random(892, 1.0, (java.util.Random) mockRandom0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(892, compressedVector0.cardinality());
      assertEquals(892, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(892, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2793.1270827);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {(-2793.1270827)}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.set(0, 0);
      assertArrayEquals(new double[] {(-2793.1270827)}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      assertNotNull(sparseVector0);
      
      String string0 = compressedVector0.toCSV();
      assertSame(compressedVector0, sparseVector0);
      assertEquals("", string0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(string0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertSame(compressedVector0, sparseVector0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(byteArray0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Long long0 = new Long((-1111L));
      assertEquals((-1111L), (long)long0);
      assertNotNull(long0);
      
      int int0 = 2923;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random(2923, (double) (-1111L), (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2642.553320651674;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-3212.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {2642.553320651674, 1.0, (-3212.0)}, doubleArray0, 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new double[] {2642.553320651674, 1.0, (-3212.0)}, doubleArray0, 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(559, 559);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(559, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(559, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(2, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotNull(compressedVector1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      compressedVector0.swapElements((-222), (-22));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2793.1270827);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {(-2793.1270827)}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      Vector vector0 = compressedVector0.add((-2793.1270827));
      assertArrayEquals(new double[] {(-2793.1270827)}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, vector0.length());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("Can not decode BasicVector from the given byte array.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2740.4311637051233);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {(-2740.4311637051233), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.25, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-1860.302)).when(vectorAccumulator0).accumulate();
      double double0 = compressedVector0.fold(vectorAccumulator0);
      assertEquals((-1860.302), double0, 0.01);
      assertArrayEquals(new double[] {(-2740.4311637051233), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.25, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      MockRandom mockRandom0 = new MockRandom((-2729));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random((-2729), 222.114346749, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2740.4311637051233);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {(-2740.4311637051233), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(0.25, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      double double0 = compressedVector0.infinityNorm();
      assertEquals(2740.4311637051233, double0, 0.01);
      assertArrayEquals(new double[] {(-2740.4311637051233), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(0.25, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.get(2933);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '2933' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1344, 1344);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1344, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(42, vectorFunction0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1344, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)72;
      Float float0 = new Float((double) (byte)0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector((byte)72, (-568));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -568.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2740.4311637051233);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {(-2740.4311637051233), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      int int0 = 2933;
      double double0 = compressedVector0.infinityNorm();
      assertEquals(2740.4311637051233, double0, 0.01);
      assertArrayEquals(new double[] {(-2740.4311637051233), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(100.0, 2740.4311637051233, 1.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertArrayEquals(new double[] {(-2740.4311637051233), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-1768.474989)).when(vectorAccumulator0).accumulate();
      double double1 = compressedVector0.fold(vectorAccumulator0);
      assertEquals((-1768.474989), double1, 0.01);
      assertArrayEquals(new double[] {(-2740.4311637051233), 0.0, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("+1]C9]cgl|+7cfV0d");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2925);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2925, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(2925);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2925, compressedVector0.cardinality());
      assertEquals(2925, compressedVector0.length());
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int0 = 1714;
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean0 = linkedList0.addAll((Collection<? extends Float>) linkedList1);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(boolean0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList0, linkedList2);
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertEquals(0, linkedList0.size());
      
      int int1 = 2868;
      compressedVector0.swapElements(2868, 1714);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2925, compressedVector0.cardinality());
      assertEquals(2925, compressedVector0.length());
      
      int int2 = 2897;
      boolean boolean1 = compressedVector0.nonZeroAt(2897);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2925, compressedVector0.cardinality());
      assertEquals(2925, compressedVector0.length());
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 48;
      doubleArray0[7] = (double) 48;
      doubleArray0[3] = (double) 48;
      doubleArray0[4] = (double) 48;
      doubleArray0[5] = (double) 48;
      doubleArray0[6] = (double) 48;
      doubleArray0[7] = 0.0;
      CompressedVector compressedVector0 = CompressedVector.zero(286);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(286, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(286, compressedVector0.length());
      assertNotNull(vectorIterator0);
      
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 286);
      assertNotSame(sparseVector0, compressedVector0);
      assertTrue(sparseVector0.equals((Object)compressedVector0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(286, sparseVector0.length());
      assertNotNull(sparseVector0);
      
      compressedVector0.setAll(0.0);
      assertNotSame(compressedVector0, sparseVector0);
      assertTrue(compressedVector0.equals((Object)sparseVector0));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(286, compressedVector0.length());
      
      boolean boolean0 = compressedVector0.nonZeroAt(1);
      assertNotSame(compressedVector0, sparseVector0);
      assertFalse(boolean0);
      assertTrue(compressedVector0.equals((Object)sparseVector0));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(286, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-2793.247435692899)).when(vectorAccumulator0).accumulate();
      double double0 = compressedVector0.foldNonZero(vectorAccumulator0);
      assertEquals((-2793.247435692899), double0, 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector0.toRowMatrix();
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 1169);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(1169, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotNull(compressedVector1);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2793.247435692899)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt(1169, vectorFunction0);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(8.55431993156544E-4, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(1169, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2793.1270827);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {(-2793.1270827)}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      compressedVector0.swapElements((-222), (-22));
      assertArrayEquals(new double[] {(-2793.1270827)}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2960);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2960, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      compressedVector0.set(93, 2960);
      assertEquals(3.3783783783783786E-4, compressedVector0.density(), 0.01);
      assertEquals(2960, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      assertEquals(3.3783783783783786E-4, compressedVector0.density(), 0.01);
      assertEquals(2960, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(3.3783783783783786E-4, sparseVector0.density(), 0.01);
      assertEquals(2960, sparseVector0.length());
      assertEquals(1, sparseVector0.cardinality());
      assertNotNull(sparseVector0);
      
      compressedVector0.swapElements(93, (-1579));
      assertSame(compressedVector0, sparseVector0);
      assertEquals(3.3783783783783786E-4, compressedVector0.density(), 0.01);
      assertEquals(2960, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = sparseVector0.toMatrixMarket();
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      assertEquals("%%MatrixMarket vector coordinate real\n2960 1\n-1578 2960.000\n", string0);
      assertEquals(3.3783783783783786E-4, compressedVector0.density(), 0.01);
      assertEquals(2960, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(3.3783783783783786E-4, sparseVector0.density(), 0.01);
      assertEquals(2960, sparseVector0.length());
      assertEquals(1, sparseVector0.cardinality());
      assertNotNull(string0);
      
      compressedVector0.setAll((-1579));
      assertSame(compressedVector0, sparseVector0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2960, compressedVector0.length());
      assertEquals(2960, compressedVector0.cardinality());
      
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Spliterator<Float> spliterator0 = linkedList1.spliterator();
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(spliterator0);
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertSame(compressedVector0, sparseVector0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2960, compressedVector0.length());
      assertEquals(2960, compressedVector0.cardinality());
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2925);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2925, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(2925);
      assertEquals(2925, compressedVector0.cardinality());
      assertEquals(2925, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Float float0 = new Float((float) 2925);
      assertEquals(2925.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = linkedList1.add(float0);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(boolean0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(1, linkedList1.size());
      
      boolean boolean1 = linkedList0.retainAll(linkedList1);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(boolean1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedList1.size());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(67, Integer.MAX_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-3513.3796);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-3513.3796)}, doubleArray0, 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-2866), vectorFunction0);
      assertArrayEquals(new double[] {(-1.0), (-3513.3796)}, doubleArray0, 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 5;
      Integer integer0 = Integer.getInteger(" uC_[{/s&LG3*=gDZ", 5);
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
      
      float float0 = 17.889212F;
      Float float1 = new Float(17.889212F);
      assertEquals(17.889212F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int1 = 2;
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[2] = 2;
      intArray0[3] = 5;
      CompressedVector compressedVector0 = new CompressedVector(5, 2, doubleArray0, intArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {2, 0, 2, 5}, intArray0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.4, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)17.889212F).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.update(vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2793.1270827);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {(-2793.1270827)}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      compressedVector0.set(0, 2.3800722261457965);
      assertArrayEquals(new double[] {(-2793.1270827)}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-3513.3796);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-3513.3796)}, doubleArray0, 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1350.90448911)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-2866), vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2960);
      assertEquals(2960, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.set(93, 92.24233777441638);
      assertEquals(2960, compressedVector0.length());
      assertEquals(3.3783783783783786E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector1 = new CompressedVector(2960);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(2960, compressedVector1.length());
      assertNotNull(compressedVector1);
      
      SparseVector sparseVector0 = compressedVector1.toSparseVector();
      assertSame(compressedVector1, sparseVector0);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(sparseVector0, compressedVector0);
      assertSame(sparseVector0, compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(sparseVector0.equals((Object)compressedVector0));
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(2960, compressedVector1.length());
      assertEquals(2960, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertNotNull(sparseVector0);
      
      compressedVector0.swapElements(93, (-1579));
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, sparseVector0);
      assertEquals(2960, compressedVector0.length());
      assertEquals(3.3783783783783786E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.pollLast();
      ((CompressedVector) sparseVector0).setAll(92.24233777441638);
      SparseVector sparseVector1 = sparseVector0.toSparseVector();
      // Undeclared exception!
      try { 
        compressedVector0.add((Vector) sparseVector1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-1579' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(286);
      assertEquals(286, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertEquals(286, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(vectorIterator0);
      
      double double0 = compressedVector0.get(2);
      assertEquals(0.0, double0, 0.01);
      assertEquals(286, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      double double1 = (-2793.1270827);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)16;
      CompressedVector compressedVector0 = CompressedVector.fromBinary(byteArray0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      String string0 = compressedVector0.toMatrixMarket();
      assertEquals("%%MatrixMarket vector coordinate real\n0 0\n", string0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("%%MatrixMarket vector coordinate real\n0 0\n");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(9);
      assertEquals(9, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.max(9, 3618);
      assertEquals(3618, int0);
      
      Integer integer1 = new Integer(1265);
      assertEquals(1265, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = hashMap0.put(integer0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer2);
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2142);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2142, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4.6685340802987864E-4, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2142, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4.6685340802987864E-4, compressedVector0.density(), 0.01);
      
      Random.setNextRandom(2142);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2793.1270827);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {(-2793.1270827)}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.shuffle();
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertArrayEquals(new double[] {(-2793.1270827)}, doubleArray0, 0.01);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertNotNull(compressedVector1);
      
      double double0 = compressedVector1.infinityNorm();
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(2793.1270827, double0, 0.01);
      assertArrayEquals(new double[] {(-2793.1270827)}, doubleArray0, 0.01);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      
      boolean boolean0 = compressedVector0.equals((Vector) compressedVector1, 45.485967786);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-2793.1270827)}, doubleArray0, 0.01);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(48);
      assertEquals(48, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1356);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1356, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.blank();
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1356, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(1356, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotNull(compressedVector1);
      
      float float0 = Float.max(1356, 1356);
      assertEquals(1356.0F, float0, 0.01F);
      
      compressedVector0.setAll(1356);
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(1356, compressedVector0.cardinality());
      assertEquals(1356, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      Spliterator<Float> spliterator0 = linkedList0.spliterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(spliterator0);
      
      Float float1 = linkedList0.pollLast();
      assertEquals(0, linkedList0.size());
      assertNull(float1);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1347, vectorFunction0);
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(1356, compressedVector0.length());
      assertEquals(1355, compressedVector0.cardinality());
      assertEquals(0.9992625368731564, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector1.each((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2793.1270827);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {(-2793.1270827)}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(4047.2474889804).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertArrayEquals(new double[] {(-2793.1270827)}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-452), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2960);
      assertEquals(2960, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      compressedVector0.set(93, 92.24233777441638);
      assertEquals(2960, compressedVector0.length());
      assertEquals(3.3783783783783786E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(421.337367725).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      assertEquals(2960, compressedVector0.length());
      assertEquals(3.3783783783783786E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(3.3783783783783786E-4, sparseVector0.density(), 0.01);
      assertEquals(2960, sparseVector0.length());
      assertEquals(1, sparseVector0.cardinality());
      assertNotNull(sparseVector0);
      
      compressedVector0.swapElements(93, (-1579));
      assertSame(compressedVector0, sparseVector0);
      assertEquals(2960, compressedVector0.length());
      assertEquals(3.3783783783783786E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      compressedVector0.setAll((-1.0));
      assertSame(compressedVector0, sparseVector0);
      assertEquals(2960, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2960, compressedVector0.cardinality());
      
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Spliterator<Float> spliterator0 = linkedList1.spliterator();
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(spliterator0);
      
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      Float float0 = new Float((float) 2960);
      assertEquals(2960.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = linkedList2.add(float0);
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(linkedList2, linkedList0);
      assertTrue(boolean0);
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertEquals(1, linkedList2.size());
      
      Float float1 = linkedList2.pollLast();
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(linkedList2, linkedList0);
      assertEquals(2960.0F, (float)float1, 0.01F);
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertEquals(0, linkedList2.size());
      assertNotNull(float1);
      
      compressedVector0.updateAt(93, vectorFunction0);
      assertSame(compressedVector0, sparseVector0);
      assertEquals(2960, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2960, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 1354;
      CompressedVector compressedVector0 = new CompressedVector(1354);
      assertEquals(1354, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.blank();
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(1354, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1354, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertNotNull(compressedVector1);
      
      float float0 = Float.max(1354, 1354);
      assertEquals(1354.0F, float0, 0.01F);
      
      compressedVector0.setAll(1354);
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(1354, compressedVector0.length());
      assertEquals(1354, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      Float float1 = linkedList0.pollLast();
      assertEquals(0, linkedList0.size());
      assertNull(float1);
      
      compressedVector1.setAll((-1600));
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1354, compressedVector0.length());
      assertEquals(1354, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1354, compressedVector1.cardinality());
      assertEquals(1354, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      
      compressedVector0.setAll(786.1);
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(1354, compressedVector0.length());
      assertEquals(1354, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      boolean boolean0 = compressedVector0.nonZeroAt((-18));
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(boolean0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(1354, compressedVector0.length());
      assertEquals(1354, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector1.copyOfLength((-18));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -18
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1348, 1348);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1348, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.blank();
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1348, compressedVector0.length());
      assertEquals(1348, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotNull(compressedVector1);
      
      Float float0 = new Float((double) 1348);
      assertEquals(1348.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = linkedList0.add(float0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      compressedVector0.setAll(1348);
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1348, compressedVector0.cardinality());
      assertEquals(1348, compressedVector0.length());
      
      Spliterator<Float> spliterator0 = linkedList0.spliterator();
      assertEquals(1, linkedList0.size());
      assertNotNull(spliterator0);
      
      Float float1 = linkedList0.pollLast();
      assertEquals(1348.0F, (float)float1, 0.01F);
      assertEquals(0, linkedList0.size());
      assertNotNull(float1);
      
      compressedVector1.setAll((-1606));
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1348, compressedVector0.cardinality());
      assertEquals(1348, compressedVector0.length());
      assertEquals(1348, compressedVector1.cardinality());
      assertEquals(1348, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-1606), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2944);
      assertEquals(2944, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.set(93, 92.24233777441638);
      assertEquals(3.3967391304347825E-4, compressedVector0.density(), 0.01);
      assertEquals(2944, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      compressedVector0.set(0, (-1809.0));
      assertEquals(6.793478260869565E-4, compressedVector0.density(), 0.01);
      assertEquals(2944, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      assertEquals(6.793478260869565E-4, compressedVector0.density(), 0.01);
      assertEquals(2944, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, sparseVector0.cardinality());
      assertEquals(2944, sparseVector0.length());
      assertEquals(6.793478260869565E-4, sparseVector0.density(), 0.01);
      assertNotNull(sparseVector0);
      
      int int0 = (-1579);
      compressedVector0.swapElements((-1579), 2944);
      assertSame(compressedVector0, sparseVector0);
      assertEquals(6.793478260869565E-4, compressedVector0.density(), 0.01);
      assertEquals(2944, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = compressedVector0.toMatrixMarket();
      assertSame(compressedVector0, sparseVector0);
      assertEquals("%%MatrixMarket vector coordinate real\n2944 2\n1 -1809.000\n94 92.242\n", string0);
      assertEquals(6.793478260869565E-4, compressedVector0.density(), 0.01);
      assertEquals(2944, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertNotNull(string0);
      
      compressedVector0.setAll(92.24233777441638);
      assertSame(compressedVector0, sparseVector0);
      assertEquals(2944, compressedVector0.length());
      assertEquals(2944, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      Spliterator<Float> spliterator0 = linkedList2.spliterator();
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertEquals(0, linkedList2.size());
      assertNotNull(spliterator0);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(1322, (-1515));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2944);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2944, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      compressedVector0.set(56, 2944);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(3.3967391304347825E-4, compressedVector0.density(), 0.01);
      assertEquals(2944, compressedVector0.length());
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)compressedVector0.toColumnMatrix();
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(3.3967391304347825E-4, compressedVector0.density(), 0.01);
      assertEquals(2944, compressedVector0.length());
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(2944.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(2944, cCSMatrix0.rows());
      assertEquals(3.3967391304347825E-4, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(cCSMatrix0);
      
      Spliterator<Float> spliterator0 = linkedList0.spliterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(spliterator0);
      
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      compressedVector0.setAll(56);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2944, compressedVector0.cardinality());
      assertEquals(2944, compressedVector0.length());
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(448, (-4480));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2960);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2960, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      compressedVector0.set(93, 2960);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2960, compressedVector0.length());
      assertEquals(3.3783783783783786E-4, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2960, compressedVector0.length());
      assertEquals(3.3783783783783786E-4, compressedVector0.density(), 0.01);
      assertEquals(2960, sparseVector0.length());
      assertEquals(3.3783783783783786E-4, sparseVector0.density(), 0.01);
      assertEquals(1, sparseVector0.cardinality());
      assertNotNull(sparseVector0);
      
      compressedVector0.swapElements(93, 2960);
      assertSame(compressedVector0, sparseVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2960, compressedVector0.length());
      assertEquals(3.3783783783783786E-4, compressedVector0.density(), 0.01);
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = sparseVector0.toMatrixMarket();
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      assertEquals("%%MatrixMarket vector coordinate real\n2960 1\n2961 2960.000\n", string0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2960, compressedVector0.length());
      assertEquals(3.3783783783783786E-4, compressedVector0.density(), 0.01);
      assertEquals(2960, sparseVector0.length());
      assertEquals(3.3783783783783786E-4, sparseVector0.density(), 0.01);
      assertEquals(1, sparseVector0.cardinality());
      assertNotNull(string0);
      
      compressedVector0.setAll(93);
      assertSame(compressedVector0, sparseVector0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2960, compressedVector0.cardinality());
      assertEquals(2960, compressedVector0.length());
      
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Spliterator<Float> spliterator0 = linkedList1.spliterator();
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(spliterator0);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 2960);
      assertNotSame(compressedVector1, sparseVector0);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)sparseVector0));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(2960, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotNull(compressedVector1);
      
      boolean boolean0 = compressedVector1.nonZeroAt((-1109));
      assertNotSame(compressedVector1, sparseVector0);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(boolean0);
      assertFalse(compressedVector1.equals((Object)sparseVector0));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(2960, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = Integer.getInteger("Unknown symmetry type: ", (-3650));
      assertEquals((-3650), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-3650));
      assertEquals((-3650), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = hashMap0.put(integer0, integer1);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer2);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 280);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2944);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2944, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.set(93, 92.24233777441638);
      assertEquals(3.3967391304347825E-4, compressedVector0.density(), 0.01);
      assertEquals(2944, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector1 = new CompressedVector(2944, 93);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(2944, compressedVector1.length());
      assertNotNull(compressedVector1);
      
      compressedVector0.swapElements((-1579), (-234));
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(3.3967391304347825E-4, compressedVector0.density(), 0.01);
      assertEquals(2944, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(3.3967391304347825E-4, compressedVector0.density(), 0.01);
      assertEquals(2944, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      CompressedVector compressedVector2 = CompressedVector.zero(13, 13);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertEquals(13, compressedVector2.length());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertNotNull(compressedVector2);
      
      double double0 = compressedVector0.getOrElse(1, (-1586.0));
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertEquals((-1586.0), double0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertEquals(3.3967391304347825E-4, compressedVector0.density(), 0.01);
      assertEquals(2944, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      CompressedVector compressedVector3 = new CompressedVector();
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      assertFalse(compressedVector3.equals((Object)compressedVector0));
      assertEquals(0, compressedVector3.length());
      assertEquals(0, compressedVector3.cardinality());
      assertEquals(Double.NaN, compressedVector3.density(), 0.01);
      assertNotNull(compressedVector3);
      
      double double1 = compressedVector0.getOrElse(1347, 1);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertEquals(1.0, double1, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector3));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3.3967391304347825E-4, compressedVector0.density(), 0.01);
      assertEquals(2944, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      byte[] byteArray0 = compressedVector1.toBinary();
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector3);
      assertNotSame(compressedVector1, compressedVector0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)11, (byte) (-128), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector3));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(2944, compressedVector1.length());
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2925;
      doubleArray0[1] = (double) 2925;
      doubleArray0[3] = (double) 2925;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {2925.0, 2925.0, 0.0, 2925.0}, doubleArray0, 0.01);
      assertEquals(4, compressedVector0.length());
      assertEquals(0.75, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(1053);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertArrayEquals(new double[] {2925.0, 2925.0, 0.0, 2925.0}, doubleArray0, 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(4, compressedVector0.length());
      assertEquals(0.75, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector1.cardinality());
      assertEquals(0.002849002849002849, compressedVector1.density(), 0.01);
      assertEquals(1053, compressedVector1.length());
      assertNotNull(compressedVector1);
      
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false).when(vectorPredicate0).test(anyInt() , anyDouble());
      boolean boolean0 = compressedVector0.is(vectorPredicate0);
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {2925.0, 2925.0, 0.0, 2925.0}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(4, compressedVector0.length());
      assertEquals(0.75, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector1.outerProduct(compressedVector0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertArrayEquals(new double[] {2925.0, 2925.0, 0.0, 2925.0}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(4, compressedVector0.length());
      assertEquals(0.75, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector1.cardinality());
      assertEquals(0.002849002849002849, compressedVector1.density(), 0.01);
      assertEquals(1053, compressedVector1.length());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1053, cRSMatrix0.rows());
      assertEquals(0.002136752136752137, cRSMatrix0.density(), 0.01);
      assertEquals(8555625.0, cRSMatrix0.max(), 0.01);
      assertEquals(4, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(9, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      compressedVector0.swapElements(572, (-1895));
      assertNotSame(compressedVector0, compressedVector1);
      assertArrayEquals(new double[] {2925.0, 2925.0, 0.0, 2925.0}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(4, compressedVector0.length());
      assertEquals(0.75, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      
      Integer integer0 = new Integer((-692));
      assertEquals((-692), (int)integer0);
      assertNotNull(integer0);
      
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Integer integer1 = new Integer(2925);
      assertEquals(2925, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(17);
      assertEquals(17, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.copy();
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertArrayEquals(new double[] {2925.0, 2925.0, 0.0, 2925.0}, doubleArray0, 0.01);
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(0.75, compressedVector2.density(), 0.01);
      assertEquals(4, compressedVector2.length());
      assertEquals(3, compressedVector2.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(0.75, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertNotNull(compressedVector2);
      
      compressedVector1.swapElements(17, 0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertArrayEquals(new double[] {2925.0, 2925.0, 0.0, 2925.0}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(4, compressedVector0.length());
      assertEquals(0.75, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector1.cardinality());
      assertEquals(0.002849002849002849, compressedVector1.density(), 0.01);
      assertEquals(1053, compressedVector1.length());
      
      Random.setNextRandom((-692));
      double double0 = compressedVector1.manhattanNorm();
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(8775.0, double0, 0.01);
      assertArrayEquals(new double[] {2925.0, 2925.0, 0.0, 2925.0}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(4, compressedVector0.length());
      assertEquals(0.75, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector1.cardinality());
      assertEquals(0.002849002849002849, compressedVector1.density(), 0.01);
      assertEquals(1053, compressedVector1.length());
      
      byte[] byteArray0 = compressedVector1.toBinary();
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertArrayEquals(new double[] {2925.0, 2925.0, 0.0, 2925.0}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(4, compressedVector0.length());
      assertEquals(0.75, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector1.cardinality());
      assertEquals(0.002849002849002849, compressedVector1.density(), 0.01);
      assertEquals(1053, compressedVector1.length());
      assertNotNull(byteArray0);
      
      compressedVector0.swapElements(9, 9);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertArrayEquals(new double[] {2925.0, 2925.0, 0.0, 2925.0}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      assertEquals(4, compressedVector0.length());
      assertEquals(0.75, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      
      byte[] byteArray1 = compressedVector0.toBinary();
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertArrayEquals(new double[] {2925.0, 2925.0, 0.0, 2925.0}, doubleArray0, 0.01);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      assertEquals(4, compressedVector0.length());
      assertEquals(0.75, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertNotNull(byteArray1);
      
      boolean boolean1 = compressedVector0.nonZeroAt(17);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {2925.0, 2925.0, 0.0, 2925.0}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      assertTrue(boolean1 == boolean0);
      assertEquals(4, compressedVector0.length());
      assertEquals(0.75, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      
      VectorIterator vectorIterator0 = compressedVector1.iterator();
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertArrayEquals(new double[] {2925.0, 2925.0, 0.0, 2925.0}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(4, compressedVector0.length());
      assertEquals(0.75, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector1.cardinality());
      assertEquals(0.002849002849002849, compressedVector1.density(), 0.01);
      assertEquals(1053, compressedVector1.length());
      assertNotNull(vectorIterator0);
  }
}
