/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:48:49 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import okio.Segment;
import okio.SegmentPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Segment_ESTest extends Segment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Segment segment0 = new Segment();
      Segment segment1 = new Segment();
      // Undeclared exception!
      try { 
        segment0.writeTo(segment1, 8197);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Segment segment0 = new Segment();
      // Undeclared exception!
      try { 
        segment0.split((-75));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Segment segment0 = new Segment();
      // Undeclared exception!
      try { 
        segment0.split(8192);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Segment segment0 = new Segment();
      Segment segment1 = segment0.sharedCopy();
      // Undeclared exception!
      try { 
        segment0.writeTo(segment1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Segment segment0 = new Segment();
      Segment segment1 = segment0.sharedCopy();
      segment1.writeTo(segment0, 1);
      // Undeclared exception!
      try { 
        segment0.split(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Segment segment0 = new Segment();
      Segment segment1 = new Segment();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)0;
      Segment segment2 = new Segment(byteArray0, (byte)18, (-28), false, false);
      segment0.next = segment2;
      Segment segment3 = segment0.push(segment1);
      segment3.sharedCopy();
      Segment segment4 = segment1.push(segment0);
      segment4.compact();
      segment4.sharedCopy();
      Segment segment5 = segment2.unsharedCopy();
      assertNotSame(segment5, segment4);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[22];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-26);
      byteArray0[2] = (byte) (-26);
      Segment segment1 = new Segment(byteArray0, (byte) (-26), (byte)0, false, false);
      segment0.next = segment1;
      segment0.push(segment0);
      // Undeclared exception!
      try { 
        segment0.compact();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Segment segment0 = new Segment();
      segment0.shared = true;
      // Undeclared exception!
      try { 
        segment0.writeTo(segment0, 8196);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Segment segment0 = new Segment();
      Segment segment1 = segment0.sharedCopy();
      segment1.writeTo(segment0, 1432);
      // Undeclared exception!
      try { 
        segment0.split(1432);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Segment segment0 = new Segment();
      Segment segment1 = new Segment();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      segment0.next = segment0;
      // Undeclared exception!
      try { 
        segment0.next.pop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Segment segment0 = new Segment();
      Segment segment1 = new Segment();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)0;
      segment0.next = segment0;
      segment0.next.owner = false;
      segment1.limit = 315;
      Segment segment2 = segment0.push(segment1);
      int int0 = (-589);
      segment2.pos = (-589);
      segment0.compact();
      segment1.push(segment0);
      segment2.compact();
      // Undeclared exception!
      try { 
        segment1.writeTo(segment2, (byte)18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Segment segment0 = new Segment();
      Segment segment1 = new Segment((byte[]) null, 8196, 8196, false, true);
      // Undeclared exception!
      try { 
        segment0.writeTo(segment1, 904);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Segment segment0 = new Segment();
      Segment segment1 = new Segment();
      segment0.next = segment0;
      segment1.limit = 396;
      segment0.next.limit = 396;
      Segment segment2 = segment0.push(segment1);
      segment2.writeTo(segment0.next, 2367);
      segment2.split(1);
      segment2.pos = (-1406);
      Segment segment3 = segment1.push(segment0);
      Segment segment4 = segment0.next.push(segment2);
      Segment segment5 = segment4.unsharedCopy();
      segment3.compact();
      SegmentPool.next = null;
      Segment segment6 = segment4.sharedCopy();
      Segment segment7 = segment2.push(segment5);
      segment2.owner = true;
      SegmentPool.next = segment6;
      Segment segment8 = new Segment();
      Segment segment9 = new Segment();
      Segment segment10 = new Segment();
      segment10.writeTo(segment7, 565);
      segment10.writeTo(segment7, 392);
      Segment segment11 = new Segment();
      segment11.next = segment1;
      segment11.next.owner = true;
      SegmentPool.next = segment11.next;
      segment4.compact();
      Segment segment12 = SegmentPool.next.pop();
      assertNotSame(segment12, segment1);
  }
}
