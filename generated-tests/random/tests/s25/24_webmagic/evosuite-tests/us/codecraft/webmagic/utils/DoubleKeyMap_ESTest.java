/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 10:20:23 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<String, String>, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, String>, HashMap<Object, Object>>();
      Map<String, Map<Integer, String>> map0 = doubleKeyMap0.newMap();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, String> doubleKeyMap1 = new DoubleKeyMap<String, Integer, String>(map0, class0);
      String string0 = doubleKeyMap1.remove("\"xQA)0\"3Rl>ob", (Integer) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Integer>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Integer>, Integer, Object>();
      Map<Integer, Object> map0 = doubleKeyMap0.remove((Map<Integer, Integer>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Object>, String, String> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Object>, String, String>();
      Map<String, Map<Integer, Object>> map0 = doubleKeyMap0.newMap();
      HashMap<Object, Map<Integer, Object>> hashMap0 = new HashMap<Object, Map<Integer, Object>>(map0);
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>(hashMap0);
      Map<Integer, Object> map1 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>(class0);
      Map<Integer, Object> map0 = doubleKeyMap0.get("q");
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleKeyMap<Map<String, Object>, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Map<String, Object>, Integer, String>();
      Integer integer0 = new Integer(4293);
      String string0 = doubleKeyMap0.remove((Map<String, Object>) null, integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<Integer, Map<Integer, String>> hashMap0 = new HashMap<Integer, Map<Integer, String>>();
      Integer integer0 = new Integer(4293);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      hashMap0.put(integer0, hashMap1);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>(hashMap0, class0);
      String string0 = doubleKeyMap0.put(integer0, integer0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashMap<String, Map<Map<Integer, Object>, Map<String, String>>> hashMap0 = new HashMap<String, Map<Map<Integer, Object>, Map<String, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Map<Integer, Object>, Map<String, String>> doubleKeyMap0 = new DoubleKeyMap<String, Map<Integer, Object>, Map<String, String>>(hashMap0, class0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      Map<String, String> map0 = doubleKeyMap0.get("", (Map<Integer, Object>) hashMap1);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Integer>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Integer>, Integer, Object>();
      Integer integer0 = new Integer((-345));
      Object object0 = doubleKeyMap0.put((Map<Integer, Integer>) null, integer0, (Object) integer0);
      assertNull(object0);
  }
}
