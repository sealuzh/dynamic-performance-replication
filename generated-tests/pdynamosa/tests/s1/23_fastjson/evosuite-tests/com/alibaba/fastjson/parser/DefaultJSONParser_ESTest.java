/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 09:12:24 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.util.FieldInfo;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Date;
import java.sql.Time;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.time.chrono.IsoEra;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 0);
      Object object0 = defaultJSONParser0.parseKey();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) parserConfig0, object0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "fastjson.parser.deny");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO : ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 0);
      Object object0 = defaultJSONParser0.parseKey();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) parserConfig0, object0);
      ParseContext parseContext1 = defaultJSONParser0.setContext(parseContext0, object0, (Object) "");
      ParseContext parseContext2 = defaultJSONParser0.setContext(parseContext1, object0, (Object) parseContext1);
      assertNotSame(parseContext0, parseContext2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      BigInteger bigInteger0 = BigInteger.ZERO;
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) bigInteger0, (Object) bigInteger0);
      ParseContext parseContext1 = new ParseContext(parseContext0, bigInteger0, "");
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      ParseContext parseContext2 = defaultJSONParser0.setContext(parseContext1, (Object) timeZone0, (Object) timeZone0);
      assertNotSame(parseContext0, parseContext2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("..");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      Short short0 = new Short((short) (-1644));
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ., pos 0, fieldName -1644
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 0);
      Object object0 = defaultJSONParser0.parseKey();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) parserConfig0, object0);
      defaultJSONParser0.setContext(parseContext0, object0, (Object) "");
      Object object1 = defaultJSONParser0.getObject("Q' bI");
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unzip bytes error.");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "unzip bytes error.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Class<Boolean> class0 = Boolean.TYPE;
      Locale locale0 = Locale.forLanguageTag("Js=0rU8jNNiD<");
      Insets insets0 = defaultJSONParser0.parseObject((Type) class0, (Object) locale0);
      assertNull(insets0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      Class<Byte> class0 = Byte.TYPE;
      Long long0 = defaultJSONParser0.parseObject((Type) class0);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '2';
      charArray0[2] = 'e';
      charArray0[3] = '2';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1076);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      BigDecimal bigDecimal0 = (BigDecimal)defaultJSONParser0.parse((Object) parserConfig0);
      assertEquals((byte) (-56), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("A!?d^", parserConfig0);
      Feature feature0 = Feature.UseBigDecimal;
      boolean boolean0 = defaultJSONParser0.isEnabled(feature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("s9)+ ");
      Boolean boolean0 = Boolean.valueOf(false);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) boolean0, (Object) boolean0);
      ParseContext parseContext1 = defaultJSONParser0.getContext();
      assertSame(parseContext1, parseContext0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("q#\"V(57:2CdVV^K'");
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Vlp");
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException((-1032));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 103, (-1674));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.setResolveStatus(0);
      assertEquals(20, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("parse number key error");
      defaultJSONParser0.setResolveStatus(17);
      assertEquals(17, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5{3tn");
      defaultJSONParser0.setDateFormat((String) null);
      assertNull(defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      RenderingHints renderingHints0 = new RenderingHints((Map<RenderingHints.Key, ?>) null);
      JSONScanner jSONScanner0 = new JSONScanner("", (-1408));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(renderingHints0, jSONScanner0, parserConfig0);
      defaultJSONParser0.setDateFormat("");
      assertEquals("", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 21);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", pos ", parserConfig0, 102);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) mockDateFormat0, (Object) mockDateFormat0);
      assertNotNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("uD5");
      Insets insets0 = new Insets(691, 57, 8, 59);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints(1, 0, 57, (-1800), 0.0, 0, 8, (-1800), insets0, 2, 59);
      ParseContext parseContext0 = defaultJSONParser0.setContext((ParseContext) null, (Object) null, (Object) gridBagConstraints0);
      assertNotNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 0);
      Object object0 = new Object();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) parserConfig0, object0);
      ParseContext parseContext1 = defaultJSONParser0.setContext(parseContext0, object0, (Object) "");
      assertNotSame(parseContext0, parseContext1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 21);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.setContext((ParseContext) null);
      assertEquals(20, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("m&(|!,Ayl");
      defaultJSONParser0.setConfig((ParserConfig) null);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("lp");
      Object object0 = defaultJSONParser0.resolveReference("lp");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", ");
      TreeMap<Short, ChoiceFormat> treeMap0 = new TreeMap<Short, ChoiceFormat>();
      Short short0 = new Short((short)3218);
      ChoiceFormat choiceFormat0 = new ChoiceFormat(", ");
      treeMap0.put(short0, choiceFormat0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) treeMap0, (Object) treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("aN");
      HashMap<BufferCapabilities, Point> hashMap0 = new HashMap<BufferCapabilities, Point>();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.BACKGROUND;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      hashMap0.put(bufferCapabilities0, (Point) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, json : aN
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      HashMap<BufferCapabilities, Point> hashMap0 = new HashMap<BufferCapabilities, Point>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ident, pos 3, json : NaN
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("S");
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but ident, pos 1, json : S
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("..");
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) breakIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.util.locale.provider.RuleBasedBreakIterator
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Class<IsoEra> class0 = IsoEra.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse enum java.time.chrono.IsoEra error, value : null
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.EnumDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("J", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra(parserConfig0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 1, json : J
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error : ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra((Object) null, "J|5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - y, info : pos 1, json : syntax error : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("l3u<HlXD MHB{W2<T/");
      Type[] typeArray0 = new Type[2];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", ");
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : ,
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("=o8b/|'{-!!l");
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Date date0 = new Date((-436L));
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) hashSet0, (Object) date0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName 1969-12-31
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Class<Float> class0 = Float.TYPE;
      HashSet<BigInteger> hashSet0 = new HashSet<BigInteger>();
      Insets insets0 = new Insets(44, 5, 0, 0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) hashSet0, (Object) insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("rvJ|3/m`T[I#");
      Class<NumberFormat> class0 = NumberFormat.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(type0, (Collection) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : rvJ|3/m`T[I#
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5{3tn");
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but int, pos 1, json : 5{3tn
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 12);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Rn^Bs/YBBJBG");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) aSMDeserializerFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : Rn^Bs/YBBJBG
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("KjqQ]sA>pD!b#3", parserConfig0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$..$.", parserConfig0, 3146);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName java.lang.Object@3b9a9056
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("#$N7x", parserConfig0);
      defaultJSONParser0.handleResovleTask(aSMDeserializerFactory0.classLoader);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("..");
      Object object0 = defaultJSONParser0.getObject((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Rkp?)V", parserConfig0);
      Feature feature0 = Feature.IgnoreNotMatch;
      defaultJSONParser0.config(feature0, false);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("WuE,#X>1JVF<$6");
      TreeMap<Time, JSONObject> treeMap0 = new TreeMap<Time, JSONObject>();
      defaultJSONParser0.checkMapResolve(treeMap0, (Object) null);
      assertEquals(0, treeMap0.size());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.-l{.$.");
      LinkedHashMap<Byte, GridBagConstraints> linkedHashMap0 = new LinkedHashMap<Byte, GridBagConstraints>();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      defaultJSONParser0.checkMapResolve(linkedHashMap0, gridBagConstraints0);
      assertEquals(0, linkedHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO : ");
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("bFn^uldAv_PpR");
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - F, info : pos 1, json : bFn^uldAv_PpR
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept((-1634), (-1634));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0, 15);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unterminated");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(bigDecimal0, jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(4332, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("create instance error");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("=o8b/|'{-!!l");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(340);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("J~*J+PW6");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("R6KGP'ya");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra(object0, "sO/ZQKaFFcN@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 6, info : pos 1, json : R6KGP'ya
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      char[] charArray0 = new char[7];
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(charArray0, 8192, parserConfig0, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("not support type ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Object object0 = defaultJSONParser0.parse((Object) "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("uD5", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : uD5
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(kOdek");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "(kOdek");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : (kOdek
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1076);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Object object0 = defaultJSONParser0.parse((Object) parserConfig0);
      assertEquals(2, object0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("java.util.Collections$EmptyMap");
      Locale locale0 = Locale.PRC;
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((ParseContext) null, (Object) decimalFormatSymbols0, (Object) "java.util.Collections$EmptyMap");
      Byte byte0 = new Byte((byte)82);
      ParseContext parseContext1 = defaultJSONParser0.setContext(parseContext0, (Object) byte0, (Object) null);
      assertNotSame(parseContext0, parseContext1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Z.U YDpF+=uI*j`");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "Z.U YDpF+=uI*j`", (Object) null);
      defaultJSONParser0.setContext(parseContext0);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.{.$.");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Dz/w");
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) null, (Collection) list0, (Object) imageCapabilities0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : Dz/w
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("rrGXN;yF)i6/VGhQ=}");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : rrGXN;yF)i6/VGhQ=}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TreeMap<Short, ChoiceFormat> treeMap0 = new TreeMap<Short, ChoiceFormat>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", property ");
      Type[] typeArray0 = new Type[0];
      Class<Byte> class0 = Byte.TYPE;
      Class<Double> class1 = Double.TYPE;
      com.alibaba.fastjson.util.ParameterizedTypeImpl parameterizedTypeImpl0 = new com.alibaba.fastjson.util.ParameterizedTypeImpl(typeArray0, class0, class1);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) treeMap0, (Object) parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("q-YGk@4kf_,8;^fg\"");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, json : q-YGk@4kf_,8;^fg\"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("z&:>Z8", parserConfig0, (-319));
      ParseContext parseContext0 = defaultJSONParser0.getContext();
      assertNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",5&'Y;$gccx!");
      LinkedHashSet<BufferCapabilities> linkedHashSet0 = new LinkedHashSet<BufferCapabilities>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) null, (Collection) linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but ,, pos 1, json : ,5&'Y;$gccx!
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("getMetaClass");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, json : getMetaClass
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("WuE,$#X:>1JVF<$6");
      ParserConfig parserConfig0 = defaultJSONParser0.getConfig();
      assertFalse(ParserConfig.AUTO_SUPPORT);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Vlp");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) "Vlp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName Vlp
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("q-YGk@4kf_,8;^fg\"");
      defaultJSONParser0.handleResovleTask((Object) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Vlp");
      Object object0 = defaultJSONParser0.resolveReference("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.close();
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("..");
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO : ", parserConfig0, 0);
      defaultJSONParser0.close();
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", actual ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept((-1109));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual ,
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      Object object0 = defaultJSONParser0.parse();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("T", parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : T
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("..");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ..
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";'w");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) ";'w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ;'w
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",P!sC#Y3is");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ,P!sC#Y3is
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}t%f*E", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "}t%f*E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : }t%f*E
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5{-tn");
      defaultJSONParser0.parse();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse number key errorpos 3, json : 5{-tn
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("E)4F");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : E)4F
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uD5", (-292));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser((Object) null, jSONScanner0, parserConfig0);
      defaultJSONParser0.parseKey();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("& wKB[DQ", parserConfig0, (-153));
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) null, (Object) null);
      assertNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$", parserConfig0, (-1));
      defaultJSONParser0.popContext();
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("=o8b/|'~%{-!!l");
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("m&(|!,Ayl");
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("z&:>Z8", parserConfig0, (-319));
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "i[29");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("@90U=Q-{+f-o=1g");
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      List<DefaultJSONParser.ResolveTask> list1 = defaultJSONParser0.getResolveTaskList();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[u26J2uP");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 8, json : [u26J2uP
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";");
      defaultJSONParser0.checkMapResolve((Map) null, ";");
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", pos ");
      defaultJSONParser0.checkListResolve((Collection) null);
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.getObject("");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO : ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("TODO : ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Q*]pLyNp[z9!QP=R-s9", parserConfig0);
      Type[] typeArray0 = new Type[0];
      Class<Double> class0 = Double.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      com.alibaba.fastjson.util.ParameterizedTypeImpl parameterizedTypeImpl0 = new com.alibaba.fastjson.util.ParameterizedTypeImpl(typeArray0, type0, class0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support type com.alibaba.fastjson.util.ParameterizedTypeImpl@da1
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("parse number key error");
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : parse number key error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";2SW834 wXHH\"or");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5{3tn");
      defaultJSONParser0.parse();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) bufferCapabilities0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 3pos 2, json : 5{3tn
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",HEzwn_`8_qJ|");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) ",HEzwn_`8_qJ|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - `, info : pos 7, json : ,HEzwn_`8_qJ|
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("hasPropertyFilters");
      Dimension dimension0 = new Dimension(1, 386);
      Rectangle rectangle0 = new Rectangle(dimension0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) rectangle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5{3tn");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : int
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",HEzwn_`8_qJ|");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual `
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5{3tn");
      defaultJSONParser0.parse();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse number key errorpos 3, json : 5{3tn
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("lp");
      defaultJSONParser0.getInput();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[u26J2uP");
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      ArrayList<BigInteger> arrayList0 = new ArrayList<BigInteger>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ident, pos 1, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{5Iv-I%S6:a&LK#a\"iT");
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{5Iv-I%S6:a&LK#a\"iT", 0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) parameterizedTypeImpl0, (Object) jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {5Iv-I%S6:a&LK#a\"iT
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("u5tPrminate&\"cd");
      defaultJSONParser0.getDateFormat();
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      assertNotNull(dateFormat0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";a&'#~");
      defaultJSONParser0.setDateFomrat((DateFormat) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("DT%x(oPYGzsI.3");
      defaultJSONParser0.getSymbolTable();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 115);
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[4];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 0);
      Class<Byte> class0 = Byte.class;
      defaultJSONParser0.parseObject(class0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("y=LR{3,aA=U,U7Q.vv ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : y=LR{3,aA=U,U7Q.vv 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("=o8b/|'{-!!l");
      Feature feature0 = Feature.DisableASM;
      defaultJSONParser0.isEnabled(feature0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("m&(|!,Ayj");
      Feature feature0 = Feature.SupportAutoType;
      defaultJSONParser0.config(feature0, true);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("s9)+ ", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";a&'#~");
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Vlp");
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException(44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",HEzwn_`8_qJ|");
      defaultJSONParser0.getFieldTypeResolver();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";2Sm834 X8H\"or");
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but ;, pos 1, json : ;2Sm834 X8H\"or
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("getName");
      defaultJSONParser0.setResolveStatus((-2914));
      assertEquals((-2914), defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      RenderingHints renderingHints0 = new RenderingHints((Map<RenderingHints.Key, ?>) null);
      JSONScanner jSONScanner0 = new JSONScanner("", (-1408));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(renderingHints0, jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context", 1948);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.setConfig(parserConfig0);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Vlp");
      defaultJSONParser0.getDateFomartPattern();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error :", parserConfig0);
      JSONLexer jSONLexer0 = defaultJSONParser0.getLexer();
      assertNotNull(jSONLexer0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, jSONLexer0.token());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Vlp");
      defaultJSONParser0.setDateFormat("Vlp");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$..$.");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.resolveReference((String) null);
      assertEquals(1, jSONScanner0.token());
  }
}
