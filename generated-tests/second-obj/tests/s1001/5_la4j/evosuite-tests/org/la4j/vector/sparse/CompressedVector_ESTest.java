/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:08:45 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Random;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.VectorOperation;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      // Undeclared exception!
      try { 
        compressedVector0.blankOfLength((-4823));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -4823
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1801, 1801);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(18, vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      boolean boolean0 = compressedVector0.nonZeroAt((-2141));
      assertFalse(boolean0);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      compressedVector0.non(vectorPredicate0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("e*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 0);
      compressedVector0.nonZeroIterator();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random((-1078), 0.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1078
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      linkedList0.listIterator();
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      compressedVector0.swapElements(25, 25);
      assertSame(compressedVector0, sparseVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero(3, 246);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 246.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random((-414), (double) (-414), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1801, 1801);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)18).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(18, vectorFunction0);
      compressedVector0.set(18, 18.0);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1089.0;
      doubleArray0[1] = 1089.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.nonZeroIterator();
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer((-1481));
      Double double0 = new Double((-1481));
      hashMap0.put(integer0, double0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 2427);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(1518);
      Double double0 = new Double(1518);
      hashMap0.put(integer0, double0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 1772);
      // Undeclared exception!
      try { 
        compressedVector0.set(1772, 1772);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1772' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(685);
      hashMap0.put(integer0, integer0);
      int int0 = (-4706);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-4706));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(0, (-2881));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -2881.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(4);
      assertEquals(4, compressedVector1.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(4085);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
      assertEquals(4085, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(27);
      compressedVector0.setAll(0.0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(27, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(27);
      compressedVector0.setAll(27);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.setAll((-268.26083));
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      CompressedVector compressedVector0 = new CompressedVector(47);
      compressedVector0.setAll(1.0);
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1045.7);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements((-3313), (-3923));
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3, 3);
      compressedVector0.manhattanNorm();
      compressedVector0.setAll(3);
      compressedVector0.swapElements((-511), (-1));
      compressedVector0.nonZeroAt((-1));
      compressedVector0.toBinary();
      // Undeclared exception!
      try { 
        CompressedVector.zero((-511), (-4225));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -511
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((double) 1.0F);
      linkedList0.add(float0);
      Float float1 = new Float(1.0F);
      Float float2 = new Float(1.0F);
      Float.isFinite(1.0F);
      linkedList0.add(float1);
      linkedList0.clone();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-3287.1294659086993)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-3063), vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(351, (-1037));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(16, 16);
      compressedVector0.swapElements(3, 968);
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("DKF*J");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1801, 1801);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)18).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(18, vectorFunction0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure1);
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      decimalFormat0.format((long) 1801);
      NumberFormat.getPercentInstance();
      decimalFormat0.setGroupingUsed(true);
      compressedVector0.toMatrixMarket((NumberFormat) decimalFormat0);
      compressedVector0.swapElements(997, 997);
      org.evosuite.runtime.Random.setNextRandom(9);
      compressedVector0.setAll(3559.6);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(9, vectorFunction1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 7;
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[9];
      intArray0[1] = 7;
      intArray0[6] = 7;
      intArray0[8] = 7;
      intArray0[5] = 7;
      intArray0[6] = 7;
      intArray0[7] = 7;
      intArray0[8] = 7;
      CompressedVector compressedVector0 = new CompressedVector(7, 7, doubleArray0, intArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 7, 0, 0, 0, 7, 7, 7, 7}, intArray0);
      assertEquals(7, compressedVector0.length());
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      boolean boolean0 = compressedVector0.nonZeroAt(7);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 7, 0, 0, 0, 7, 7, 7, 7}, intArray0);
      assertTrue(boolean0);
      assertEquals(7, compressedVector0.length());
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = new CompressedVector();
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(7, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3, 3);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      double double0 = compressedVector0.manhattanNorm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll(3);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      
      double double1 = compressedVector0.getOrElse(2, 1.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3.0, double1, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertNotNull(vectorIterator0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3, 3);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll((-1.0));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      compressedVector0.swapElements(3, 3);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      
      compressedVector0.setAll((-1.0));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      
      String string0 = compressedVector0.toCSV();
      assertNotNull(string0);
      assertEquals("-1.000, -1.000, -1.000", string0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[9];
      intArray0[8] = 7;
      intArray0[1] = 7;
      intArray0[0] = 7;
      intArray0[1] = 7;
      intArray0[5] = 7;
      intArray0[7] = 7;
      intArray0[1] = 7;
      CompressedVector compressedVector0 = new CompressedVector(7, 7, doubleArray0, intArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {7, 7, 0, 0, 0, 7, 0, 7, 7}, intArray0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        compressedVector0.is((VectorPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[9];
      intArray0[7] = 7;
      intArray0[1] = 7;
      intArray0[4] = 7;
      intArray0[3] = 7;
      intArray0[5] = 7;
      intArray0[7] = 7;
      intArray0[8] = 7;
      CompressedVector compressedVector0 = new CompressedVector(7, 7, doubleArray0, intArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 7, 0, 7, 7, 7, 0, 7, 7}, intArray0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        compressedVector0.is((VectorPredicate) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1750, 1750);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1750, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(17.744396504148998).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(35, vectorFunction0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(5.714285714285715E-4, compressedVector0.density(), 0.01);
      assertEquals(1750, compressedVector0.length());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(5.714285714285715E-4, compressedVector0.density(), 0.01);
      assertEquals(1750, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1801, 1801);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1801, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      double double0 = compressedVector0.getOrElse(18, (-2246.0));
      assertEquals((-2246.0), double0, 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1801, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1801, 1801);
      assertNotNull(compressedVector0);
      assertEquals(1801, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll((-1085.780644));
      assertEquals(1801, compressedVector0.cardinality());
      assertEquals(1801, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      int int0 = 18;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)18).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(18, vectorFunction0);
      assertEquals(1801, compressedVector0.cardinality());
      assertEquals(1801, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompressedVector compressedVector1 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
      assertEquals(0.0, double0, 0.01);
      
      Consumer<Float> consumer0 = (Consumer<Float>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        compressedVector1.to((VectorFactory<CompressedVector>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 354.707;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {354.707}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertArrayEquals(new double[] {354.707}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(13);
      assertNotNull(double0);
      assertEquals(13.0, (double)double0, 0.01);
      
      boolean boolean0 = linkedList0.add(double0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      double double1 = compressedVector0.min();
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(56);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(56, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      double double0 = compressedVector0.infinityNorm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(56, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.swapElements(56, 56);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(56, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[16];
      intArray0[1] = 7;
      intArray0[6] = 7;
      intArray0[4] = 7;
      intArray0[5] = 7;
      intArray0[6] = 7;
      intArray0[8] = 7;
      CompressedVector compressedVector0 = new CompressedVector(7, 7, doubleArray0, intArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      boolean boolean0 = compressedVector0.nonZeroAt(0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = new CompressedVector();
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1562).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-601), vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[9];
      intArray0[1] = 7;
      intArray0[6] = 7;
      intArray0[4] = 7;
      intArray0[5] = 7;
      intArray0[6] = 7;
      intArray0[7] = 7;
      intArray0[8] = 7;
      CompressedVector compressedVector0 = new CompressedVector(7, 7, doubleArray0, intArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 7, 0, 0, 7, 7, 7, 7, 7}, intArray0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      
      boolean boolean0 = compressedVector0.nonZeroAt(7);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 7, 0, 0, 7, 7, 7, 7, 7}, intArray0);
      assertTrue(boolean0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      
      CompressedVector compressedVector1 = new CompressedVector();
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0, compressedVector1.length());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-601), vectorFunction0);
      assertNotSame(compressedVector0, compressedVector1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 7, 0, 0, 7, 7, 7, 7, 7}, intArray0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[9];
      intArray0[0] = 7;
      intArray0[1] = 7;
      intArray0[2] = 7;
      intArray0[3] = 7;
      intArray0[4] = 7;
      intArray0[5] = 7;
      intArray0[6] = 7;
      intArray0[7] = 7;
      intArray0[8] = 7;
      CompressedVector compressedVector0 = new CompressedVector(7, 7, doubleArray0, intArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {7, 7, 7, 7, 7, 7, 7, 7, 7}, intArray0);
      assertEquals(7, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.cardinality());
      
      boolean boolean0 = compressedVector0.nonZeroAt(7);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {7, 7, 7, 7, 7, 7, 7, 7, 7}, intArray0);
      assertTrue(boolean0);
      assertEquals(7, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.cardinality());
      
      CompressedVector compressedVector1 = CompressedVector.zero(1562);
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1562, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      
      compressedVector0.set(2, 0.0);
      assertNotSame(compressedVector0, compressedVector1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {7, 7, 7, 7, 7, 7, 7, 7, 7}, intArray0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(7, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1562);
      assertNotNull(compressedVector0);
      assertEquals(1562, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)16;
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      
      byte[] byteArray1 = compressedVector0.toBinary();
      assertNotNull(byteArray1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)6, (byte)26, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1562, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3, 3);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      
      double double0 = compressedVector0.manhattanNorm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      
      compressedVector0.setAll((-2435.87512));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      
      int int0 = (-511);
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      
      double double1 = 1.0;
      double double2 = compressedVector0.getOrElse(2, 1.0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-2435.87512), double2, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      
      CompressedVector compressedVector1 = new CompressedVector();
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector2 = CompressedVector.fromBinary(byteArray0);
      assertNotNull(compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(3, compressedVector2.length());
      assertEquals(1.0, compressedVector2.density(), 0.01);
      assertEquals(3, compressedVector2.cardinality());
      
      VectorIterator vectorIterator0 = compressedVector1.iterator();
      assertNotNull(vectorIterator0);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector2);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(1598, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1598' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(372, 20);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(372, compressedVector0.length());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(20);
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(372, compressedVector0.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(20, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1801, 1801);
      assertNotNull(compressedVector0);
      assertEquals(1801, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)18).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(18, vectorFunction0);
      assertEquals(5.55247084952804E-4, compressedVector0.density(), 0.01);
      assertEquals(1801, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(5.55247084952804E-4, compressedVector0.density(), 0.01);
      assertEquals(1801, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      double double0 = compressedVector0.getOrElse(8, 18);
      assertEquals(18.0, double0, 0.01);
      assertEquals(5.55247084952804E-4, compressedVector0.density(), 0.01);
      assertEquals(1801, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure1);
      assertEquals(5.55247084952804E-4, compressedVector0.density(), 0.01);
      assertEquals(1801, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Vector vector0 = Vector.fromCollection(linkedList0);
      assertNotNull(vector0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, vector0.length());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      
      Locale locale1 = Locale.ITALY;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("it_IT", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance(locale1);
      assertNotNull(decimalFormat0);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("it_IT", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("#.##0%", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 1801;
      CompressedVector compressedVector0 = new CompressedVector(1801, 1801);
      assertNotNull(compressedVector0);
      assertEquals(1801, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)31).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(31, vectorFunction0);
      assertEquals(1801, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(5.55247084952804E-4, compressedVector0.density(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Vector vector0 = Vector.fromCollection(linkedList0);
      assertNotNull(vector0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, vector0.length());
      
      compressedVector0.swapElements(5, 1801);
      assertEquals(1801, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(5.55247084952804E-4, compressedVector0.density(), 0.01);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertNotNull(decimalFormat0);
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      
      DecimalFormat decimalFormat1 = (DecimalFormat)decimalFormat0.clone();
      assertNotNull(decimalFormat1);
      assertNotSame(decimalFormat0, decimalFormat1);
      assertNotSame(decimalFormat1, decimalFormat0);
      assertTrue(decimalFormat1.equals((Object)decimalFormat0));
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals("#,##0.###", decimalFormat1.toPattern());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat1.toLocalizedPattern());
      assertEquals(3, decimalFormat1.getMaximumFractionDigits());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      
      int int1 = 1;
      decimalFormat0.setMaximumFractionDigits(1);
      assertNotSame(decimalFormat0, decimalFormat1);
      assertFalse(decimalFormat0.equals((Object)decimalFormat1));
      assertEquals("#,##0.#", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(1, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.#", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      
      int int2 = (-2131935603);
      compressedVector0.set(5, (-1.0));
      assertEquals(1801, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.001110494169905608, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.set((-2131935603), (byte)44);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-2131935603' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 1655;
      // Undeclared exception!
      try { 
        CompressedVector.random(1655, 1.0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3, 3);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(3);
      assertEquals(3, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      
      double double0 = new Integer(3);
      assertEquals(3, double0, 0.01);
      
      compressedVector0.swapElements(3, 3);
      assertEquals(3, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      
      compressedVector0.setAll(3);
      assertEquals(3, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        Vector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3, 3);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(3);
      assertEquals(3, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      Integer integer0 = new Integer(3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      compressedVector0.swapElements(3, 3);
      assertEquals(3, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(3);
      assertEquals(3, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3, (double)3, 1453.459).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(3, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        Vector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3, 3);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      double double0 = compressedVector0.manhattanNorm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll((-2435.87512));
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      int int0 = (-511);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(2, (-511));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1326.9900359);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {(-1326.9900359), 0.0}, doubleArray0, 0.01);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      compressedVector0.swapElements((-1945), 2);
      assertArrayEquals(new double[] {(-1326.9900359), 0.0}, doubleArray0, 0.01);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertNotNull(vectorIterator0);
      assertArrayEquals(new double[] {(-1326.9900359), 0.0}, doubleArray0, 0.01);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertArrayEquals(new double[] {(-1326.9900359), 0.0}, doubleArray0, 0.01);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure1);
      assertArrayEquals(new double[] {(-1326.9900359), 0.0}, doubleArray0, 0.01);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3, 3);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      
      double double0 = compressedVector0.manhattanNorm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      
      compressedVector0.swapElements((-515), (-7));
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      
      compressedVector0.setAll((-2435.87512));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      
      int int0 = (-511);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-511));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -511
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3, 3);
      assertNotNull(compressedVector0);
      assertEquals(3, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll((-1.0));
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      double double0 = compressedVector0.innerProduct(compressedVector0);
      assertEquals(3.0, double0, 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double1 = mockRandom0.nextGaussian();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3);
      assertNotNull(compressedVector0);
      assertEquals(3, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      double double0 = compressedVector0.manhattanNorm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertEquals(3, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      int int0 = (-511);
      compressedVector0.swapElements((-511), 6);
      assertEquals(3, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll((-2435.87512));
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-511), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 3;
      CompressedVector compressedVector0 = new CompressedVector(3);
      assertNotNull(compressedVector0);
      assertEquals(3, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.swapElements(3, 3);
      assertEquals(3, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll((-2436.402198641536));
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(3, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3, 3);
      assertNotNull(compressedVector0);
      assertEquals(3, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      double double0 = compressedVector0.manhattanNorm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll(3);
      assertEquals(3, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      compressedVector0.swapElements((-511), (-1));
      assertEquals(3, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.shuffle();
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(3, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector1.length());
      assertEquals(3, compressedVector1.cardinality());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector1.swapElements(0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 3;
      CompressedVector compressedVector0 = new CompressedVector(3, 3);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      
      double double0 = compressedVector0.manhattanNorm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      
      compressedVector0.setAll(3);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      
      int int1 = 2;
      int int2 = (-111);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-111), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      double double0 = mockRandom0.nextGaussian();
      assertNotSame(mockRandom0, mockRandom1);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 1461.0;
      doubleArray0[4] = 0.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 1461.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.shuffle();
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertArrayEquals(new double[] {0.0, 1461.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector1.length());
      assertEquals(0.2, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BasicVector basicVector0 = (BasicVector)Vector.fromCollection(linkedList0);
      assertNotNull(basicVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, basicVector0.length());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance(locale0);
      assertNotNull(decimalFormat0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals("#.##0%", decimalFormat0.toLocalizedPattern());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)compressedVector0.toColumnMatrix();
      assertNotNull(cCSMatrix0);
      assertNotSame(compressedVector0, compressedVector1);
      assertArrayEquals(new double[] {0.0, 1461.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(5, cCSMatrix0.rows());
      assertEquals(1, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.2, cCSMatrix0.density(), 0.01);
      assertEquals(1461.0, cCSMatrix0.max(), 0.01);
      assertEquals(1, cCSMatrix0.cardinality());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 4;
      CompressedVector compressedVector2 = new CompressedVector(4, 4, doubleArray0, intArray0);
      assertNotNull(compressedVector2);
      assertArrayEquals(new double[] {0.0, 1461.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {4}, intArray0);
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertEquals(1.0, compressedVector2.density(), 0.01);
      assertEquals(4, compressedVector2.cardinality());
      assertEquals(4, compressedVector2.length());
      
      // Undeclared exception!
      try { 
        compressedVector2.to((VectorFactory<CompressedVector>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      double double0 = mockRandom0.nextGaussian();
      assertNotSame(mockRandom0, mockRandom1);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3;
      doubleArray0[4] = 1461.0;
      doubleArray0[4] = (double) 3;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)34;
      byte byte0 = (byte) (-82);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-82);
      mockRandom0.nextBytes(byteArray0);
      assertNotSame(mockRandom0, mockRandom1);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      
      doubleArray0[4] = 0.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {3.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.shuffle();
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector0, compressedVector1);
      assertArrayEquals(new double[] {3.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(5, compressedVector1.length());
      assertEquals(0.2, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        SparseVector.random(16, (double) (byte)21, (Random) mockRandom1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1801, 1801);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1801, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)18).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(18, vectorFunction0);
      assertEquals(1801, compressedVector0.length());
      assertEquals(5.55247084952804E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      double double0 = compressedVector0.getOrElse(8, 18);
      assertEquals(18.0, double0, 0.01);
      assertEquals(1801, compressedVector0.length());
      assertEquals(5.55247084952804E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(1801, compressedVector0.length());
      assertEquals(5.55247084952804E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      decimalFormat0.clone();
      compressedVector0.toMatrixMarket((NumberFormat) decimalFormat0);
      compressedVector0.swapElements(18, (-273));
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random(8, 2010.9836463, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3040.0;
      doubleArray0[2] = 3102.071373299003;
      doubleArray0[3] = 1921.0495;
      doubleArray0[4] = 1.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {(-1.0), 3040.0, 3102.071373299003, 1921.0495, 1.0}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(5, compressedVector0.cardinality());
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertArrayEquals(new double[] {(-1.0), 3040.0, 3102.071373299003, 1921.0495, 1.0}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(5, compressedVector0.cardinality());
      
      compressedVector0.swapElements(2, 2);
      assertArrayEquals(new double[] {(-1.0), 3040.0, 3102.071373299003, 1921.0495, 1.0}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(5, compressedVector0.cardinality());
      
      compressedVector0.set(2, 0.0);
      assertArrayEquals(new double[] {(-1.0), 3040.0, 3102.071373299003, 1921.0495, 1.0}, doubleArray0, 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(0.8, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3, 3);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(3, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll((-1.0));
      assertEquals(3, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      assertEquals(1.0, double0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double1 = mockRandom0.nextGaussian();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray0 = new double[17];
      doubleArray0[1] = 1461.0;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(3, compressedVector1.cardinality());
      assertEquals(17, compressedVector1.length());
      assertEquals(0.17647058823529413, compressedVector1.density(), 0.01);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.shuffle();
      assertNotNull(compressedVector2);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertEquals(3, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector2.cardinality());
      assertEquals(3, compressedVector2.length());
      assertEquals(1.0, compressedVector2.density(), 0.01);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double2 = new Double(3.0);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(3.0, (double)double2, 0.01);
      
      boolean boolean0 = linkedList0.add((Double) 3.0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.offer((Double) 1.0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      BasicVector basicVector0 = (BasicVector)Vector.fromCollection(linkedList1);
      assertNotNull(basicVector0);
      assertEquals(0, linkedList1.size());
      assertEquals(0, basicVector0.length());
      
      compressedVector1.swapElements((-2539), 3);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(3, compressedVector1.cardinality());
      assertEquals(17, compressedVector1.length());
      assertEquals(0.17647058823529413, compressedVector1.density(), 0.01);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance(locale0);
      assertNotNull(decimalFormat0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#.##0%", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      
      DecimalFormat decimalFormat1 = new DecimalFormat("!2Jss2E/s");
      assertNotNull(decimalFormat1);
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertFalse(decimalFormat1.isGroupingUsed());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals(0, decimalFormat1.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals("!2Jss2E/s#", decimalFormat1.toLocalizedPattern());
      assertEquals(0, decimalFormat1.getMaximumFractionDigits());
      assertEquals(0, decimalFormat1.getMinimumIntegerDigits());
      assertEquals("!2Jss2E/s", decimalFormat1.getPositivePrefix());
      assertEquals("-!2Jss2E/s", decimalFormat1.getNegativePrefix());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertEquals("!2Jss2E/s#", decimalFormat1.toPattern());
      
      decimalFormat1.setMaximumFractionDigits((-1310));
      assertNotSame(decimalFormat1, decimalFormat0);
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertFalse(decimalFormat1.isGroupingUsed());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals(0, decimalFormat1.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals("!2Jss2E/s#", decimalFormat1.toLocalizedPattern());
      assertEquals(0, decimalFormat1.getMaximumFractionDigits());
      assertEquals(0, decimalFormat1.getMinimumIntegerDigits());
      assertEquals("!2Jss2E/s", decimalFormat1.getPositivePrefix());
      assertEquals("-!2Jss2E/s", decimalFormat1.getNegativePrefix());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertEquals("!2Jss2E/s#", decimalFormat1.toPattern());
      
      compressedVector1.swapElements((-2385), (-2539));
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(3, compressedVector1.cardinality());
      assertEquals(17, compressedVector1.length());
      assertEquals(0.17647058823529413, compressedVector1.density(), 0.01);
      
      // Undeclared exception!
      try { 
        CompressedVector.zero((-3083));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -3083
         //
         verifyException("org.la4j.Vector", e);
      }
  }
}
