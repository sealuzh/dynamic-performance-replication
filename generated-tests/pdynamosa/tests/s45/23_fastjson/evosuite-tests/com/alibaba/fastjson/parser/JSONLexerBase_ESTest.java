/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 09:35:47 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(X(g:", (-1636));
      char[] charArray0 = new char[1];
      charArray0[0] = '>';
      jSONReaderScanner0.scanFieldString(charArray0);
      char[] charArray1 = new char[5];
      charArray1[0] = '>';
      charArray1[1] = '>';
      charArray1[2] = '>';
      JSONScanner jSONScanner0 = new JSONScanner("(X(g:");
      // Undeclared exception!
      try { 
        jSONScanner0.subString(26, (-212));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3183);
      boolean boolean0 = JSONLexerBase.isWhitespace('9');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 46);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = '4';
      charArray0[2] = 't';
      charArray0[3] = 'b';
      charArray0[4] = '|';
      charArray0[5] = '?';
      charArray0[6] = 'c';
      charArray0[7] = 'O';
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      jSONScanner0.scanStringArray(list0, '-');
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.scanType("null");
      int int0 = jSONScanner0.matchStat();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed.str.lit");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("S)|");
      jSONScanner0.indexOf('3', 6);
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[4] = '3';
      charArray0[5] = '3';
      jSONScanner0.matchField2(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(X(g:", (-1636));
      char[] charArray0 = new char[1];
      charArray0[0] = '>';
      jSONReaderScanner0.scanFieldString(charArray0);
      char[] charArray1 = new char[5];
      charArray1[0] = '>';
      charArray1[1] = '>';
      charArray1[2] = '>';
      charArray1[3] = '>';
      charArray1[4] = '>';
      jSONReaderScanner0.scanFieldFloatArray2(charArray1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("in");
      jSONReaderScanner0.getFeatures();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = '`';
      charArray0[2] = '_';
      charArray0[3] = 'o';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3183);
      jSONReaderScanner0.nextToken(3183);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONLexerBase.isWhitespace('X');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("springfox.documentation.spring.web.json.Json");
      int int0 = jSONReaderScanner0.token();
      assertEquals(0, int0);
      
      jSONReaderScanner0.bytesValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("vn~l\"");
      jSONReaderScanner0.scanDouble('H');
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanIdent();
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.matchStat();
      char[] charArray0 = new char[8];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = 'H';
      charArray0[4] = 'H';
      charArray0[5] = 'H';
      charArray0[6] = 'H';
      charArray0[7] = 'H';
      jSONReaderScanner0.scanFieldInt(charArray0);
      char[] charArray1 = new char[6];
      charArray1[0] = 'H';
      charArray1[1] = 'H';
      charArray1[2] = 'H';
      charArray1[3] = 'H';
      charArray1[4] = 'H';
      charArray1[5] = 'H';
      jSONReaderScanner0.scanFieldInt(charArray1);
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0Gc");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("In");
      jSONReaderScanner0.timeZone = null;
      jSONReaderScanner0.nextToken();
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      jSONReaderScanner0.scanInt('D');
      jSONReaderScanner0.isEnabled(feature0);
      jSONReaderScanner0.getTimeZone();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[10];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 93);
      jSONReaderScanner0.scanType("agy%PN.pP");
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.isRef();
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("In", 744);
      SymbolTable symbolTable0 = new SymbolTable(744);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'N');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.nextToken();
      JSONScanner jSONScanner0 = new JSONScanner("", 0);
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals(0, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("In", 16);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(16, jSONReaderScanner0.getFeatures());
      
      boolean boolean0 = JSONLexerBase.isWhitespace(' ');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.nextToken();
      assertEquals(7, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONLexerBase.isWhitespace('T');
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      charArray0[4] = 'T';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 65536, 13);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(112, 65536, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. e
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = '|';
      charArray0[2] = '`';
      charArray0[3] = '\\';
      charArray0[4] = '\\';
      charArray0[5] = 'R';
      charArray0[6] = 'A';
      charArray0[7] = 'm';
      JSONLexerBase.readString(charArray0, 8);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1563, (-214748364));
      jSONReaderScanner0.close();
      JSONScanner jSONScanner0 = new JSONScanner("com.google.common.collect.");
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(76, (-214748364));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 57);
      jSONReaderScanner0.scanType((String) null);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3183);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldString(charArray1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[S)M");
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.indexOf('3', 6);
      jSONScanner0.scanFieldLong(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(1123);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(46, (-1), (-4088), symbolTable0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2Wh^W`x_", (-478));
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('9');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-^F1mS87LSY*2i");
      jSONReaderScanner0.scanDate('a');
      jSONReaderScanner0.scanDouble('T');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - -, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 59);
      jSONReaderScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("", 43);
      char[] charArray0 = new char[0];
      jSONReaderScanner1.scanFieldBoolean(charArray0);
      jSONReaderScanner1.nextToken();
      jSONReaderScanner1.indexOf('&', 43);
      assertEquals(20, jSONReaderScanner1.token());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("S)|");
      jSONScanner0.indexOf('3', 6);
      TimeZone timeZone0 = jSONScanner0.getTimeZone();
      jSONScanner0.setTimeZone(timeZone0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1439);
      jSONReaderScanner0.tokenName();
      Locale locale0 = Locale.CANADA;
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = 7;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 7);
      jSONReaderScanner0.nextToken();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 1686);
      SymbolTable symbolTable0 = new SymbolTable(7);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanFieldStringArray(charArray0, 0, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0Gc");
      jSONReaderScanner0.pos = 46;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 0
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(">p");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONLexerBase.isWhitespace('@');
      jSONReaderScanner0.scanUUID('-');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONLexerBase.isWhitespace(' ');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("o@", 40);
      jSONReaderScanner0.setToken(40);
      assertEquals(40, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed string : ");
      char[] charArray0 = new char[7];
      charArray0[0] = 'O';
      charArray0[1] = '5';
      charArray0[2] = 'n';
      charArray0[3] = '*';
      charArray0[4] = 'o';
      charArray0[5] = 'p';
      charArray0[6] = 'X';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 3094);
      jSONReaderScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      charArray0[1] = 'z';
      charArray0[2] = 'G';
      int int0 = 1927;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1927);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(1927);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - #, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3183);
      jSONReaderScanner0.scanFloat('-');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1439);
      jSONReaderScanner0.scanBoolean('|');
      jSONReaderScanner0.scanNumber();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 102);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.charAt(102);
      jSONReaderScanner0.sub_chars(102, 102);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'p';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 43, 43);
      jSONReaderScanner0.isEnabled(43, 43);
      jSONReaderScanner0.matchStat();
      jSONReaderScanner0.indexOf('p', 19);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString(69, (-631));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -631
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0Gc");
      JSONScanner jSONScanner0 = new JSONScanner("0Gc");
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = 'R';
      charArray0[2] = '$';
      charArray0[3] = '[';
      charArray0[4] = 'B';
      charArray0[5] = 'g';
      charArray0[6] = '8';
      charArray0[7] = 'y';
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.intValue();
      jSONScanner0.getCurrent();
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~J%<1q>@#^]~");
      jSONScanner0.sp = (-2893);
      jSONScanner0.pos = 20;
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("f;ts8`lc[a0");
      jSONReaderScanner0.scanDate('x');
      jSONReaderScanner0.matchStat = (-2736);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - f, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = '[';
      charArray0[5] = '[';
      charArray0[6] = '[';
      charArray0[7] = '[';
      charArray0[8] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 12);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.isEnabled(12);
      SymbolTable symbolTable0 = new SymbolTable(12);
      symbolTable0.addSymbol("N", 0, 0, 50);
      jSONReaderScanner0.scanSymbol(symbolTable0);
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      char[] charArray0 = new char[10];
      int int0 = 18;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 18);
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.timeZone = timeZone0;
      SymbolTable symbolTable0 = new SymbolTable(40);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, (-1166), symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'I';
      charArray0[1] = 'n';
      charArray0[2] = '[';
      charArray0[3] = ':';
      charArray0[4] = '^';
      charArray0[5] = ',';
      charArray0[6] = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 99, 99);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.np = 99;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      jSONScanner0.matchStat = (-32);
      charArray0[1] = 'U';
      charArray0[2] = '|';
      charArray0[3] = '$';
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.hasSpecial = false;
      jSONScanner0.scanISO8601DateIfMatch(true);
      jSONScanner0.scanInt('$');
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("i");
      StringReader stringReader0 = new StringReader("nan");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'S';
      charArray0[1] = 'W';
      charArray0[2] = 'c';
      charArray0[3] = 'a';
      charArray0[4] = 'k';
      charArray0[5] = '';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 434);
      boolean boolean0 = jSONReaderScanner0.scanBoolean('k');
      assertFalse(boolean0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONReaderScanner0.indexOf('G', 434);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("UTF-8", 1650);
      char char0 = '~';
      jSONScanner0.stringDefaultValue = "UTF-8";
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONLexerBase.isWhitespace('-');
      JSONScanner jSONScanner0 = new JSONScanner("UseISO8601DateFormat", 31);
      jSONScanner0.isEOF();
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = '-';
      SymbolTable symbolTable0 = new SymbolTable(3359);
      jSONScanner0.scanFieldStringArray(charArray0, 31, symbolTable0);
      assertEquals(31, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONScanner jSONScanner0 = new JSONScanner("t$VO{i");
      jSONScanner0.getLocale();
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDate('P');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.Feature");
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      charArray0[1] = '@';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 84);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nan");
      jSONReaderScanner0.bp = 84;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONLexerBase.isWhitespace(' ');
      JSONScanner jSONScanner0 = new JSONScanner("", 27);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, ' ');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1899);
      jSONReaderScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner.checkDate('+', '+', '+', '+', 'A', '+', 1943, 1943);
      JSONScanner jSONScanner0 = new JSONScanner("create asm deserializer error, ");
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      charArray0[1] = 'A';
      charArray0[2] = '+';
      charArray0[3] = 'H';
      charArray0[4] = 'N';
      jSONScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanDate(';');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 73);
      char[] charArray0 = new char[8];
      charArray0[0] = 's';
      charArray0[1] = 'K';
      charArray0[2] = '';
      charArray0[3] = '\\';
      charArray0[4] = '>';
      charArray0[5] = 'a';
      charArray0[6] = 'S';
      charArray0[7] = 'U';
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanBoolean('9');
      assertEquals(73, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("oracle.sql.TIMESTAMP");
      Locale locale0 = Locale.US;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      jSONReaderScanner0.scanStringArray(set0, '9');
      char[] charArray0 = null;
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((char[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3183);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('Z');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 57);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0Gc");
      jSONReaderScanner0.scanDouble(',');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 0, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3183);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 73;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal.char", 73);
      char char0 = 'Z';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloat((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = (-1860);
      JSONScanner jSONScanner0 = new JSONScanner("^TsCaSccM}W[NIC", (-1860));
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.scanLong('Z');
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanLong('I');
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONReaderScanner0.scanStringArray(linkedList0, 'B');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.getCalendar();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("oracle.sql.TIMESTAMP");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'n';
      charArray0[1] = '6';
      charArray0[2] = 'L';
      charArray0[3] = 'g';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 69);
      jSONReaderScanner0.scanString('n');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - n, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '\u000B';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 19, (-3958));
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Feature feature0 = Feature.UseBigDecimal;
      jSONReaderScanner0.scanUUID('\u000B');
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner0.scanBoolean('S');
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 't';
      charArray0[1] = '?';
      charArray0[2] = 'k';
      charArray0[3] = 'I';
      charArray0[4] = ' ';
      charArray0[5] = 'u';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 44);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONLexerBase.isWhitespace('c');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("x");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDouble((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("N");
      jSONReaderScanner0.scanDecimal('6');
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 73);
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      jSONReaderScanner0.scanStringArray(set0, '^');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xan");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("xan");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. a
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3183);
      jSONReaderScanner0.scanDouble('\"');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONLexerBase.isWhitespace('\u0012');
      JSONScanner jSONScanner0 = new JSONScanner("'jq5AzyePq{Tl");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      char char0 = '6';
      charArray0[1] = '6';
      int int0 = (-189);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-189));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e");
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('A');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match A - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      char[] charArray0 = new char[10];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1439);
      jSONReaderScanner0.scanType("");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(X(g:", (-1636));
      char[] charArray0 = new char[1];
      charArray0[0] = '>';
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      char[] charArray1 = new char[5];
      charArray1[0] = '>';
      charArray1[1] = '>';
      charArray1[2] = '>';
      charArray1[3] = '>';
      boolean boolean0 = jSONReaderScanner0.scanBoolean('>');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONLexerBase.isWhitespace('h');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("VN8lURqC'k\"");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.putChar('h');
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, 'h');
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined", 32);
      Locale locale0 = Locale.PRC;
      jSONScanner0.setLocale(locale0);
      jSONScanner0.isBlankInput();
      jSONScanner0.getLocale();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "X7sWuQi7";
      JSONScanner jSONScanner0 = new JSONScanner("X7sWuQi7");
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = 'Y';
      charArray0[2] = '!';
      charArray0[3] = 'k';
      jSONScanner0.scanLong('Y');
      jSONScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":\"`gmy[f+ @4y K'");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed.strM.lit");
      jSONReaderScanner0.nextToken();
      assertEquals('.', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = '<';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      jSONScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3183);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONLexerBase.isWhitespace(';');
      jSONReaderScanner0.scanLong(';');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", 66);
      char[] charArray0 = new char[2];
      charArray0[0] = 'a';
      charArray0[1] = '\\';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e");
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.hasSpecial = false;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - e, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed string : ");
      jSONReaderScanner0.token = (-2871);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONLexerBase.isWhitespace(' ');
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.charArrayCompare(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]\"ZQue");
      jSONReaderScanner0.nextToken();
      assertEquals('\"', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      int int0 = 55296;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("DisableASM");
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.util.Locale$LanguageRange
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'o';
      charArray0[1] = '>';
      charArray0[2] = 'M';
      charArray0[3] = '8';
      charArray0[4] = 'P';
      charArray0[5] = 'U';
      charArray0[6] = 'D';
      int int0 = 1779;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 1779);
      jSONReaderScanner0.pos();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("X7sWuQi7");
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = 'Y';
      int int0 = 49;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 99, 49);
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3183);
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3183);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanDecimal('6');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'o';
      charArray0[1] = '>';
      charArray0[2] = 'M';
      charArray0[3] = '8';
      charArray0[4] = 'P';
      charArray0[5] = 'U';
      charArray0[6] = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 1779);
      SymbolTable symbolTable0 = new SymbolTable(1779);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("|GL)^Scl)-mh$xB");
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      charArray0[1] = '6';
      charArray0[2] = 'S';
      charArray0[3] = 'C';
      charArray0[4] = '-';
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFloat('6');
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('-');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match - - G, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\u0000", (-2517));
      jSONReaderScanner0.scanType("ull");
      Feature feature0 = Feature.AutoCloseSource;
      boolean boolean0 = true;
      jSONReaderScanner0.sp = (-2517);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.info();
      char[] charArray0 = new char[6];
      charArray0[0] = 'U';
      charArray0[1] = ']';
      charArray0[2] = ':';
      charArray0[3] = 'p';
      charArray0[4] = 'T';
      charArray0[5] = '>';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[10];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 69);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 73);
      char[] charArray0 = new char[9];
      charArray0[0] = 'i';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanString('4');
      jSONReaderScanner0.charAt(49);
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONLexerBase.isWhitespace('~');
      StringReader stringReader0 = new StringReader("E*^DFYUX*v^<4GrQn");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      SymbolTable symbolTable0 = new SymbolTable(114);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, ')');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1809);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("AllowISO8601DateFormat", 47);
      boolean boolean0 = jSONReaderScanner1.matchField(charArray0);
      assertEquals(1, jSONReaderScanner1.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2834);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 11);
      jSONReaderScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[10];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 12);
      jSONReaderScanner0.scanFloat('X');
      jSONReaderScanner0.matchField(charArray0);
      boolean boolean0 = jSONReaderScanner0.isEnabled(12);
      assertTrue(jSONReaderScanner0.isEOF());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$Ho");
      JSONLexerBase.isWhitespace('y');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("In", 744);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('Z');
      assertEquals(744, jSONReaderScanner0.getFeatures());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0Gc");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("AllowISO8601DateFormat");
      jSONReaderScanner0.scanLong('\\');
      jSONReaderScanner0.charAt(111);
      char[] charArray0 = new char[2];
      charArray0[0] = '\u0000';
      charArray0[1] = '\\';
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\":\"");
      jSONScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \"
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("x", 80);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanBoolean('9');
      assertEquals(80, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanLong('!');
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONReaderScanner0.scanStringArray(arrayList0, 'I');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.scanInt('=');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2*1;0D@]rC}h$u");
      jSONReaderScanner0.nextToken();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      SymbolTable symbolTable0 = new SymbolTable(2);
      jSONReaderScanner0.scanUUID('6');
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'w');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-^F1mS87LSY*2i");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.features = 3;
      JSONLexerBase.isWhitespace('a');
      jSONReaderScanner0.numberString();
      assertEquals(2, jSONReaderScanner0.token());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      charArray0[3] = 'z';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      char[] charArray1 = new char[5];
      charArray1[0] = 'a';
      charArray1[1] = 'z';
      charArray1[2] = '%';
      charArray1[3] = 'a';
      charArray1[4] = 'z';
      jSONScanner0.scanFieldBoolean(charArray1);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3Bc$DFeA ^s3");
      jSONReaderScanner0.nextToken();
      assertEquals(2, jSONReaderScanner0.token());
      
      jSONReaderScanner0.longValue();
      float float0 = jSONReaderScanner0.scanFloat('%');
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not support type ");
      boolean boolean0 = JSONLexerBase.isWhitespace('\u0013');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[10];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 12);
      jSONReaderScanner0.matchField(charArray0);
      int int0 = jSONReaderScanner0.token();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 39, 9);
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = 'I';
      charArray0[2] = 'v';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 110, (-1612));
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str", (-2252));
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanStringArray((Collection<String>) null, 'p');
      jSONScanner0.scanFieldDecimal(charArray0);
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      jSONScanner0.setTimeZone(timeZone0);
      jSONReaderScanner0.matchStat();
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONScanner0.scanBoolean('a');
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('a', 'e', 'p', 'e', 'W', 'q');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("qQ!/A}#");
      jSONReaderScanner0.scanInt('6');
      jSONReaderScanner0.nextToken();
      System.setCurrentTimeMillis((-4261096L));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("tr");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('\u000B');
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("+mVoSWY6.9H5zT");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 1225);
      jSONReaderScanner0.nextIdent();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(">p");
      jSONReaderScanner0.scanDouble('V');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - >, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0TxzfG^Va/Q%-");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanBoolean('O');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      char[] charArray0 = new char[10];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3183);
      char[] charArray1 = new char[8];
      charArray1[0] = '!';
      charArray1[1] = 'x';
      charArray1[2] = '\\';
      charArray1[3] = 'l';
      charArray1[4] = 'P';
      charArray1[5] = ')';
      charArray1[6] = '+';
      charArray1[7] = ' ';
      jSONReaderScanner0.scanFieldBoolean(charArray1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONLexerBase.isWhitespace('c');
      StringReader stringReader0 = new StringReader("!bZ{`B|1SIX6B=");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = 'v';
      charArray0[3] = 'c';
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.nextToken(49);
      assertEquals('b', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")Z");
      jSONReaderScanner0.scanLong('I');
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONReaderScanner0.scanStringArray(linkedList0, '5');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      SymbolTable symbolTable0 = new SymbolTable(40);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*t", 722);
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.scanLong('s');
      assertEquals(722, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.features = 722;
      jSONReaderScanner0.charAt(722);
      char char0 = jSONReaderScanner0.getCurrent();
      assertEquals('*', char0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("a=m*q ]2qf3r&");
      jSONScanner0.bytesValue();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("a=m*q ]2qf3r&");
      jSONReaderScanner0.scanIdent();
      char[] charArray0 = new char[1];
      jSONScanner0.tokenName();
      char char0 = '';
      charArray0[0] = '';
      jSONScanner0.features = 2394;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(0, 3766, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1265);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.stringDefaultValue();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.next();
      jSONReaderScanner0.np = (-4174);
      jSONReaderScanner0.scanFloat(']');
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(">p");
      JSONScanner jSONScanner0 = new JSONScanner(">p");
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '{';
      charArray0[2] = '^';
      charArray0[3] = '|';
      charArray0[4] = 'Q';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, 0);
      int int0 = jSONScanner1.intValue();
      assertEquals(0, int0);
      
      jSONScanner1.next();
      jSONScanner0.setToken(0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = '[';
      charArray0[5] = '[';
      charArray0[6] = '[';
      charArray0[7] = '[';
      charArray0[8] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 12);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.isEnabled(12);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      SymbolTable symbolTable0 = new SymbolTable(12);
      jSONReaderScanner0.scanSymbol(symbolTable0);
      assertEquals(0, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1899);
      jSONReaderScanner0.nextToken(76);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set", 97);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.stringVal();
      assertEquals('e', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      char[] charArray0 = new char[12];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = '9';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 36);
      jSONReaderScanner0.nextToken(36);
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '/';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 58);
      jSONReaderScanner0.sp = 58;
      jSONReaderScanner0.pos = (-2554);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 73);
      jSONReaderScanner0.sub_chars(73, 73);
      jSONReaderScanner0.scanDate('p');
      boolean boolean0 = jSONReaderScanner0.scanBoolean('9');
      assertEquals(73, jSONReaderScanner0.getFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.putChar('2');
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "null";
      JSONScanner jSONScanner0 = new JSONScanner("null");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringReader stringReader0 = new StringReader("kWZ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.scanFloat(']');
      jSONReaderScanner0.nextToken();
      int int0 = jSONReaderScanner0.intValue();
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '?';
      charArray0[1] = '`';
      charArray0[2] = 'N';
      charArray0[3] = '!';
      charArray0[4] = '$';
      charArray0[5] = 'k';
      charArray0[0] = 'f';
      charArray0[7] = '0';
      charArray0[8] = '#';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("X7sWuQi7");
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = 'Y';
      charArray0[2] = '!';
      charArray0[3] = 'k';
      charArray0[4] = 'c';
      charArray0[5] = 'G';
      charArray0[6] = 'T';
      jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('z');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e");
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".O9@^TpN!Qf!f?8+PS");
      jSONScanner0.intValue();
      jSONScanner0.scanNumber();
      assertEquals(3, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("|GL)^Scl)-mh$xB");
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.scanDouble('5');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - |, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('\f');
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\f';
      charArray0[1] = '\f';
      charArray0[2] = '\f';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34, (-669));
      jSONReaderScanner0.nextIdent();
      assertEquals(20, jSONReaderScanner0.token());
      
      boolean boolean1 = JSONLexerBase.isWhitespace('R');
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3183);
      jSONReaderScanner0.hasSpecial = true;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      jSONReaderScanner0.scanIdent();
      charArray0[1] = '1';
      charArray0[2] = '`';
      charArray0[3] = 'X';
      charArray0[4] = '\"';
      jSONReaderScanner0.scanType("true");
      charArray0[5] = 'n';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("I");
      jSONReaderScanner0.nextToken();
      SymbolTable symbolTable0 = new SymbolTable(38);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'r');
      char[] charArray0 = new char[6];
      charArray0[0] = ',';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      charArray0[3] = 'r';
      charArray0[4] = 'r';
      charArray0[5] = 'r';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 656, 656);
      jSONReaderScanner0.scanBoolean('c');
      jSONReaderScanner0.scanNumber();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      jSONReaderScanner0.nextToken();
      assertEquals(4, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = 128;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("NaN", 128);
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3183);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = '\\';
      charArray0[2] = 'E';
      charArray0[3] = '#';
      charArray0[4] = 'S';
      charArray0[5] = '4';
      charArray0[6] = '`';
      charArray0[7] = ']';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 17);
      jSONReaderScanner0.scanFieldLong(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("S)|");
      jSONScanner0.nextToken();
      jSONScanner0.setLocale((Locale) null);
      jSONScanner0.indexOf('3', 6);
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 90);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('3');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 3 - ), info : pos 1, json : S)|
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("lLhk#");
      SymbolTable symbolTable0 = new SymbolTable(1439);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 3137, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 50);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed.strM.lit");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Ikq%npO7JqrAup{64d", 102);
      Feature feature0 = Feature.AllowArbitraryCommas;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.scanBoolean('9');
      assertEquals(925, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.vm.name");
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '\f';
      charArray0[1] = '\f';
      charArray0[2] = '\f';
      charArray0[3] = '\f';
      charArray0[4] = '(';
      charArray0[5] = '\f';
      charArray0[6] = '\f';
      charArray0[7] = '\f';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 42, 26);
      jSONReaderScanner0.nextToken();
      assertEquals(10, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2489);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("false");
      jSONReaderScanner1.scanBoolean('U');
      jSONReaderScanner1.scanFieldDate(charArray0);
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONLexerBase.isWhitespace('#');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanIdent();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal.char", 40);
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = 'h';
      charArray0[2] = '#';
      char char0 = 'v';
      charArray0[3] = 'v';
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.scanFloat('_');
      jSONScanner0.scanDate('q');
      Class<Integer> class0 = Integer.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("X4/", (-2), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("J)wC>G<", 123);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanBoolean('9');
      long long0 = jSONReaderScanner0.scanLong('9');
      assertEquals(123, jSONReaderScanner0.getFeatures());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",");
      jSONReaderScanner0.nextToken();
      assertEquals(16, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 83, 59);
      Locale locale0 = Locale.ROOT;
      jSONReaderScanner0.setLocale(locale0);
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int int0 = 4355;
      JSONScanner jSONScanner0 = new JSONScanner("false", 4355);
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      charArray0[1] = 'q';
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46");
      char[] charArray0 = new char[5];
      jSONReaderScanner0.scanString('J');
      jSONReaderScanner0.scanDate('J');
      jSONReaderScanner0.scanFieldDouble(charArray0);
      charArray0[0] = 'K';
      charArray0[1] = 'v';
      charArray0[2] = '@';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      charArray0[3] = '?';
      charArray0[4] = 'S';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanString('$');
      jSONReaderScanner0.scanDouble('?');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 120);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int int0 = 0;
      JSONScanner jSONScanner0 = new JSONScanner(", json : ", 0);
      jSONScanner0.bp = 0;
      char char0 = 'n';
      char[] charArray0 = new char[5];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. ,
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0Gc");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Set");
      jSONReaderScanner1.nextToken();
      assertEquals(21, jSONReaderScanner1.token());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '!';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanFloat('!');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = "$2fhn6C:";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$2fhn6C:");
      jSONReaderScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      int int0 = 0;
      jSONReaderScanner0.nextToken(0);
      jSONReaderScanner0.charAt(0);
      jSONReaderScanner0.scanString('\u001A');
      SymbolTable symbolTable0 = new SymbolTable(87);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = ']';
      charArray0[1] = 'a';
      charArray0[2] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 20);
      jSONReaderScanner0.putChar(']');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace(' ');
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 108);
      int int0 = jSONReaderScanner0.scanInt('i');
      assertEquals(108, jSONReaderScanner0.getFeatures());
      assertEquals(0, int0);
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONLexerBase.isWhitespace('');
      JSONScanner jSONScanner0 = new JSONScanner("gaB;mc, >=5l");
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(93);
      jSONScanner0.scanEnum(class0, symbolTable0, '');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match  - g, info : pos 0, json : gaB;mc, >=5l
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[8WKiV");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      jSONScanner0.scanFieldFloatArray2(charArray0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e");
      jSONReaderScanner0.scanBoolean('T');
      jSONReaderScanner0.scanNumber();
      assertEquals(3, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char char0 = 'l';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-2670));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("m_", (-4865));
      char[] charArray0 = new char[2];
      jSONReaderScanner0.scanFieldDate(charArray0);
      charArray0[0] = '+';
      int int0 = 0;
      int int1 = 200;
      int int2 = (-1401);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3>*~DIHp@");
      jSONScanner0.info();
      jSONScanner0.scanIdent();
      float float0 = jSONScanner0.scanFloat('7');
      assertEquals(18, jSONScanner0.token());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0Gc");
      char[] charArray0 = new char[6];
      charArray0[0] = '8';
      charArray0[1] = '-';
      charArray0[2] = '.';
      charArray0[3] = '#';
      charArray0[4] = '/';
      charArray0[5] = '@';
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanFloat('9');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 0, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e");
      jSONReaderScanner0.setTimeZone((TimeZone) null);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - e, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = '<';
      int int0 = 15;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3403, 15);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      int int1 = 1169;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 1169, 3403);
      char[] charArray1 = new char[6];
      charArray1[0] = 'S';
      charArray1[1] = '<';
      charArray1[2] = '<';
      charArray1[3] = '<';
      charArray1[4] = 'S';
      charArray1[5] = 'x';
      jSONReaderScanner1.scanFieldBigInteger(charArray1);
      jSONReaderScanner0.scanFieldSymbol(charArray1);
      char char0 = ';';
      jSONReaderScanner1.scanString(';');
      jSONReaderScanner0.scanDouble('<');
      int int2 = 243;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 243);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ", 0);
      jSONScanner0.bp = 0;
      char[] charArray0 = new char[5];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      JSONLexerBase.readString(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(55296);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      jSONReaderScanner0.locale = locale0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e");
      char char0 = '=';
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONLexerBase.isWhitespace('c');
      JSONScanner jSONScanner0 = new JSONScanner("XbqOf");
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertFalse(boolean0);
      
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("|GL)^Scl)-mh$xB");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. |
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      char[] charArray0 = new char[14];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3183);
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONReaderScanner0.setTimeZone(timeZone0);
      jSONReaderScanner0.scanUUID('Q');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 11);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ZX56*~_", 59);
      jSONReaderScanner0.nextToken();
      Feature feature0 = Feature.SupportArrayToBean;
      jSONReaderScanner0.isEnabled(feature0);
      jSONReaderScanner0.stringVal();
      assertEquals('X', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0Gc");
      jSONReaderScanner0.sp = 55296;
      jSONReaderScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 0, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false", (-214));
      int int0 = 56;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-214), 0, 0, 56, 0);
      jSONReaderScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONReaderScanner0.token = (-214);
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '}';
      charArray0[1] = '\u001E';
      charArray0[2] = '\u001E';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 50);
      jSONReaderScanner0.nextToken();
      assertEquals('\u001E', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Em");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal.char", 40);
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = 'h';
      charArray0[2] = '#';
      charArray0[3] = 'v';
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.scanFloat('_');
      jSONScanner0.scanDate('q');
      Class<Integer> class0 = Integer.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanBoolean('#');
      jSONScanner0.next();
      // Undeclared exception!
      try { 
        jSONScanner0.subString(58, 'g');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#00!HO6@/BT-DWM=f_");
      jSONReaderScanner0.getCurrent();
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      charArray0[1] = '\"';
      charArray0[2] = '~';
      charArray0[3] = '=';
      charArray0[4] = '1';
      charArray0[5] = '=';
      charArray0[6] = '#';
      charArray0[7] = 'f';
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(">p");
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, '#');
      jSONReaderScanner0.scanDouble('V');
      jSONReaderScanner0.features = 123;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - >, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0Gc");
      jSONReaderScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONLexerBase.isWhitespace('W');
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      jSONScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<EMT");
      JSONLexerBase.isWhitespace('\b');
      char[] charArray0 = new char[2];
      charArray0[0] = '\b';
      charArray0[1] = '\b';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 68);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      int int0 = 6;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("In", 6);
      jSONReaderScanner0.charAt(6);
      jSONReaderScanner0.scanString('{');
      int int1 = 87;
      SymbolTable symbolTable0 = new SymbolTable(6);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3183);
      SymbolTable symbolTable0 = new SymbolTable(70);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, '4');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("|GL)^Scl)-mh$xB");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanIdent();
      assertEquals(')', jSONReaderScanner0.getCurrent());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      jSONScanner0.charArrayCompare(charArray0);
      assertEquals(0, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7z6>^w3QA:#7W]0");
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-3057));
      jSONReaderScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      int int0 = (-32);
      jSONScanner0.np = (-32);
      charArray0[1] = 'U';
      charArray0[2] = '|';
      charArray0[3] = '$';
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.hasSpecial = false;
      jSONScanner0.scanISO8601DateIfMatch(true);
      jSONScanner0.scanInt('$');
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3183);
      jSONReaderScanner0.scanLong('9');
      jSONReaderScanner0.sp = 459;
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7z6>^w3QA:#7W]0");
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-3057));
      jSONScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.properties");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(";-JooA!", 16);
      jSONReaderScanner0.bp = 16;
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":=D`eos0@=VaJ");
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, '7');
      jSONReaderScanner0.nextToken();
      assertEquals('=', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      double double0 = jSONReaderScanner0.scanDouble('V');
      assertEquals(0.0, double0, 0.01);
      
      jSONReaderScanner0.scanTrue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3848);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.nextToken();
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      char[] charArray1 = new char[2];
      charArray1[0] = '@';
      charArray1[1] = '\'';
      jSONReaderScanner0.scanFieldLong(charArray1);
      jSONReaderScanner0.config(feature0, true);
      assertEquals(4, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e");
      jSONReaderScanner0.nextToken();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("I");
      JSONLexerBase.isWhitespace('p');
      char char0 = jSONReaderScanner0.getCurrent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('I', char0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('\f');
      assertTrue(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\f';
      charArray0[1] = '\f';
      charArray0[2] = '\f';
      charArray0[3] = '\f';
      charArray0[4] = '/';
      charArray0[5] = '\f';
      charArray0[6] = '!';
      JSONScanner.charArrayCompare("NaN", (-1), charArray0);
      StringReader stringReader0 = new StringReader("\u0000");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "new");
      jSONReaderScanner0.setTimeZone(simpleTimeZone0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = "wpBtv[22Ibv ";
      JSONScanner jSONScanner0 = new JSONScanner("wpBtv[22Ibv ");
      jSONScanner0.stringVal();
      jSONScanner0.close();
      int int0 = 147;
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. w
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      charArray0[3] = 'c';
      charArray0[4] = 'c';
      charArray0[5] = 'c';
      charArray0[6] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 47);
      boolean boolean0 = jSONReaderScanner0.scanBoolean('c');
      assertEquals(3, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2((char[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = "In";
      int int0 = 744;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("In", 744);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("In", 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0Gc");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanInt('H');
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0Gc");
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charAt((-250));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2Wh^W`x_");
      JSONLexerBase.isWhitespace(' ');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONLexerBase.isWhitespace('r');
      StringReader stringReader0 = new StringReader(")E");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanDate('R');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      SymbolTable symbolTable0 = new SymbolTable(113);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0Gc");
      jSONReaderScanner0.scanDouble('V');
      char[] charArray0 = new char[1];
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONReaderScanner0.scanStringArray(arrayList0, 'h');
      charArray0[0] = 'V';
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONLexerBase.isWhitespace('}');
      JSONScanner jSONScanner0 = new JSONScanner("XujXep~", 22);
      jSONScanner0.charAt(22);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.awt.Rectangle", 3415);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      charArray0[2] = 'p';
      charArray0[3] = 'p';
      charArray0[4] = 'p';
      charArray0[5] = 'p';
      charArray0[6] = 'p';
      charArray0[7] = 'p';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 69);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("scan ull error");
      char[] charArray1 = new char[0];
      jSONReaderScanner1.scanFieldFloat(charArray1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - p, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'Y';
      charArray0[1] = 'k';
      charArray0[2] = 's';
      charArray0[3] = '.';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2710);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("9`C<qdQV~w/TW\"nw%", 102);
      jSONScanner0.pos = 115;
      int int0 = (-693);
      int int1 = 1004;
      int int2 = (-1401);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2794));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3183);
      char[] charArray1 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('+');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match + - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse null or new");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - e, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4l5'=O");
      jSONReaderScanner0.scanBoolean('q');
      jSONReaderScanner0.scanDate('R');
      jSONReaderScanner0.isEOF();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 73);
      boolean boolean0 = jSONReaderScanner0.scanBoolean('9');
      assertFalse(boolean0);
      assertEquals(73, jSONReaderScanner0.getFeatures());
      
      JSONScanner jSONScanner0 = new JSONScanner("x", (-1));
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(";$|?", (-159));
      char[] charArray0 = new char[3];
      charArray0[0] = 'D';
      charArray0[1] = '#';
      charArray0[2] = 'w';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      int int0 = jSONReaderScanner0.getFeatures();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-159), int0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONLexerBase.isWhitespace(' ');
      JSONScanner jSONScanner0 = new JSONScanner("e");
      Object[] objectArray0 = new Object[0];
      jSONScanner0.lexError("e", objectArray0);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      char[] charArray0 = new char[10];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 69);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1444);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      StringReader stringReader0 = new StringReader("illegal state, textLength is zero");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      boolean boolean0 = jSONReaderScanner0.isEnabled(2470, (-132));
      assertTrue(boolean0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONLexerBase.isWhitespace('p');
      JSONScanner jSONScanner0 = new JSONScanner("Feature.AllowSingleQuotes is false");
      jSONScanner0.scanDecimal(':');
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanDouble('r');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("yyyy-MM-dd HH:mm:ss");
      SymbolTable symbolTable0 = new SymbolTable(787);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, '.');
      jSONScanner0.intValue();
      jSONScanner0.scanSymbol(symbolTable0);
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46");
      char[] charArray0 = new char[5];
      jSONReaderScanner0.scanString('J');
      jSONReaderScanner0.scanDate('J');
      jSONReaderScanner0.scanFieldDouble(charArray0);
      charArray0[0] = 'K';
      charArray0[1] = 'v';
      charArray0[2] = '@';
      jSONReaderScanner0.indexOf('K', 3246);
      int int0 = 3698;
      int int1 = 2613;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4l5'=O");
      jSONReaderScanner0.scanInt('e');
      jSONReaderScanner0.nextToken();
      assertEquals('l', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = "";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      int int0 = 0;
      jSONReaderScanner0.nextToken(0);
      char[] charArray0 = new char[4];
      charArray0[1] = 'W';
      charArray0[2] = 'O';
      charArray0[3] = 'O';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 1051);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      int int0 = 3183;
      char[] charArray0 = new char[21];
      charArray0[0] = 'C';
      charArray0[1] = '`';
      charArray0[5] = '_';
      charArray0[3] = 'o';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3183);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3163);
      jSONReaderScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":'&W!R=PN@wE:");
      jSONReaderScanner0.nextToken();
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals('\'', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      char[] charArray0 = new char[10];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 69);
      jSONReaderScanner0.scanInt('Y');
      jSONReaderScanner0.scanUUID('K');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0Gc");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.integerValue();
      assertEquals('G', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      char[] charArray0 = new char[10];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3183);
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanBoolean('T');
      jSONReaderScanner0.scanDate('3');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("NaN");
      jSONReaderScanner0.nextToken();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3183);
      SymbolTable symbolTable0 = new SymbolTable(3183);
      jSONReaderScanner0.addSymbol(3183, 3183, 3183, symbolTable0);
      jSONReaderScanner0.np = 3183;
      Number number0 = jSONReaderScanner0.integerValue();
      assertEquals(0, number0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("SupportAutoType");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.integerValue();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" &;O_R5,");
      jSONReaderScanner0.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - &, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2Wh^W`x_", (-478));
      jSONReaderScanner0.scanInt('u');
      jSONReaderScanner0.scanBoolean('9');
      boolean boolean0 = JSONScanner.checkDate('_', '_', 'K', 'K', 'K', '_', 2, 1459);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-^F1mS87LSY*2i");
      jSONReaderScanner0.nextToken();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".O9@^TpN!Qf!f?8+PS");
      jSONReaderScanner0.nextToken();
      assertEquals(25, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9D");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken(0);
      assertEquals(3, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = '1';
      charArray0[2] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 40);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("AllowISO8601DateFormat");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7z6>^w3QA:#7W]0");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      char[] charArray0 = new char[14];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3189);
      jSONReaderScanner0.indexOf('', 3189);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('Q');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3183);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.ch = 'S';
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3183);
      jSONReaderScanner0.nextToken(3183);
      jSONReaderScanner0.scanDecimal('G');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1439);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3183);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((-4010));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1439);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 1439);
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(1439);
      jSONReaderScanner1.scanEnum(class0, symbolTable0, 'o');
      jSONReaderScanner1.scanFieldLong(charArray0);
      boolean boolean0 = jSONReaderScanner1.matchField(charArray0);
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      Object[] objectArray0 = new Object[1];
      jSONReaderScanner0.eofPos = 90;
      objectArray0[0] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("", objectArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONLexerBase.isWhitespace('\f');
      JSONScanner jSONScanner0 = new JSONScanner("false", 394);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldFloatArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("In", 744);
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[7];
      charArray0[0] = 'y';
      charArray0[1] = 'I';
      charArray0[2] = ')';
      charArray0[3] = ')';
      charArray0[4] = 'E';
      charArray0[5] = 's';
      charArray0[6] = 'n';
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanDecimal('Z');
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 73);
      jSONReaderScanner0.scanLong('8');
      jSONReaderScanner0.scanBoolean('9');
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = '9';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 105);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
