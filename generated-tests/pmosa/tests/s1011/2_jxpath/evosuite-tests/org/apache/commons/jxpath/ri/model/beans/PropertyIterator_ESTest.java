/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 18:52:04 GMT 2018
 */

package org.apache.commons.jxpath.ri.model.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.JXPathBeanInfo;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPropertyPointer;
import org.apache.commons.jxpath.ri.model.beans.PropertyIterator;
import org.apache.commons.jxpath.ri.model.beans.PropertyOwnerPointer;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PropertyIterator_ESTest extends PropertyIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<String> class0 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
      QName qName0 = beanPropertyPointer0.getName();
      NullPointer nullPointer0 = new NullPointer((NodePointer) null, qName0);
      BeanPointer beanPointer0 = new BeanPointer(beanPropertyPointer0, qName0, "D_+", jXPathBasicBeanInfo0);
      beanPointer0.getPropertyPointer();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      PropertyIterator propertyIterator0 = new PropertyIterator(nullPointer0, "ho.dRmb\"X|pbD3$,&r+", false, (NodePointer) null);
      propertyIterator0.reset();
      int int0 = propertyIterator0.getPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QName qName0 = new QName(")O", ")O");
      Locale locale0 = Locale.PRC;
      NullPointer nullPointer0 = new NullPointer(qName0, locale0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "h|f|2PK0f!;0`s");
      nullPointer0.getLocale();
      PropertyPointer propertyPointer0 = nullPointer0.getPropertyPointer();
      NullPointer nullPointer1 = new NullPointer(propertyPointer0, qName0);
      PropertyIterator propertyIterator0 = null;
      try {
        propertyIterator0 = new PropertyIterator(nullPointer1, ")O", false, propertyPointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // PropertyIerator startWith parameter is not a child of the supplied parent
         //
         verifyException("org.apache.commons.jxpath.ri.model.beans.PropertyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class1);
      Locale locale0 = Locale.GERMAN;
      BeanPointer beanPointer0 = new BeanPointer((QName) null, (Object) null, jXPathBasicBeanInfo0, locale0);
      beanPointer0.getImmediateNode();
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "<<unknown namespace>>", true, (NodePointer) null);
      propertyIterator0.prepareForIndividualProperty("5uZ_`QgAg.F\"GFZm}b");
      propertyIterator0.setPosition(641);
      propertyIterator0.reset();
      propertyIterator0.setPosition(397);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      propertyIterator0.getPropertyPointer();
      propertyIterator0.setPosition(641);
      assertEquals(641, propertyIterator0.getPosition());
      
      propertyIterator0.reset();
      propertyIterator0.reset();
      propertyIterator0.getPropertyPointer();
      propertyIterator0.getNodePointer();
      propertyIterator0.prepareForIndividualProperty("");
      assertEquals(0, propertyIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      NullPointer nullPointer0 = new NullPointer(locale0, "5uZ_`QgAg.F\"GFZm}b");
      Class<String> class0 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(nullPointer0, jXPathBasicBeanInfo0);
      PropertyIterator propertyIterator0 = new PropertyIterator(nullPointer0, (String) null, true, beanPropertyPointer0);
      QName qName0 = beanPropertyPointer0.getName();
      BeanPointer beanPointer0 = new BeanPointer(nullPointer0, qName0, qName0, jXPathBasicBeanInfo0);
      PropertyIterator propertyIterator1 = null;
      try {
        propertyIterator1 = new PropertyIterator(beanPointer0, "<<unknown namespace>>", true, beanPropertyPointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // PropertyIerator startWith parameter is not a child of the supplied parent
         //
         verifyException("org.apache.commons.jxpath.ri.model.beans.PropertyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class1);
      Locale locale0 = Locale.GERMAN;
      BeanPointer beanPointer0 = new BeanPointer((QName) null, (Object) null, jXPathBasicBeanInfo0, locale0);
      beanPointer0.getImmediateNode();
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "<<unknown namespace>>", true, (NodePointer) null);
      propertyIterator0.prepareForIndividualProperty("5uZ_`QgAg.F\"GFZm}b");
      propertyIterator0.setPosition(641);
      propertyIterator0.reset();
      propertyIterator0.setPosition(397);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)126;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PropertyIterator propertyIterator1 = new PropertyIterator(beanPointer0, "<<unknown namespace>>", false, (NodePointer) null);
      propertyIterator1.getPropertyPointer();
      propertyIterator0.setPosition((byte) (-73));
      propertyIterator1.reset();
      propertyIterator1.reset();
      propertyIterator1.getPropertyPointer();
      propertyIterator0.getNodePointer();
      assertEquals((-73), propertyIterator0.getPosition());
      
      propertyIterator1.prepareForIndividualProperty("7");
      propertyIterator1.reset();
      assertEquals(0, propertyIterator1.getPosition());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QName qName0 = new QName(";|vNuoCY4mgI-ck");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NullPointer nullPointer0 = new NullPointer((NodePointer) null, qName0);
      PropertyIterator propertyIterator0 = new PropertyIterator(nullPointer0, "f87[0gh8ybV<L;0/4", true, (NodePointer) null);
      propertyIterator0.setPosition(Integer.MIN_VALUE);
      propertyIterator0.reset();
      propertyIterator0.getNodePointer();
      assertEquals(0, propertyIterator0.getPosition());
      
      PropertyIterator propertyIterator1 = new PropertyIterator(nullPointer0, (String) null, true, (NodePointer) null);
      propertyIterator1.getNodePointer();
      propertyIterator1.getNodePointer();
      assertEquals(1, propertyIterator1.getPosition());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QName qName0 = new QName(";|vNuoCY4mgI-ck");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NullPointer nullPointer0 = new NullPointer((NodePointer) null, qName0);
      PropertyIterator propertyIterator0 = new PropertyIterator(nullPointer0, "f87[0gh8ybV<L;0/4", true, (NodePointer) null);
      propertyIterator0.getNodePointer();
      PropertyIterator propertyIterator1 = new PropertyIterator(nullPointer0, (String) null, false, (NodePointer) null);
      propertyIterator1.getNodePointer();
      propertyIterator1.reset();
      propertyIterator1.getPropertyPointer();
      propertyIterator0.getNodePointer();
      propertyIterator1.prepareForIndividualProperty(";|vNuoCY4mgI-ck");
      boolean boolean0 = propertyIterator1.setPosition(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, propertyIterator1.getPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QName qName0 = new QName("M{Y");
      NullPointer nullPointer0 = new NullPointer((NodePointer) null, qName0);
      PropertyIterator propertyIterator0 = new PropertyIterator(nullPointer0, (String) null, false, (NodePointer) null);
      NodePointer nodePointer0 = propertyIterator0.getNodePointer();
      assertNull(nodePointer0);
      assertEquals(1, propertyIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class1);
      Locale locale0 = Locale.GERMAN;
      BeanPointer beanPointer0 = new BeanPointer((QName) null, (Object) null, jXPathBasicBeanInfo0, locale0);
      Object object0 = new Object();
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "<<unknown namespace>>", true, (NodePointer) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-73);
      PropertyIterator propertyIterator1 = new PropertyIterator(beanPointer0, "key", true, (NodePointer) null);
      propertyIterator1.getNodePointer();
      propertyIterator1.reset();
      propertyIterator0.getPropertyPointer();
      propertyIterator1.getNodePointer();
      propertyIterator1.prepareForIndividualProperty("empty");
      boolean boolean0 = propertyIterator0.setPosition(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, propertyIterator0.getPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
      QName qName0 = beanPropertyPointer0.getName();
      Class<Integer> class1 = Integer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo1 = new JXPathBasicBeanInfo(class1, class0);
      Locale locale0 = Locale.US;
      BeanPointer beanPointer0 = new BeanPointer(qName0, (Object) null, jXPathBasicBeanInfo1, locale0);
      beanPointer0.getImmediateNode();
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, (String) null, true, (NodePointer) null);
      propertyIterator0.prepareForIndividualProperty(")]#W@bLMB5");
      propertyIterator0.getNodePointer();
      propertyIterator0.setPosition(Integer.MIN_VALUE);
      propertyIterator0.reset();
      beanPointer0.getValuePointer();
      propertyIterator0.setPosition(2184);
      PropertyIterator propertyIterator1 = null;
      try {
        propertyIterator1 = new PropertyIterator((PropertyOwnerPointer) null, "$bXx", false, beanPointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.beans.PropertyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class1);
      Locale locale0 = Locale.GERMAN;
      BeanPointer beanPointer0 = new BeanPointer((QName) null, (Object) null, jXPathBasicBeanInfo0, locale0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      jXPathBasicBeanInfo0.getPropertyDescriptor("<<unknown namespace>>");
      Locale.getISOCountries();
      beanPointer0.getValuePointer();
      locale0.getExtensionKeys();
      Locale.getISOCountries();
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, (String) null, false, (NodePointer) null);
      NodePointer nodePointer0 = propertyIterator0.getNodePointer();
      assertNotNull(nodePointer0);
      assertEquals(0, propertyIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class1);
      Locale locale0 = Locale.GERMAN;
      BeanPointer beanPointer0 = new BeanPointer((QName) null, (Object) null, jXPathBasicBeanInfo0, locale0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      JXPathBasicBeanInfo jXPathBasicBeanInfo1 = new JXPathBasicBeanInfo(class0);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(beanPointer0, (JXPathBeanInfo) null);
      Locale.getISOCountries();
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "<<unknown namespace>>", false, beanPropertyPointer0);
      PropertyIterator propertyIterator1 = new PropertyIterator(beanPointer0, (String) null, true, beanPropertyPointer0);
      NodePointer nodePointer0 = propertyIterator1.getNodePointer();
      assertNotNull(nodePointer0);
      assertEquals(0, propertyIterator1.getPosition());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class1);
      Locale locale0 = Locale.GERMAN;
      BeanPointer beanPointer0 = new BeanPointer((QName) null, (Object) null, jXPathBasicBeanInfo0, locale0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      JXPathBasicBeanInfo jXPathBasicBeanInfo1 = new JXPathBasicBeanInfo(class0);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(beanPointer0, (JXPathBeanInfo) null);
      Locale.getISOCountries();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-69);
      locale0.getScript();
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)104;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "<<unknown namespace>>", false, beanPropertyPointer0);
      propertyIterator0.getNodePointer();
      PropertyIterator propertyIterator1 = new PropertyIterator(beanPointer0, (String) null, true, beanPropertyPointer0);
      propertyIterator1.prepareForIndividualProperty((String) null);
      propertyIterator0.setPosition(Integer.MIN_VALUE);
      propertyIterator1.getNodePointer();
      propertyIterator0.prepareForIndividualProperty("");
      boolean boolean0 = propertyIterator0.setPosition((byte)104);
      assertEquals(104, propertyIterator0.getPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class1);
      Locale locale0 = Locale.GERMAN;
      BeanPointer beanPointer0 = new BeanPointer((QName) null, (Object) null, jXPathBasicBeanInfo0, locale0);
      Locale.getISOLanguages();
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "round", false, (NodePointer) null);
      PropertyIterator propertyIterator1 = new PropertyIterator(beanPointer0, "RKoLNhkp?qxg^xh8", true, (NodePointer) null);
      propertyIterator1.prepareForIndividualProperty("KuA/");
      jXPathBasicBeanInfo0.getPropertyDescriptor("{5*M");
      locale0.hasExtensions();
      PropertyIterator propertyIterator2 = new PropertyIterator(beanPointer0, (String) null, true, (NodePointer) null);
      NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(beanPointer0);
      PropertyIterator propertyIterator3 = new PropertyIterator(beanPointer0, (String) null, false, nullPropertyPointer0);
      propertyIterator0.getPropertyPointer();
      propertyIterator2.prepareForIndividualProperty("d0P7kezuSV");
      propertyIterator1.prepareForIndividualProperty("PropertyIerator startWith parameter is not a child of the supplied parent");
      NodePointer nodePointer0 = propertyIterator2.getNodePointer();
      assertNotNull(nodePointer0);
      assertEquals(0, propertyIterator2.getPosition());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class1);
      Locale locale0 = Locale.GERMAN;
      BeanPointer beanPointer0 = new BeanPointer((QName) null, (Object) null, jXPathBasicBeanInfo0, locale0);
      Locale.getISOLanguages();
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "round", false, (NodePointer) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NodePointer nodePointer0 = propertyIterator0.getNodePointer();
      assertNull(nodePointer0);
      
      propertyIterator0.prepareForIndividualProperty("empty");
      BeanPropertyPointer beanPropertyPointer0 = (BeanPropertyPointer)propertyIterator0.getPropertyPointer();
      assertEquals(1, beanPropertyPointer0.getPropertyIndex());
      
      propertyIterator0.getNodePointer();
      NullPointer nullPointer0 = (NullPointer)propertyIterator0.getNodePointer();
      assertNotNull(nullPointer0);
      assertEquals(0, propertyIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class1);
      Locale locale0 = Locale.GERMAN;
      BeanPointer beanPointer0 = new BeanPointer((QName) null, (Object) null, jXPathBasicBeanInfo0, locale0);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "round", false, (NodePointer) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      propertyIterator0.getNodePointer();
      propertyIterator0.prepareForIndividualProperty("empty");
      boolean boolean0 = propertyIterator0.setPosition(80);
      assertEquals(80, propertyIterator0.getPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class1);
      Locale locale0 = Locale.GERMAN;
      BeanPointer beanPointer0 = new BeanPointer((QName) null, (Object) null, jXPathBasicBeanInfo0, locale0);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "rouNd", false, (NodePointer) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      propertyIterator0.prepareForIndividualProperty("bytes");
      PropertyIterator propertyIterator1 = null;
      try {
        propertyIterator1 = new PropertyIterator(beanPointer0, "empty", true, beanPointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // PropertyIerator startWith parameter is not a child of the supplied parent
         //
         verifyException("org.apache.commons.jxpath.ri.model.beans.PropertyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class1);
      Locale locale0 = Locale.GERMAN;
      BeanPointer beanPointer0 = new BeanPointer((QName) null, (Object) null, jXPathBasicBeanInfo0, locale0);
      jXPathBasicBeanInfo0.toString();
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "<<unknown namespace>>", true, (NodePointer) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale1 = new Locale("BeanInfo [class = java.lang.String, dynamic, properties = \n    class [B: bytes\n    boolean: empty]");
      locale0.getDisplayCountry(locale1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jXPathBasicBeanInfo0.getPropertyDescriptor("<<unknown namespace>>");
      propertyIterator0.prepareForIndividualProperty("empty");
      propertyIterator0.setPosition(1);
      PropertyIterator propertyIterator1 = new PropertyIterator(beanPointer0, "empty", true, (NodePointer) null);
      assertEquals(0, propertyIterator1.getPosition());
      
      propertyIterator0.getNodePointer();
      assertEquals(1, propertyIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class1);
      Locale locale0 = Locale.GERMAN;
      BeanPointer beanPointer0 = new BeanPointer((QName) null, (Object) null, jXPathBasicBeanInfo0, locale0);
      jXPathBasicBeanInfo0.toString();
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "<<unknown namespace>>", false, (NodePointer) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale1 = Locale.CHINESE;
      locale0.getDisplayCountry(locale1);
      jXPathBasicBeanInfo0.getPropertyDescriptor("<<unknown namespace>>");
      propertyIterator0.prepareForIndividualProperty("empty");
      propertyIterator0.setPosition(1);
      int int0 = NodePointer.WHOLE_COLLECTION;
      propertyIterator0.getPropertyPointer();
      propertyIterator0.setPosition(2);
      PropertyIterator propertyIterator1 = null;
      try {
        propertyIterator1 = new PropertyIterator(beanPointer0, "", true, beanPointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // PropertyIerator startWith parameter is not a child of the supplied parent
         //
         verifyException("org.apache.commons.jxpath.ri.model.beans.PropertyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class1);
      Locale locale0 = Locale.GERMAN;
      BeanPointer beanPointer0 = new BeanPointer((QName) null, (Object) null, jXPathBasicBeanInfo0, locale0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ic6n][");
      jXPathBasicBeanInfo0.toString();
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "<<unknown namespace>>", true, (NodePointer) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale1 = new Locale("BeanInfo [class = java.lang.String, dynamic, properties = \n    class [B: bytes\n    boolean: empty]");
      locale1.getDisplayName(locale0);
      locale0.getDisplayCountry(locale1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jXPathBasicBeanInfo0.getPropertyDescriptor("<<unknown namespace>>");
      propertyIterator0.prepareForIndividualProperty("empty");
      propertyIterator0.prepareForIndividualProperty("empty");
      propertyIterator0.setPosition(10);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(beanPointer0, jXPathBasicBeanInfo0);
      locale0.getDisplayLanguage();
      beanPropertyPointer0.setIndex(112);
      PropertyIterator propertyIterator1 = new PropertyIterator(beanPointer0, "2", false, beanPropertyPointer0);
      assertFalse(propertyIterator1.equals((Object)propertyIterator0));
  }
}
