/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 02:59:25 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>(class0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Map> class0 = Map.class;
      HashMap<String, Map<Object, Map<Object, Object>>> hashMap0 = new HashMap<String, Map<Object, Map<Object, Object>>>();
      DoubleKeyMap<String, Object, Map<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Object, Map<Object, Object>>(hashMap0, class0);
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap0.remove((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<Integer, Map<Object, Object>> hashMap0 = new HashMap<Integer, Map<Object, Object>>();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>(hashMap0);
      Integer integer0 = new Integer((-956));
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.put(integer0, (Object) integer0, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<String, Map<Object, HashMap<String, Object>>> hashMap0 = new HashMap<String, Map<Object, HashMap<String, Object>>>();
      DoubleKeyMap<String, Object, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<String, Object>>(hashMap0);
      Map<Object, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(map0, class0);
      String string0 = doubleKeyMap1.put((Object) doubleKeyMap0, (Object) null, "us.codecraft.webmagic.utils.MultiKeyMapBase");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      HashMap<HashMap<Object, Object>, Map<HashMap<String, Object>, Map<Object, Object>>> hashMap1 = new HashMap<HashMap<Object, Object>, Map<HashMap<String, Object>, Map<Object, Object>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, Object>, HashMap<String, Object>, Map<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, HashMap<String, Object>, Map<Object, Object>>(hashMap1, class0);
      Map<HashMap<String, Object>, Map<Object, Object>> map0 = doubleKeyMap0.get(hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<HashMap<Map<Object, Object>, Integer>, Map<String, Integer>> hashMap0 = new HashMap<HashMap<Map<Object, Object>, Integer>, Map<String, Integer>>();
      DoubleKeyMap<HashMap<Map<Object, Object>, Integer>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Map<Object, Object>, Integer>, String, Integer>(hashMap0);
      Integer integer0 = doubleKeyMap0.remove((HashMap<Map<Object, Object>, Integer>) null, "");
      HashMap<Map<Object, Object>, Integer> hashMap1 = new HashMap<Map<Object, Object>, Integer>(0);
      doubleKeyMap0.put(hashMap1, "", integer0);
      doubleKeyMap0.remove(hashMap1, "us.codecraft.webmagic.utils.DoubleKeyMap");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashMap<Integer, Map<Object, Object>> hashMap0 = new HashMap<Integer, Map<Object, Object>>();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>(hashMap0);
      Integer integer0 = new Integer((-956));
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>(hashMap0);
      Object object0 = hashMap1.put(hashMap0, integer0);
      hashMap0.put(integer0, hashMap1);
      doubleKeyMap0.put(integer0, (Object) integer0, object0);
      assertEquals(2, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DoubleKeyMap<String, HashMap<String, Object>, String> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, Object>, String>();
      HashMap<HashMap<Integer, Object>, Map<Object, Map<Object, Object>>> hashMap0 = new HashMap<HashMap<Integer, Object>, Map<Object, Map<Object, Object>>>();
      DoubleKeyMap<HashMap<Integer, Object>, Object, Map<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<HashMap<Integer, Object>, Object, Map<Object, Object>>(hashMap0);
      Map<Object, Object> map0 = doubleKeyMap1.get((HashMap<Integer, Object>) null, (Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DoubleKeyMap<String, Map<Object, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Map<Object, Object>, Integer>((Map<String, Map<Map<Object, Object>, Integer>>) null);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer0 = new Integer((-2415));
      doubleKeyMap0.put("", (Map<Object, Object>) hashMap0, integer0);
      Integer integer1 = doubleKeyMap0.get("", (Map<Object, Object>) hashMap0);
      assertEquals((-2415), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
