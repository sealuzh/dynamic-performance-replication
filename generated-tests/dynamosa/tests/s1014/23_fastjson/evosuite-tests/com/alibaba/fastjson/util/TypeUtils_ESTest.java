/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 03 20:41:32 GMT 2019
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.Date;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.time.Clock;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.Calendar;
import java.util.Collection;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      ObjectDeserializer objectDeserializer0 = parserConfig0.getDeserializer((Class<?>) class0, (Type) null);
      assertEquals(12, objectDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("d5_EEuZL,,nt\"Vz");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"d5_EEuZLnt\"Vz\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("double");
      assertEquals("double", class0.toString());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Date> class0 = Date.class;
      JSONField jSONField0 = TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
      assertNull(jSONField0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertTrue(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("g");
      assertEquals((-5808559072177166042L), long0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Byte byte0 = TypeUtils.castToByte("7");
      assertEquals((byte)7, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Class<Boolean> class0 = Boolean.TYPE;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Locale locale0 = Locale.ITALIAN;
      TypeUtils.cast((Object) locale0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<IllegalAccessError> class1 = IllegalAccessError.class;
      ParserConfig parserConfig0 = new ParserConfig();
      Type[] typeArray0 = new Type[9];
      typeArray0[2] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[2]);
      EnumSet<TimeUnit> enumSet0 = TypeUtils.cast((Object) hashMap0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertNotNull(enumSet0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass((String) null, (ClassLoader) null, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass((String) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = TypeUtils.isKotlin((Class) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      boolean boolean0 = TypeUtils.isHibernateInitialized(classLoader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<OptionalCodec> class0 = OptionalCodec.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters((Class) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Field[] fieldArray0 = new Field[2];
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, (String) null, fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Field[] fieldArray0 = new Field[8];
      // Undeclared exception!
      try { 
        TypeUtils.getField((Class<?>) null, "can not cast to Date, value : ", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("getTypeParameters");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class0);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("");
      assertEquals((-3750763034362895579L), long0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, concurrentHashMap0, true, (PropertyNamingStrategy) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Rectangle> class0 = Rectangle.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, map0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put(")Xv#yCttQ+svH`L3T", ")Xv#yCttQ+svH`L3T");
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      treeMap0.put("is", (Field) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, map0, (Map<String, Field>) treeMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) treeMap0, true, propertyNamingStrategy0);
      assertEquals("class [S", class1.toString());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Insets insets0 = new Insets(1020, 1020, 35, 1020);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints(35, 35, 35, 539, 0.0, 539, 1020, 1118, insets0, (-1846), (-30733247));
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(gridBagConstraints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.awt.GridBagConstraints@7419df71
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.util.List<java.lang.String>
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : org.evosuite.instrumentation.InstrumentingClassLoader@3694c16c
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) null, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      java.util.IdentityHashMap<String, Object> identityHashMap0 = new java.util.IdentityHashMap<String, Object>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "WriteEnumUsingToString");
      identityHashMap0.put("com.alibaba.fastjson.util.TypeUtils", sQLFeatureNotSupportedException0);
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = TypeUtils.castToJavaBean((Map<String, Object>) identityHashMap0, class0, (ParserConfig) null);
      assertNotNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.util.List<java.lang.String>
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(1539L);
      Class<SQLException> class0 = SQLException.class;
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.setAutoTypeSupport(true);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) atomicLong0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTransientException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("CvDpC-Z2uJ27)+i!?c+");
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) mockNullPointerException0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTransientException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.lang.Object@b720fc4
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<JobAttributes> class0 = JobAttributes.class;
      Class<BigDecimal> class1 = BigDecimal.class;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.util.ParameterizedTypeImpl@41
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(threadGroup0).toString();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(threadGroup0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(mockIllegalAccessException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(timeUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : MILLISECONDS
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(aSMDeserializerFactory0.classLoader);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.al\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(propertyNamingStrategy0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.setAsmEnable(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) ").^,e*U{tVDTM86", type0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Type[] typeArray0 = new Type[7];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, type0, (Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@f449715d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) gridBagConstraints0, (ParameterizedType) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("@", "M1;Db");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Double> class0 = Double.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, (PropertyNamingStrategy) null);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.isProxy((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.isPath((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getSerializeFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getParserFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getClassFromMapping((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        TypeUtils.getAnnotation((Class<?>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGettersWithFieldBase((Class<?>) null, treeMap0, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) treeMap0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) linkedHashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters(class0, (JSONType) null, (Map<String, String>) null, (Map<String, Field>) null, true, (PropertyNamingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Time> class0 = Time.class;
      Class<Locale> class1 = Locale.class;
      FieldInfo fieldInfo0 = new FieldInfo("r1", class1, class1, class0, (Field) null, (-1187), (-1187), (-1187));
      Type[] typeArray0 = new Type[3];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, fieldInfo0.fieldClass, fieldInfo0.fieldClass);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      // Undeclared exception!
      TypeUtils.cast((Object) mockSimpleDateFormat0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) treeMap0, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Collection collection0 = TypeUtils.createCollection(parameterizedTypeImpl0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class class0 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("@");
      assertEquals("@", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<TimeZone> class0 = TimeZone.class;
      ObjectDeserializer objectDeserializer0 = parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      assertEquals(12, objectDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertEquals("class java.lang.Byte", class1.toString());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class class0 = (Class)TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
      assertEquals("class java.lang.String", class0.toString());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>(890);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>(weakHashMap0);
      Class<String> class0 = String.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) linkedHashMap0, false, (PropertyNamingStrategy) null);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>(1537);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) weakHashMap0, false, propertyNamingStrategy0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<InstantiationException> class0 = InstantiationException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) treeMap0, false, propertyNamingStrategy0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>(89);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) weakHashMap0, true, (PropertyNamingStrategy) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Point> class0 = Point.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("getuseDaylightTime", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. getuseDaylightTime
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("Ljava.awt.Rectangle", classLoader0, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[jJ+vySU+ o", classLoader0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "NMYkA~a;");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("java.util.concurrent.ConcurrentSkipListSet", classLoader0, false);
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("", classLoader0, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<BigDecimal> class0 = BigDecimal.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      boolean boolean1 = TypeUtils.isPath(class1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Type[] typeArray0 = new Type[2];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], (Type) null);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "q", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@e1781
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Rectangle> class0 = Rectangle.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "o", class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<Rectangle> class0 = Rectangle.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ParserConfig parserConfig0 = new ParserConfig();
      Double double0 = TypeUtils.cast((Object) null, class0, parserConfig0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("6y#%33-Ad=zSrG]1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("\"v.17CpKC#DTpGT4G&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("mapSortField");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : mapSortField
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("Ljava.awt.Rectangle");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ljava.awt.Rectangle\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockDate mockDate0 = new MockDate(52, 52, 52, 936, 936);
      java.util.Date date0 = TypeUtils.castToDate(mockDate0);
      assertEquals("Mon Jul 30 15:36:00 GMT 1956", date0.toString());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("~%5!");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Constructor<RuntimeException>[] constructorArray0 = (Constructor<RuntimeException>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("d:kE-ZrIrf4<,G,p2BK");
      assertEquals(5474355040218085288L, long0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("W1W_@tRJfSWTkN");
      assertEquals(7976500863267406767L, long0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.sql.SQLTransactionRollbackException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class [I", class1.toString());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) hashtable0, propertyNamingStrategy0, false);
      assertEquals("class [S", class1.toString());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class [C", class1.toString());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<BreakIterator> class0 = BreakIterator.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("fastjson.parser.autoTypeSupport").when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null, (Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("(I)Z").when(genericArrayType1).toString();
      doReturn(type0).when(genericArrayType1).getGenericComponentType();
      Type type1 = TypeUtils.checkPrimitiveArray(genericArrayType1);
      assertNotSame(type0, type1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      assertEquals(17, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      assertEquals(1, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals("class java.lang.Object", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      Class<JobAttributes> class1 = JobAttributes.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<IllegalArgumentException> class2 = IllegalArgumentException.class;
      TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) hashtable0);
      Class<BigDecimal> class3 = BigDecimal.class;
      TypeUtils.isPath(class3);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.getDeserializer((Type) class0);
      ParserConfig parserConfig1 = new ParserConfig();
      Class<RuntimeException> class4 = RuntimeException.class;
      parserConfig1.getDeserializer((Class<?>) class2, (Type) class2);
      TypeUtils.isProxy(class2);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.fnv1a_64("istoPattern");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(class4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class java.lang.RuntimeException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "is", fieldArray0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getClass((Type) parameterizedTypeImpl0);
      assertTrue(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TypeUtils.unwrapOptional((Type) null);
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      assertSame(type0, parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class1);
      assertFalse(boolean0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      boolean boolean0 = TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<Dimension> class0 = Dimension.class;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<Annotation> class0 = Annotation.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      Class<Collator> class1 = Collator.class;
      FieldInfo fieldInfo0 = new FieldInfo("jcal", class0, class1, class0, (Field) null, (-2013516739), (-2013516739), 1675);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "jcal");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ObjectDeserializer objectDeserializer0 = parserConfig0.getDeserializer(fieldInfo0.fieldClass, fieldInfo0.fieldType);
      assertEquals(12, objectDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<SQLException> class0 = SQLException.class;
      ParserConfig parserConfig0 = new ParserConfig();
      SQLException sQLException0 = TypeUtils.cast((Object) hashtable0, class0, parserConfig0);
      assertEquals("java.sql.SQLException", sQLException0.toString());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<Point> class0 = Point.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Float> class0 = Float.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(2069);
      hashtable0.put("groupingUsed", "groupingUsed");
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<DecimalFormat> class0 = DecimalFormat.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, (PropertyNamingStrategy) null, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<SQLTransientException> class0 = SQLTransientException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("nextException", "nextException");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      assertEquals(6, list0.size());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<TimeUnit> class0 = TimeUnit.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONObject jSONObject0 = new JSONObject();
      Class<Date> class0 = Date.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      jSONObject0.put("fastjson.parser.autoTypeAccept", (Object) throwableDeserializer0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class char
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<InternalError> class0 = InternalError.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      TypeUtils.getGenericParamType(class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<?> class2 = TypeUtils.loadClass("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", (ClassLoader) aSMDeserializerFactory0.classLoader);
      assertFalse(class2.isInterface());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.asm.ClassReader", classLoader0, false);
      assertEquals("class com.alibaba.fastjson.asm.ClassReader", class0.toString());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("Ljava/lang/Class;");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet", (ClassLoader) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[`8CE71r]", classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<?> class0 = TypeUtils.loadClass("[C", (ClassLoader) aSMDeserializerFactory0.classLoader);
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("", (ClassLoader) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass((String) null, (ClassLoader) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(635);
      Class<Time> class0 = Time.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.sql.Time
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      java.util.IdentityHashMap<String, Object> identityHashMap0 = new java.util.IdentityHashMap<String, Object>();
      Class<Time> class0 = Time.class;
      Time time0 = TypeUtils.castToJavaBean((Map<String, Object>) identityHashMap0, class0, (ParserConfig) null);
      assertEquals("00:00:00", time0.toString());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) decimalFormat0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"currency\":{\"currencyCode\":\"XXX\",\"displayName\":\"Unknown Currency\",\"symbol\":\"XXX\"},\"decimalFormatSymbols\":{\"NaN\":\"\uFFFD\",\"currencySymbol\":\"\u00A4\",\"decimalSeparator\":\".\",\"digit\":\"#\",\"exponentSeparator\":\"E\",\"groupingSeparator\":\",\",\"infinity\":\"\u221E\",\"internationalCurrencySymbol\":\"XXX\",\"minusSign\":\"-\",\"monetaryDecimalSeparator\":\".\",\"patternSeparator\":\";\",\"perMill\":\"\u2030\",\"percent\":\"%\",\"zeroDigit\":\"0\"},\"decimalSeparatorAlwaysShown\":{},\"groupingSize\":{},\"groupingUsed\":{},\"maximumFractionDigits\":{},\"maximumIntegerDigits\":{},\"minimumFractionDigits\":{},\"minimumIntegerDigits\":{},\"multiplier\":{},\"negativePrefix\":\"-\",\"negativeSuffix\":\"\",\"parseBigDecimal\":{},\"parseIntegerOnly\":{},\"positivePrefix\":\"\",\"positiveSuffix\":\"\",\"roundingMode\":\"HALF_EVEN\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "ZD~nT_JW1Q+O$Ij", (Type) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = new ParserConfig();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = TypeUtils.cast((Object) "", (Type) parameterizedTypeImpl0, parserConfig0);
      assertNull(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class0 = JavaBeanInfo.getBuilderClass(jSONType0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = TypeUtils.cast((Object) "", (Type) class0, (ParserConfig) null);
      assertNull(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) type0, type0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = TypeUtils.cast((Object) null, (Type) null, parserConfig0);
      assertNull(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "cl", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTransientException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("oracle.sql.DATE");
      assertEquals("oracle.sql.date", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("CAUSE_CAPTION");
      assertEquals("cause_CAPTION", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<SQLTransientException> class1 = SQLTransientException.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTransactionRollbackException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<Date> class0 = Date.class;
      NumberDeserializer numberDeserializer0 = new NumberDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) numberDeserializer0, (Type) class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.NumberDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Dimension dimension0 = new Dimension((-2304), 25);
      Class<Long> class0 = Long.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) dimension0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.awt.Dimension[width=-2304,height=25]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      Class<Byte> class0 = Byte.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) decimalFormatSymbols0, (Type) class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.text.DecimalFormatSymbols@1073a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("{ \"");
      Class<IllegalAccessException> class0 = IllegalAccessException.class;
      IllegalAccessException illegalAccessException0 = TypeUtils.castToJavaBean((Object) mockIllegalAccessException0, class0);
      assertSame(mockIllegalAccessException0, illegalAccessException0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "(I)Z", type0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : [F
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0);
      Class<Calendar> class0 = Calendar.class;
      Calendar calendar0 = TypeUtils.castToJavaBean((Object) jSONObject0, class0);
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      SQLTransientConnectionException sQLTransientConnectionException0 = TypeUtils.castToJavaBean((Object) null, class0);
      assertNull(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("zoneStrings");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : zoneStrings
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Float float0 = new Float((double) 1539L);
      Boolean boolean0 = TypeUtils.castToBoolean(float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError((String) null);
      Class<Boolean> class0 = Boolean.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) outOfMemoryError0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.OutOfMemoryError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = TypeUtils.castToBytes("{fwGNZly8D:.yJ");
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      LinkedHashMap<Integer, SQLTransactionRollbackException> linkedHashMap0 = new LinkedHashMap<Integer, SQLTransactionRollbackException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Boolean boolean0 = new Boolean("C");
      Integer integer0 = TypeUtils.castToInt(boolean0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("Dy'u");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Dy'u\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(81);
      Integer integer0 = TypeUtils.castToInt(atomicInteger0);
      assertEquals(81, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Integer integer0 = TypeUtils.castToInt("");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      java.util.IdentityHashMap<String, ClientInfoStatus> identityHashMap0 = new java.util.IdentityHashMap<String, ClientInfoStatus>();
      Object object0 = identityHashMap0.clone();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Long long0 = TypeUtils.castToLong("");
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("com.alibaba.fastjson.asm.TypeCollector");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : com.alibaba.fastjson.asm.TypeCollector
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("(I)Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : (I)Z
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Float float0 = new Float((float) 22);
      Timestamp timestamp0 = TypeUtils.castToTimestamp(float0);
      assertEquals("1970-01-01 00:00:00.022", timestamp0.toString());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONObject jSONObject0 = new JSONObject(0);
      Class<Time> class0 = Time.class;
      Time time0 = TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
      Timestamp timestamp0 = TypeUtils.castToTimestamp(time0);
      assertEquals("1970-01-01 00:00:00.0", timestamp0.toString());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Timestamp timestamp0 = Timestamp.valueOf(localDateTime0);
      Timestamp timestamp1 = TypeUtils.castToTimestamp(timestamp0);
      assertSame(timestamp1, timestamp0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<Time> class0 = Time.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "2rgfxX,n&]9JRvy", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 2rgfxX,n&]9JRvy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Float float0 = new Float((double) 4090);
      Time time0 = TypeUtils.castToSqlTime(float0);
      assertEquals("00:00:04", time0.toString());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, (-3626), (-3626));
      Time time0 = TypeUtils.castToSqlTime(mockGregorianCalendar0);
      assertEquals("00:00:00", time0.toString());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("[C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : [C
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(1542L);
      Date date0 = TypeUtils.castToSqlDate(atomicLong0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Date date0 = new Date((-1635L));
      Date date1 = TypeUtils.castToSqlDate(date0);
      assertNotNull(date1);
      assertSame(date1, date0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      InstantiationException instantiationException0 = new InstantiationException();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(instantiationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.InstantiationException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "", class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "(Iq", class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"(Iq\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "@-0k", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : @-0k
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((double) (-1232163487003927706L));
      java.util.Date date0 = TypeUtils.castToDate(bigDecimal0);
      assertEquals("Fri Mar 10 01:07:52 GMT 39042936", date0.toString());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Time time0 = new Time((-1012L));
      Class<Calendar> class0 = Calendar.class;
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)TypeUtils.castToJavaBean((Object) time0, class0);
      assertTrue(mockGregorianCalendar0.isLenient());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "Ljava.awt.Color", class0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger((-1666));
      Double double0 = TypeUtils.castToDouble(atomicInteger0);
      assertEquals((-1666.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(decimalFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.text.DecimalFormat@674dc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("k]f*", "k]f*");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(linkedHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(linkedHashMap0);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Short short0 = TypeUtils.castToShort("");
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Float float0 = new Float((-1215.5125756807));
      Short short0 = TypeUtils.castToShort(float0);
      assertEquals((short) (-1215), (short)short0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("d5_EEuZL,,nt\"Vz");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"d5_EEuZL,,nt\"Vz\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("[C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : [C
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Character character0 = TypeUtils.castToChar("C");
      assertEquals('C', (char)character0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Integer integer0 = new Integer((-1624244739));
      Byte byte0 = TypeUtils.castToByte(integer0);
      assertEquals((byte) (-3), (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("cl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"cl\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(1542L);
      String string0 = TypeUtils.castToString(atomicLong0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      //  // Unstable assertion: assertTrue(TypeUtils.compatibleWithFieldName);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      TypeUtils.clearClassMapping();
  }
}
