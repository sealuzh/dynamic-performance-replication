/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 07:15:17 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StreamTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import umd.cs.shop.JSListAxioms;
import umd.cs.shop.JSListLogicalAtoms;
import umd.cs.shop.JSOperator;
import umd.cs.shop.JSPlan;
import umd.cs.shop.JSPlanningDomain;
import umd.cs.shop.JSState;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTaskAtom;
import umd.cs.shop.JSTasks;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSState_ESTest extends JSState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSPlan jSPlan0 = new JSPlan();
      JSTasks jSTasks0 = jSPlan0.standarizerTasks();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      JSSubstitution jSSubstitution1 = jSState0.satisfies(jSTasks0, jSSubstitution0, jSListAxioms0);
      JSSubstitution jSSubstitution2 = jSState0.satisfies(jSTasks0, jSSubstitution1, jSListAxioms0);
      JSListAxioms jSListAxioms1 = new JSListAxioms();
      JSSubstitution jSSubstitution3 = jSState0.satisfies(jSTasks0, jSSubstitution2, jSListAxioms1);
      assertEquals(0, jSSubstitution3.capacity());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      JSState jSState0 = null;
      try {
        jSState0 = new JSState(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSListLogicalAtoms jSListLogicalAtoms0 = new JSListLogicalAtoms();
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      // Undeclared exception!
      try { 
        jSState0.satisfiesAll(jSListLogicalAtoms0, (JSSubstitution) null, jSListAxioms0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSState", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSPlan jSPlan0 = new JSPlan();
      JSState jSState1 = jSState0.apply(jSPlan0);
      JSState jSState2 = new JSState();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      JSSubstitution jSSubstitution1 = jSState1.satisfies(jSState0, jSSubstitution0, jSListAxioms0);
      JSState jSState3 = jSState2.apply(jSPlan0);
      JSSubstitution jSSubstitution2 = jSState2.satisfies(jSState1, jSSubstitution1, jSListAxioms0);
      jSState1.satisfiesAll(jSPlan0, jSSubstitution2, jSListAxioms0);
      jSState3.addElementsToState(jSState1);
      jSListAxioms0.add((Object) jSState2);
      JSListLogicalAtoms jSListLogicalAtoms0 = jSState2.applySubstitutionListLogicalAtoms(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = jSState1.satisfies(jSListLogicalAtoms0, jSSubstitution3, jSListAxioms0);
      jSState1.satisfies(jSState0, jSSubstitution4, jSListAxioms0);
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JSState jSState0 = new JSState();
      jSState0.stream();
      JSPlan jSPlan0 = new JSPlan();
      Object object0 = new Object();
      jSPlan0.add(object0);
      jSPlan0.makeFail();
      jSState0.addElementsToState(jSPlan0);
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      jSTaskAtom0.ensureCapacity((-231));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSState0.satisfiesTAm(jSTaskAtom0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSPredicateForm
         //
         verifyException("umd.cs.shop.JSState", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSPlan jSPlan0 = new JSPlan();
      jSPlan0.add((Object) jSState0);
      jSState0.addElementsToState(jSPlan0);
      assertEquals("[[(this Collection)]]", jSPlan0.toString());
      assertEquals(1, jSState0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JSState jSState0 = new JSState();
      jSState0.stream();
      JSPlan jSPlan0 = new JSPlan();
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSPlan0.makeFail();
      jSState0.addElementsToState(jSPlan0);
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      jSTaskAtom0.ensureCapacity((-231));
      Object object1 = new Object();
      jSTaskAtom0.add(object1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSState0.satisfiesTAm(jSTaskAtom0, jSSubstitution0);
      jSSubstitution0.removeAllElements();
      JSState jSState1 = jSState0.apply(jSPlan0);
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      Object[] objectArray0 = new Object[0];
      jSState1.toArray(objectArray0);
      jSSubstitution0.add((Object) null);
      // Undeclared exception!
      try { 
        jSPlanningDomain0.parserOpsMethsAxs(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
}
