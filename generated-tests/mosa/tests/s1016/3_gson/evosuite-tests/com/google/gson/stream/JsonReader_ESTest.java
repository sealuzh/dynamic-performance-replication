/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:38:25 GMT 2018
 */

package com.google.gson.stream;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import java.io.CharArrayReader;
import java.io.EOFException;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.ObjectStreamConstants;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;
import java.nio.charset.Charset;
import java.util.LinkedList;
import java.util.Set;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonReader_ESTest extends JsonReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"~'-/");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 208);
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader1);
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 257);
      Charset.defaultCharset();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      LinkedList<String> linkedList0 = new LinkedList<String>(set0);
      linkedList0.toString();
      pipedWriter0.append((CharSequence) "n,D$y~");
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonReader jsonReader0 = null;
      try {
        jsonReader0 = new JsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = '|';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 208);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      LinkedList<String> linkedList0 = new LinkedList<String>(set0);
      linkedList0.toString();
      pipedWriter0.append((CharSequence) "[ANSI_X3.4-1968, cp367, csASCII, iso-ir-6, ASCII, iso_646.irv:1983, ANSI_X3.4-1986, ascii7, default, ISO_646.irv:1991, ISO646-US, IBM367, 646, us]");
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 208);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      LinkedList<String> linkedList0 = new LinkedList<String>(set0);
      linkedList0.toString();
      pipedWriter0.append((CharSequence) "[ANSI_X3.4-1968, cp367, csASCII, iso-ir-6, ASCII, iso_646.irv:1983, ANSI_X3.4-1986, ascii7, default, ISO_646.irv:1991, ISO646-US, IBM367, 646, us]");
      jsonReader0.setLenient(false);
      jsonReader0.peek();
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<+mhIDN!=Y");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JsonReader jsonReader0 = new JsonReader(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.peeked = 478;
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertFalse(jsonReader0.isLenient());
      
      long long0 = stringReader0.skip(478);
      assertEquals(10L, long0);
      
      jsonReader0.skipValue();
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(false);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = '|';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'(', '|', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'(', '|', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'(', '|', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(jsonReader0.isLenient());
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'(', '|', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<+mhIDN!=Y");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JsonReader jsonReader0 = new JsonReader(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 208);
      assertNotNull(pipedReader0);
      
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>(set0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(14, linkedList0.size());
      assertNotNull(linkedList0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'f'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertArrayEquals(new char[] {'f'}, charArray0);
      assertNotNull(jsonReader1);
      
      try { 
        jsonReader1.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'&', 'm', 'm', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'&', 'm', 'm', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 208);
      assertNotNull(pipedReader0);
      
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>(set0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(14, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = linkedList0.toString();
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(14, linkedList0.size());
      assertEquals("[ANSI_X3.4-1968, cp367, csASCII, iso-ir-6, ASCII, iso_646.irv:1983, ANSI_X3.4-1986, ascii7, default, ISO_646.irv:1991, ISO646-US, IBM367, 646, us]", string0);
      assertNotNull(string0);
      
      Writer writer0 = pipedWriter0.append((CharSequence) "[ANSI_X3.4-1968, cp367, csASCII, iso-ir-6, ASCII, iso_646.irv:1983, ANSI_X3.4-1986, ascii7, default, ISO_646.irv:1991, ISO646-US, IBM367, 646, us]");
      assertSame(pipedWriter0, writer0);
      assertSame(writer0, pipedWriter0);
      assertNotNull(writer0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"~'-/");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      String string0 = jsonReader0.toString();
      assertFalse(jsonReader0.isLenient());
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertNotNull(string0);
      
      boolean boolean0 = jsonReader0.hasNext();
      assertFalse(jsonReader0.isLenient());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      String string0 = jsonReader0.toString();
      assertFalse(jsonReader0.isLenient());
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<+mhIDN!=Y");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JsonReader jsonReader0 = new JsonReader(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.peeked = 478;
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertFalse(jsonReader0.isLenient());
      
      long long0 = stringReader0.skip(478);
      assertEquals(10L, long0);
      
      jsonReader0.skipValue();
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertFalse(jsonReader0.isLenient());
      
      Stream<String> stream0 = lineNumberReader0.lines();
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(stream0);
      
      stringReader0.mark(478);
      String string0 = jsonReader0.toString();
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertFalse(jsonReader0.isLenient());
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertNotNull(string0);
      
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"~'-/");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = 'c';
      charArray0[2] = 's';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'c', 's', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      boolean boolean0 = jsonReader0.hasNext();
      assertFalse(jsonReader0.isLenient());
      assertTrue(boolean0);
      
      JsonToken jsonToken0 = jsonReader0.peek();
      assertFalse(jsonReader0.isLenient());
      assertEquals(JsonToken.STRING, jsonToken0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'\u0000', 'c', 's', '\u0000'}, charArray0);
      assertNotNull(charArrayReader1);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader1);
      assertFalse(jsonReader1.isLenient());
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertArrayEquals(new char[] {'\u0000', 'c', 's', '\u0000'}, charArray0);
      assertNotNull(jsonReader1);
      
      jsonReader1.setLenient(false);
      assertFalse(jsonReader1.isLenient());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(jsonReader1, jsonReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertArrayEquals(new char[] {'\u0000', 'c', 's', '\u0000'}, charArray0);
      
      boolean boolean1 = jsonReader0.hasNext();
      assertFalse(jsonReader0.isLenient());
      assertNotSame(jsonReader0, jsonReader1);
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = '|';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'(', '|', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'(', '|', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'(', '|', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(jsonReader0.isLenient());
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'(', '|', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"~'-/");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 208);
      assertNotNull(pipedReader0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = 'c';
      charArray0[2] = 'h';
      charArray0[3] = 'h';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'F', 'c', 'h', 'h'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'F', 'c', 'h', 'h'}, charArray0);
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = '|';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'(', '|', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'(', '|', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"~-");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      String string0 = jsonReader0.toString();
      assertFalse(jsonReader0.isLenient());
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertNotNull(string0);
      
      boolean boolean0 = jsonReader0.hasNext();
      assertFalse(jsonReader0.isLenient());
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'd';
      charArray0[1] = '2';
      charArray0[2] = ')';
      charArray0[3] = 'O';
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"~-");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      String string0 = jsonReader0.toString();
      assertFalse(jsonReader0.isLenient());
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertNotNull(string0);
      
      boolean boolean0 = jsonReader0.hasNext();
      assertFalse(jsonReader0.isLenient());
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'd';
      charArray0[1] = '2';
      charArray0[2] = ')';
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'&', 'm', 'm', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'&', 'm', 'm', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      
      jsonReader0.close();
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'&', 'm', 'm', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 208);
      assertNotNull(pipedReader0);
      
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[1] = ')';
      charArray0[2] = ')';
      charArray0[3] = '2';
      charArray0[4] = '6';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'2', ')', ')', '2', '6'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertArrayEquals(new char[] {'2', ')', ')', '2', '6'}, charArray0);
      assertNotNull(jsonReader1);
      
      try { 
        jsonReader1.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = '|';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'(', '|', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'(', '|', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'(', '|', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jsonReader0.peeked = (-3088);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.setLenient(false);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'(', '|', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = '|';
      charArray0[3] = '|';
      charArray0[4] = '|';
      charArray0[5] = '|';
      charArray0[6] = '|';
      charArray0[7] = '|';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'|', '|', '|', '|', '|', '|', '|', '|'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'|', '|', '|', '|', '|', '|', '|', '|'}, charArray0);
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'|', '|', '|', '|', '|', '|', '|', '|'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'|', '|', '|', '|', '|', '|', '|', '|'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jsonReader0.setLenient(false);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 208);
      assertNotNull(pipedReader0);
      
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertNotNull(set0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>(set0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertEquals(14, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = linkedList0.toString();
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertEquals(14, linkedList0.size());
      assertEquals("[ANSI_X3.4-1968, cp367, csASCII, iso-ir-6, ASCII, iso_646.irv:1983, ANSI_X3.4-1986, ascii7, default, ISO_646.irv:1991, ISO646-US, IBM367, 646, us]", string0);
      assertNotNull(string0);
      
      Writer writer0 = pipedWriter0.append((CharSequence) "[ANSI_X3.4-1968, cp367, csASCII, iso-ir-6, ASCII, iso_646.irv:1983, ANSI_X3.4-1986, ascii7, default, ISO_646.irv:1991, ISO646-US, IBM367, 646, us]");
      assertSame(pipedWriter0, writer0);
      assertSame(writer0, pipedWriter0);
      assertNotNull(writer0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      charArray0[1] = 'N';
      charArray0[2] = 'G';
      charArray0[3] = ')';
      charArray0[4] = 'I';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'T', 'N', 'G', ')', 'I'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertArrayEquals(new char[] {'T', 'N', 'G', ')', 'I'}, charArray0);
      assertNotNull(jsonReader1);
      
      try { 
        jsonReader1.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'&', 'm', 'm', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'&', 'm', 'm', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      
      jsonReader0.close();
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'&', 'm', 'm', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }
}
