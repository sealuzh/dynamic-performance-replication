/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 07:21:43 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.StreamCorruptedException;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.decode("ETi9~+0_cNnG3S_Wo", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("ETi9~+0_cNnG3S_Wo", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ETi9~+0_cNnG3S_Wo'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[9];
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-58);
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("void", stringArray0);
      assertEquals("()V", string0);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-58);
      byteArray1[1] = (byte) (-17);
      byteArray1[2] = (byte) (-17);
      byteArray1[3] = (byte) (-58);
      byteArray1[4] = (byte) (-86);
      byteArray1[5] = (byte) (-17);
      byteArray1[6] = (byte) (-58);
      byteArray1[7] = (byte) (-17);
      byteArray1[8] = (byte) (-17);
      String string1 = Utility.toHexString(byteArray1);
      assertEquals("c6 ef ef c6 aa ef c6 ef ef", string1);
      
      String string2 = Utility.methodSignatureToString("()V", "P20AH7Lquew|L7o%Za", "byte", false);
      assertEquals("byte void P20AH7Lquew|L7o%Za()", string2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.accessToString(4, true);
      String string0 = "7B";
      try { 
        Utility.methodSignatureArgumentTypes("7B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = Utility.signatureToString("ZjA)\"+2");
      assertEquals("boolean", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      Utility.classOrInterface(177);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ZjA)\"+2";
      stringArray0[1] = "\t\t%";
      stringArray0[2] = "d~sto_2";
      stringArray0[3] = "... (truncated)";
      stringArray0[4] = "boolean";
      stringArray0[5] = "boolean";
      stringArray0[6] = "void";
      stringArray0[7] = "\t\t%";
      try { 
        Utility.methodTypeToSignature("Illegally nested brackets:", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = Utility.signatureToString("J}h@Z\"V7|");
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.compactClassName("Yv*M51", true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Yv*M51";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "Yv*M51";
      Utility.printArray(objectArray0, true, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("WeyD(@|2T8!-NANQ", "{Yv*M51, java.lang.Object@45818cbf, Yv*M51}", "{Yv*M51, java.lang.Object@45818cbf, Yv*M51}", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WeyD(@|2T8!-NANQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-3041), (-3041));
      int int0 = Utility.clearBit(59, 215);
      assertEquals(59, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-28);
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      
      String string0 = Utility.fillup("UL2'r", 215, true, 'U');
      assertEquals("UL2'rUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = Constants.CLASS_TYPE_NAMES;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)117;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lookupswitch");
      byteArray0[3] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)117, (-350));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lneg", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ifeq\t\t#1946", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.compactClassName("<HC]H", "", true);
      // Undeclared exception!
      try { 
        MockURI.create("a;dl[p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 4: a;dl[p
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte) (-35);
      byteArray0[6] = (byte) (-51);
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("jsr\t\t#23973", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Utility.signatureToString("Invalid signature: ", false);
      String string0 = Utility.signatureToString("CONSTANT_Long", false);
      assertEquals("char", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, false);
      assertEquals("", string1);
      
      String string2 = Utility.compactClassName("int", false);
      assertEquals("int", string2);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)92;
      String string3 = Utility.toHexString(byteArray0);
      assertEquals("eb 4e 71 ff 00 00 42 5c", string3);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utility.compactClassName("RnW]G&;>L~24?1`_\"");
      Utility.isJavaIdentifierPart('_');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)124;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)124, 77, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("fcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j&'h");
      byte[] byteArray0 = Utility.decode("j&'h", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload_0", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(252, (-1313));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('4');
      assertTrue(boolean0);
      
      int int0 = Utility.setBit(123, (-188));
      assertEquals(123, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = Utility.isJavaIdentifierPart('?');
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName(")/;SVZB5e6CS", ")/;SVZB5e6CS", false);
      assertEquals(").;SVZB5e6CS", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Utility.compactClassName("Yv*M51", true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Yv*M51";
      Utility.printArray(objectArray0, false, true);
      Utility.accessToString(17);
      Utility.clearBit(213, 293);
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = Utility.convertString("Nv?6fUVrQs/dR}");
      assertEquals("Nv?6fUVrQs/dR}", string0);
      
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string1 = Utility.compactClassName("Nv?6fUVrQs/dR}", true);
      assertEquals("Nv?6fUVrQs.dR}", string1);
      
      byte[] byteArray1 = Utility.decode("Nv?6fUVrQs/dR}", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.reset();
      byteSequence0.read();
      byteSequence0.readFloat();
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("castore", string2);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.decode("$", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte) (-120);
      byteArray0[7] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.encode(byteArray0, true);
      byte[] byteArray1 = Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      String string1 = Utility.convertString("$l$8b$I$A$A$A$A$A$A$A");
      assertTrue(string1.equals((Object)string0));
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertArrayEquals(new byte[] {(byte)31, (byte) (-117), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(10, byteArray1.length);
      assertEquals("lload_1", string2);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("FUzN>35");
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[-", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("long", "long", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Utility.accessToString(4, true);
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      Utility.getSignature("~4#Gn:Pw~yK2");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("dstore_1", "", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dstore_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j&'h");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      int int0 = Utility.setBit((byte) (-101), (byte)0);
      assertEquals((-101), int0);
      
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.printArray((Object[]) null);
      Utility.printArray((Object[]) null, true, false);
      String string0 = Utility.accessToString(10, false);
      assertEquals("private static", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utility.methodSignatureReturnType("CONSTANT_MethodHandle");
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "z#2)";
      stringArray0[1] = "z#2)";
      stringArray0[2] = "z#2)";
      stringArray0[3] = "";
      stringArray0[4] = "Byte code error: ";
      stringArray0[5] = "z#2)";
      stringArray0[6] = "z#2)";
      Utility.methodTypeToSignature("z#2)", stringArray0);
      Utility.accessToString(16, false);
      String[] stringArray1 = new String[0];
      Utility.methodTypeToSignature("Byte code error: ", stringArray1);
      Utility.getSignature("");
      Utility.isJavaIdentifierPart('x');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -71
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "Only elemen values of type array can be built with this ctor - type specified: ";
      Utility.convertString("Only elemen values of type array can be built with this ctor - type specified: ");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Only elemen values of type array can be built with this ctor - type specified: ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Only elemen values of type array can be built with this ctor - type specified: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.encode(byteArray0, true);
      byte[] byteArray1 = Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      Utility.convertString("$l$8b$I$A$A$A$A$A$A$A");
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)88;
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Utility.compactClassName("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.decode("'lb>MP=k`:g)~N", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("astore_1", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `astore_1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("FUzN>35");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte) (-46);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("astore_2", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = Utility.convertString("Wsz6d':QXca]LA\"<+I");
      assertEquals("Wsz6d\\':QXca]LA\\\"<+I", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = Utility.format(170, 2858, true, '!');
      String string1 = Utility.format(0, 199, true, 'V');
      assertEquals("0VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV", string1);
      
      String string2 = Utility.compactClassName(string0, string0, true);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "'";
      objectArray0[1] = (Object) "'";
      objectArray0[2] = (Object) "'";
      objectArray0[3] = (Object) "'";
      objectArray0[4] = (Object) "'";
      objectArray0[5] = (Object) "'";
      objectArray0[6] = (Object) "'";
      objectArray0[7] = (Object) "'";
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)53;
      String string0 = Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)9, 86);
      constantFieldref0.setClassIndex((byte)41);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.accessToString(69, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)46;
      byteArray0[0] = (byte)39;
      byteArray0[3] = (byte)26;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$t$$$A$g", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.compactClassName("", "K", true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)93;
      byteArray0[8] = (byte) (-50);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1313), (byte)93);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readShort();
      byteSequence2.available();
      try { 
        Utility.codeToString(byteSequence2, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = Utility.clearBit(2383, 2383);
      assertEquals(2383, int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('f');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte) (-102);
      byteArray0[8] = (byte)19;
      byte byte0 = Utility.typeOfSignature("[d}p=l)I2<X8f(}/|D0");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = Utility.clearBit(213, 213);
      assertEquals(213, int0);
      
      String string0 = "O4,>uTe\\uR\\nS|YuZ";
      String string1 = Utility.getSignature(string0);
      assertEquals("LO4,>uTe\\uR\\nS|YuZ;", string1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ior", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      String string0 = Utility.signatureToString("Jo+&PQVv\u0004p4", false);
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-64), (byte) (-64));
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(173, (byte) (-64));
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantDouble constantDouble0 = new ConstantDouble((-1737.4));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[2] = (Constant) constantDouble1;
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[3] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 49344. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 6, (-1871), true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("caload", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("RzM.K>k|c", "RzM.K>k|c", (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.getSignature("KSy)L#T4");
      // Undeclared exception!
      try { 
        Utility.signatureToString("KSy)L#T4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KSy)L#T4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = new Integer(2636);
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utility.typeOfSignature("Inv%lid type: ");
      Utility.signatureToString("Inv%lid type: ");
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "Inv%lid type: ";
      objectArray0[2] = (Object) "int";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = Utility.compactClassName("freturn");
      assertEquals("freturn", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte) (-126);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string1 = Utility.replace("\t\t%", "'", ", ");
      assertEquals("\t\t%", string1);
      
      String string2 = Utility.getSignature("dup2");
      assertEquals("Ldup2;", string2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.accessToString((int) (byte) (-122), false);
      assertEquals("private protected transient native interface abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Could not ");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("i2b", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('*');
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Invalid signature: ";
      stringArray0[1] = "short";
      stringArray0[2] = "##z|e";
      stringArray0[3] = "tgn+|)cxJfh%";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "Ju#{8&!4-+!DVAD";
      Utility.methodTypeToSignature("Ju#{8&!4-+!DVAD", stringArray0);
      try { 
        Utility.methodSignatureReturnType("Q)M7bWa.^>&a{2gII", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M7bWa.^>&a{2gII'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("3cz~HsJJ1TXi", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("W61", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W61'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("L0@E^s");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.format(5, 60, false, '5');
      assertEquals("555555555555555555555555555555555555555555555555555555555555", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Utility.signatureToString("Invalid signature: ", false);
      Utility.signatureToString("CONSTANT_Long", false);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "T0C9/&C2|#wB-A", "dreturn", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte byte0 = (byte)121;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureArgumentTypes(" arg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  arg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("athrow", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("J}h@Z\"V7|");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Utility.accessToString(157);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)81;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)3, (int) (byte) (-21), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 52227. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = Utility.accessToString(3014);
      assertEquals("private protected volatile transient native interface strictfp", string0);
      
      int int0 = Utility.clearBit((-2112), 186);
      assertEquals((-67110976), int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-103);
      byteArray0[6] = (byte) (-19);
      byteArray0[7] = (byte)42;
      byteArray0[8] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 79, (int) (byte)42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-111);
      byte byte0 = (byte) (-41);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)8;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore\t\t%55", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-58);
      byte byte0 = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte) (-84);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureReturnType("ifnull\t\t#20924", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ifnull\t\t#20924'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-76);
      byteArray0[0] = (byte) (-76);
      byte byte1 = (byte)8;
      byteArray0[1] = (byte)8;
      byte byte2 = (byte)18;
      byteArray0[2] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 7, (int) (byte)8, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "'z|X|th5]Q";
      try { 
        Utility.typeOfSignature("'z|X|th5]Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'z|X|th5]Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      try { 
        Utility.typeOfSignature("X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)70, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Utility.isJavaIdentifierPart('P');
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (int) (byte)123, (int) (byte)8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      try { 
        Utility.typeOfSignature("?eN~w0NF>MSo9OiZzy9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?eN~w0NF>MSo9OiZzy9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte) (-36);
      byteArray0[7] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("wide\t(wide)", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("P`4.twJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P`4.twJ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte) (-108);
      byteArray0[8] = (byte) (-88);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("N(HJAO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N(HJAO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("l2f", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "short";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2184, (int) (byte)74, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload_2", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("|w 6e0cFZ?=^8VE=5s", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `|w 6e0cFZ?=^8VE=5s'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 93, 76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aload_0", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = Utility.convertString("t$T$\buE}d}#/<NSK2");
      assertEquals("t$T$\buE}d}#/<NSK2", string0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      byte[] byteArray1 = Utility.decode("t$T$\\buE}d}#/<NSK2", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.reset();
      float float0 = byteSequence0.readFloat();
      assertEquals(4.6586633E31F, float0, 0.01F);
      
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(16, byteArray1.length);
      
      String string1 = Utility.accessToString(167);
      assertEquals("public private protected synchronized transient", string1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("2", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Utility.typeOfSignature("StackMap");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("gm$D'Bq5y'iM(@^:G!", "m", "m", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: gm$D'Bq5y'iM(@^:G!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)6;
      byteArray0[7] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("lstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = Utility.classOrInterface(57);
      assertEquals("class", string0);
      
      int int0 = Utility.setBit(57, 57);
      assertEquals(33554489, int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('/');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Y09F+<TtF2BtX#o1-ib");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y09F+<TtF2BtX#o1-ib
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = Utility.accessToString(512, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte) (-31);
      byteArray0[8] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("istore_1", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("i2d", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)91;
      String string0 = Utility.encode(byteArray0, true);
      Utility.decode("impdep2", false);
      String string1 = Utility.convertString("$l$8b$I$A$A$A$A$A$A$A");
      assertTrue(string1.equals((Object)string0));
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-104), 24);
      assertEquals("0:    <illegal opcode>\n1:    d2f\n2:    dcmpg\n3:    dup_x2\n", string2);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("sipush\t\t4407", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = Utility.signatureToString("B)r<Dd");
      assertEquals("byte", string0);
      
      byte[] byteArray0 = Utility.decode("^k$`14I-qV'", false);
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)94, (byte)107, (byte)0, (byte)49, (byte)52, (byte)73, (byte)45, (byte)113, (byte)86, (byte)39}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "'[L<\\h(fJ^lzt@cO62F";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\"@R0-~>1PkJ?IdDtwC>", "'[L<h(fJ^lzt@cO62F", "l9G{$93n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"@R0-~>1PkJ?IdDtwC>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = Utility.replace("BjwQy5-U}$53bFl]PAc", "BjwQy5-U}$53bFl]PAc", "BjwQy5-U}$53bFl]PAc");
      assertEquals("BjwQy5-U}$53bFl]PAc", string0);
      
      String string1 = Utility.signatureToString("BjwQy5-U}$53bFl]PAc", true);
      assertEquals("byte", string1);
      
      short short0 = Utility.searchOpcode("BjwQy5-U}$53bFl]PAc");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("+uYTP", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lneg", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Utility.convertString("");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)46;
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      constantPool0.accept(emptyVisitor0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, 4, 81, true);
      assertEquals("", string0);
      
      int int0 = Utility.setBit(119, (byte)46);
      assertEquals(16503, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)8;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(47);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (-3082), false);
      try { 
        Utility.typeOfSignature("0:    jsr_w\t\t#-1691744256\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    jsr_w\t\t#-1691744256
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Utility.accessToString(170, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      try { 
        Utility.typeOfSignature("M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.replace("anewarray", "arraylength", "anewarray");
      assertEquals("anewarray", string0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ifeq\t\t#-26367", string1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("goto\t\t#-22617", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      try { 
        Utility.typeOfSignature("APPEND ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: APPEND 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Invalid type: ");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      try { 
        Utility.typeOfSignature("En/dHi4.%':d~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: En/dHi4.%':d~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 116, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-4);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-86);
      byteArray1[1] = (byte)30;
      byteArray1[2] = (byte)14;
      byteArray1[3] = (byte) (-86);
      byteArray1[4] = (byte)30;
      byteArray1[5] = (byte) (-44);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("java.lang.Void", "java.lang.Void", false);
      assertEquals("java.lang.Void", string0);
      
      byte[] byteArray2 = Utility.decode("enum", false);
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(73, (byte) (-4));
      ByteSequence byteSequence0 = new ByteSequence(byteArray2);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lsub", string1);
      
      String string2 = Utility.printArray((Object[]) constantArray0, true, false);
      assertEquals("{null, null}", string2);
      
      String string3 = Utility.compactClassName("5jo3", "lsub", false);
      assertEquals("5jo3", string3);
      
      String string4 = Utility.accessToString(99);
      assertEquals("public private synchronized volatile", string4);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = Utility.clearBit(134, (-3160));
      assertEquals(134, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte)9;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 09 09 8a 09 8a 09 09 09", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('3');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Utility.replace("g1Xr4zo4cpuT!@5Y", "g1Xr4zo4cpuT!@5Y", "g1Xr4zo4cpuT!@5Y");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("drem", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Utility.searchOpcode("|p?d@0~O@0i_R:B");
      Utility.replace("|p?d@0~O@0i_R:B", "|p?d@0~O@0i_R:B", "|p?d@0~O@0i_R:B");
      Utility.accessToString(1936);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "|p?d@0~O@0i_R:B", "|p?d@0~O@0i_R:B", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      try { 
        Utility.typeOfSignature("b'e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: b'e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Invalid type: ");
      assertEquals((byte)10, byte0);
      
      boolean boolean0 = Utility.isSet((byte)10, (-4368));
      assertFalse(boolean0);
      
      String string0 = Utility.format(43, 80, false, 't');
      assertEquals("tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt43", string0);
      
      boolean boolean1 = Utility.isSet((byte)10, (byte)10);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = Utility.compactClassName("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("EZBGR|/1aXM,_2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EZBGR|/1aXM,_2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Utility.compactClassName("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)79, (int) (byte)79);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-58);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("void", stringArray0);
      assertEquals("()V", string0);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-58);
      byteArray1[1] = (byte) (-17);
      byteArray1[2] = (byte) (-17);
      byteArray1[3] = (byte) (-58);
      byte[] byteArray2 = Utility.decode("l+sO+,q ", false);
      Utility.compactClassName("y", "y", false);
      String string1 = Utility.methodSignatureToString("()V", "l+sO+,q ", "void");
      assertEquals("void void l+sO+,q ()", string1);
      
      String string2 = Utility.toHexString(byteArray2);
      assertEquals("6c 2b 7f 73 4f 2b 2c 71 20", string2);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)26;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$y$$$t$g", string0);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.fillup("SnC9\"d=`lM1|V>5D2jg", (byte)44, true, 'A');
      assertEquals("SnC9\"d=`lM1|V>5D2jgAAAAAAAAAAAAAAAAAAAAAAAAA", string1);
      
      String string2 = Utility.compactClassName("jsr_w");
      assertEquals("jsr_w", string2);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("fload_0", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Utility.classOrInterface(1638);
      byte[] byteArray0 = new byte[0];
      int int0 = 3749;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1638, 3749, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      try { 
        Utility.typeOfSignature("OO*51lb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OO*51lb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Utility.isJavaIdentifierPart('Y');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte) (-86);
      byteArray0[8] = (byte)8;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-69), (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    areturn
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = Utility.getSignature("\t\ts");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.replace("U<-q", "b5t~z?FV2%kxHCEd\t", "anewarray");
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("if_icmpeq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `if_icmpeq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.signatureToString("Zn\"2o3fs4fsSopqeD", true);
      Utility.searchOpcode("\"");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "";
      Utility.compactClassName("");
      boolean boolean0 = true;
      Utility.format((-835), 876, true, 'L');
      Utility.format(876, 0, true, '[');
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)50;
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureArgumentTypes("Vdstore_1", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Vdstore_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Utility.accessToString(170, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)27;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-3878), 58, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.signatureToString("Invalid signature: ", false);
      Utility.signatureToString("VoUd", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-82);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-82);
      byteArray1[1] = (byte) (-82);
      byteArray1[2] = (byte) (-82);
      byteArray1[3] = (byte)45;
      byteArray1[4] = (byte)91;
      byteArray1[5] = (byte) (-82);
      byteArray1[6] = (byte)45;
      byteArray1[7] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("freturn", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.compactClassName("mKJ6wyx:%Y", "mKJ6wyx:%Y", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      Utility.printArray(objectArray0);
      Utility.compactClassName("Put&7\"iix24W BjUl7>");
      try { 
        Utility.methodSignatureReturnType("tableswitch", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `tableswitch'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "qw~|";
      MockFileWriter mockFileWriter0 = new MockFileWriter("qw~|", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
      byte[] byteArray0 = null;
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = null;
      try {
        constantNameAndType0 = new ConstantNameAndType((ConstantNameAndType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantNameAndType", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte)53;
      Constant[] constantArray0 = new Constant[6];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-122), (-394));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantMethodref constantMethodref2 = new ConstantMethodref(constantMethodref0);
      constantArray0[3] = (Constant) constantMethodref2;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)4);
      constantArray0[5] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-71), 174, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1178. Constant pool size is: 6
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = Utility.getSignature("Invanlid type: ");
      assertEquals("LInvanlid;", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = Utility.replace("3ti! *", "3ti! *", "3ti! *");
      assertEquals("3ti! *", string0);
      
      String string1 = Utility.accessToString(55, true);
      assertEquals("public private protected final", string1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = Utility.format(4677, 4, false, '@');
      assertEquals("4677", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Utility.getSignature("short");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)21;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)42, (int) (byte)91, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Utility.signatureToString("BWoqQnX/[9z8JX+");
      try { 
        Utility.typeOfSignature("5#>9V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5#>9V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-41);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("l2d", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-80);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 170, (int) (byte)59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)93;
      byteArray0[8] = (byte) (-50);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1313), (byte)93);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("iload_1", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lload\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "G]I#pvn");
      Utility.typeOfSignature("Invalid type: ");
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.replace("G]I#pvn", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = "1^Ql8{-=_p_S!yal&4";
      Utility.convertString("1^Ql8{-=_p_S!yal&4");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Vv4", (String) null, "'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Vv4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.compactClassName("impdep1", true);
      assertEquals("impdep1", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('|');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-115);
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("d2f", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte)72;
      boolean boolean0 = Utility.isJavaIdentifierPart('[');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Utility.signatureToString("Invalid signature: ", false);
      Utility.signatureToString("VoUd", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-73);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.getSignature("\t\t");
      assertEquals("L;", string0);
      
      String string1 = Utility.compactClassName("\t\t");
      assertEquals("\t\t", string1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = Utility.getSignature("3ti! *");
      assertEquals("L3ti!;", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("fload_2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `fload_2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("fload_2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `fload_2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.accessToString(190);
      assertEquals("private protected static final synchronized transient", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Utility.searchOpcode("Invalid signature: ");
      Utility.getSignature("Invalid signature: ");
      Utility.compactClassName("LInvalid;");
      Utility.clearBit((short) (-1), (short) (-1));
      Utility.isSet(Integer.MAX_VALUE, 155);
      boolean boolean0 = true;
      Utility.methodSignatureReturnType("Invalid signature: ", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-57);
      MockFile mockFile0 = new MockFile("int", "tableswitch");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "tableswitch");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"tableswitch\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 93);
      assertEquals("0:    istore\t\t%197\n2:    nop\n3:    dcmpl\n4:    nop\n5:    dcmpl\n6:    nop\n7:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8Op619IeR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8Op619IeR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      String string0 = Utility.printArray(objectArray0);
      int int0 = Utility.setBit(70, 670);
      assertEquals(1073741894, int0);
      
      String string1 = Utility.printArray(objectArray0, true, true);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)102;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Utility.getSignature("=iDrcr}:-|h$di");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "L=iDrcr}:-|h$di;";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "L=iDrcr}:-|h$di;";
      objectArray0[5] = (Object) "=iDrcr}:-|h$di";
      objectArray0[6] = (Object) "=iDrcr}:-|h$di";
      objectArray0[7] = (Object) "L=iDrcr}:-|h$di;";
      Object object0 = new Object();
      objectArray0[8] = object0;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
      
      String string0 = Utility.classOrInterface(91);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte)12;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokestatic");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-37);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      Utility.replace("org.apache.bcel.classfile.Utility$JavaReader", "", "org.apache.bcel.classfile.Utility$JavaReader");
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Yrturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Yrturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup_x2", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-94);
      Utility.encode(byteArray0, true);
      int int0 = (-2987);
      Utility.setBit((-2987), 73);
      String string0 = "boolean";
      MockPrintStream mockPrintStream0 = new MockPrintStream("boolean");
      PrintStream printStream0 = mockPrintStream0.append('`');
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream(printStream0, false, "jsr");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // jsr
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = "+RnBh$fx,co2";
      try { 
        Utility.typeOfSignature("+RnBh$fx,co2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RnBh$fx,co2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.accessToString(465, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-17), 118);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ifnull\t\t#-4342
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Ua8!f&802H0jc[e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ua8!f&802H0jc[e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      Utility.accessToString((int) (byte)0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = byteSequence0.readBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Utility.compactClassName("g+1v>Fd7`e{0\"/Cig l", false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("{}", "&;hBV;ulzTS~:", "g+1v>Fd7`e{0\".Cig l", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte)11;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("d7 b5 00 00 32 9b 7c 7b 0b", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = "long";
      Utility.replace("", "long", "");
      Utility.getSignature("%n{E");
      try { 
        Utility.methodSignatureReturnType("bUFL?jW=jx8xExf9\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `bUFL?jW=jx8xExf9\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      short short0 = Utility.searchOpcode("istore_1");
      assertEquals((short)60, short0);
      
      String string0 = Utility.signatureToString("F$7U", false);
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-102));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[2] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(1, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "E?>", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("The FileFilter must not be null", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The FileFilter must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte) (-51);
      byteArray0[7] = (byte)21;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[8] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifnonnull\t\t#-6655", string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-67);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ishl", string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-18);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.replace("lcmp", "i9KGY'@0*KFN)(F", "lcmp");
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("impdep2", string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = Constants.CLASS_TYPE_NAMES;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)117;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lookupswitch");
      byteArray0[3] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)117, (-350));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.printArray((Object[]) stringArray0, false, true);
      String string0 = "null";
      try { 
        Utility.typeOfSignature("^D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ^D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("!D");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte)55;
      Utility.encode(byteArray0, false);
      String string0 = Utility.compactClassName("$a2$95$K$85$8e$d57", "CeYx1ZUW8C", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)46;
      byteArray0[0] = (byte)39;
      byteArray0[3] = (byte)26;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload_1", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.accessToString(1487, true);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)109;
      byteArray1[1] = (byte) (-1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 1487, 168);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = Utility.fillup("freturn", (-1417), true, '6');
      assertEquals("freturn", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "freturn";
      stringArray0[1] = "freturn";
      stringArray0[2] = "05:";
      stringArray0[3] = "The offset cannot be negative";
      stringArray0[4] = "freturn";
      String string1 = Utility.methodTypeToSignature("05:", stringArray0);
      assertEquals("(Lfreturn;Lfreturn;L05:;LThe;Lfreturn;)L05:;", string1);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("ZjA\"+2");
      assertEquals((byte)4, byte0);
      
      String string0 = Utility.convertString("\t\t%");
      assertEquals("\t\t%", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('Z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte) (-92);
      byteArray0[7] = (byte) (-81);
      byteArray0[8] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("goto_w\t\t#-555105501", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, " (");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-67);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)122;
      try { 
        Utility.methodSignatureToString("The size must be non-negative", (String) null, "c}-YN", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: The size must be non-negative
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = "istore_3";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("istore_3", "istore_3", "istore_3", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: istore_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-115);
      byteArray1[1] = (byte) (-115);
      byteArray1[2] = (byte) (-115);
      byteArray1[3] = (byte) (-115);
      byteArray1[4] = (byte) (-115);
      String string0 = Utility.toHexString(byteArray1);
      assertEquals("8d 8d 8d 8d 8d", string0);
      
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)111;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\tdefault = ");
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte)9;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("z$b4$a96o$be$f5$J", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = Utility.convertString("IQvald");
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string1 = Utility.compactClassName("IQvald", "fcmpg", false);
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray1 = Utility.decode("IQvald", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.reset();
      byteSequence0.readFloat();
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("idiv", string2);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)46;
      byteArray0[0] = (byte)15;
      byteArray0[3] = (byte)23;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)23;
      byteArray1[1] = (byte)44;
      byteArray1[2] = (byte)44;
      byteArray1[3] = (byte)15;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("fload\t\t%44", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ladd", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Utility.isJavaIdentifierPart('I');
      // Undeclared exception!
      try { 
        Utility.compactClassName(",5gS<6O4ICs=EF", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("monitorenter", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte) (-16);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1817), (int) (byte)89, true);
      assertEquals("0:    dup\n1:    dstore\t\t%4\n3:    fastore\n4:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)26;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.getSignature("P[U^DZ/+B7N)50<SI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[U^DZ/+B7N)50<SI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("nop", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 171, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ETi9~+0_cNnG3S_Wo", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readDouble();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("astore_3", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("3cz~HsJJ1TXi", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("baload", string0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dadd", string1);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("dup", "dup", "dup");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dup
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      boolean boolean0 = Utility.isSet((byte) (-108), (byte) (-108));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-67);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray1[0] = (byte)120;
      byteArray1[1] = (byte) (-22);
      byteArray1[2] = (byte) (-15);
      byteArray1[3] = (byte) (-22);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ishl", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, false, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Utility.classOrInterface(59);
      MockFile mockFile0 = new MockFile("\\");
      MockFile mockFile1 = new MockFile(mockFile0, "dN1a>iCzh7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("laload", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      try { 
        Utility.typeOfSignature("P5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      try { 
        Utility.typeOfSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifle\t\t#17734", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      String string1 = Utility.fillup("{java.lang.Object@cfb7a0b, java.lang.Object@795eef27, java.lang.Object@7877e595}", 1118, true, 'g');
      MockFile mockFile0 = new MockFile(", class=");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.CANADA_FRENCH;
      PrintStream printStream0 = mockPrintStream0.format(locale0, string1, objectArray0);
      Utility.printArray(printStream0, objectArray0);
      assertEquals(1200L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ETi9~+0_cNnG3S_Wo", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readDouble();
      byteSequence0.skip(1L);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fdiv", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte) (-57);
      byteArray0[7] = (byte) (-85);
      byteArray0[8] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Utility.getSignature("!D");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "L!D;", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      try { 
        Utility.typeOfSignature("/K%:eV!ESl%l2*bAt5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /K%:eV!ESl%l2*bAt5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)11;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)16;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("30 0b 10", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":wXAcuFJ?9:_e#E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :wXAcuFJ?9:_e#E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = Utility.getSignature("");
      assertEquals("L;", string0);
      
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.methodSignatureReturnType("L;", true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Utility.fillup("eEiD.7IduO`V", 117, false, '>');
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[2] = (byte)33;
      // Undeclared exception!
      try { 
        Utility.signatureToString("P[U^DZ.+B7", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P[U^DZ.+B7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = Utility.getSignature("Invalid signature: ");
      assertEquals("LInvalid;", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)71;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte)127;
      byteArray0[8] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble(byteSequence1);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantDouble constantDouble2 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ifgt\t\t#-23853", string1);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      int int0 = 152;
      Utility.format(152, 4, false, '*');
      Utility.compactClassName("byte");
      // Undeclared exception!
      try { 
        Utility.signatureToString("UK%e{}[/", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UK%e{}[/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      ConstantPool constantPool0 = null;
      Utility.decode("ETi9~+0_cNnG3S_Wo", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("R=}v01tJ]A3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R=}v01tJ]A3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("The FileFilter must not be null", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The FileFilter must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("3cz~HsJJ1TXi", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)6;
      byteArray1[1] = (byte) (-17);
      byteArray1[2] = (byte)65;
      byteArray1[3] = (byte)101;
      byteSequence0.skip((byte)101);
      byteArray1[4] = (byte) (-125);
      byteArray1[5] = (byte) (-55);
      byteArray1[6] = (byte) (-3);
      byteArray1[7] = (byte)48;
      byteArray1[8] = (byte)3;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)48, (int) (byte)101);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      MockFile mockFile0 = new MockFile((File) null, "return");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (byte) (-75);
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) byteSequence0;
      PrintWriter printWriter0 = mockPrintWriter0.format("return", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      assertEquals(170L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1xDfB~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1xDfB~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\"K[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"K[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-86);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte) (-86);
      objectArray0[1] = (Object) (byte) (-92);
      objectArray0[2] = (Object) (byte) (-86);
      objectArray0[3] = (Object) (byte) (-92);
      objectArray0[4] = (Object) (byte) (-92);
      Utility.printArray(objectArray0, true);
      Utility.convertString("KWNz-rPhq`");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ETi9~+0_cNnG3S_Wo", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lmul", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = ")";
      Utility.replace(")", ")", ")");
      Utility.classOrInterface((-438));
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.encode(byteArray0, true);
      byte[] byteArray1 = Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      String string1 = Utility.convertString("$l$8b$I$A$A$A$A$A$A$A");
      assertTrue(string1.equals((Object)string0));
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)31, (byte) (-117), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals("lload_1", string2);
      
      Utility.toHexString(byteArray0);
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("f2i", string3);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("jsr_w\t\t#-1681324032", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = " sAh' Jf7MCB;";
      boolean boolean0 = true;
      try { 
        Utility.decode(" sAh' Jf7MCB;", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = Utility.signatureToString("Invalid signature: ", false);
      assertEquals("int", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)25;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload\t\t%0", string1);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = Utility.signatureToString("BWoqQnX/[9z8JX+");
      assertEquals("byte", string0);
      
      String string1 = Utility.signatureToString("LCould;V", true);
      assertEquals("Could", string1);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null, true);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-51);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = Utility.fillup("eEiD.7IduO`V", 117, false, '>');
      assertEquals(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>eEiD.7IduO`V", string0);
      
      String[] stringArray0 = Constants.CLASS_TYPE_NAMES;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)117;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lookupswitch");
      byteArray0[3] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)117, (-350));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.printArray((Object[]) stringArray0, false, true);
      assertNotNull(string1);
      assertEquals("\"<illegal type>\", \"<illegal type>\", \"<illegal type>\", \"<illegal type>\", \"java.lang.Boolean\", \"java.lang.Character\", \"java.lang.Float\", \"java.lang.Double\", \"java.lang.Byte\", \"java.lang.Short\", \"java.lang.Integer\", \"java.lang.Long\", \"java.lang.Void\", \"<illegal type>\", \"<illegal type>\", \"<illegal type>\", \"<illegal type>\"", string1);
      
      String string2 = Utility.compactClassName("null", "lload_3", true);
      assertEquals("null", string2);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("X\t", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X\t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('N');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = Utility.convertString("jva'lan.Invalid type: ");
      assertEquals("jva\\'lan.Invalid type: ", string0);
      
      boolean boolean0 = Utility.isSet(2200, 2200);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte) (-11);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ixor", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Utility.decode("ETi9~+0_cNnG3S_Wo", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.signatureToString("SyntheticRepository could not load ", true);
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte)46;
      byteArray0[8] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload_1", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";>D)w X8*a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;>D)w X8*a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-58);
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("void", stringArray0);
      assertEquals("()V", string0);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-58);
      byteArray1[5] = (byte) (-58);
      byteArray1[2] = (byte) (-58);
      byteArray1[3] = (byte) (-58);
      String string1 = Utility.methodSignatureToString("()V", "()V", "()V", true, (LocalVariableTable) null);
      assertEquals("()V void ()V()", string1);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("&n!I|cID3DP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &n!I|cID3DP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      try { 
        Utility.methodSignatureToString("static", "static", "static", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: static
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Utility.searchOpcode("|p?d@0~O@0i_R:B");
      Utility.replace("|p?d@0~O@0i_R:B", "|p?d@0~O@0i_R:B", "|p?d@0~O@0i_R:B");
      Utility.accessToString((int) (short) (-1));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", "JBS_FxLo7L<m}j$t'", "Type of ConstValue invalid: ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("`MGF@aCXO/vX?.]", true);
      boolean boolean0 = Utility.isJavaIdentifierPart('9');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-8lLdZ %WP1~/Z4'3 ,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -8lLdZ %WP1~/Z4'3 ,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.getSignature("anewarray");
      assertEquals("Lanewarray;", string0);
      
      String string1 = Utility.fillup("", (-696), false, 's');
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "short";
      Utility.methodTypeToSignature("", stringArray0);
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-66);
      byteArray1[1] = (byte) (-7);
      byteArray1[2] = (byte)16;
      byteArray1[3] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("arraylength", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)39;
      byteArray0[0] = (byte)26;
      Utility.encode(byteArray0, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.fillup("SnC9\"d=`lM1|V>5D2jg", (byte)44, true, 'A');
      String string0 = Utility.compactClassName("jsr_w");
      Utility.replace("jsr_w", "3Tm)G)X<im", "iload_0");
      String string1 = Utility.replace("JJAG5-P6Z+6", "iload_0", "SnC9\"d=`lM1|V>5D2jgAAAAAAAAAAAAAAAAAAAAAAAAA");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("if_icmpne\t\t#27494", string0);
      
      byte[] byteArray1 = Utility.decode("if_icmpne\t\t#27494", false);
      assertEquals(17, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      try { 
        Utility.typeOfSignature("H_I;mR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H_I;mR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = Utility.fillup("eEiD.7IduO`V", 117, false, '>');
      String[] stringArray0 = Constants.CLASS_TYPE_NAMES;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[0] = (byte)127;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)127, (-326));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ETi9~+0_cNnG3S_Wo", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readDouble();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dadd", string0);
      
      int int0 = Utility.clearBit(152, 152);
      assertEquals(152, int0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Utility.getSignature("Invalid signature: ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)79;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 28, 68);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("\n", "\n", false);
      byte[] byteArray0 = null;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((File) null, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"
         // \" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dneg", string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte) (-111);
      byteArray0[7] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.readInt();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)109;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byte[] byteArray1 = Utility.decode("", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Ua8!f&802H0e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ua8!f&802H0e'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)47;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-95);
      byte[] byteArray1 = new byte[8];
      byteArray1[1] = (byte) (-95);
      byteArray1[2] = (byte)119;
      byteArray1[3] = (byte) (-95);
      byteArray1[4] = (byte)47;
      byteArray1[5] = (byte) (-114);
      byteArray1[6] = (byte)47;
      byteArray1[7] = (byte)119;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 2129, 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Utility.getSignature(";");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)21;
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble(1510.502834);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ETi9~+0_cNnG3S_Wo", false);
      byte[] byteArray1 = Utility.decode("ETi9~+0_cNnG3S_Wo", false);
      Utility.toHexString(byteArray1);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("45 54 69 39 7e 2b 30 5f 63 4e 6e 7f 47 33 53 5f 57 6f", string0);
      
      String string1 = Utility.getSignature("Nf6,|[{]$");
      assertEquals("[LNf6,|;", string1);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lcmp", string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ETi9~+0_cNnG3S_Wo", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Utility.fillup("eEiD.7IduO`V", 117, false, '>');
      String[] stringArray0 = Constants.CLASS_TYPE_NAMES;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)117;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lookupswitch");
      byteArray0[3] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)117, (-350));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      try { 
        Utility.typeOfSignature(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>eEiD.7IduO`V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>eEiD.7IduO`V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = Utility.convertString("IQvald");
      assertEquals("IQvald", string0);
      
      byte[] byteArray0 = Utility.decode("IQvald", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(1L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fastore", string1);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Huu{xeM_`s5\"", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.readDouble();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("drem");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: drem
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[2] = (byte)39;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[3] = (byte)26;
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aload_2", string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iload\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)66);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)8;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)84, (int) (byte)98, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      byte byte0 = (byte) (-124);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = null;
      String string1 = "jk*SRi4(+#c;%NMN";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte) (-75);
      byteArray0[7] = (byte)65;
      byteArray0[8] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("V");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantLong constantLong0 = new ConstantLong((-2901L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)65);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[2] = (Constant) constantInteger1;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[3] = (Constant) constantClass1;
      ConstantInteger constantInteger2 = new ConstantInteger(byteSequence0);
      constantArray0[4] = (Constant) constantInteger2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 16643. Constant pool size is: 5
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      Utility.encode(byteArray0, true);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)58;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte) (-1);
      byteArray1[6] = (byte) (-1);
      Utility.toHexString(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)44;
      byteArray0[0] = (byte)44;
      byte byte1 = (byte)46;
      String string0 = "LI-/Ca7,%$";
      // Undeclared exception!
      try { 
        Utility.signatureToString("LI-/Ca7,%$", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LI-/Ca7,%$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Utility.clearBit(97, 0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("*M3i~w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `*M3i~w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)30;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-86);
      byteArray1[1] = (byte)30;
      byteArray1[2] = (byte)14;
      byteArray1[3] = (byte) (-86);
      byteArray1[4] = (byte)30;
      byteArray1[5] = (byte) (-44);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("java.lang.Void", "java.lang.Void", false);
      assertEquals("java.lang.Void", string0);
      
      byte[] byteArray2 = Utility.decode("enum", false);
      assertArrayEquals(new byte[] {(byte)101, (byte)110, (byte)117, (byte)109}, byteArray2);
      
      Utility.encode(byteArray0, false);
      String string1 = Utility.compactClassName("if_icmpge", true);
      assertEquals("if_icmpge", string1);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[3] = (byte) (-97);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmpeq\t\t#3", string0);
      
      String string1 = Utility.accessToString(0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = "Nf6,|[{]$";
      Utility.getSignature("Nf6,|[{]$");
      Utility.searchOpcode("Nf6,|[{]$");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Nf6,|[{]$", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Nf6,|[{]$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-58);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("void", stringArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-58);
      byteArray1[1] = (byte) (-17);
      byteArray1[2] = (byte) (-17);
      byteArray1[3] = (byte) (-58);
      Utility.decode("l+sO+,q ", false);
      Utility.methodSignatureArgumentTypes("()V", false);
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureArgumentTypes("l+sO+,q ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: l+sO+,q 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String string0 = Utility.fillup("eEiD.7IduO`V", 117, false, '>');
      assertEquals(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>eEiD.7IduO`V", string0);
      
      String[] stringArray0 = Constants.CLASS_TYPE_NAMES;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)117;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lookupswitch");
      byteArray0[3] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)117, (-350));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.printArray((Object[]) stringArray0, false, true);
      assertNotNull(string1);
      assertEquals("\"<illegal type>\", \"<illegal type>\", \"<illegal type>\", \"<illegal type>\", \"java.lang.Boolean\", \"java.lang.Character\", \"java.lang.Float\", \"java.lang.Double\", \"java.lang.Byte\", \"java.lang.Short\", \"java.lang.Integer\", \"java.lang.Long\", \"java.lang.Void\", \"<illegal type>\", \"<illegal type>\", \"<illegal type>\", \"<illegal type>\"", string1);
      
      String string2 = Utility.compactClassName("null", "dload_3", true);
      assertEquals("null", string2);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-11);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "|O";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|O");
      byteArray0[0] = (byte) (-11);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.signatureToString("CHOP ", false);
      Utility.compactClassName("@)6U9UfITTAcPy/5&{", true);
      try { 
        Utility.methodSignatureReturnType("@)6U9UfITTAcPy/5&{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `6U9UfITTAcPy/5&{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string0 = Utility.classOrInterface(156);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Utility.compactClassName("Object");
      Utility.accessToString((-1095), true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("void");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("pop2", string0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte) (-49);
      byteArray0[7] = (byte) (-44);
      byteArray0[8] = (byte)21;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-26), (int) (byte) (-44));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      try { 
        Utility.typeOfSignature("$5Nzxi{IH&IQEgntU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $5Nzxi{IH&IQEgntU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Utility.isJavaIdentifierPart('y');
      Utility.compactClassName("v`Q]&<LV%{C7?K!", true);
      String string0 = Utility.format('y', 2533, true, 'y');
      String[] stringArray0 = new String[6];
      stringArray0[0] = "invokestatic";
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = "v`Q]&<LV%{C7?K!";
      stringArray0[4] = "invokestatic";
      stringArray0[5] = "v`Q]&<LV%{C7?K!";
      Utility.methodTypeToSignature("invokestatic", stringArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)80;
      byteArray0[7] = (byte)18;
      byteArray0[8] = (byte) (-50);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1104, (byte)18);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("dup2_x1", string0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("[FK3ZbxbP#Qj/}wJX\"0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [FK3ZbxbP#Qj/}wJX\"0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-105), (int) (byte) (-105));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ETi9~+0_cNnG3S_Wo", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)91;
      byteArray1[2] = (byte) (-90);
      byteArray1[3] = (byte)90;
      byteArray1[4] = (byte)121;
      byteArray1[5] = (byte) (-33);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray1[6] = (byte)115;
      int int0 = (-292);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)90, (-292));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      int int0 = (-5704);
      Utility.accessToString((-5704));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-41);
      byte byte0 = (byte)48;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      constantDouble0.clone();
      constantPool0.constantToString((Constant) constantDouble0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.compactClassName("G/zjArF`$$3r", false);
      Utility.classOrInterface((byte)4);
      // Undeclared exception!
      try { 
        Utility.signatureToString("G.zjArF`$$3r", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G.zjArF`$$3r'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      String string0 = Utility.getSignature("Nf,[{]$");
      assertEquals("[LNf,;", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-120);
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong((byte)50);
      constantArray0[0] = (Constant) constantLong0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("1}5]<");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantDouble constantDouble0 = new ConstantDouble(1338.013739149061);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[2] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-120), (int) (byte)50);
      assertEquals("0:    aaload\n1:    l2i\n", string1);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Utility.methodSignatureReturnType("BootstrapMethods(");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "byte";
      stringArray0[1] = "byte";
      stringArray0[2] = "byte";
      stringArray0[3] = "java.lang.Could not ";
      stringArray0[4] = "byte";
      stringArray0[5] = "byte";
      Utility.methodTypeToSignature("BootstrapMethods(", stringArray0);
      Utility.searchOpcode("byte");
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Utility.signatureToString("VoUd", false);
      String string0 = Utility.compactClassName("VoUd", "WPE(=k]E", false);
      assertEquals("VoUd", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)90;
      byteArray0[3] = (byte) (-61);
      byteArray0[3] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(95, (byte) (-26));
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.codeToString(byteSequence0, constantPool1, false);
      String string1 = Utility.printArray((Object[]) constantArray0, false, false);
      assertEquals("CONSTANT_Fieldref[9](class_index = 95, name_and_type_index = -26)", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)26;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)26;
      byteArray1[1] = (byte)26;
      byteArray1[2] = (byte)26;
      byteArray1[3] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iload_0", string0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ineg", string0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)86;
      // Undeclared exception!
      try { 
        Utility.equals(byteArray0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3ti!G*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3ti!G*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Y09F6+<TtF2BtX#o1-ib");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y09F6+<TtF2BtX#o1-ib'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Utility.searchOpcode("{wl");
      try { 
        Utility.methodSignatureReturnType("N6D~1,<H7", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N6D~1,<H7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Utility.isJavaIdentifierPart('Y');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[11];
      byteArray1[0] = (byte) (-34);
      byteArray1[1] = (byte) (-86);
      byteArray1[2] = (byte) (-86);
      byteArray1[3] = (byte) (-86);
      byteArray1[4] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[4];
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte) (-79);
      Utility.printArray(objectArray0, true, false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-34), (-1132), false);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = "9UMqBt'.!-FGEZ_N-";
      try { 
        Utility.typeOfSignature("9UMqBt'.!-FGEZ_N-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9UMqBt'.!-FGEZ_N-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      int int0 = Utility.clearBit(213, 213);
      assertEquals(213, int0);
      
      short short0 = Utility.searchOpcode("invokeinterface");
      assertEquals((short)185, short0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("V");
      assertEquals("void", string0);
      
      Utility.isJavaIdentifierPart('%');
      try { 
        Utility.typeOfMethodSignature("%n{E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %n{E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = Utility.compactClassName("");
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.getSignature("wide");
      assertEquals("Lwide;", string1);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = Utility.signatureToString("Inralidtype: ");
      assertEquals("int", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertEquals("{}", string1);
      
      String string2 = Utility.compactClassName("getStatic", false);
      assertEquals("getStatic", string2);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.getSignature("dup");
      assertEquals("Ldup;", string0);
      
      String string1 = Utility.compactClassName("dup");
      assertEquals("dup", string1);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Utility.isJavaIdentifierPart('Y');
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Utility.getSignature(":AK$$~t>f");
      try { 
        Utility.methodSignatureArgumentTypes("newInvokeSpecial", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: newInvokeSpecial
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      Utility.methodTypeToSignature("caload", (String[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("astore_1", string0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-3), 42);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.mark(42);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.isJavaIdentifierPart('8');
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = MockURI.resolve(uRI0, "land");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(jNS6dAUe|57tZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (jNS6dAUe|57tZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-96);
      byteArray0[4] = (byte) (-96);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool1, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String string0 = Utility.convertString("Nv?6fUVrQs/dR}");
      assertEquals("Nv?6fUVrQs/dR}", string0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string1 = Utility.getSignature("Nv?6fUVrQs/dR}");
      assertEquals("LNv?6fUVrQs/dR};", string1);
      
      byte[] byteArray1 = Utility.decode("r0qS{$3", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.reset();
      byteSequence0.readFloat();
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertArrayEquals(new byte[] {(byte)114, (byte)48, (byte)113, (byte)83, (byte)123}, byteArray1);
      assertEquals("lshr", string2);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-350), 87);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      constantArray0[4] = (Constant) constantInvokeDynamic0;
      constantArray0[5] = (Constant) constantInvokeDynamic0;
      constantArray0[6] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = constantPool1.copy();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte) (-8);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool2, false);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("B)Q<NDd");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Utility.methodTypeToSignature("4", (String[]) null);
      Utility.accessToString((-602));
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-31);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString(157, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)124;
      objectArray0[1] = (Object) "<illegal opcode>";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (byte) (-32);
      objectArray0[4] = (Object) (byte) (-32);
      String string1 = Utility.printArray(objectArray0, true, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Utility.isJavaIdentifierPart(')');
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String string0 = Utility.convertString("Nv?6fUVrQs/dR}");
      assertEquals("Nv?6fUVrQs/dR}", string0);
      
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string1 = Utility.compactClassName("Nv?6fUVrQs/dR}", true);
      assertEquals("Nv?6fUVrQs.dR}", string1);
      
      byte[] byteArray1 = Utility.decode("r0qS{$3", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.reset();
      byteSequence0.readFloat();
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertArrayEquals(new byte[] {(byte)114, (byte)48, (byte)113, (byte)83, (byte)123}, byteArray1);
      assertEquals("lshr", string2);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("", false);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)39;
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-79);
      byte byte1 = (byte) (-37);
      byteArray0[2] = (byte) (-37);
      String string0 = "t";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t");
      byteArray0[3] = (byte) (-35);
      byte byte2 = (byte) (-98);
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)31;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 191, (int) (byte)31);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Utility.fillup("eEiD.7IduO`V", 117, false, '>');
      String[] stringArray0 = Constants.CLASS_TYPE_NAMES;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)127, (-350));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.isJavaIdentifierPart('>');
      Utility.isSet(232, 117);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)34;
      byteArray1[3] = (byte)52;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        byteSequence1.read(byteArray1, (int) (byte)0, 74);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)15;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("astore_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: astore_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-67);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[7];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray1[0] = (byte)120;
      byte[] byteArray2 = Utility.decode("h~2XY*m]0!$*HE", false);
      assertEquals(13, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)111;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ddiv", string0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)60;
      byteArray0[6] = (byte)57;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      Utility.codeToString(byteArray0, (ConstantPool) null, (-370), (-370));
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte) (-101);
      byteArray0[7] = (byte) (-65);
      byteArray0[8] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload\t\t%209", string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = Utility.getSignature("short");
      assertEquals("S", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('y');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      try { 
        Utility.typeOfSignature("R=}v01tJ]A3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R=}v01tJ]A3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      try { 
        Utility.typeOfSignature("K}I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K}I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 166;
      Utility.fillup("MO0rGgM?KU<P,H`E", 166, false, 'w');
      Utility.methodTypeToSignature("MO0rGgM?KU<P,H`E", (String[]) null);
      Utility.compactClassName("wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwMO0rGgM?KU<P,H`E", true);
      Utility.compactClassName("wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwMO0rGgM?KU<P,H`E", true);
      try { 
        Utility.typeOfSignature("q>r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: q>r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String string0 = Utility.signatureToString("Invalid signature: ", false);
      assertEquals("int", string0);
      
      Utility.signatureToString("VoUd", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iflt\t\t#-25701", string1);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-4);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-86);
      byteArray1[1] = (byte)30;
      byteArray1[2] = (byte)14;
      byteArray1[3] = (byte) (-86);
      byteArray1[4] = (byte)30;
      byteArray1[5] = (byte) (-44);
      Utility.equals(byteArray0, byteArray1);
      Utility.compactClassName("java.lang.Void", "java.lang.Void", false);
      byte[] byteArray2 = Utility.decode("enum", false);
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(73, (byte) (-4));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-44));
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, constantPool1, 47, (int) (byte)14, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Utility.clearBit(213, 213);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-7);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      try { 
        Utility.typeOfSignature("=f %Qlh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =f %Qlh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lload_2", string0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence1, constantPool1, true);
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      // Undeclared exception!
      try { 
        Utility.signatureToString("[-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)113, (-3062));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Utility.compactClassName("");
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte) (-103);
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("istore_3", string0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.getSignature("wide");
      assertEquals("Lwide;", string0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ETi9E}~+0_cNnG3S_Wo", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)73, (int) (byte)73);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.replace("anewarray", "arraylength", "anewarray");
      assertEquals("anewarray", string0);
      
      String string1 = Utility.getSignature("\t<");
      assertEquals("L<;", string1);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = false;
      Utility.signatureToString("D;SHr~", false);
      Utility.setBit((-1573), (-1573));
      try { 
        Utility.typeOfSignature("eJCLja");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: eJCLja
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+'RnBh$fx,co2E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'RnBh$fx,co2E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Utility.isSet(0, 0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      String string0 = Utility.accessToString(4096, true);
      assertEquals("synthetic", string0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      try { 
        Utility.typeOfSignature("W#{Q|NZ87t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W#{Q|NZ87t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&n!I|cID3DP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &n!I|cID3DP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1871), (-203));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("SP9AU`@");
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("pop", string0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("DXr/[");
      assertEquals((byte)7, byte0);
      
      String string0 = Utility.methodSignatureReturnType("DXr/[");
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byte byte0 = (byte)85;
      byteArray0[1] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Utility.isJavaIdentifierPart('c');
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (-359), (-3801));
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-55);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dsub", string0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Utility.isSet(0, 655);
      Utility.compactClassName("org.apache.bcel.classfile.Utility$JavaWriter", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q#98I", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q#98I'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Utility.fillup("eEiD.7IduO`V", 117, false, '>');
      String[] stringArray0 = Constants.CLASS_TYPE_NAMES;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)127, (-350));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.isJavaIdentifierPart('>');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)33, (-3110));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      Object object2 = new Object();
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      boolean boolean0 = Utility.isSet(1457, 1457);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("swap", string0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.encode(byteArray0, true);
      Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      try { 
        Utility.methodSignatureArgumentTypes("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(")JQcjfPAoa{H3,c", "", ")JQcjfPAoa{H3,c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )JQcjfPAoa{H3,c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      String string0 = Utility.signatureToString("IQvald");
      assertEquals("int", string0);
      
      String string1 = Utility.classOrInterface(91);
      assertEquals("class", string1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "class";
      String string2 = Utility.methodTypeToSignature("\t\t%", stringArray0);
      assertEquals("(Lclass;)L%;", string2);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("astore\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.compactClassName("&n!I|cID3DP");
      assertEquals("&n!I|cID3DP", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('A');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.BootstrapMethod";
      String string1 = "wySN";
      boolean boolean0 = true;
      Utility.compactClassName("org.apache.bcel.classfile.BootstrapMethod", "wySN", true);
      String string2 = "hsm<%N5`Ff>h";
      // Undeclared exception!
      try { 
        Utility.signatureToString("hsm<%N5`Ff>h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `hsm<%N5`Ff>h'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      String string0 = Utility.compactClassName("8uD,O?");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-58), (int) (byte)12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Utility.replace("Only element values of type array can be built with this ctor - type specified: ", "Only element values of type array can be built with this ctor - type specified: ", "Only element values of type array can be built with this ctor - type specified: ");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      String string0 = ">CeqPRqx0Ey9qJ>^X *";
      try { 
        Utility.typeOfSignature(">CeqPRqx0Ey9qJ>^X *");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >CeqPRqx0Ey9qJ>^X *
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Utility.typeOfSignature("Z");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Utility.getSignature("\nAttribute(s) = ");
      try { 
        Utility.methodSignatureArgumentTypes("\nAttribute(s) = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         // Attribute(s) = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Utility.fillup(":AK$$~t>f", 0, false, 'w');
      try { 
        Utility.methodSignatureArgumentTypes("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Utility.accessToString((-1264), true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("G^", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 90, true, 'j');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-17);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.classOrInterface((byte)78);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fsub", string0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      String string0 = Utility.compactClassName("8uD,O?");
      assertEquals("8uD,O?", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte) (-82);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-33), (int) (byte) (-82));
      assertEquals("0:    ior\n1:    <illegal opcode>\n2:    dup\n3:    aload_3\n4:    freturn\n5:    dconst_1\n6:    freturn\n", string1);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "SV";
      stringArray0[1] = "##z|e";
      Utility.methodTypeToSignature("##z|e", stringArray0);
      File file0 = MockFile.createTempFile("##z|e", "byte");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Locale locale0 = Locale.CANADA;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "(LSV;L##z|e;)L##z|e;", (Object[]) stringArray0);
      Utility.printArray(printStream0, (Object[]) stringArray0);
      assertEquals(32L, file0.length());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-101);
      Utility.encode(byteArray0, true);
      byte byte0 = Utility.typeOfMethodSignature("(LSV;L##z|e;)L##z|e;");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(187, 187);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-77);
      try { 
        Utility.typeOfSignature("QOK%0my0gNI5#Jmu*k?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QOK%0my0gNI5#Jmu*k?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Utility.signatureToString("Invalid signature: ", false);
      String string0 = Utility.signatureToString("VoUd", true);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)101;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$L$a7$5d$97$h$ABe", string0);
      
      byte[] byteArray1 = Utility.decode("HDsub)(bP{B", false);
      String string1 = Utility.convertString("5*");
      assertEquals("5*", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore_1", string2);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Utility.format(241, (-1324), false, 'l');
      Utility.replace("getstatic", "k%yNWc-2My$rXygO#^S", "p");
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(690, 241, localVariableArray0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("getstatic", "org.apache.bcel.classfile.Utility$JavaWriter", (String) null, false, localVariableTable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("f2d", string0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      String string0 = "Q#98I";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q#98I", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q#98I'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Utility.isJavaIdentifierPart('g');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("lookupswitch");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lookupswitch'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 200, (-479), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Utility.isSet((-860), 1533);
      String string0 = "BJWZ?}VvLvJIh";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("BJWZ?}VvLvJIh", "Illegal type: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Illegal type: 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dsub", string0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*51}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 51}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ETi9~+0_cNnG3S_Wo", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 69, false, 'T');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("1* r|W,EpH]]}~", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(15, byteArray0.length);
      assertEquals("aload_0", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "aload_0";
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertEquals("{aload_0}", string1);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("istore_3", string0);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass((-2507));
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("d2f", string0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.signatureToString("FUzN35");
      Utility.accessToString(0);
      try { 
        Utility.typeOfSignature("java.lang.dG6\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.dG6\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte) (-124);
      byteArray0[6] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("iinc\t\t%132\t-124", string0);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("OO*51lb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OO*51lb'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("saload", string0);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lcmp", string0);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("dh*nMZ\fj", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dh*nMZ\fj'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Utility.convertString("e+s:suTp");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("l2f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `l2f'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 19, 1849, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-14);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fload_1", string0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte)68;
      byteArray0[8] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)103;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ETi9~+0_cNnG3S_Wo", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6)vW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6)vW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      try { 
        Utility.typeOfSignature("0HWT;DP0O@\":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0HWT;DP0O@\":
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", ",*Z;msIs(\"<0-,UJ1X", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-51);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("<HC]H", "E?>", true);
      Utility.accessToString(83, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)95;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("l2d", string0);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.format(10, 10, true, 'Z');
      // Undeclared exception!
      try { 
        Utility.signatureToString("invokeinterface", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokeinterface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Utility.clearBit(0, 144);
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      String string0 = "<illegal opcode>";
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifle\t\t#17664", string0);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      String string0 = Utility.compactClassName("");
      assertEquals("", string0);
      
      String string1 = Utility.format((-650), (-650), false, 'U');
      assertEquals("-650", string1);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Utility.getSignature("ort");
      Utility.isJavaIdentifierPart('y');
      try { 
        Utility.typeOfSignature("23$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 23$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.BootstrapMethod";
      String string1 = "wySN";
      boolean boolean0 = true;
      Utility.compactClassName("org.apache.bcel.classfile.BootstrapMethod", "wySN", true);
      String string2 = "hsmt%N5`Ff>h";
      try { 
        Utility.methodSignatureReturnType("wySN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `wySN'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      int int0 = new Integer(253);
      String string0 = Utility.accessToString((-493), true);
      assertEquals("public private final abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)124;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$8e$_w$a1$7c", string0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j&'h");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aaload", string0);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-58);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-58);
      byteArray1[1] = (byte) (-58);
      byteArray1[2] = (byte) (-58);
      byteArray1[3] = (byte) (-58);
      byteArray1[4] = (byte) (-58);
      byteArray1[5] = (byte) (-58);
      Utility.encode(byteArray1, false);
      try { 
        Utility.decode("$c6$c6$c6$c6$c6$c6", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 51, 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("areturn", string0);
      
      String string1 = Utility.accessToString(170, true);
      assertEquals("private static transient", string1);
      
      String string2 = Utility.accessToString((int) (byte) (-42), false);
      assertEquals("private protected final volatile transient native interface abstract strictfp synthetic annotation enum", string2);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Utility.classOrInterface((-267));
      Utility.compactClassName("interface", true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "interface";
      objectArray0[1] = (Object) "interface";
      objectArray0[2] = (Object) "interface";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "interface";
      objectArray0[5] = (Object) "interface";
      objectArray0[6] = (Object) "interface";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-25);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-25), (-267));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Ak@w?b&tP?)NC!");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "Ak@w?b&tP?)NC!";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "Ak@w?b&tP?)NC!";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-77);
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      int int0 = 13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, byteArrayInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(sequenceInputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(Throwable e) {
         //
         // invalid stream header: 479E79B3
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)111;
      byteArray0[2] = (byte) (-110);
      byteArray0[4] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = "IY@";
      String string1 = null;
      boolean boolean0 = false;
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable(2546, 28416, byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      try { 
        Utility.typeOfSignature(", reference_i#dex = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , reference_i#dex = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("freturn", string0);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) null;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      objectArray0[2] = (Object) (byte)76;
      byteArray0[0] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)76, 1968, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("HDsub)(bP{B", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HDsub)(bP{B'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(187, 187);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 50610. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("8,O?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8,O?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fload_3", string0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-4);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-86);
      byteArray1[1] = (byte)30;
      byteArray1[2] = (byte)14;
      byteArray1[3] = (byte) (-86);
      byteArray1[4] = (byte)30;
      byteArray1[5] = (byte) (-44);
      Utility.equals(byteArray0, byteArray1);
      Utility.compactClassName("java.lang.Void", "java.lang.Void", false);
      byte[] byteArray2 = Utility.decode("java.lang.Void", false);
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(73, (byte) (-4));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-44));
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, constantPool1, 47, (int) (byte)14, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("V");
      assertEquals("void", string0);
      
      String string1 = Utility.classOrInterface((-4191));
      assertEquals("interface", string1);
      
      String string2 = Utility.classOrInterface(311);
      assertEquals("class", string2);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("f2d", string0);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Utility.replace("BjwQy5-U}$53bFl]PAc", "BjwQy5-U}$53bFl]PAc", "BjwQy5-U}$53bFl]PAc");
      // Undeclared exception!
      try { 
        Utility.signatureToString("iload_2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iload_2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Utility.typeOfSignature("Invalid");
      Utility.methodSignatureReturnType("Invalid", true);
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte) (-48);
      byteArray0[8] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)124);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("`S=", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ``S='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      String string0 = Utility.convertString("IQvald");
      assertEquals("IQvald", string0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      byte[] byteArray1 = Utility.decode("IQvald", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertArrayEquals(new byte[] {(byte)73, (byte)81, (byte)118, (byte)97, (byte)108, (byte)100}, byteArray1);
      assertEquals("dstore_2", string1);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      int int0 = Utility.clearBit(2383, 2383);
      assertEquals(2383, int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('f');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte) (-102);
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte) (-102);
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)52);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dstore\t\t%60", string0);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte) (-11);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ixor", string0);
      
      String string1 = Utility.accessToString((int) (byte)70);
      assertEquals("private protected volatile", string1);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Utility.searchOpcode("|p?d@0~O@0i_R:B");
      Utility.replace("|p?d@0~O@0i_R:B", "|p?d@0~O@0i_R:B", "|p?d@0~O@0i_R:B");
      Utility.accessToString(1936);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "T0C9/&C2|#wB-A", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-55);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)82;
      byteArray1[1] = (byte)82;
      byteArray1[2] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dastore", string0);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("drem", string0);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4,O,ns*oc^'`C`\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4,O,ns*oc^'`C`\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      String string0 = "8,O?";
      try { 
        Utility.typeOfSignature("8,O?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8,O?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Utility.isJavaIdentifierPart('y');
      Utility.compactClassName("v`Q]&<LV%{C7?K!", true);
      String string0 = Utility.format((-964), 2533, true, 'y');
      Utility.isJavaIdentifierPart('y');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(`Un'EZWmQ*n,", string0, string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ``Un'EZWmQ*n,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ETi9~+0_cNnG3S_Wo", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString(12, true);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 12, (-189));
      assertEquals("13:   baload\n14:   aastore\n15:   swap\n16:   pop\n17:   ddiv\n", string0);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-84);
      byteArray0[2] = (byte) (-84);
      byteArray0[2] = (byte) (-84);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("ireturn", string0);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte)72;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2187, (-1582));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-115);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-115);
      byteArray1[1] = (byte) (-71);
      byteArray1[2] = (byte) (-115);
      byteArray1[3] = (byte)65;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.markSupported();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ldiv", string0);
      
      String string1 = Utility.accessToString((int) (byte)26);
      assertEquals("private static final", string1);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("6a8!f:&802H0jc[e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      String string0 = "7L%Q+ix:";
      Utility.isJavaIdentifierPart('a');
      Constant[] constantArray0 = new Constant[5];
      ClassPath classPath0 = new ClassPath("7L%Q+ix:");
      classPath0.getResourceAsStream("7L%Q+ix:");
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      String string0 = "G1r";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G1r");
      Utility.getSignature("R|E4L/L");
      // Undeclared exception!
      try { 
        Utility.signatureToString("R|E4L/L", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R|E4L/L'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      String string0 = Utility.classOrInterface(0);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      try { 
        Utility.typeOfSignature("##z|e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ##z|e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("XCsn:Ib+_1yKalfus-", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XCsn:Ib+_1yKalfus-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_acmpeq\t\t#17184", string0);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte)22;
      byteArray0[8] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.classOrInterface((byte)22);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('$');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)22;
      objectArray0[1] = (Object) (byte)22;
      objectArray0[2] = (Object) (byte)22;
      objectArray0[3] = (Object) byteSequence0;
      objectArray0[4] = (Object) byteSequence0;
      objectArray0[5] = (Object) (byte)22;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      objectArray0[6] = (Object) (byte)22;
      objectArray0[7] = (Object) (byte)22;
      objectArray0[8] = (Object) (byte)22;
      Utility.printArray(printWriter0, objectArray0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Utility.compactClassName("eEiD.7IduO`V", false);
      PrintStream printStream0 = null;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "eEiD.7IduO`V";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      Utility.replace("es@l~Te2p9wgO!p", "es@l~Te2p9wgO!p", "gOqjO8)^@g41H%rU");
      try { 
        Utility.methodSignatureToString("gOqjO8)^@g41H%rU", "h?J3`>E$qm^", "' at index ", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: gOqjO8)^@g41H%rU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-67);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      String string0 = Utility.getSignature("1iZ]#VoEO?stftn");
      assertEquals("L1iZ]#VoEO?stftn;", string0);
      
      String string1 = Utility.classOrInterface(1876);
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      Utility.convertString("Nv?6fUVrQs/dR}");
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("Nv?6fUVrQs/dR}", true);
      assertEquals("Nv?6fUVrQs.dR}", string0);
      
      byte[] byteArray1 = Utility.decode("r0qS{$3", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.reset();
      byteSequence0.readFloat();
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, (-1257), (-1257));
      assertEquals("0:    frem\n1:    faload\n2:    lrem\n3:    aastore\n4:    lshr\n", string1);
      assertEquals(5, byteArray1.length);
      
      String string2 = Utility.convertString("v`Q]&<LV%{");
      assertEquals("v`Q]&<LV%{", string2);
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("pop", string0);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      try { 
        Utility.typeOfSignature("7L%Q+ix:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7L%Q+ix:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%JYBN[#keH'.@Eb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %JYBN[#keH'.@Eb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)99);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2f", string0);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Utility.decode("k;%sP%r[,ZJg11_Y", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence1, constantPool1, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, constantPool1, true);
      // Undeclared exception!
      try { 
        Utility.getSignature("5lNVW[W>C-!W~e$D([");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[W>C-!W~e$D([
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      String string0 = Utility.compactClassName("dh*nMZ\fj");
      assertEquals("dh*nMZ\fj", string0);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      String string0 = Utility.compactClassName("8,O?");
      assertEquals("8,O?", string0);
      
      boolean boolean0 = Utility.isSet(1542, 150);
      assertFalse(boolean0);
      
      int int0 = Utility.setBit(150, 2);
      assertEquals(150, int0);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "ZOgiA[!", "~4JK!#<wM/)Pj", true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("The wildcard list must not be null");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      Utility.fillup("eEiD.7IduO`V", 117, false, ':');
      try { 
        Utility.methodSignatureArgumentTypes("eEiD.7IduO`V", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: eEiD.7IduO`V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("if_acmpeq\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.decode("$3m75Y", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3m\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
