/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:18:22 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Rectangle2D;
import java.io.FileDescriptor;
import java.io.PrintStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.ParseException;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.JapaneseEra;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.LongBinaryOperator;
import java.util.function.ToLongFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Short> class0 = Short.class;
      TypeUtils.isProxy(class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      TypeUtils.isPath(class0);
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : class com.alibaba.fastjson.util.ParameterizedTypeImpl
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) illegalThreadStateException0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.IllegalThreadStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      TypeUtils.toLocale("78B");
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) biFunction0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      TypeUtils.castToString((Object) null);
      TypeUtils.castToByte((Object) null);
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<?> class0 = TypeUtils.loadClass("_8my5");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<RuleBasedCollator> class1 = RuleBasedCollator.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) weakHashMap0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TypeUtils.isNumber("unsupported set operation.");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass((String) null, classLoader0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(mockThaiBuddhistDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@46ab8330
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<String> class0 = String.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.descendingKeySet();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      treeMap0.replaceAll(biFunction1);
      treeMap0.computeIfPresent("j", biFunction0);
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.put("dKv%cMsBa3edhtWN]l", "dKv%cMsBa3edhtWN]l");
      ToLongFunction<Map.Entry<String, String>> toLongFunction0 = (ToLongFunction<Map.Entry<String, String>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(toLongFunction0).applyAsLong(any(java.util.Map.Entry.class));
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(longBinaryOperator0).applyAsLong(anyLong() , anyLong());
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceKeys(0L, biFunction0);
      concurrentHashMap0.reduceEntriesToLong(0L, toLongFunction0, 0L, longBinaryOperator0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, concurrentHashMap0, false, propertyNamingStrategy0);
      TypeUtils.isNumber("D");
      Class<Date> class1 = Date.class;
      Class<?> class2 = TypeUtils.getRawClass(class1);
      Class<Float> class3 = Float.class;
      TypeUtils.computeGetters((Class<?>) class3, (Map<String, String>) concurrentHashMap0);
      TypeUtils.unwrapOptional(class2);
      Hashtable<MockDateFormat, DecimalFormatSymbols> hashtable0 = new Hashtable<MockDateFormat, DecimalFormatSymbols>(9);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Time> class0 = Time.class;
      TypeUtils.isPath(class0);
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.BACKGROUND;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      boolean boolean1 = TypeUtils.isHibernateInitialized(bufferCapabilities0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TypeUtils.unwrapOptional((Type) null);
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      TypeUtils.getClassFromMapping("`zlQ#");
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      Class<?> class0 = TypeUtils.getRawClass(type0);
      TypeUtils.getGenericParamType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      String string0 = TypeUtils.decapitalize("Ljava.util.concurrent.ConcurrentSkipListMap");
      assertEquals("ljava.util.concurrent.ConcurrentSkipListMap", string0);
      
      TypeUtils.getCollectionItemClass(class0);
      Class<Point> class1 = Point.class;
      Class<Rectangle> class2 = Rectangle.class;
      Class<InternalError> class3 = InternalError.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class3, "Psm,$t", fieldArray0);
      assertNull(field0);
      
      FieldInfo fieldInfo0 = new FieldInfo("Psm,$t", class2, class2, class0, (Field) null, 127, 21, 21);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getMethod();
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      Class<ClassLoader> class1 = ClassLoader.class;
      Class<Double> class2 = Double.TYPE;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("s1&/oT z", identityHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("s1&/oT z", class0, class1, class2, (Field) null, 1023, 1023, 1023);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
      TypeUtils.getCollectionItemClass(class0);
      TypeUtils.castToDate((Object) null);
      long long0 = TypeUtils.fnv1a_64("com.alibaba.fastjson.asm.TypeCollector");
      assertEquals(8098170821595746538L, long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Double double0 = new Double(0.0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      TypeUtils.decapitalize("78B");
      Class<TypeNotPresentException> class0 = TypeNotPresentException.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      Insets insets0 = new Insets(55, 7, (-361), 1030);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JSONObject jSONObject0 = new JSONObject(false);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      JSONObject jSONObject1 = jSONObject0.fluentRemove(mockDateFormat0);
      Locale locale0 = Locale.CHINA;
      jSONObject1.replace("RcQ)P3<\"404+", (Object) locale0);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONStringZ(weakHashMap0, serializeConfig0, serializerFeatureArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("1.2.46", "@type");
      Class<MockCalendar> class1 = MockCalendar.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      TypeUtils.castToJavaBean((Map<String, Object>) jSONObject1, class1, parserConfig0);
      boolean boolean1 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionException0.printStackTrace();
      sQLNonTransientConnectionException0.fillInStackTrace();
      java.sql.Date date0 = new java.sql.Date((-2191L));
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      StackTraceElementDeserializer stackTraceElementDeserializer0 = StackTraceElementDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(stackTraceElementDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<HttpCookie> class0 = HttpCookie.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.isProxy(class1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Class<Long> class2 = Long.TYPE;
      TypeUtils.unwrapOptional(class2);
      Random.setNextRandom(2635);
      TypeUtils.getClass((Type) class0);
      TypeUtils.decapitalize((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<HttpCookie> class0 = HttpCookie.class;
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      TypeUtils.isPath(class0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      Insets insets0 = new Insets((-124), 7, 374, 45);
      SQLWarning sQLWarning0 = new SQLWarning("d", "L", 1305);
      TypeUtils.castToString(sQLWarning0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"L\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.US;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockGregorianCalendar0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.text.MockSimpleDateFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Type type0 = null;
      TypeUtils.unwrapOptional((Type) null);
      ParserConfig parserConfig0 = new ParserConfig(true);
      Double.sum(148.82, 1.0);
      Double.isFinite(149.82);
      Float float0 = new Float(1.0);
      boolean boolean0 = false;
      TypeUtils.loadClass("fastjson.parser.autoTypeAccept", (ClassLoader) null, true);
      Locale.forLanguageTag("fastjson.parser.autoTypeAccept");
      ParserConfig parserConfig1 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "oT", (Type) null, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      java.util.IdentityHashMap<String, BigInteger> identityHashMap0 = new java.util.IdentityHashMap<String, BigInteger>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.alibaba.fastjson.util.UTF8Decoder");
      MockJapaneseDate.now();
      JSONObject jSONObject0 = new JSONObject(true);
      jSONObject0.fluentClear();
      OptionalCodec optionalCodec0 = new OptionalCodec();
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      Locale.forLanguageTag("yyyy-MM-dd HH:mm:ss");
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.addDeny("null");
      NumberFormatException numberFormatException0 = new NumberFormatException();
      ParserConfig parserConfig1 = new ParserConfig(false);
      Type type0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) identityHashMap0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONObject jSONObject0 = new JSONObject(false);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      serializeConfig0.getTypeKey();
      jSONObject0.fluentPutAll(hashMap0);
      ParserConfig.getGlobalInstance();
      Class<MockCalendar> class1 = MockCalendar.class;
      MockCalendar mockCalendar0 = TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class1, parserConfig0);
      assertNull(mockCalendar0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      Class<Integer> class1 = Integer.TYPE;
      Class<HttpCookie> class2 = HttpCookie.class;
      parserConfig0.checkAutoType((String) null, class2);
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(javaBeanDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@97
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TypeUtils.castToDate((Object) null);
      TypeUtils.loadClass("T59@v-", (ClassLoader) null, false);
      TimeZone.getTimeZone("T59@v-");
      Locale locale0 = Locale.CANADA;
      LinkedHashSet<GridBagConstraints> linkedHashSet0 = new LinkedHashSet<GridBagConstraints>();
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@3c1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Random.setNextRandom((-1720059320));
      Field[] fieldArray0 = new Field[1];
      Class<Annotation> class0 = Annotation.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.toLocale("B<Qx&Ht9^e6}kG%!sp");
      Class<ClassLoader> class1 = ClassLoader.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("Ljava.awt.Rectangle", "B<Qx&Ht9^e6}kG%!sp");
      identityHashMap0.putIfAbsent("}pW;Fk.wg", "B<Qx&Ht9^e6}kG%!sp");
      identityHashMap0.put("", "B<Qx&Ht9^e6}kG%!sp");
      identityHashMap0.put("B<Qx&Ht9^e6}kG%!sp", "B<Qx&Ht9^e6}kG%!sp");
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) identityHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("}pW;Fk.wg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : }pW;Fk.wg
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<IllegalStateException> class0 = IllegalStateException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-128);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, map0, true, propertyNamingStrategy0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("create instance error, class ", (ClassLoader) aSMClassLoader0);
      Boolean boolean0 = new Boolean(false);
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters((Class) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      TypeUtils.decapitalize("78B");
      Class<TypeNotPresentException> class0 = TypeNotPresentException.class;
      TypeUtils.isPath(class0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      Insets insets0 = new Insets(55, 7, (-361), 1030);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      insets0.right = 7;
      Class<ClassLoader> class1 = ClassLoader.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class1, (Type) class1, propertyNamingStrategy0, false, false);
      ThreadGroup threadGroup0 = new ThreadGroup("getTime");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, (String) null);
      MockThread mockThread0 = new MockThread(threadGroup1, "78B");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      MockThread mockThread2 = new MockThread(mockThread1);
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      try { 
        aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      Class<MockCalendar> class0 = MockCalendar.class;
      MockCalendar mockCalendar0 = TypeUtils.castToJavaBean((Map<String, Object>) concurrentHashMap0, class0, parserConfig0);
      assertNull(mockCalendar0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      TimeZone.getTimeZone("");
      Locale locale0 = Locale.CANADA;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      LinkedHashSet<GridBagConstraints> linkedHashSet0 = new LinkedHashSet<GridBagConstraints>();
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[3]);
      Field field0 = TypeUtils.cast((Object) linkedHashSet0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      java.util.IdentityHashMap<String, BigInteger> identityHashMap0 = new java.util.IdentityHashMap<String, BigInteger>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TypeUtils.unwrapOptional((Type) null);
      boolean boolean0 = true;
      ParserConfig parserConfig0 = new ParserConfig(true);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ThreadGroup threadGroup0 = new ThreadGroup("fastjson.parser.deny");
      SQLWarning sQLWarning0 = new SQLWarning("gcal", "com.alibaba.fastjson.asm.TypeCollector$1", 3);
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      HttpCookie httpCookie0 = new HttpCookie("vkW1S4Dq7{A", "}&6NTy53%BF");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(httpCookie0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : vkW1S4Dq7{A=\"}&6NTy53%BF\"
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JavaBeanInfo.getBuilderClass((JSONType) null);
      JSONObject jSONObject0 = new JSONObject();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(propertyProcessableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      java.util.IdentityHashMap<String, BigInteger> identityHashMap0 = new java.util.IdentityHashMap<String, BigInteger>();
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      OptionalCodec optionalCodec0 = new OptionalCodec();
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException("com.alibaba.fastjson.util.UTF8Decoder");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      indexOutOfBoundsException0.addSuppressed(mockRuntimeException0);
      Class<java.sql.Date> class0 = java.sql.Date.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) bigInteger0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : 0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Short short0 = new Short((short) (-27));
      Short short1 = TypeUtils.castToShort(short0);
      assertTrue(short1.equals((Object)short0));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Insets insets0 = new Insets((-124), 7, 374, 45);
      ThreadGroup threadGroup0 = new ThreadGroup("L");
      MockThread mockThread0 = new MockThread();
      SQLWarning sQLWarning0 = new SQLWarning("Ljava.awt.Point", "Lorg.springframework.util.LinkedMultiValueMap", 7);
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.castToInt((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : L
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("hrn$M:");
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      MockThread mockThread0 = new MockThread("undefined");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "d3B9UL[:=l{", 1L);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      TypeUtils.loadClass("hrn$M:", classLoader0);
      TypeUtils.getCollectionItemType((Type) null);
      Collator collator0 = Collator.getInstance();
      TypeUtils.castToString(collator0);
      MockDate mockDate0 = new MockDate(1544, 1200, 784, 392, 1544);
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      timeZone0.getDisplayName(locale0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(calendar0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.e\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      TypeUtils.isKotlin(class0);
      Double double0 = new Double(0.0);
      Double.sum((-845.223549), (-845.223549));
      Double.isFinite(0.0);
      Double.max(1909.2076365, (-2390.9));
      Double.isFinite(1909.2076365);
      Double.max(1909.2076365, 1.0);
      Double.sum(359.531932926, 0.0);
      Double.max(1.0, 0.0);
      TypeUtils.castToBigInteger(double0);
      Class<JavaObjectDeserializer> class1 = JavaObjectDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.getParserFeatures(class1);
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TypeUtils.castToDate((Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Double.max(0.0, 0.0);
      Double double0 = new Double(0.0);
      Float float0 = new Float(0.0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      java.sql.Date date0 = new java.sql.Date((-1L));
      TypeUtils.castToBigInteger((Object) null);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("7[t<");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("toJSON error");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TypeUtils.castToDate((Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Double.max(0.0, 0.0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      Insets insets0 = new Insets(9, 7, 7, (-361));
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<MapDeserializer> class0 = MapDeserializer.class;
      TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) null, (Map<String, Field>) linkedHashMap0, false, propertyNamingStrategy0);
      HashMap<Collator, Timestamp> hashMap0 = new HashMap<Collator, Timestamp>();
      ConcurrentHashMap<Collator, Timestamp> concurrentHashMap0 = new ConcurrentHashMap<Collator, Timestamp>(hashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class com.alibaba.fastjson.parser.deserializer.MapDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<HttpCookie> class0 = HttpCookie.class;
      TypeUtils.isPath(class0);
      Class<Point> class1 = Point.class;
      TypeUtils.isProxy(class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("Ljava/lang/Object;", classLoader0, false);
      JSONObject jSONObject0 = new JSONObject(false);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreNonFieldGetter;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.toJSONStringZ(classLoader0, serializeConfig0, serializerFeatureArray0);
      java.util.IdentityHashMap<String, JobAttributes> identityHashMap0 = new java.util.IdentityHashMap<String, JobAttributes>();
      jSONObject0.fluentPutAll(identityHashMap0);
      Class<MockCalendar> class2 = MockCalendar.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class2, parserConfig0);
      Class<Short> class3 = Short.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class3, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TypeUtils.castToDate((Object) null);
      TypeUtils.castToBigDecimal((Object) null);
      TypeUtils.getClassFromMapping("2Zu@,Yi4NyL62w");
      TypeUtils.decapitalize("2Zu@,Yi4NyL62w");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      JSONObject jSONObject0 = new JSONObject(hashtable0);
      BiFunction<String, Object, NoSuchFieldException> biFunction0 = (BiFunction<String, Object, NoSuchFieldException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashtable0.replaceAll(biFunction0);
      DecimalFormat decimalFormat0 = new DecimalFormat("@type");
      hashtable0.put("@type", decimalFormat0);
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator("@type");
        fail("Expecting exception: ParseException");
      
      } catch(Throwable e) {
         //
         // missing char (=,;<&) : @type
         //
         verifyException("java.text.PatternEntry$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Exception> class0 = Exception.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      TypeUtils.getKoltinConstructorParameters(class0);
      java.util.IdentityHashMap<Integer, SQLTransactionRollbackException> identityHashMap0 = new java.util.IdentityHashMap<Integer, SQLTransactionRollbackException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TypeUtils.getGenericParamType((Type) null);
      TypeUtils.castToChar((Object) null);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      AtomicLong atomicLong0 = new AtomicLong((-1197L));
      atomicLong0.compareAndSet((-1077L), (-1077L));
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(atomicLong0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : -1197
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      SQLDataException sQLDataException0 = new SQLDataException();
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Date> class0 = Date.class;
      TypeUtils.castToJavaBean((Map<String, Object>) concurrentHashMap0, class0, (ParserConfig) null);
      TypeUtils.getRawClass(class0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(imageCapabilities0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.awt.ImageCapabilities@34a87c8d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      java.util.IdentityHashMap<String, BigInteger> identityHashMap0 = new java.util.IdentityHashMap<String, BigInteger>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockJapaneseDate.now();
      JSONObject jSONObject0 = new JSONObject(true);
      jSONObject0.fluentClear();
      OptionalCodec optionalCodec0 = new OptionalCodec();
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      jSONObject0.fluentPut("@type", jSONPDeserializer0);
      Class<Date> class0 = Date.class;
      ParserConfig.getGlobalInstance();
      Type[] typeArray0 = new Type[1];
      TypeUtils.getClassFromMapping("h5TOn'+{Ia");
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, class0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockSimpleDateFormat0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.put("dKv%cMsBa3edhtWN]l", "Ljava.awt.Color");
      long long0 = 0L;
      ToLongFunction<Map.Entry<String, String>> toLongFunction0 = (ToLongFunction<Map.Entry<String, String>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(toLongFunction0).applyAsLong(any(java.util.Map.Entry.class));
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(longBinaryOperator0).applyAsLong(anyLong() , anyLong());
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceKeys(0L, biFunction0);
      concurrentHashMap0.reduceEntriesToLong(0L, toLongFunction0, 0L, longBinaryOperator0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, concurrentHashMap0, false, propertyNamingStrategy0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONStringZ(serializeConfig0, serializeConfig0, serializerFeatureArray0);
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(javaObjectDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer@226
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Point> class0 = Point.class;
      TypeUtils.isProxy(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("Ljava/lang/Object;", classLoader0, false);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      classLoader0.clearAssertionStatus();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      serializerFeatureArray0[0] = serializerFeature0;
      Class<Collator> class1 = Collator.class;
      serializeConfig0.getObjectWriter(class1);
      // Undeclared exception!
      try { 
        JSON.toJSONStringZ(classLoader0, serializeConfig0, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.put("dKv%cMsBa3edhtWN]l", "dKv%cMsBa3edhtWN]l");
      ToLongFunction<Map.Entry<String, String>> toLongFunction0 = (ToLongFunction<Map.Entry<String, String>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1119L)).when(toLongFunction0).applyAsLong(any(java.util.Map.Entry.class));
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(longBinaryOperator0).applyAsLong(anyLong() , anyLong());
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = ParserConfig.DENY_PROPERTY;
      concurrentHashMap0.reduceEntriesToLong(0L, toLongFunction0, 0L, longBinaryOperator0);
      TypeUtils.isNumber("(CLjava/lang/String;D)V");
      Class<SQLDataException> class0 = SQLDataException.class;
      TypeUtils.getParserFeatures(class0);
      java.util.IdentityHashMap<Integer, SQLTransactionRollbackException> identityHashMap0 = new java.util.IdentityHashMap<Integer, SQLTransactionRollbackException>();
      Dimension dimension0 = new Dimension();
      // Undeclared exception!
      try { 
        dimension0.setSize((Dimension) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Dimension", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "can not cast oracle.sql.TIMESTAMP to Date");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      TypeUtils.getSerializeFeatures(class0);
      MockThread mockThread0 = new MockThread((Runnable) null);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet", classLoader0, true);
      WeakHashMap<String, ClientInfoStatus> weakHashMap0 = new WeakHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(weakHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.sql.SQLClientInfoException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      MockDateFormat.getDateTimeInstance();
      TypeUtils.isHibernateInitialized(mockDateFormat0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[YIK:$5rjFT");
      TypeUtils.isTransient((Method) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Double.isFinite(1909.2076365);
      Double double0 = new Double(1909.2076365);
      Float float0 = new Float(1909.2076365);
      TypeUtils.castToBigInteger(float0);
      Class<InstantiationError> class0 = InstantiationError.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.InstantiationError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.toLocale("reverseOrder");
      Insets insets0 = new Insets((byte)1, (byte)1, (-1844582501), 107);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.awt.Insets[top=1,left=1,bottom=-1844582501,right=107]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("Lorg.springframework.util.LinkedMultiValueMap");
      TypeUtils.decapitalize("Ljava.awt.Color");
      ParserConfig parserConfig0 = new ParserConfig();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)30;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      int int0 = bigInteger0.getLowestSetBit();
      java.util.IdentityHashMap<String, BigInteger> identityHashMap0 = new java.util.IdentityHashMap<String, BigInteger>();
      identityHashMap0.put("Lorg.springframework.util.LinkedMultiValueMap", bigInteger0);
      Integer integer0 = TypeUtils.castToInt(bigInteger0);
      assertFalse(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<HttpCookie> class0 = HttpCookie.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      TypeUtils.isPath(class0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("jcal", "cdate");
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Type type0 = TypeUtils.unwrapOptional(class0);
      Locale locale0 = TypeUtils.toLocale("toJdbc");
      assertEquals("tojdbc", locale0.getLanguage());
      
      boolean boolean0 = TypeUtils.isGenericParamType(type0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      Type type1 = TypeUtils.unwrapOptional(type0);
      TypeUtils.isGenericParamType(type1);
      Random.setNextRandom(31);
      String string0 = null;
      ThreadGroup threadGroup0 = null;
      try {
        threadGroup0 = new ThreadGroup((ThreadGroup) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.ThreadGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      java.util.IdentityHashMap<String, BigInteger> identityHashMap0 = new java.util.IdentityHashMap<String, BigInteger>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      weakHashMap0.compute("HOUR_MASK", biFunction0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      weakHashMap1.put((String) null, "HOUR_MASK");
      TypeUtils.loadClass((String) null);
      TypeUtils.unwrapOptional((Type) null);
      Locale locale0 = TypeUtils.toLocale("com.alibaba.fastjson.util.UTF8Decoder");
      assertEquals("com.alibaba.fastjson.util.utf8decoder", locale0.toString());
      
      TypeUtils.castToFloat((Object) null);
      Class<Object> class0 = Object.class;
      TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      java.util.IdentityHashMap<String, BigInteger> identityHashMap0 = new java.util.IdentityHashMap<String, BigInteger>();
      Double.isFinite((byte)65);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Double.max(2606.8655570575866, (byte)65);
      Class<IllegalStateException> class0 = IllegalStateException.class;
      TypeUtils.getSerializeFeatures(class0);
      MockThread mockThread0 = new MockThread((Runnable) null);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.setDefaultAssertionStatus(true);
      TypeUtils.loadClass("int", classLoader0, true);
      WeakHashMap<String, ClientInfoStatus> weakHashMap0 = new WeakHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(weakHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : int
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedHashSet<SQLClientInfoException> linkedHashSet0 = new LinkedHashSet<SQLClientInfoException>();
      String string0 = "kotlin.reflect.KParameter";
      java.util.IdentityHashMap<String, ClientInfoStatus> identityHashMap0 = new java.util.IdentityHashMap<String, ClientInfoStatus>();
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("kotlin.reflect.KParameter", "kotlin.reflect.KParameter");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      Class<TypeNotPresentException> class1 = TypeNotPresentException.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      java.util.IdentityHashMap<Integer, SQLTransactionRollbackException> identityHashMap1 = new java.util.IdentityHashMap<Integer, SQLTransactionRollbackException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : class java.text.SimpleDateFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<HttpCookie> class0 = HttpCookie.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("78B").when(biFunction0).apply(any() , any());
      weakHashMap0.compute("78B", biFunction0);
      TypeUtils.isPath(class0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("78B", "78B");
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      TypeUtils.unwrapOptional(class0);
      TypeUtils.toLocale("toS");
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("78B");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TypeUtils.castToDate((Object) null);
      TypeUtils.loadClass("T59@v-", (ClassLoader) null, false);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      JSONObject jSONObject0 = new JSONObject(true);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "setHours");
      Insets insets0 = new Insets(90, 989, 97, 54);
      TypeUtils.castToString((Object) null);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("clazz is null", (String) null);
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>(90);
      weakHashMap0.put("setHours", "@type");
      Class<Point> class0 = Point.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("<J4bubpq5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : <J4bubpq5
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<HttpCookie> class0 = HttpCookie.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("78B").when(biFunction0).apply(any() , any());
      weakHashMap0.compute("78B", biFunction0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      Class<String> class1 = String.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Class<Point> class2 = Point.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.PascalCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class2, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) concurrentHashMap0, true, propertyNamingStrategy1);
      TypeUtils.unwrapOptional(class0);
      TypeUtils.toLocale("cCZu4'@@9z J]");
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("78B");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<Object> class0 = Object.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0, true);
      TypeUtils.createCollection(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      JSON.DEFAULT_GENERATE_FEATURE = (-1122);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TypeUtils.toLocale("B<Qx&Ht9^e6}kG%!sp");
      Class<ClassLoader> class0 = ClassLoader.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.decapitalize("Ljava.awt.Rectangle");
      identityHashMap0.putIfAbsent("ljava.awt.Rectangle", "B<Qx&Ht9^e6}kG%!sp");
      TypeUtils.decapitalize((String) null);
      identityHashMap0.put("B<Qx&Ht9^e6}kG%!sp", "B<Qx&Ht9^e6}kG%!sp");
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("Ljava.awt.Rectangle");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : Ljava.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<HttpCookie> class0 = HttpCookie.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("78B").when(biFunction0).apply(any() , any());
      weakHashMap0.compute("78B", biFunction0);
      TypeUtils.isPath(class0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      Insets insets0 = new Insets((-124), 7, 374, 45);
      SQLWarning sQLWarning0 = new SQLWarning("d", "L", 1305);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("d", (String) null, 102, sQLWarning0);
      TypeUtils.castToString(sQLWarning0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.sql.SQLWarning: d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("78B").when(biFunction0).apply(any() , any());
      weakHashMap0.compute("78B", biFunction0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      Insets insets0 = new Insets((-124), (-30733247), 374, 45);
      SQLWarning sQLWarning0 = new SQLWarning("d", "78B", 374);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLWarning0);
      sQLWarning0.setNextException(sQLTimeoutException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("d", "78B", (-124), sQLWarning0);
      TypeUtils.castToString(sQLWarning0);
      MockDate mockDate0 = new MockDate(392, 1544, (-30733247), 784, (-124));
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("78B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 78B
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      assertNotNull(type0);
      
      Class<?> class0 = TypeUtils.getRawClass(type0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte) (-107);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.castToShort((Object) null);
      Class<SqlDateDeserializer> class1 = SqlDateDeserializer.class;
      int int0 = TypeUtils.getParserFeatures(class1);
      assertEquals(0, int0);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("78B").when(biFunction0).apply(any() , any());
      weakHashMap0.compute("78B", biFunction0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      Insets insets0 = new Insets((-124), (-30733247), 374, 45);
      insets0.right = (-124);
      SQLWarning sQLWarning0 = new SQLWarning("d", "78B", 374);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLWarning0);
      sQLWarning0.setNextException(sQLTimeoutException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("d", "78B", (-124), sQLWarning0);
      TypeUtils.castToString(sQLWarning0);
      Class<Annotation> class0 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Long.getLong("char");
      DateFormatSymbols dateFormatSymbols0 = TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      assertNull(dateFormatSymbols0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("-h", "writeUnsorted");
      weakHashMap0.put("MapSortField", "writeUnsorted");
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      weakHashMap0.forEach(biConsumer0);
      Class<SQLTransientException> class1 = SQLTransientException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, true);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.PascalCase;
      Class<Jdk8DateCodec> class2 = Jdk8DateCodec.class;
      PropertyNamingStrategy propertyNamingStrategy2 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) weakHashMap0, propertyNamingStrategy2);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Class<BreakIterator> class3 = BreakIterator.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class3, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) concurrentHashMap0, true, propertyNamingStrategy1);
      TypeUtils.unwrapOptional(class0);
      AtomicLong atomicLong0 = new AtomicLong(655701488918567152L);
      Float float0 = TypeUtils.castToFloat(atomicLong0);
      assertEquals(6.5570146E17F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("#S1ntLO").when(biFunction0).apply(any() , any());
      weakHashMap0.compute("78B", biFunction0);
      SQLDataException sQLDataException0 = new SQLDataException("78B");
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Date> class0 = Date.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      TypeUtils.castToJavaBean((Map<String, Object>) concurrentHashMap0, class0, parserConfig0);
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "78B";
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      TypeUtils.decapitalize("78B");
      Class<TypeNotPresentException> class0 = TypeNotPresentException.class;
      TypeUtils.isPath(class0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      int int0 = (-361);
      Insets insets0 = new Insets(55, 7, (-361), 1030);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      insets0.right = 7;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("78B");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"78B\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ThreadGroup threadGroup0 = new ThreadGroup("Y|");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "84LoG.");
      MockThread mockThread0 = new MockThread();
      Class<Byte> class0 = Byte.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONObject jSONObject0 = new JSONObject();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(267.564705864, 1315.963, 2215.17877912577, 423.7192644703523);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("84LoG.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"84LoG.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TypeUtils.castToDate((Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Double.max(0.0, 0.0);
      Double double0 = new Double(0.0);
      Float float0 = new Float(0.0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      java.sql.Date date0 = new java.sql.Date((-168L));
      TypeUtils.castToBigInteger((Object) null);
      Locale.getISOLanguages();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ThreadGroup threadGroup0 = new ThreadGroup("7[t<");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "jc)8L:");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Date> class0 = Date.class;
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) hashtable0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.util.Date
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      TypeUtils.isKotlin(class0);
      Double double0 = new Double(0.0);
      Double.sum((-845.223549), (-845.223549));
      Double.isFinite(0.0);
      Float float0 = new Float(0.0);
      TypeUtils.loadClass("oT", (ClassLoader) null, false);
      TimeZone.getTimeZone("oT");
      Locale locale0 = Locale.CANADA;
      LinkedHashSet<GridBagConstraints> linkedHashSet0 = new LinkedHashSet<GridBagConstraints>();
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) null;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) null;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) null;
      typeArray0[6] = (Type) null;
      typeArray0[7] = (Type) class0;
      typeArray0[8] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[8], typeArray0[8]);
      TypeUtils.getClassFromMapping("oT");
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) calendar0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("XvN.T7z");
      MockThread mockThread0 = new MockThread();
      MockThread.dumpStack();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "Y|", 3794316665763266033L);
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      TypeUtils.loadClass("Y|");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "XvN.T7z", class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.BufferCapabilities
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Double.isFinite(1909.2076365);
      Double double0 = new Double(1909.2076365);
      Float float0 = new Float(1909.2076365);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      TypeUtils.castToBigInteger(float0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      Map<String, String> map1 = new HashMap<String, String>();
      ThreadGroup threadGroup0 = new ThreadGroup("DS( q48DJ]Iq}5k");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "Lo");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory1.classLoader;
      TypeUtils.loadClass("com.alibaba.fastjson.util.TypeUtils", (ClassLoader) aSMDeserializerFactory1.classLoader, false);
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(renderingHints_Key0).toString();
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      RenderingHints renderingHints0 = new RenderingHints(renderingHints_Key0, illegalAccessError0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(renderingHints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : {Mock for Key, hashCode: 1051542324=java.lang.IllegalAccessError}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      TypeUtils.isKotlin(class0);
      Double double0 = new Double(0.0);
      Double.sum((-845.223549), (-845.223549));
      Double.isFinite(0.0);
      Float float0 = new Float(0.0);
      TypeUtils.loadClass("oT", (ClassLoader) null, false);
      Locale.forLanguageTag("oT");
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      Class<MockHijrahDate> class1 = MockHijrahDate.class;
      TypeUtils.cast((Object) null, class1, parserConfig0);
      TypeUtils.getCollectionItemClass((Type) null);
      TypeUtils.fnv1a_64_lower("]O'PZibX_oq%Js");
      Locale locale0 = TypeUtils.toLocale("wait");
      assertEquals("wait", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.merge("1/F;K,sDAyk@Ss", "1/F;K,sDAyk@Ss", biFunction0);
      ToLongFunction<Map.Entry<String, String>> toLongFunction0 = (ToLongFunction<Map.Entry<String, String>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1119L)).when(toLongFunction0).applyAsLong(any(java.util.Map.Entry.class));
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(4L).when(longBinaryOperator0).applyAsLong(anyLong() , anyLong());
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = ParserConfig.DENY_PROPERTY;
      concurrentHashMap0.reduceEntriesToLong(4L, toLongFunction0, 4L, longBinaryOperator0);
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      int int0 = Calendar.NARROW_FORMAT;
      MockClock.systemUTC();
      MockJapaneseDate.now();
      OptionalCodec optionalCodec0 = new OptionalCodec();
      TypeUtils.getRawClass(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("Ljava.awt.Color");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Ljava.awt.Color
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      MockDateFormat.getDateTimeInstance();
      TypeUtils.isHibernateInitialized(mockDateFormat0);
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("bv0\"fI]Cz;;/R@L^Y", treeMap0);
      FieldInfo fieldInfo0 = new FieldInfo("getgetPortlist", class0, class0, class0, (Field) null, 55296, (-1386), 55296);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      Class<NumberDeserializer> class1 = NumberDeserializer.class;
      TypeUtils.isPath(class1);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      Insets insets0 = new Insets(101, 6, (-1386), (-5688));
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<Properties> class2 = Properties.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class2, jSONType0, (Map<String, String>) null, (Map<String, Field>) treeMap0, false, propertyNamingStrategy0);
      HashMap<Collator, Timestamp> hashMap1 = new HashMap<Collator, Timestamp>();
      ConcurrentHashMap<Collator, Timestamp> concurrentHashMap0 = new ConcurrentHashMap<Collator, Timestamp>(hashMap1);
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(map0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {CTT=Asia/Shanghai, ART=Africa/Cairo, CNT=America/St_Johns, PRT=America/Puerto_Rico, PNT=America/Phoenix, PLT=Asia/Karachi, AST=America/Anchorage, BST=Asia/Dhaka, CST=America/Chicago, EST=-05:00, HST=-10:00, JST=Asia/Tokyo, IST=Asia/Kolkata, AGT=America/Argentina/Buenos_Aires, NST=Pacific/Auckland, MST=-07:00, AET=Australia/Sydney, BET=America/Sao_Paulo, PST=America/Los_Angeles, ACT=Australia/Darwin, SST=Pacific/Guadalcanal, VST=Asia/Ho_Chi_Minh, CAT=Africa/Harare, ECT=Europe/Paris, EAT=Africa/Addis_Ababa, IET=America/Indiana/Indianapolis, MIT=Pacific/Apia, NET=Asia/Yerevan}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<HttpCookie> class0 = HttpCookie.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("78B").when(biFunction0).apply(any() , any());
      weakHashMap0.compute("78B", biFunction0);
      Type type0 = TypeUtils.getCollectionItemType(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.isGenericParamType(type0);
      Class<Object> class1 = Object.class;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-21);
      byteArray0[2] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Annotation> class2 = Annotation.class;
      Class<InternalError> class3 = InternalError.class;
      TypeUtils.getAnnotation((Class<?>) class3, class2);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DateFormatSymbols dateFormatSymbols0 = TypeUtils.cast((Object) null, (Type) class1, parserConfig0);
      assertNull(dateFormatSymbols0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      MockThread mockThread0 = new MockThread();
      Class<Byte> class0 = Byte.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionException0.printStackTrace();
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException(2217);
      stringIndexOutOfBoundsException0.fillInStackTrace();
      MockPrintStream mockPrintStream0 = new MockPrintStream("84LoG.");
      sQLNonTransientConnectionException0.fillInStackTrace();
      stringIndexOutOfBoundsException0.printStackTrace((PrintStream) mockPrintStream0);
      stringIndexOutOfBoundsException0.addSuppressed(sQLNonTransientConnectionException0);
      Class<java.sql.Date> class1 = java.sql.Date.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) weakHashMap0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.sql.Date
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ToLongFunction<Map.Entry<String, String>> toLongFunction0 = (ToLongFunction<Map.Entry<String, String>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(longBinaryOperator0).toString();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceKeys(0L, biFunction0);
      JSONObject jSONObject0 = new JSONObject(true);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      serializeConfig0.getTypeKey();
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(concurrentHashMap0);
      ParserConfig.getGlobalInstance();
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONStringZ(concurrentHashMap0, serializeConfig0, serializerFeatureArray0);
      jSONObject1.fluentPutAll(concurrentHashMap0);
      Class<MockCalendar> class0 = MockCalendar.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) longBinaryOperator0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : Mock for LongBinaryOperator, hashCode: 1132298348
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.put("5J,XS3SOMZRNK`*|p+ ", "Ljava.awt.Color");
      TypeUtils.decapitalize((String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Constructor<SQLException>[] constructorArray0 = (Constructor<SQLException>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("getg_tComment", hashMap0);
      byte[] byteArray0 = TypeUtils.castToBytes("Ljava.awt.Color");
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      MockDateFormat.getDateTimeInstance();
      TypeUtils.isHibernateInitialized(mockDateFormat0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[YIK:$5rjFT");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)43;
      Class<SQLWarning> class0 = SQLWarning.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(serializeBeanInfo0);
      MockRandom mockRandom0 = new MockRandom((byte)43);
      BigInteger bigInteger0 = new BigInteger(946, mockRandom0);
      try { 
        javaBeanSerializer0.getFieldValuesMap(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      stringIndexOutOfBoundsException0.fillInStackTrace();
      stringIndexOutOfBoundsException0.getSuppressed();
      TypeUtils.toLocale("N}LK$e)9v1WpvF");
      Class<Rectangle> class0 = Rectangle.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "N}LK$e)9v1WpvF", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      String string0 = ParserConfig.DENY_PROPERTY;
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Double.isFinite(0L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      JSONObject jSONObject0 = new JSONObject(true);
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      jSONObject0.fluentPut("qn[6D^", illegalAccessError0);
      JSONObject jSONObject1 = new JSONObject(3089, true);
      Class<Date> class0 = Date.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      TypeUtils.getClassFromMapping(".astjson.compatibleWitoFieldZame");
      Type[] typeArray0 = new Type[4];
      Class<Boolean> class1 = Boolean.TYPE;
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) null;
      typeArray0[2] = (Type) null;
      typeArray0[3] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ParserConfig.getGlobalInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      java.util.IdentityHashMap<String, BigInteger> identityHashMap0 = new java.util.IdentityHashMap<String, BigInteger>();
      byte[] byteArray0 = new byte[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-67);
      JSONObject jSONObject0 = new JSONObject();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0, (byte) (-67), 0.0, 2361.374762168);
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      MockDate mockDate0 = new MockDate((-67));
      TypeUtils.castToDate(mockDate0);
      rectangle0.setSize((-1881415760), (-1881415760));
      MockDate mockDate1 = new MockDate((-1879048190), 6, (-2467), (-1792703427), (-1881415760));
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      ConcurrentHashMap<RenderingHints.Key, JavaBeanDeserializer> concurrentHashMap0 = null;
      try {
        concurrentHashMap0 = new ConcurrentHashMap<RenderingHints.Key, JavaBeanDeserializer>(1544, (-1879048190));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException("@7");
      indexOutOfBoundsException0.getStackTrace();
      indexOutOfBoundsException0.getSuppressed();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionException0.initCause(indexOutOfBoundsException0);
      sQLNonTransientConnectionException0.printStackTrace();
      indexOutOfBoundsException0.addSuppressed(sQLNonTransientConnectionException0);
      indexOutOfBoundsException0.getStackTrace();
      indexOutOfBoundsException0.getSuppressed();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(indexOutOfBoundsException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.put("1/F;K,sDAyk@Ss", "Ljava.awt.Color");
      ToLongFunction<Map.Entry<String, String>> toLongFunction0 = (ToLongFunction<Map.Entry<String, String>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1119L)).when(toLongFunction0).applyAsLong(any(java.util.Map.Entry.class));
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(longBinaryOperator0).applyAsLong(anyLong() , anyLong());
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = ParserConfig.DENY_PROPERTY;
      concurrentHashMap0.reduceEntriesToLong(0L, toLongFunction0, 0L, longBinaryOperator0);
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      ThreadGroup threadGroup0 = new ThreadGroup("fastjson.parser.deny");
      String string1 = "int";
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "int");
      ThreadGroup threadGroup2 = new ThreadGroup(threadGroup1, "!WJY*PuNjF?");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("com.alibaba.fastjson.util.TypeUtils", classLoader1, false);
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Period.parse("Ljava.awt.Color");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text cannot be parsed to a Period
         //
         verifyException("java.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      locale0.getExtension('k');
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      TypeUtils.castToSqlDate(mockGregorianCalendar0);
      TypeUtils typeUtils0 = new TypeUtils();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      Class<Time> class2 = Time.class;
      FieldInfo fieldInfo0 = new FieldInfo("", class1, class2, class2, (Field) null, 52429, 52429, 52429);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Class<?> class3 = beanContext0.getBeanClass();
      TypeUtils.getRawClass(class3);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      java.util.IdentityHashMap<String, BigInteger> identityHashMap0 = new java.util.IdentityHashMap<String, BigInteger>();
      byte[] byteArray0 = new byte[7];
      String string0 = "gettoString";
      byteArray0[1] = (byte) (-56);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      identityHashMap0.put("com.alibaba.fastjson.util.UTF8Decoder", bigInteger0);
      bigInteger0.toString();
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)0;
      TypeUtils.loadClass("gettoString");
      identityHashMap0.put("gettoString", bigInteger0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {gettoString=219902325555200, com.alibaba.fastjson.util.UTF8Decoder=219902325555200}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<SQLTransientException> class0 = SQLTransientException.class;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ThreadGroup threadGroup0 = new ThreadGroup("([C)J");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "([C)J");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, "OlO?BV-J|jD");
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory1.classLoader;
      ASMClassLoader aSMClassLoader2 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader2 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("([C)J", classLoader2, false);
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      RenderingHints renderingHints0 = new RenderingHints(renderingHints_Key0, "([C)J");
      TypeUtils.castToByte((Object) null);
      TypeUtils.getKoltinConstructorParameters(class0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "chars");
      Random.setNextRandom((-1720059320));
      Class<NoSuchMethodError> class0 = NoSuchMethodError.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "chars", fieldArray0);
      FieldInfo fieldInfo0 = new FieldInfo("intern", class0, class0, class0, (Field) null, (-1720059320), (-1720059320), 170);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Class<Annotation> class1 = Annotation.class;
      beanContext0.getAnnation(class1);
      beanContext0.getMethod();
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      TypeUtils.loadClass("");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      MockDateFormat.getDateTimeInstance();
      TypeUtils.isHibernateInitialized(mockDateFormat0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[YIK:$5rjFT");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)116;
      AtomicLong atomicLong0 = new AtomicLong(3967L);
      TypeUtils.castToByte(atomicLong0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.put("dKv%cMsBa3edhtWN]l", "Ljava.awt.Color");
      ToLongFunction<Map.Entry<String, String>> toLongFunction0 = (ToLongFunction<Map.Entry<String, String>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(toLongFunction0).applyAsLong(any(java.util.Map.Entry.class));
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(longBinaryOperator0).applyAsLong(anyLong() , anyLong());
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceKeys(0L, biFunction0);
      concurrentHashMap0.reduceEntriesToLong(0L, toLongFunction0, 0L, longBinaryOperator0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, concurrentHashMap0, false, propertyNamingStrategy0);
      TypeUtils.isNumber("");
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      JSONObject jSONObject0 = new JSONObject(hashtable0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject0.fluentRemove(jSONObject1);
      jSONObject1.getInnerMap();
      Class<Date> class1 = Date.class;
      TypeUtils.castToJavaBean((Map<String, Object>) hashtable0, class1, (ParserConfig) null);
      TypeUtils.getRawClass(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("@type");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@type\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("L1.2.46").when(biFunction0).apply(any() , any());
      weakHashMap0.compute("L1.2.46", biFunction0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionException0.getSuppressed();
      InternalError internalError0 = new InternalError(sQLTransientConnectionException0);
      TypeUtils.castToBigDecimal(linkedHashMap0);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("<vi&rS^eG<G%");
      TypeUtils.getClassFromMapping("<vi&rS^eG<G%");
      TypeUtils.decapitalize("L1.2.46");
      Class<Annotation> class0 = Annotation.class;
      Class<NoSuchMethodError> class1 = NoSuchMethodError.class;
      TypeUtils.getAnnotation((Class<?>) class1, class0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) noSuchMethodError0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.annotation.Annotation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TypeUtils.castToBoolean((Object) null);
      TypeUtils.castToByte((Object) null);
      char[] charArray0 = new char[5];
      charArray0[0] = 'G';
      charArray0[1] = 'F';
      charArray0[2] = '3';
      charArray0[3] = 'Q';
      charArray0[4] = 'U';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 8);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<HttpCookie> class0 = HttpCookie.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("78B").when(biFunction0).apply(any() , any());
      weakHashMap0.compute("78B", biFunction0);
      TypeUtils.isPath(class0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      Insets insets0 = new Insets(45, 374, 45, (-30733247));
      SQLWarning sQLWarning0 = new SQLWarning("java.awt.Color", "78B", (-133));
      Throwable throwable0 = sQLWarning0.fillInStackTrace();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("4`b", throwable0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(weakHashMap0);
      BiFunction<String, Object, MockThaiBuddhistDate> biFunction1 = (BiFunction<String, Object, MockThaiBuddhistDate>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(anyString() , any());
      jSONObject1.compute("1.2.46", biFunction1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("Lorg.springframework.util.LinkedMultiValueMap", "@type", 45, throwable0);
      Object object0 = new Object();
      TypeUtils.castToString(object0);
      MockDate mockDate0 = new MockDate(5, (-3818), 3, (-30733247), 45);
      Short short0 = new Short((short)85);
      TypeUtils.castToTimestamp(short0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.put("1/F;K,sDAyk@Ss", "Ljava.awt.Color");
      ToLongFunction<Map.Entry<String, String>> toLongFunction0 = (ToLongFunction<Map.Entry<String, String>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      TypeUtils.castToSqlDate((Object) null);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("Ljava.awt.Color");
      // Undeclared exception!
      try { 
        Time.valueOf((LocalTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<HttpCookie> class0 = HttpCookie.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("78B").when(biFunction0).apply(any() , any());
      weakHashMap0.compute("78B", biFunction0);
      TypeUtils.isPath(class0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      TypeUtils.isNumber("can not cast to byte, value : ");
      Class<Point> class1 = Point.class;
      TypeUtils.getParserFeatures(class1);
      MockClock.systemUTC();
      MockJapaneseDate.now();
      JSONObject jSONObject0 = new JSONObject(true);
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      OptionalCodec optionalCodec0 = new OptionalCodec();
      Long long0 = Long.valueOf(0L);
      jSONObject1.fluentPut("yyyy-MM-dd HH:mm:ss", long0);
      jSONObject1.fluentClear();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Class<Date> class2 = Date.class;
      TypeUtils.castToJavaBean((Map<String, Object>) hashMap0, class2, (ParserConfig) null);
      TypeUtils.getRawClass(class2);
      MockDate mockDate0 = new MockDate(989, 1357, 1635);
      TypeUtils.castToSqlTime(mockDate0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<Object> class0 = Object.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters(class0, map0, true);
      TypeUtils.createCollection(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      JSON.DEFAULT_GENERATE_FEATURE = (-1122);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      ThreadGroup threadGroup0 = new ThreadGroup("TpJ//");
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(map0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<HttpCookie> class0 = HttpCookie.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("78qB").when(biFunction0).apply(any() , any());
      weakHashMap0.compute("78qB", biFunction0);
      TypeUtils.isPath(class0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      JSONObject jSONObject0 = new JSONObject(false);
      jSONObject0.fluentClear();
      OptionalCodec optionalCodec0 = new OptionalCodec();
      JSONObject jSONObject1 = new JSONObject(989);
      jSONObject0.fluentClear();
      Class<Date> class1 = Date.class;
      ParserConfig.getGlobalInstance();
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class1;
      Class<Boolean> class2 = Boolean.TYPE;
      typeArray0[1] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class2);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      NumberFormatException numberFormatException0 = new NumberFormatException("1.2.46");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) numberFormatException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.lang.NumberFormatException -> boolean
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ThreadGroup threadGroup0 = new ThreadGroup("");
      ThreadGroup threadGroup1 = new ThreadGroup("84LoG.");
      MockThread mockThread0 = new MockThread();
      SQLWarning sQLWarning0 = new SQLWarning("Ljava.awt.Point", "84LoG.", 3);
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("84LoG.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"84LoG.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      java.util.IdentityHashMap<String, BigInteger> identityHashMap0 = new java.util.IdentityHashMap<String, BigInteger>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.alibaba.fastjson.util.UTF8Decoder");
      MockJapaneseDate.now();
      JSONObject jSONObject0 = new JSONObject(true);
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      OptionalCodec optionalCodec0 = new OptionalCodec();
      Class<Short> class0 = Short.class;
      TypeUtils.getSerializeFeatures(class0);
      MockThread mockThread0 = new MockThread((Runnable) null);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.setDefaultAssertionStatus(true);
      TypeUtils.loadClass("com.alibaba.fastjson.util.UTF8Decoder", classLoader0, true);
      WeakHashMap<String, ClientInfoStatus> weakHashMap0 = new WeakHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(weakHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TypeUtils.castToTimestamp((Object) null);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("areAllFieldsSet", parserConfig0);
      // Undeclared exception!
      try { 
        stackTraceElementDeserializer0.deserialze(defaultJSONParser0, (Type) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error: error
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      java.util.IdentityHashMap<String, BigInteger> identityHashMap0 = new java.util.IdentityHashMap<String, BigInteger>();
      byte[] byteArray0 = new byte[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.alibaba.fastjson.util.UTF8Decoder");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      OptionalCodec optionalCodec0 = new OptionalCodec();
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      Insets insets0 = new Insets(56, (-4529), (-1244), 65);
      TypeUtils.castToString(identityHashMap0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("com.alibaba.fastjson.util.UTF8Decoder", "getfillInStackTrace");
      weakHashMap0.replace("java.util.IdentityHashMap@0000000003", "L", "5!yc~");
      TypeUtils.castToLong((Object) null);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      java.util.IdentityHashMap<String, BigInteger> identityHashMap0 = new java.util.IdentityHashMap<String, BigInteger>();
      byte[] byteArray0 = new byte[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.alibaba.fastjson.util.UTF8Decoder");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      OptionalCodec optionalCodec0 = new OptionalCodec();
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      Insets insets0 = new Insets(56, (-4529), (-1244), 65);
      TypeUtils.castToString(identityHashMap0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("com.alibaba.fastjson.util.UTF8Decoder", "getfillInStackTrace");
      weakHashMap0.replace("java.util.IdentityHashMap@0000000003", "L", "5!yc~");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("5!yc~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : 5!yc~
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException("B");
      indexOutOfBoundsException0.getStackTrace();
      indexOutOfBoundsException0.getSuppressed();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("B");
      sQLNonTransientConnectionException0.printStackTrace();
      indexOutOfBoundsException0.fillInStackTrace();
      MockPrintStream mockPrintStream0 = new MockPrintStream("B");
      sQLNonTransientConnectionException0.fillInStackTrace();
      indexOutOfBoundsException0.printStackTrace((PrintStream) mockPrintStream0);
      indexOutOfBoundsException0.addSuppressed(sQLNonTransientConnectionException0);
      Class<java.sql.Date> class0 = java.sql.Date.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "B", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : B
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Type type0 = null;
      TypeUtils.unwrapOptional((Type) null);
      boolean boolean0 = true;
      ParserConfig parserConfig0 = new ParserConfig(true);
      Double.sum(148.82, 1.0);
      Double.isFinite(149.82);
      Float float0 = new Float(1.0);
      ClassLoader classLoader0 = null;
      String string0 = "oT";
      TypeUtils.loadClass("fastjson.parser.autoTypeAccept", (ClassLoader) null, true);
      Rectangle rectangle0 = new Rectangle((-4536), (-4536), (-4203), 55);
      Object object0 = new Object();
      TypeUtils.castToDate(float0);
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator("oT");
        fail("Expecting exception: ParseException");
      
      } catch(Throwable e) {
         //
         // missing char (=,;<&) : oT
         //
         verifyException("java.text.PatternEntry$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException("domain");
      indexOutOfBoundsException0.getSuppressed();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("to");
      Boolean boolean0 = new Boolean("wkL!D%#h\"-: <");
      JSONObject jSONObject0 = new JSONObject();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      TypeUtils.castToDate("");
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>(48);
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      Class<EnumDeserializer> class1 = EnumDeserializer.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGetters((Class<?>) class1, (JSONType) null, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ThreadGroup threadGroup0 = new ThreadGroup("Y|");
      ThreadGroup threadGroup1 = new ThreadGroup("Y|");
      MockThread mockThread0 = new MockThread();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      SQLWarning sQLWarning0 = new SQLWarning("Ljava.awt.Point", "84LoG.", 3);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      SQLWarning sQLWarning1 = new SQLWarning("eAA%g;SXm`", "Y|", 66);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLWarning0);
      sQLWarning1.setNextException(sQLTimeoutException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("time", "84LoG.", 66, sQLTimeoutException0);
      TypeUtils.castToString(map0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockDate mockDate0 = new MockDate(22, 18, (-1573), 1134, 160);
      Locale locale0 = Locale.US;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      TypeUtils.castToTimestamp(mockGregorianCalendar0);
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      TypeUtils.getGenericParamType(class0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Byte byte0 = new Byte((byte)74);
      Byte.toUnsignedLong((byte)22);
      Class<Integer> class0 = Integer.class;
      byte byte1 = (byte)95;
      Byte.toUnsignedInt((byte)95);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.setAutoTypeSupport(false);
      parserConfig0.clearDeserializers();
      ParserConfig.global = parserConfig0;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) byte0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Byte byte0 = new Byte((byte)74);
      Byte.toUnsignedLong((byte)22);
      Byte.toUnsignedInt((byte)95);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      Insets insets0 = new Insets(49, 54, 81, 81);
      SQLWarning sQLWarning0 = new SQLWarning("d", "getfillInStackTrace", (-4154));
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLWarning0);
      sQLWarning0.setNextException(sQLTimeoutException0);
      MockDate mockDate0 = new MockDate((-1L));
      mockDate0.setTime(1259L);
      TypeUtils.castToString(mockDate0);
      MockDate mockDate1 = new MockDate((-626), (-2131), (-13), (-1366), 45);
      TypeUtils.castToTimestamp(mockDate1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass(";V$(;[iYS4}\";8V-", classLoader0, true);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      TypeUtils.isKotlin(class0);
      Double double0 = new Double(0.0);
      Double.sum((-845.223549), (-845.223549));
      Double.isFinite(0.0);
      TypeUtils.loadClass("oT", (ClassLoader) null, false);
      Locale locale0 = Locale.CHINA;
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      Class<MockHijrahDate> class1 = MockHijrahDate.class;
      TypeUtils.cast((Object) null, class1, parserConfig0);
      ParserConfig parserConfig1 = ParserConfig.global;
      Class<Collator> class2 = Collator.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo.build((Class<?>) class2, (Type) null, propertyNamingStrategy0);
      Class<ChronoLocalDate> class3 = ChronoLocalDate.class;
      Class<Throwable> class4 = Throwable.class;
      Field[] fieldArray0 = new Field[7];
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.autoTypeSupport", concurrentHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class4, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      String string0 = ParserConfig.DENY_PROPERTY;
      ToLongFunction<Map.Entry<String, String>> toLongFunction0 = (ToLongFunction<Map.Entry<String, String>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string1 = ParserConfig.DENY_PROPERTY;
      concurrentHashMap0.reduceEntriesToLong(0L, toLongFunction0, 0L, longBinaryOperator0);
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      TypeUtils.isNumber("fastjson.parser.deny");
      MockClock.systemUTC();
      MockJapaneseDate.now();
      JSONObject jSONObject0 = new JSONObject(false);
      jSONObject0.fluentClear();
      OptionalCodec optionalCodec0 = new OptionalCodec();
      JSONObject jSONObject1 = new JSONObject(3089);
      jSONObject0.fluentClear();
      Class<Date> class0 = Date.class;
      ParserConfig.getGlobalInstance();
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[5] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[3]);
      ParserConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass((String) null, classLoader1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Integer> class1 = Integer.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, (Type) null, class0);
      TypeUtils.getRawClass(typeArray0[3]);
      TypeUtils.fnv1a_64_lower("yyyy-MM-dd HH:mm:ss");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      java.util.IdentityHashMap<String, BigInteger> identityHashMap0 = new java.util.IdentityHashMap<String, BigInteger>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockClock.systemUTC();
      MockJapaneseDate.now();
      JSONObject jSONObject0 = new JSONObject(true);
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      jSONObject1.fluentClear();
      Class<Date> class0 = Date.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[0]);
      ParserConfig.getGlobalInstance();
      MockThread mockThread0 = new MockThread("\u0005Ae)");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.put("dKv%cMsBa3edhtWN]l", "dKv%cMsBa3edhtWN]l");
      ToLongFunction<Map.Entry<String, String>> toLongFunction0 = (ToLongFunction<Map.Entry<String, String>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(toLongFunction0).applyAsLong(any(java.util.Map.Entry.class));
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(longBinaryOperator0).applyAsLong(anyLong() , anyLong());
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceKeys(0L, biFunction0);
      concurrentHashMap0.reduceEntriesToLong(0L, toLongFunction0, 0L, longBinaryOperator0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, concurrentHashMap0, false, propertyNamingStrategy0);
      TypeUtils.isNumber("D");
      Class<Date> class1 = Date.class;
      Class<?> class2 = TypeUtils.getRawClass(class1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Float> class3 = Float.class;
      TypeUtils.computeGetters((Class<?>) class3, (Map<String, String>) concurrentHashMap0);
      TypeUtils.unwrapOptional(class2);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      TypeUtils.getClass((Type) class0);
      NumberFormatException numberFormatException0 = new NumberFormatException();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) numberFormatException0, (Type) class3, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.NumberFormatException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      String string0 = ParserConfig.DENY_PROPERTY;
      ToLongFunction<Map.Entry<String, String>> toLongFunction0 = (ToLongFunction<Map.Entry<String, String>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Double.isFinite(0L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      JSONObject jSONObject0 = new JSONObject(true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.clearDeserializers();
      Class<TimeUnit>[] classArray0 = (Class<TimeUnit>[]) Array.newInstance(Class.class, 3);
      Class<TimeUnit> class0 = TimeUnit.class;
      classArray0[0] = class0;
      Class<TimeUnit> class1 = TimeUnit.class;
      classArray0[1] = class1;
      Class<TimeUnit> class2 = TimeUnit.class;
      classArray0[2] = class2;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      Locale.forLanguageTag("1.2.46");
      ParserConfig parserConfig1 = new ParserConfig();
      Dimension dimension0 = new Dimension();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) dimension0, (Type) class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      String string0 = ParserConfig.DENY_PROPERTY;
      ToLongFunction<Map.Entry<String, String>> toLongFunction0 = (ToLongFunction<Map.Entry<String, String>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string1 = ParserConfig.DENY_PROPERTY;
      concurrentHashMap0.reduceEntriesToLong(0L, toLongFunction0, 0L, longBinaryOperator0);
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      TypeUtils.isNumber("fastjson.parser.deny");
      Float float0 = new Float((double) 0L);
      Class<IllegalStateException> class0 = IllegalStateException.class;
      TypeUtils.getSerializeFeatures(class0);
      WeakHashMap<String, ClientInfoStatus> weakHashMap0 = new WeakHashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      weakHashMap0.put("WH_", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(weakHashMap0);
      TypeUtils.castToChar("i");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("L1.2.46").when(biFunction0).apply(any() , any());
      weakHashMap0.compute("L1.2.46", biFunction0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ToLongFunction<Map.Entry<String, String>> toLongFunction0 = (ToLongFunction<Map.Entry<String, String>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceEntriesToLong(3439L, toLongFunction0, 3439L, longBinaryOperator0);
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      TypeUtils.isNumber("L1.2.46");
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      MockClock.systemUTC();
      MockJapaneseDate.now();
      JSONObject jSONObject0 = new JSONObject(true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("isEnabled", classLoader1, true);
      WeakHashMap<String, ClientInfoStatus> weakHashMap1 = new WeakHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(weakHashMap1);
      MockDate mockDate0 = new MockDate(13, 158, (-190));
      TypeUtils.castToDouble((Object) null);
      MessageFormat messageFormat0 = new MessageFormat("L1.2.46");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("L1.2.46", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.sql.SQLRecoverableException: L1.2.46
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      String string0 = ParserConfig.DENY_PROPERTY;
      ToLongFunction<Map.Entry<String, String>> toLongFunction0 = (ToLongFunction<Map.Entry<String, String>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string1 = ParserConfig.DENY_PROPERTY;
      concurrentHashMap0.reduceEntriesToLong(0L, toLongFunction0, 0L, longBinaryOperator0);
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      TypeUtils.isNumber("fastjson.parser.deny");
      Float float0 = new Float((double) 0L);
      Class<IllegalStateException> class0 = IllegalStateException.class;
      TypeUtils.getSerializeFeatures(class0);
      WeakHashMap<String, ClientInfoStatus> weakHashMap0 = new WeakHashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      weakHashMap0.put("WH_", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(weakHashMap0);
      TypeUtils.castToChar("i");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      java.util.IdentityHashMap<String, BigInteger> identityHashMap0 = new java.util.IdentityHashMap<String, BigInteger>();
      byte[] byteArray0 = new byte[6];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.alibaba.fastjson.util.UTF8Decoder");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      JSONObject jSONObject0 = new JSONObject(true);
      OptionalCodec optionalCodec0 = new OptionalCodec();
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      java.util.IdentityHashMap<String, String> identityHashMap1 = new java.util.IdentityHashMap<String, String>();
      Character.getName(989);
      JSONObject jSONObject1 = new JSONObject(false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus("1.2.46", false);
      classLoader0.getParent();
      TypeUtils.loadClass("com.alibaba.fastjson.util.UTF8Decoder", classLoader0, false);
      WeakHashMap<String, ClientInfoStatus> weakHashMap0 = new WeakHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(weakHashMap0);
      MockDate mockDate0 = new MockDate(3089, 1428, 989);
      TypeUtils.castToString(sQLClientInfoException0);
      TypeUtils.castToDouble(bigInteger0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      MessageFormat messageFormat0 = new MessageFormat("@type");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : class java.sql.BatchUpdateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      String string0 = ParserConfig.DENY_PROPERTY;
      ToLongFunction<Map.Entry<String, String>> toLongFunction0 = (ToLongFunction<Map.Entry<String, String>>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(toLongFunction0).toString();
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Double.isFinite(0L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      JSONObject jSONObject0 = new JSONObject(true);
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      jSONObject0.fluentPut("yyyy-MM-dd HH:mm:ss", illegalAccessError0);
      JSONObject jSONObject1 = new JSONObject();
      Class<Date> class0 = Date.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      TypeUtils.getClassFromMapping(".astjson.compatibleWitoFieldZame");
      Type[] typeArray0 = new Type[4];
      Class<Boolean> class1 = Boolean.TYPE;
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) null;
      typeArray0[2] = (Type) null;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("yyyy-MM-dd HH:mm:ss", classLoader0, true);
      Class<Annotation> class2 = Annotation.class;
      Class<Annotation> class3 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class2, class3);
      ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) toLongFunction0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : Mock for ToLongFunction, hashCode: 456543443
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<HttpCookie> class0 = HttpCookie.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.isPath(class0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      Insets insets0 = new Insets((-124), (-30733247), 374, 45);
      insets0.set(2002, 104, (-124), 104);
      SQLWarning sQLWarning0 = new SQLWarning("d", "L", (-124));
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLWarning0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-93);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.CamelCase;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<HttpCookie> class0 = HttpCookie.class;
      TypeUtils.isPath(class0);
      TypeUtils.decapitalize("");
      TypeUtils.isPath(class0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONObject jSONObject0 = new JSONObject(true);
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      OptionalCodec optionalCodec0 = new OptionalCodec();
      jSONObject1.fluentClear();
      ParserConfig.getGlobalInstance();
      Class<Boolean> class1 = Boolean.TYPE;
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class1;
      typeArray0[5] = (Type) class0;
      ParserConfig.getGlobalInstance();
      NumberFormatException numberFormatException0 = new NumberFormatException("");
  }
}
