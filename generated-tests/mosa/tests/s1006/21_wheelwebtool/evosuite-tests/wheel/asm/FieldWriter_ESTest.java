/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:01:26 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Frame;
import wheel.asm.Item;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "", "", "", "");
      fieldWriter0.visitEnd();
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3028));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4, "", "", "", "");
      classWriter0.addUninitializedType("", 150);
      fieldWriter0.visitAnnotation("", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3487);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", (Object) null);
      fieldWriter0.visitAnnotation("", true);
      fieldWriter0.visitEnd();
      Attribute attribute0 = new Attribute("");
      ClassWriter classWriter1 = new ClassWriter(2);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      classWriter0.toByteArray();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "", "", "", "");
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      fieldWriter0.visitEnd();
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-795));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", "");
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = new ByteVector(2);
      fieldWriter0.put(byteVector0);
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "", "Synthetic", "", "");
      classWriter0.newInteger(2);
      fieldWriter0.visitEnd();
      fieldWriter0.visitAnnotation("", false);
      fieldWriter0.visitEnd();
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-782));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-782), "u&.wTjAqzT!}C[", "u&.wTjAqzT!}C[", "u&.wTjAqzT!}C[", "u&.wTjAqzT!}C[");
      fieldWriter0.visitAnnotation("", true);
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector(3305);
      ByteVector byteVector1 = new ByteVector();
      ByteVector byteVector2 = new ByteVector(3305);
      fieldWriter0.put(byteVector1);
      FieldWriter fieldWriter1 = classWriter0.firstField;
      fieldWriter0.visitEnd();
      assertSame(fieldWriter0, fieldWriter1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-782));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-782), "u&.wTjAqzT!}C[", "{", "{", "u&.wTjAqzT!}C[");
      fieldWriter0.visitAnnotation("", true);
      fieldWriter0.getSize();
      fieldWriter0.next = fieldWriter0;
      Attribute attribute0 = new Attribute("");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-782));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-782), "u&.wTjAqzT!}C[", "{", "%G`=z%dxaS&u<f", "u&.wTjAqzT!}C[");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 3, "", "", "", (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
      
      classWriter0.newInteger(2362);
      fieldWriter1.visitEnd();
      int int1 = fieldWriter1.getSize();
      assertEquals(16, int1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-782));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-782), "u&.wTjAqzT!}C[", "{", "{", "u&.wTjAqzT!}C[");
      FieldWriter fieldWriter1 = classWriter0.lastField;
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter1.put(byteVector0);
      Attribute attribute0 = new Attribute("{");
      Item item0 = new Item();
      fieldWriter1.visitEnd();
      fieldWriter0.visitAttribute(attribute0);
      fieldWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-782));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", "");
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = new ByteVector(2);
      byteVector1.putLong(0);
      Attribute attribute0 = new Attribute("");
      Item item0 = new Item();
      ClassWriter classWriter1 = new ClassWriter(1993);
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 2, "", "", (String) null, "");
      fieldWriter1.getSize();
      FieldWriter fieldWriter2 = classWriter0.firstField;
      FieldWriter fieldWriter3 = fieldWriter2.next;
      fieldWriter3.visitEnd();
      FieldWriter fieldWriter4 = fieldWriter3.next;
      fieldWriter0.visitAttribute(attribute0);
      assertTrue(attribute0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-795));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", "");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
      FieldWriter fieldWriter1 = classWriter0.firstField;
      Attribute attribute0 = new Attribute("");
      fieldWriter1.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-782));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-782), "u&.wTjAqzT!}C[", "{", "{", "u&.wTjAqzT!}C[");
      fieldWriter0.visitAnnotation("", false);
      fieldWriter0.getSize();
      fieldWriter0.next = fieldWriter0;
      Attribute attribute0 = new Attribute("");
      int int0 = Frame.NULL;
      FieldWriter fieldWriter1 = fieldWriter0.next.next;
      fieldWriter1.visitEnd();
      System.setCurrentTimeMillis(1173L);
      ByteVector byteVector0 = new ByteVector(519);
      fieldWriter0.put(byteVector0);
      fieldWriter0.visitAttribute(attribute0);
      assertSame(fieldWriter0, fieldWriter1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-795));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = new ByteVector(750);
      ClassWriter classWriter1 = new ClassWriter(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FieldWriter fieldWriter1 = new FieldWriter(classWriter1, 1, "", "VrSa;^oCKsw.x8%N", (String) null, "");
      fieldWriter1.put(byteVector0);
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }
}
