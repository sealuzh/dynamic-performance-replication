/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 20:01:28 GMT 2018
 */

package okhttp3.internal.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import okhttp3.Challenge;
import okhttp3.CookieJar;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.internal.http.HttpHeaders;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpHeaders_ESTest extends HttpHeaders_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn((Response) null).when(response0).networkResponse();
      // Undeclared exception!
      try { 
        HttpHeaders.varyHeaders(response0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HttpHeaders.skipUntil("okhttp3.internal.Util", 375, "okhttp3.internal.Util");
      Headers headers0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.varyHeaders((Headers) null, (Headers) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpHeaders.skipUntil("FrTq9EK)b_", (-4), "okio.Buffer");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "n_hJ?:@>cl*";
      stringArray0[1] = "n_hJ?:@>cl*";
      Headers headers0 = Headers.of(stringArray0);
      HttpHeaders.varyHeaders(headers0, headers0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "<[87I ;Le";
      stringArray0[1] = ")_GZjF.a";
      stringArray0[2] = "[~v+\"=zM`]lKnL!S";
      stringArray0[3] = "";
      Headers headers0 = Headers.of(stringArray0);
      Headers.of(stringArray0);
      headers0.toString();
      headers0.names();
      headers0.names();
      headers0.toString();
      headers0.toMultimap();
      headers0.toMultimap();
      Headers.of(stringArray0);
      headers0.values("GMT");
      headers0.names();
      headers0.getDate("");
      headers0.getDate("<[87I ;Le");
      headers0.toString();
      headers0.toMultimap();
      Headers.of(stringArray0);
      headers0.values("<u8B<QKT{c@2J&|9");
      Headers.of(stringArray0);
      headers0.values("");
      headers0.getDate("Y*U)R1");
      long long0 = HttpHeaders.contentLength(headers0);
      assertEquals((-1L), long0);
      
      headers0.names();
      int int0 = HttpHeaders.skipWhitespace("GMT", 261);
      Set<String> set0 = HttpHeaders.varyFields(headers0);
      assertEquals(0, set0.size());
      
      int int1 = HttpHeaders.parseSeconds("Y*U)R1", 261);
      assertTrue(int1 == int0);
      assertEquals(261, int1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HttpHeaders.skipWhitespace("%T>qe!+o7~L_m$iH[>", 0);
      String[] stringArray0 = new String[10];
      stringArray0[0] = "%T>qe!+o7~L_m$iH[>";
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertTrue(headers1.equals((Object)headers0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      headers0.names();
      hashMap0.put("+", "Vary");
      HttpHeaders.varyFields(headers0);
      HttpHeaders.parseChallenges(headers0, "Pragma");
      HttpHeaders.contentLength(headers0);
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      try { 
        MockURL.URL("");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.hasVaryAll((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[6];
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      HttpHeaders.receiveHeaders(cookieJar0, (HttpUrl) null, headers0);
      assertEquals(0, headers0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      headers0.toString();
      HttpHeaders.parseChallenges(headers0, "ZHH/");
      HttpHeaders.parseSeconds("ZHH/", 802);
      HttpHeaders.hasVaryAll(headers0);
      HttpHeaders.parseSeconds((String) null, 802);
      HttpHeaders.receiveHeaders((CookieJar) null, (HttpUrl) null, headers0);
      assertEquals(0, headers0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "";
      int int0 = (-16777216);
      HttpHeaders.parseSeconds("", (-16777216));
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.contentLength((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "n_hJ?:@>cl*";
      stringArray0[1] = "n_hJ?:@>cl*";
      Headers headers0 = Headers.of(stringArray0);
      HttpHeaders.parseChallenges(headers0, "n_hJ?:@>cl*");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpUrl httpUrl0 = HttpUrl.parse("n_hJ?:@>cl*");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HttpHeaders.skipUntil("FrTq9EK)b_", 3, "okio.Buffer");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertTrue(headers1.equals((Object)headers0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "h4|\\u{<pl}2h:pl{fr";
      int int0 = HttpHeaders.skipUntil(string0, 1, string0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.get(uRL0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      int int0 = HttpHeaders.parseSeconds("2", 5);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("u!", "u!", biFunction0);
      hashMap0.put("vary", "vary");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      HttpHeaders.contentLength(headers1);
      System.setCurrentTimeMillis(2147483647L);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HttpHeaders.parseSeconds("\"([^\"]*)\"", (-5959));
      HttpHeaders.parseSeconds("Content-Length", (-5959));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\"([^\"]*)\"";
      stringArray0[1] = "Content-Length";
      stringArray0[2] = "Content-Length";
      stringArray0[3] = "\"([^\"]*)\"";
      stringArray0[4] = "Content-Length";
      stringArray0[5] = ",";
      Headers headers0 = Headers.of(stringArray0);
      HttpHeaders.contentLength(headers0);
      // Undeclared exception!
      try { 
        HttpHeaders.skipWhitespace("HEAD", (-5959));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      System.setCurrentTimeMillis(2549L);
      HttpHeaders.skipWhitespace("[size=0]", 40);
      HttpHeaders.skipWhitespace("[size=0]", 40);
      HttpHeaders.skipUntil("[size=0]", 10, "[size=0]");
      HttpHeaders.skipUntil("[size=0]", 2464, "[size=0]");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>(hashMap0);
      Headers headers0 = Headers.of((Map<String, String>) hashMap1);
      // Undeclared exception!
      try { 
        HttpHeaders.varyMatches((Response) null, headers0, (Request) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "oweo>b}gxuqs}y*u`";
      stringArray0[1] = "vary";
      stringArray0[2] = "vary";
      stringArray0[3] = "vary";
      stringArray0[4] = "vary";
      stringArray0[5] = "vary";
      Headers headers0 = Headers.of(stringArray0);
      boolean boolean0 = HttpHeaders.hasVaryAll(headers0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = HttpHeaders.skipWhitespace("EEE dd MMM yy HH:mm:ss z", 13);
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("l 3m7Z1$<:,b=", "l 3m7Z1$<:,b=");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "l 3m7Z1$<:,b=");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("l m7Z1$<:,b=", "l m7Z1$<:,b=");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "l m7Z1$<:,b=");
      assertEquals(0, list0.size());
      
      boolean boolean0 = HttpHeaders.hasVaryAll(headers0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("1b4l realm$<:,bc=", "1b4l realm$<:,bc=");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "1b4l realm$<:,bc=");
      assertTrue(list0.isEmpty());
  }
}
