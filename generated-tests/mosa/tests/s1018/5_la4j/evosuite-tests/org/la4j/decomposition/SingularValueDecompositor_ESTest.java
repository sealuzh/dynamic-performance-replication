/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:37:59 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.SingularValueDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SingularValueDecompositor_ESTest extends SingularValueDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(47, 10, 47);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(columnMajorSparseMatrix0);
      SingularValueDecompositor singularValueDecompositor1 = new SingularValueDecompositor(columnMajorSparseMatrix0);
      Matrix[] matrixArray0 = singularValueDecompositor1.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(29, 29);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      ColumnMajorSparseMatrix.zero(29, 29, 29);
      // Undeclared exception!
      singularValueDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(3, 225);
      assertNotNull(denseMatrix0);
      assertEquals(3, denseMatrix0.rows());
      assertEquals(225, denseMatrix0.columns());
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertNotNull(singularValueDecompositor0);
      assertEquals(3, denseMatrix0.rows());
      assertEquals(225, denseMatrix0.columns());
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(3, 3, 3);
      assertNotNull(columnMajorSparseMatrix0);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertEquals(3, denseMatrix0.rows());
      assertEquals(225, denseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(29, 29, 29);
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(29, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(29, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = ColumnMajorSparseMatrix.zero(29, 29, 29);
      assertNotNull(columnMajorSparseMatrix1);
      assertNotSame(columnMajorSparseMatrix1, columnMajorSparseMatrix0);
      assertFalse(columnMajorSparseMatrix1.isRowMajor());
      assertEquals(29, columnMajorSparseMatrix1.rows());
      assertEquals(0.0, columnMajorSparseMatrix1.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix1.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix1.min(), 0.01);
      assertEquals(29, columnMajorSparseMatrix1.columns());
      assertEquals(0.0, columnMajorSparseMatrix1.density(), 0.01);
      assertTrue(columnMajorSparseMatrix1.equals((Object)columnMajorSparseMatrix0));
      
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(29, (-3450.16439508));
      assertNotNull(denseMatrix0);
      assertEquals(29, denseMatrix0.rows());
      assertEquals(29, denseMatrix0.columns());
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertNotNull(singularValueDecompositor0);
      assertEquals(29, denseMatrix0.rows());
      assertEquals(29, denseMatrix0.columns());
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertEquals(29, denseMatrix0.rows());
      assertEquals(29, denseMatrix0.columns());
      
      boolean boolean0 = singularValueDecompositor0.applicableTo(columnMajorSparseMatrix0);
      assertNotSame(columnMajorSparseMatrix0, columnMajorSparseMatrix1);
      assertTrue(boolean0);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(29, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(29, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(29, denseMatrix0.rows());
      assertEquals(29, denseMatrix0.columns());
      assertTrue(columnMajorSparseMatrix0.equals((Object)columnMajorSparseMatrix1));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(8, 8);
      assertNotNull(denseMatrix0);
      assertEquals(8, denseMatrix0.columns());
      assertEquals(8, denseMatrix0.rows());
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertNotNull(singularValueDecompositor0);
      assertEquals(8, denseMatrix0.columns());
      assertEquals(8, denseMatrix0.rows());
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(8, 8, 8);
      assertNotNull(columnMajorSparseMatrix0);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(8, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(8, columnMajorSparseMatrix0.rows());
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertEquals(8, denseMatrix0.columns());
      assertEquals(8, denseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(13, 13);
      assertNotNull(denseMatrix0);
      assertEquals(13, denseMatrix0.columns());
      assertEquals(13, denseMatrix0.rows());
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertNotNull(singularValueDecompositor0);
      assertEquals(13, denseMatrix0.columns());
      assertEquals(13, denseMatrix0.rows());
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertEquals(13, denseMatrix0.columns());
      assertEquals(13, denseMatrix0.rows());
      
      SingularValueDecompositor singularValueDecompositor1 = new SingularValueDecompositor(denseMatrix0);
      assertNotNull(singularValueDecompositor1);
      assertEquals(13, denseMatrix0.columns());
      assertEquals(13, denseMatrix0.rows());
      assertFalse(singularValueDecompositor1.equals((Object)singularValueDecompositor0));
      
      Matrix[] matrixArray1 = singularValueDecompositor1.decompose();
      assertNotNull(matrixArray1);
      assertNotSame(singularValueDecompositor1, singularValueDecompositor0);
      assertNotSame(matrixArray1, matrixArray0);
      assertEquals(13, denseMatrix0.columns());
      assertEquals(13, denseMatrix0.rows());
      assertFalse(singularValueDecompositor1.equals((Object)singularValueDecompositor0));
      assertFalse(matrixArray1.equals((Object)matrixArray0));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(60, 60);
      assertNotNull(denseMatrix0);
      assertEquals(60, denseMatrix0.columns());
      assertEquals(60, denseMatrix0.rows());
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertNotNull(singularValueDecompositor0);
      assertEquals(60, denseMatrix0.columns());
      assertEquals(60, denseMatrix0.rows());
      
      SingularValueDecompositor singularValueDecompositor1 = new SingularValueDecompositor(denseMatrix0);
      assertNotNull(singularValueDecompositor1);
      assertEquals(60, denseMatrix0.columns());
      assertEquals(60, denseMatrix0.rows());
      assertFalse(singularValueDecompositor1.equals((Object)singularValueDecompositor0));
      
      // Undeclared exception!
      singularValueDecompositor1.decompose();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(13, 225);
      assertNotNull(denseMatrix0);
      assertEquals(13, denseMatrix0.rows());
      assertEquals(225, denseMatrix0.columns());
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertNotNull(singularValueDecompositor0);
      assertEquals(13, denseMatrix0.rows());
      assertEquals(225, denseMatrix0.columns());
      
      // Undeclared exception!
      singularValueDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(17);
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(17, mockRandom0);
      assertNotNull(denseMatrix0);
      assertEquals(17, denseMatrix0.rows());
      assertEquals(17, denseMatrix0.columns());
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertNotNull(singularValueDecompositor0);
      assertEquals(17, denseMatrix0.rows());
      assertEquals(17, denseMatrix0.columns());
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertEquals(17, denseMatrix0.rows());
      assertEquals(17, denseMatrix0.columns());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      denseMatrix0.forEach(consumer0);
      assertEquals(17, denseMatrix0.rows());
      assertEquals(17, denseMatrix0.columns());
      
      boolean boolean0 = singularValueDecompositor0.applicableTo(denseMatrix0);
      assertTrue(boolean0);
      assertEquals(17, denseMatrix0.rows());
      assertEquals(17, denseMatrix0.columns());
      
      Matrix[] matrixArray1 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray1);
      assertNotSame(matrixArray1, matrixArray0);
      assertEquals(17, denseMatrix0.rows());
      assertEquals(17, denseMatrix0.columns());
      assertFalse(matrixArray1.equals((Object)matrixArray0));
  }
}
