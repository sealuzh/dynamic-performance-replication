/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 16:06:36 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.CheckboxGroup;
import java.awt.Component;
import java.awt.FileDialog;
import java.awt.Graphics;
import java.awt.ImageCapabilities;
import java.awt.LayoutManager;
import java.awt.Rectangle;
import java.awt.Scrollbar;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyListener;
import java.awt.event.MouseListener;
import java.awt.event.MouseWheelListener;
import java.beans.EventSetDescriptor;
import java.beans.PropertyChangeListener;
import java.beans.beancontext.BeanContext;
import java.beans.beancontext.BeanContextSupport;
import java.io.PrintStream;
import java.util.List;
import java.util.Locale;
import javax.swing.ActionMap;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLayer;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import javax.swing.plaf.synth.SynthMenuBarUI;
import javax.swing.table.JTableHeader;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.associations.FilteredAssociator;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.CheckOptionHandler;
import weka.core.Instances;
import weka.core.ListOptions;
import weka.core.ManhattanDistance;
import weka.core.SparseInstance;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;
import weka.core.converters.ArffSaver;
import weka.core.converters.TextDirectoryLoader;
import weka.filters.AllFilter;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.ClassOrder;
import weka.filters.supervised.attribute.Discretize;
import weka.gui.Logger;
import weka.gui.WekaTaskMonitor;
import weka.gui.beans.Appender;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.Classifier;
import weka.gui.beans.Clusterer;
import weka.gui.beans.ClustererPerformanceEvaluator;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.KnowledgeFlowApp;
import weka.gui.beans.Loader;
import weka.gui.beans.MetaBean;
import weka.gui.beans.ModelPerformanceChart;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.ScatterPlotMatrix;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TestSetListener;
import weka.gui.beans.TextViewer;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      SynthMenuBarUI synthMenuBarUI0 = new SynthMenuBarUI();
      synthMenuBarUI0.getAccessibleChildrenCount(filter0);
      filter0.removePropertyChangeListener((PropertyChangeListener) synthMenuBarUI0);
      filter0.repaint();
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      filter0.addMouseWheelListener((MouseWheelListener) null);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      String string0 = "6|6z";
      int int0 = 0;
      Integer integer0 = new Integer(0);
      filter0.disconnectionNotification("6|6z", integer0);
      filter0.isBusy();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, doubleArray0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.enumerateRequests();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.hasFocus();
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      filter0.removePropertyChangeListener((String) null, (PropertyChangeListener) jSpinner_NumberEditor0);
      filter0.getGraphicsConfiguration();
      AWTEventMulticaster.add((MouseListener) null, (MouseListener) null);
      filter0.removeMouseListener((MouseListener) null);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.getPropertyChangeListeners("");
      substringLabeler0.getMouseWheelListeners();
      filter0.removeInstanceListener(substringLabeler0);
      filter0.enumerateRequests();
      filter0.addDataSourceListener(substringLabeler0);
      filter0.setCustomName("");
      filter0.setVisual((BeanVisual) null);
      assertTrue(filter0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassAssigner classAssigner0 = new ClassAssigner();
      filter0.addTrainingSetListener(classAssigner0);
      boolean boolean0 = filter0.connectionAllowed("mostly");
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getCustomName();
      String string0 = "";
      Locale locale0 = new Locale("hcRM+dpGGL3M&v0{i6P", "", "hcRM+dpGGL3M&v0{i6P");
      filter0.getVisibleRect();
      Locale locale1 = Locale.KOREA;
      locale0.getDisplayName(locale1);
      locale0.getDisplayCountry(locale1);
      JComponent.setDefaultLocale(locale0);
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      technicalInformationHandlerJavadoc0.setProlog(true);
      InstanceEvent instanceEvent0 = new InstanceEvent(technicalInformationHandlerJavadoc0);
      filter0.acceptInstance(instanceEvent0);
      CheckboxGroup checkboxGroup0 = new CheckboxGroup();
      checkboxGroup0.getSelectedCheckbox();
      // Undeclared exception!
      try { 
        filter0.connectionNotification("<!-- technical-plaintext-start -->", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.eventGeneratable("weka.gui.beans.Filter");
      filter0.setCustomName("weka.gui.beans.Filter");
      assertEquals("weka.gui.beans.Filter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setLayout((LayoutManager) null);
      filter0.eventGeneratable("^^Jl=)I+c");
      TextViewer textViewer0 = new TextViewer();
      textViewer0.getVisual();
      String string0 = "^=D9c<'PAAMnGz/&*";
      ImageIcon imageIcon0 = new ImageIcon("^=D9c<'PAAMnGz/&*", "^^Jl=)I+c");
      Object[] objectArray0 = new Object[0];
      JOptionPane jOptionPane0 = null;
      try {
        jOptionPane0 = new JOptionPane("^^Jl=)I+c", (-1), (-69), imageIcon0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JOptionPane: option type must be one of JOptionPane.DEFAULT_OPTION, JOptionPane.YES_NO_OPTION, JOptionPane.YES_NO_CANCEL_OPTION or JOptionPane.OK_CANCEL_OPTION
         //
         verifyException("javax.swing.JOptionPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.isFocusable();
      filter0.getBorder();
      filter0.getFocusListeners();
      filter0.getAncestorListeners();
      filter0.getHeight();
      filter0.stop();
      filter0.isBusy();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      ArffSaver arffSaver0 = new ArffSaver();
      arffSaver0.getInstances();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(mockThaiBuddhistDate0, (Instances) null, 73, (-242), 0, (-242));
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.disconnectionNotification("@relation", arffSaver0);
      filter0.connectionAllowed(" xPjiRc1N+en_\"");
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      
      DataSetEvent dataSetEvent0 = new DataSetEvent(" xPjiRc1N+en_\"", (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, (Instances) null, (-19), (-19));
      filter0.acceptTrainingSet(trainingSetEvent0);
      boolean boolean0 = filter0.connectionAllowed(" not supported (j48)");
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      List<String> list0 = modelPerformanceChart0.m_thresholdSeriesTitles;
      instances0.indexOf((Object) null);
      Attribute attribute0 = new Attribute("Pr;-z+m", (List<String>) null);
      Discretize discretize0 = new Discretize();
      discretize0.getTechnicalInformation();
      attribute0.equalsMsg(discretize0);
      instances0.deleteWithMissing(attribute0);
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0, instances0);
      filter0.notifyInstanceListeners(instanceEvent0);
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      
      filter0.getWrappedAlgorithm();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      flowByExpression0.addPropertyChangeListener((PropertyChangeListener) null);
      filter0.addDataSourceListener(flowByExpression0);
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.removeTestSetListener(trainTestSplitMaker0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getWidth();
      filter0.stop();
      JLayer<FileDialog> jLayer0 = new JLayer<FileDialog>();
      ActionMap actionMap0 = new ActionMap();
      jLayer0.setActionMap(actionMap0);
      filter0.addPropertyChangeListener((PropertyChangeListener) jLayer0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$tv");
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      filter0.addInstanceListener(substringLabeler0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      // Undeclared exception!
      try { 
        filter0.notifyInstanceListeners((InstanceEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.SubstringLabeler", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      filter0.requestFocus();
      Saver saver0 = new Saver();
      saver0.removeAll();
      filter0.addInstanceListener(saver0);
      Appender appender0 = new Appender();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      MouseListener mouseListener0 = AWTEventMulticaster.add((MouseListener) defaultCaret0, (MouseListener) defaultCaret0);
      AWTEventMulticaster.remove(mouseListener0, mouseListener0);
      appender0.removeMouseMotionListener(defaultCaret0);
      appender0.addMouseListener((MouseListener) null);
      filter0.getInputMethodListeners();
      Logger logger0 = appender0.m_log;
      filter0.setLog((Logger) null);
      filter0.disconnectionNotification("ZH(oJc>2%b(4", (Object) null);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      // Undeclared exception!
      try { 
        filter0.notifyInstanceListeners(instanceEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Saver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getAlignmentX();
      filter0.notifyInstanceListeners((InstanceEvent) null);
      Sorter sorter0 = new Sorter();
      sorter0.setInheritsPopupMenu(true);
      sorter0.setDebugGraphicsOptions(85);
      filter0.removeTrainingSetListener(sorter0);
      // Undeclared exception!
      try { 
        filter0.performRequest("P#JL AvVCg#*m/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // P#JL AvVCg#*m/ not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.stop();
      Saver saver0 = new Saver();
      saver0.getInputMap();
      filter0.addTrainingSetListener(saver0);
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      scatterPlotMatrix0.revalidate();
      filter0.addTrainingSetListener(scatterPlotMatrix0);
      filter0.getInputMap();
      filter0.setCustomName("");
      Clusterer clusterer0 = new Clusterer();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      clusterer0.removeHierarchyListener((HierarchyListener) null);
      clusterer0.setFocusable(false);
      BeanVisual beanVisual0 = clusterer0.m_visual;
      beanVisual0.transferFocus();
      filter0.setVisual(beanVisual0);
      BeanVisual beanVisual1 = filter0.getVisual();
      filter0.setSize(0, (-502));
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      MockPrintStream mockPrintStream0 = new MockPrintStream("fZUTTynEb2HV$z*=>");
      beanVisual1.list((PrintStream) mockPrintStream0);
      filter0.addConfigurationListener(configurationListener0);
      filter0.removeDataSourceListener(scatterPlotMatrix0);
      ConfigurationListener configurationListener1 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener1);
      ClassAssigner classAssigner0 = new ClassAssigner();
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      BeanContext beanContext0 = modelPerformanceChart0.m_beanContext;
      BeanContextSupport beanContextSupport0 = new BeanContextSupport((BeanContext) null);
      classAssigner0.addVetoableChangeListener(beanContextSupport0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      classAssigner0.createVolatileImage(0, 0, imageCapabilities0);
      filter0.addInstanceListener(classAssigner0);
      filter0.addDataSourceListener(classAssigner0);
      filter0.setCustomName("weka/gui/beans/icons/");
      assertEquals("weka/gui/beans/icons/", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      filter0.removeTrainingSetListener(attributeSummarizer0);
      FocusEvent focusEvent0 = new FocusEvent(predictionAppender0, 46, true);
      MetaBean metaBean0 = new MetaBean();
      focusEvent0.setSource(metaBean0);
      predictionAppender0.dispatchEvent(focusEvent0);
      Logger logger0 = predictionAppender0.m_logger;
      filter0.setLog((Logger) null);
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      boolean boolean0 = filter0.eventGeneratable("AllFilter");
      boolean boolean1 = filter0.isBusy();
      assertTrue(boolean1 == boolean0);
      
      filter0.stop();
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getData();
      capabilities0.disableAllAttributeDependencies();
      TestSetEvent testSetEvent0 = new TestSetEvent(predictionAppender0, (Instances) null, 46, 46);
      filter0.acceptTestSet(testSetEvent0);
      filter0.removeTestSetListener(attributeSummarizer0);
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      
      filter0.useDefaultVisual();
      String string1 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionAllowed("");
      KnowledgeFlowApp.getSingleton();
      Sorter sorter0 = new Sorter();
      sorter0.getStructure("");
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      DataSetEvent dataSetEvent0 = new DataSetEvent(clustererPerformanceEvaluator0, (Instances) null);
      Filter filter1 = new Filter();
      filter1.acceptDataSet(dataSetEvent0);
      ClassOrder classOrder0 = new ClassOrder();
      filter0.setFilter(classOrder0);
      assertEquals("ClassOrder", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getFocusListeners();
      filter0.connectionNotification("onfiguraton", "onfiguraton");
      boolean boolean0 = filter0.eventGeneratable("onfiguraton");
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getPropertyChangeListeners("|gT$Oq");
      TextViewer textViewer0 = new TextViewer();
      filter0.removeDataSourceListener(textViewer0);
      AllFilter allFilter0 = new AllFilter();
      filter0.setFilter(allFilter0);
      filter0.connectionNotification("|gT$Oq", allFilter0);
      boolean boolean0 = filter0.eventGeneratable("|gT$Oq");
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.eventGeneratable("configuration");
      assertTrue(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      WekaTaskMonitor wekaTaskMonitor0 = new WekaTaskMonitor();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      filter0.addInstanceListener(substringReplacer0);
      Appender appender0 = new Appender();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultCaret defaultCaret1 = new DefaultCaret();
      AWTEventMulticaster.add((MouseListener) null, (MouseListener) defaultCaret1);
      MouseListener mouseListener0 = AWTEventMulticaster.remove((MouseListener) defaultCaret0, (MouseListener) null);
      appender0.removeMouseMotionListener(defaultCaret0);
      Appender appender1 = new Appender();
      appender1.addMouseListener(mouseListener0);
      filter0.getInputMethodListeners();
      Logger logger0 = appender1.m_log;
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      FlowByExpression flowByExpression1 = new FlowByExpression();
      InstanceEvent instanceEvent1 = flowByExpression1.m_ie;
      filter0.notifyInstanceListeners(instanceEvent1);
      filter0.addTrainingSetListener(flowByExpression1);
      flowByExpression1.getStructure("configuration");
      DataSetEvent dataSetEvent0 = new DataSetEvent(defaultCaret1, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      // Undeclared exception!
      try { 
        filter0.performRequest("@relation");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // @relation not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      filter0.connectionNotification("Improvements to Platt's SMO Algorithm for SVM Classifier Design", scatterPlotMatrix0);
      boolean boolean0 = filter0.eventGeneratable("Improvements to Platt's SMO Algorithm for SVM Classifier Design");
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.updateUI();
      JTable jTable0 = new JTable();
      JTableHeader jTableHeader0 = jTable0.getTableHeader();
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(134);
      jTable0.setDoubleBuffered(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte) (-13);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      filter0.paintImmediately(rectangle0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      filter0.removeTestSetListener((TestSetListener) null);
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      filteredAssociator0.getRevision();
      weka.filters.Filter filter1 = filteredAssociator0.getFilter();
      weka.filters.Filter.makeCopy(filter1);
      filter0.setFilter(filter1);
      filter0.acceptDataSet((DataSetEvent) null);
      Random.setNextRandom(0);
      Sorter sorter0 = new Sorter();
      filter0.removeTestSetListener(sorter0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      MockHijrahDate.now();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(mockHijrahDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      filter0.removeTestSetListener(attributeSummarizer0);
      ListOptions listOptions0 = new ListOptions();
      AllFilter allFilter0 = new AllFilter();
      filter0.setWrappedAlgorithm(allFilter0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.stop();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, instances0);
      Saver saver0 = new Saver();
      filter0.removeTrainingSetListener(saver0);
      Sorter sorter0 = new Sorter();
      filter0.addTrainingSetListener(sorter0);
      ManhattanDistance manhattanDistance0 = new ManhattanDistance(instances0);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(manhattanDistance0, instances0);
      trainingSetEvent0.m_setNumber = (-1936);
      filter0.acceptTrainingSet(trainingSetEvent0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      TestSetEvent testSetEvent0 = new TestSetEvent(integer0, instances0, 1, 1);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      Filter filter1 = new Filter();
      filter1.revalidate();
      filter0.connectionNotification("W;:_ !]m!<", "W;:_ !]m!<");
      boolean boolean0 = filter1.eventGeneratable("j");
      assertFalse(boolean0);
      
      filter0.connectionNotification("W;:_ !]m!<", "j");
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("j", "j");
      boolean boolean0 = filter0.eventGeneratable(" seconds");
      assertFalse(boolean0);
      
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke('');
      filter0.getY();
      filter0.getConditionForKeyStroke(keyStroke0);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      filter0.requestFocusInWindow();
      filter0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      filter0.disconnectionNotification("Ungroup", (Object) null);
      TestSetEvent testSetEvent0 = new TestSetEvent(hierarchyBoundsListener1, (Instances) null, 1556, 1556, 0, (-1041));
      filter0.acceptTestSet(testSetEvent0);
      System.setCurrentTimeMillis(1556);
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.getBorder();
      filter0.addTrainingSetListener(classAssigner0);
      filter0.acceptDataSet((DataSetEvent) null);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(testSetEvent0, (Instances) null);
      filter0.acceptTrainingSet(trainingSetEvent0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      classAssigner0.getBaseline(2783, 414);
      filter0.notifyInstanceListeners((InstanceEvent) null);
      filter0.stop();
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      
      filter0.addTestSetListener(classAssigner0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      filter0.setLog(logPanel0);
      filter0.acceptInstance((InstanceEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      Filter filter1 = new Filter();
      Loader loader0 = new Loader();
      filter1.connectionNotification("", loader0);
      boolean boolean0 = filter1.eventGeneratable("");
      assertEquals("AllFilter", filter1.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionAllowed("instance");
      filter0.setCustomName("instance");
      assertEquals("instance", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      instanceEvent0.setStatus(1);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      Sorter sorter0 = new Sorter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      ManhattanDistance manhattanDistance0 = new ManhattanDistance(instances0);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(textDirectoryLoader0, instances0, 341, 1);
      trainingSetEvent0.m_runNumber = (-1230);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      Filter filter1 = new Filter();
      filter1.setFilter(multiFilter0);
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1660.5103787726432), (int[]) null, (-1586));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      InstanceEvent instanceEvent0 = new InstanceEvent(trainTestSplitMaker0, binarySparseInstance1, 1660);
      filter1.acceptInstance(instanceEvent0);
      assertEquals("MultiFilter", filter1.getCustomName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      Filter filter0 = new Filter();
      filter0.setFilter(multiFilter0);
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1660.5103787726432), (int[]) null, (-1586));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      InstanceEvent instanceEvent0 = new InstanceEvent(trainTestSplitMaker0, binarySparseInstance1, 1660);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      Filter filter0 = new Filter();
      filter0.setFilter(multiFilter0);
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      boolean boolean0 = filter0.connectionAllowed("instance");
      assertEquals("MultiFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }
}
