/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 18:19:29 GMT 2018
 */

package org.apache.commons.math3.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmbeddedRungeKuttaIntegrator_ESTest extends EmbeddedRungeKuttaIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.2;
      doubleArray0[1] = 0.2;
      doubleArray0[2] = 0.2;
      doubleArray0[3] = 0.2;
      doubleArray0[4] = (-1060.794580026155);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.2;
      doubleArray0[7] = 0.2;
      doubleArray0[8] = 0.2;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.2, 0.2, doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[6][4];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 0.2;
      doubleArray2[1] = (-1060.794580026155);
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      dormandPrince54Integrator0.resetInternalState();
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      dormandPrince54Integrator0.estimateError(doubleArray1, doubleArray0, doubleArray0, 0.2);
      dormandPrince54Integrator0.estimateError(doubleArray1, doubleArray0, doubleArray0, 0.2);
      double double0 = dormandPrince54Integrator0.getMinReduction();
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.2, double0, 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-316.566);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-316.566), (-316.566), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setMaxGrowth(2816.74703963166);
      double[][] doubleArrayArray0 = null;
      dormandPrince54Integrator0.setInitialStepSize((-316.566));
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-316.566);
      dormandPrince54Integrator0.estimateError((double[][]) null, doubleArray0, doubleArray1, 0.3076923076923077);
      dormandPrince54Integrator0.setMaxGrowth(757.6009762115);
      dormandPrince54Integrator0.getMaxGrowth();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(Double.NaN, (-3206.5238392166), doubleArray0, doubleArray1);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = (-1157.7);
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-316.566), doubleArray0, (-1157.7), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-69.44594);
      doubleArray0[1] = (-69.44594);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-69.44594), (-69.44594), doubleArray0, doubleArray0);
      double double0 = highamHall54Integrator0.getSafety();
      assertEquals(0.9, double0, 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1.0), (-1.0), doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.setSafety(5);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setCompleteState(doubleArray0);
      expandableStatefulODE0.getCompleteState();
      expandableStatefulODE0.getCompleteState();
      double double0 = 1.0;
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, 1.0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1754.5956), (-1754.5956), doubleArray0, doubleArray0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator0.getStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 2.5685958862304688);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2916.911288912), 1117.6147, 0.535327672958374, 1.772769429511459);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(59).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, (-1815.68108227));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1389.6394810685);
      doubleArray0[1] = (-1389.6394810685);
      doubleArray0[2] = (-1389.6394810685);
      doubleArray0[3] = (-1389.6394810685);
      doubleArray0[4] = (-1389.6394810685);
      doubleArray0[5] = (-1389.6394810685);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray1 = expandableStatefulODE0.getCompleteState();
      expandableStatefulODE0.setTime((-1389.6394810685));
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2552.993448, (-1389.6394810685), (-1232.66717), 1.0);
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(2876.348728188908, (-1389.6394810685), doubleArray0, doubleArray0);
      dormandPrince54Integrator1.setMaxEvaluations((-1));
      double[][] doubleArray2 = new double[0][3];
      dormandPrince54Integrator1.estimateError(doubleArray2, doubleArray0, doubleArray1, (-1));
      double double0 = (-2622.2568583);
      double double1 = 0.5220900774002075;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-41.9823171), (-2622.2568583), (-1232.66717), 0.5220900774002075);
      highamHall54Integrator0.getOrder();
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, 1354.4733574824538);
  }
}
