/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:02:16 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.CharArrayWriter;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.net.URI;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.HijrahDate;
import java.time.zone.ZoneRules;
import java.util.Locale;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("{null, null}");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Constant[] constantArray0 = new Constant[6];
      Locale locale0 = Locale.TAIWAN;
      String string0 = Utility.printArray((Object[]) constantArray0, false, true);
      assertNotNull(string0);
      assertEquals("null, null, null, null, null, null", string0);
      
      String string1 = Utility.getSignature(", ");
      assertEquals("L,;", string1);
      
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("00", string2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('M');
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      short short0 = Utility.searchOpcode("_$E6?wWJ02F");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('~');
      assertFalse(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.methodTypeToSignature("1#7M;!=", (String[]) null);
      assertEquals("()L1#7M;!=;", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.format((-98), 5056, true, '%');
      boolean boolean0 = Utility.isJavaIdentifierPart('%');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)3;
      Utility.classOrInterface((byte)3);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "/O%Q+z:4~)wZEI,s`", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Utility.encode(byteArray0, true);
      Utility.compactClassName("A|$dxmK.Om3=hp", true);
      try { 
        Utility.methodSignatureReturnType("A|$dxmK.Om3=hp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `A|$dxmK.Om3=hp'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) byteArray0;
      objectArray0[2] = (Object) "B";
      objectArray0[4] = (Object) "B";
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)66, 79);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Object object0 = new Object();
      String string0 = Utility.compactClassName("Qi96NU\"*N?1");
      assertEquals("Qi96NU\"*N?1", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string1 = Constants.CONSTRUCTOR_NAME;
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$A", string2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) byteArray0;
      objectArray0[2] = (Object) "$5b";
      objectArray0[4] = (Object) "$5b";
      Utility.printArray(objectArray0);
      try { 
        Utility.methodSignatureArgumentTypes("D*8{aQ$]C}$", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: D*8{aQ$]C}$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.methodSignatureReturnType("WFZ^TrOQbmB_U>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WFZ^TrOQbmB_U>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = Utility.format((-1622), (-1622), false, 'd');
      assertEquals("-1622", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = Utility.format(80, 80, false, 'W');
      assertEquals("WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW80", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "%j0t";
      try { 
        Utility.typeOfMethodSignature("%j0t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %j0t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = Utility.accessToString(45);
      assertEquals("public protected static synchronized", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)28;
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = Utility.clearBit((byte)28, (byte)28);
      assertEquals(28, int0);
      
      String string0 = Utility.accessToString(178, true);
      assertEquals("private final transient", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = Utility.getSignature("z=C6)jOuT2Zv,WU3`@");
      assertEquals("Lz=C6)jOuT2Zv,WU3`@;", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.replace("boolean", "return", "return");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) byteArray0;
      Utility.printArray(objectArray0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "return";
      stringArray0[1] = "boolean";
      stringArray0[2] = "boolean";
      stringArray0[3] = "return";
      stringArray0[4] = "boolean";
      stringArray0[5] = "return";
      stringArray0[3] = "boolean";
      stringArray0[7] = "{[B@3431e674}";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("wW%pf!%", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":";
      Utility.methodTypeToSignature("K6COlMV<", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = Pattern.COMMENTS;
      Utility.getSignature("hVj;m6$Eji:y-VZ#Z[]");
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ", locals={";
      stringArray0[1] = ", locals={";
      stringArray0[2] = ", locals={";
      String string0 = Utility.methodTypeToSignature(", locals={", stringArray0);
      assertEquals("(L,;L,;L,;)L,;", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", index = ");
      String string0 = Utility.classOrInterface((-2050));
      assertEquals("interface", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-61);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("c3", string1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utility.isJavaIdentifierPart('s');
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utility.accessToString((-3), true);
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Types");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Types
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("aastore", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) byteArray0;
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.getSignature("{[B@16896db0, [B@16896db0, null, null, null}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[B@16896db0, [B@16896db0, null, null, null}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = true;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "g:{zZ\"85e7sS'Tb+";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      objectArray0[2] = object0;
      Utility.printArray(objectArray0);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("k6i~9RXi[w@|a;bg", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[w@|a;bg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = Utility.compactClassName("~K+m<&y!_'&G;Y", true);
      assertEquals("~K+m<&y!_'&G;Y", string0);
      
      String string1 = Utility.convertString("~K+m<&y!_'&G;Y");
      Utility.convertString("~K+m<&y!_'&G;Y");
      String string2 = Utility.replace("~K+m<&y!_\\'&G;Y", "\n", "transient");
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.convertString("Qi96NU\"*N?1");
      String string0 = Constants.CONSTRUCTOR_NAME;
      try { 
        Utility.methodSignatureReturnType("Qi96NU\"*N?1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qi96NU\"*N?1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      DataInputStream.readUTF((DataInput) byteSequence0);
      try { 
        Utility.methodSignatureArgumentTypes("(Unknown attribute ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unknown attribute '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("R W|#i(K0$x'wo2cD", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R W|#i(K0$x'wo2cD'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-95);
      byteArray0[2] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(89, (byte) (-95));
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("if_icmplt\t\t#85", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `if_icmplt\t\t#85'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("castore", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      String[] stringArray0 = new String[4];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("pop", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = Utility.clearBit(181, (-448));
      assertEquals(180, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.replace("<illegal type>", "<illegal type>", "<illegal type>");
      // Undeclared exception!
      try { 
        Utility.signatureToString("G'~s*/~2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G'~s*_/~2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("astore_1", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-33);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-33), (int) (byte) (-33));
      assertEquals("0:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)125;
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-78), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.compactClassName("};pS_Pp|W2>/&");
      MockFile mockFile0 = new MockFile("};pS_Pp|W2>/&");
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)35;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-63), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "java.lang.Ai_pKf.aDRJqT!";
      Utility.compactClassName("java.lang.Ai_pKf.aDRJqT!");
      Utility.searchOpcode("invokedynamic");
      try { 
        Utility.typeOfMethodSignature("invokedynamic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokedynamic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      MockHijrahDate.now();
      MockHijrahDate.now();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)48;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 65536, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<mI7o<8`'/K");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<mI7o<8`'/K");
      byte byte0 = Utility.typeOfSignature("*S|3bA<2`CC}v");
      assertEquals((byte)9, byte0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)49;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1365), 20);
      assertEquals("0:    iconst_5\n1:    daload\n", string0);
      
      String string1 = Utility.compactClassName("<mI7o<8`'/K", false);
      assertEquals("<mI7o<8`'.K", string1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-126);
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      int int0 = 158;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(18, 57);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 902, 158);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      MockFile mockFile0 = new MockFile("<illegal type>");
      Utility.getSignature("<illegal type>");
      try { 
        Utility.methodSignatureReturnType("L<illegal;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<illegal;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      Utility.compactClassName("\t");
      Utility.getSignature("\t");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("[ Ld$cC[I.", "\t", "<illegal opcode>", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [ Ld$cC[I.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[26];
      byteArray0[12] = (byte)85;
      byteArray0[4] = (byte)85;
      byteArray0[2] = (byte)85;
      byteArray0[10] = (byte)85;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)85, (byte) (-121));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("vt4\"lM", "o,SE65Z:%", "static", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: vt4\"lM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      String string0 = Utility.methodSignatureReturnType("I7WMzbFoR<]");
      assertEquals("int", string0);
      
      String string1 = Utility.classOrInterface((byte) (-80));
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.printArray((Object[]) null, false);
      Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(2, byteSequence0.getIndex());
      
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray1, byteArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "aUq-di(LU)7]l8?");
      String string0 = Utility.compactClassName("anewarray", "anewarray", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("mN?XL4yl)HdgJ=j02l", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HdgJ=j02l'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte byte0 = (byte)7;
      byte byte1 = (byte)45;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      byteSequence0.read();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      int int0 = Pattern.LITERAL;
      String string0 = ">@(_`f-7mrbJ$";
      Utility.compactClassName(">@(_`f-7mrbJ$");
      Utility.codeToString(byteSequence0, constantPool0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, false, true);
      try { 
        Utility.methodSignatureArgumentTypes("NO:C0Os?up");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NO:C0Os?up
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dup2_x2", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      int int0 = Utility.setBit((byte)94, 1835);
      assertEquals(2142, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*<EgP.yEe057Rt$k7");
      byte[] byteArray0 = new byte[3];
      try { 
        Utility.typeOfSignature("2'X*^%m+?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2'X*^%m+?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      try { 
        Utility.typeOfSignature("#>F-=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #>F-=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Utility.compactClassName("B7");
      MockFile mockFile0 = new MockFile("B7");
      mockFile0.deleteOnExit();
      MockFile mockFile1 = new MockFile(mockFile0, "implements\t\t");
      String string0 = "short";
      MockFile mockFile2 = new MockFile(" ");
      mockFile2.toURL();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte)43);
      byteSequence0.mark((byte)43);
      byteSequence0.read();
      byteSequence0.reset();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      int int0 = 176;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)97, 176);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      byteArray0[3] = (byte)24;
      Constant[] constantArray0 = new Constant[3];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@_L_~rmBin B!fBp");
      byte[] byteArray1 = new byte[6];
      byteArray1[1] = (byte)105;
      byteArray1[2] = (byte)17;
      byteArray1[3] = (byte)24;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) constantPool0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) byteArray1;
      Utility.printArray(objectArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, (int) (byte)17, (-2900));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-76);
      String string0 = "UTd+A#>;Es<vz";
      MockFile mockFile0 = new MockFile((String) null, "UTd+A#>;Es<vz");
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)110;
      byteArray1[1] = (byte) (-76);
      byteArray1[2] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.reset();
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence0.readByte();
      byteSequence0.readUnsignedByte();
      byteSequence0.read();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(C(%8|2Vq> (");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 110, 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)114;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1011, 205);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("ispde)1", false);
      Utility.compactClassName("ispde)1", "ispde)1", false);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, constantPool0);
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 101
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Utility.getSignature("\nException hanEler(s) = \n");
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "^o]sOQP$@";
      stringArray0[1] = "void";
      stringArray0[2] = "byte";
      stringArray0[3] = "^o]sOQP$@";
      stringArray0[4] = "^o]sOQP$@";
      stringArray0[5] = "^o]sOQP$@";
      try { 
        Utility.methodTypeToSignature("^o]sOQP$@", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "[]";
      // Undeclared exception!
      try { 
        Utility.signatureToString("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = false;
      Utility.methodSignatureReturnType("V1Lj=5Y$wW' Nj");
      // Undeclared exception!
      try { 
        Utility.signatureToString("monitorenter", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `monitorenter'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(158, (byte)109);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureReturnType("EV>^>TMlh9&$VG!lC{f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EV>^>TMlh9&$VG!lC{f'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      try { 
        Utility.decode("[ d$cC[I.", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.encode(byteArray0, true);
      Utility.compactClassName("Unexpected element value kind in annotation: ", "LJ;V", false);
      Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("24((((((((((((((((((((((");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `24(((((((((((((((((((((('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = true;
      Utility.format((-772), (-772), true, ';');
      try { 
        Utility.decode("hV6g$Eji:y-VZ#Z[]", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "[ L~$zC[I.";
      boolean boolean0 = true;
      try { 
        Utility.decode("[ L~$zC[I.", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)85;
      byteArray0[4] = (byte)85;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)85;
      byteArray0[10] = (byte) (-66);
      byteArray0[17] = (byte) (-66);
      byteArray0[7] = (byte) (-66);
      byteArray0[8] = (byte)85;
      byte[] byteArray1 = new byte[10];
      byteArray1[0] = (byte) (-85);
      byteArray1[2] = (byte) (-66);
      byteArray1[4] = (byte)85;
      byteArray1[6] = (byte) (-66);
      byteArray1[7] = (byte) (-66);
      byteArray1[8] = (byte) (-66);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)0, (int) (byte) (-66));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Utility.compactClassName("S?s{6: `+XA_");
      Utility.typeOfSignature("S?s{6: `+XA_");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("i=c]wTfT(", "S?s{6: `+XA_", "S?s{6: `+XA_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i=c]wTfT(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)40;
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[0];
      Utility.equals(byteArray0, byteArray1);
      byte[] byteArray2 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, (ConstantPool) null, 160, (int) (byte) (-63), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      byteArray0[3] = (byte)24;
      Constant[] constantArray0 = new Constant[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.printArray((Object[]) constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)24, (int) (byte)24);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "%";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      int int0 = 75;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(75);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)61;
      boolean boolean0 = false;
      Utility.signatureToString("Jl q{&>R^l\"/y5~");
      MockFile mockFile0 = new MockFile(">\t");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "KOw|?i1L7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"KOw|?i1L7\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "castore");
      byteArray0[1] = (byte) (-80);
      byteArray0[1] = (byte)28;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-122), (int) (byte) (-80));
      assertEquals("0:    nop\n1:    iload_2\n2:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = Utility.compactClassName("Deprecated attribute with length > 0");
      assertNotNull(string0);
      assertEquals("Deprecated attribute with length > 0", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-61)}, byteArray0);
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(1.0F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(1.0F, constantFloat0.getBytes(), 0.01F);
      assertNotNull(constantFloat0);
      
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte) (-61)}, byteArray0);
      assertNotNull(string1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("monitorexit", string1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = Utility.signatureToString("SaU!r)TvzetPg");
      assertNotNull(string0);
      assertEquals("short", string0);
      
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string1);
      assertEquals("<clinit>", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)42;
      int int0 = Utility.setBit((byte)42, (byte)42);
      assertEquals(1066, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)42}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)42}, byteArray0);
      assertNotNull(string0);
      assertEquals("aload_0", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)57;
      byteArray0[4] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)4, (byte)57, (byte)0, (byte)0, (byte)57}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)57, 36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)27;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)27, (int) (byte)30);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(201);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(201, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-96), 174);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fload_1
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      String string1 = Utility.compactClassName("B7");
      assertNotNull(string1);
      assertEquals("B7", string1);
      assertFalse(string1.equals((Object)string0));
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string2 = Utility.signatureToString("B7");
      assertNotNull(string2);
      assertEquals("byte", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = Utility.replace(" ", "l}<6B~Xf", "org.apache.bcel.classfile.ClassFormatException");
      assertNotNull(string3);
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      try { 
        Utility.typeOfSignature("YEz_Jzi^CW.)UyVwN<I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YEz_Jzi^CW.)UyVwN<I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-76), (byte)124}, byteArray0);
      assertNotNull(byteSequence0);
      
      byte byte0 = byteSequence0.readByte();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-76), (byte)124}, byteArray0);
      assertEquals((byte)0, byte0);
      
      int int0 = byteSequence0.read();
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-76), (byte)124}, byteArray0);
      assertEquals(180, int0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-76), (byte)124}, byteArray0);
      assertNotNull(string0);
      assertEquals("iushr", string0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-76), (byte)124}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      // Undeclared exception!
      try { 
        constantPool0.getConstantString((-41), (byte) (-76));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)32, (byte)118, (byte)104}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte)118, (byte)104}, byteArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = Utility.compactClassName("<init>");
      assertNotNull(string1);
      assertEquals("<init>", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean2 = Utility.isJavaIdentifierPart('W');
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)32, (byte)118, (byte)104}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      int int0 = byteSequence1.readUnsignedShort();
      assertEquals(2, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)32, (byte)118, (byte)104}, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(8310, int0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string2 = Utility.printArray((Object[]) null);
      assertNull(string2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)32, 220);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-57);
      byteArray0[4] = (byte)124;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-57), (byte)0, (byte)0, (byte)124}, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-67);
      byteArray1[1] = (byte) (-67);
      byteArray1[2] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-57), (byte)0, (byte)0, (byte)124}, byteArray0);
      assertNotNull(byteSequence0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(0, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-57), (byte)0, (byte)0, (byte)124}, byteArray0);
      assertNotNull(string0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(constantPool0, constantPool1);
      assertEquals("ifnonnull\t\t#-14592", string0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(constantPool0.equals((Object)constantPool1));
      
      try { 
        Utility.methodSignatureArgumentTypes("ifnonnull\t\t#-14592", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnonnull\t\t#-14592
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-q?<TMyAq_%");
      assertFalse(boolean0);
      
      String string0 = Utility.replace("-q?<TMyAq_%", "-q?<TMyAq_%", "-q?<TMyAq_%");
      assertNotNull(string0);
      assertEquals("-q?<TMyAq_%", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)17, (byte)87, (byte)87, (byte)87, (byte)63}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1786, (byte)63);
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(1786, constantFieldref0.getClassIndex());
      assertEquals(63, constantFieldref0.getNameAndTypeIndex());
      assertNotNull(constantFieldref0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)87, (int) (byte)87);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "invokestatic");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "invokestatic");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "boolean");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("sipush\t\t0", string0);
      
      short short0 = Utility.searchOpcode("boolean");
      assertEquals((short) (-1), short0);
      
      short short1 = Utility.searchOpcode("invokestatic");
      assertEquals((short)184, short1);
      assertFalse(short1 == short0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "P99Uo[d[|{";
      try { 
        Utility.methodSignatureReturnType("P99Uo[d[|{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P99Uo[d[|{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      objectArray0[2] = object0;
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      String string1 = Pattern.quote("<init>");
      assertNotNull(string1);
      assertEquals("\\Q<init>\\E", string1);
      assertFalse(string1.equals((Object)string0));
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)111;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 386, 55);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-71);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)47, (int) (byte) (-71));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = Utility.convertString("N");
      assertNotNull(string0);
      assertEquals("N", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)111;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 196, (int) (byte)111);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)125;
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)88;
      byteArray1[1] = (byte)88;
      byteArray1[2] = (byte)88;
      byteArray1[3] = (byte)18;
      byteArray1[4] = (byte)125;
      String string0 = Utility.fillup("monitorenter", (byte)18, false, 'L');
      assertNotNull(string0);
      assertEquals("LLLLLLmonitorenter", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-92), (byte) (-78), (byte)0, (byte)125, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("LLLLLLmonitorenter", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LLLLLLmonitorenter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "castore");
      assertFalse(boolean0);
      
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)30;
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-122), (int) (byte) (-80));
      assertEquals(0, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-80), (byte)30}, byteArray0);
      assertNotNull(string0);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("0:    nop\n1:    areturn\n2:    lload_0\n", string0);
      assertFalse(constantPool1.equals((Object)constantPool0));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      String string1 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string1);
      assertEquals("<init>", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.convertString("<init>");
      assertNotNull(string2);
      assertEquals("<init>", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)38}, byteArray0);
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)38}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(140, 2882);
      assertEquals(140, constantFieldref0.getClassIndex());
      assertEquals(2882, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertNotNull(constantFieldref0);
      
      constantFieldref0.setClassIndex(2882);
      assertEquals(2882, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(2882, constantFieldref0.getClassIndex());
      
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantFieldref0;
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      
      String string3 = Utility.codeToString(byteArray0, constantPool0, (-1250), (int) (byte)38);
      assertEquals(4, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)38}, byteArray0);
      assertNotNull(string3);
      assertEquals("0:    dload_0\n", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.commons.io.filefilter.CanWriteFileFilter", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.commons.io.filefilter.CanWriteFileFilter'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      byteArray0[3] = (byte)24;
      Constant[] constantArray0 = new Constant[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte)0, (byte)24, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      int int0 = Pattern.LITERAL;
      assertEquals(16, int0);
      
      String string0 = Utility.classOrInterface((byte) (-62));
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      String string1 = Utility.printArray((Object[]) constantArray0);
      assertNotNull(string1);
      assertEquals("{null, null, null}", string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int1 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte)0, (byte)24, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(24, int1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(int1 == int0);
      
      byteArray0[1] = (byte)24;
      byteArray1[1] = (byte)106;
      byteArray1[3] = (byte) (-62);
      byteArray0[7] = (byte)106;
      byteArray1[5] = (byte) (-121);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)24, 185);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = Constants.ITEM_NAMES;
      assertNotNull(stringArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        Utility.methodSignatureReturnType("MKRRN,&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MKRRN,&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      String string1 = Pattern.quote("<init>");
      assertNotNull(string1);
      assertEquals("\\Q<init>\\E", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "Kvfol[o";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Kvfol[o", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Kvfol[o'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)7, (byte)45, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)7, (byte)45, (byte)0}, byteArray0);
      assertEquals(7, int0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)7, (byte)45, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("aload_3", string0);
      
      int int1 = Utility.setBit((byte)45, (byte)7);
      assertEquals(173, int1);
      assertFalse(int1 == int0);
      
      String string1 = Utility.replace(">@(_`f-7mrbJ$", ">@(_`f-7mrbJ$", "[#i{$=[/q0H!>sA<e'");
      assertNotNull(string1);
      assertEquals("[#i{$=[/q0H!>sA<e'", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.compactClassName("lr?\"", true);
      assertNotNull(string2);
      assertEquals("lr?\"", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = Utility.replace("lr?\"", "~92lkT", "goto_w");
      assertNotNull(string3);
      assertEquals("lr?\"", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "aload_3";
      stringArray0[1] = "[#i{$=[/q0H!>sA<e'";
      stringArray0[2] = "saload";
      stringArray0[3] = "4";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("breakpoint", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [#i{$=[/q0H!>sA<e'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = Utility.compactClassName("lushr", true);
      assertNotNull(string0);
      assertEquals("lushr", string0);
      
      String string1 = Utility.classOrInterface(97);
      assertNotNull(string1);
      assertEquals("class", string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte)67;
      byteArray0[8] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-8), (byte)86, (byte) (-34), (byte)60, (byte)55, (byte)75, (byte)30, (byte)67, (byte) (-117)}, byteArray0);
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1100), (byte)75);
      assertEquals(75, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((-1100), constantInterfaceMethodref0.getClassIndex());
      assertNotNull(constantInterfaceMethodref0);
      
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(56892, constantNameAndType0.getSignatureIndex());
      assertEquals(63574, constantNameAndType0.getNameIndex());
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-8), (byte)86, (byte) (-34), (byte)60, (byte)55, (byte)75, (byte)30, (byte)67, (byte) (-117)}, byteArray0);
      assertNotNull(constantNameAndType0);
      
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("lushr");
      assertEquals("lushr", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      assertEquals("lushr", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("lushr", constantUtf8_1.getBytes());
      assertNotNull(constantUtf8_1);
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      String string2 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantPool1.getLength());
      assertEquals(6, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-8), (byte)86, (byte) (-34), (byte)60, (byte)55, (byte)75, (byte)30, (byte)67, (byte) (-117)}, byteArray0);
      assertNotNull(string2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("lstore\t\t%75", string2);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = Utility.replace("0:    moni", "The size must be non-negative", "The size must be non-negative");
      assertNotNull(string0);
      assertEquals("0:    moni", string0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0:    moni");
      assertFalse(boolean0);
      
      String string1 = Utility.convertString("The size must be non-negative");
      assertNotNull(string1);
      assertEquals("The size must be non-negative", string1);
      assertFalse(string1.equals((Object)string0));
      
      try { 
        Utility.typeOfSignature("0:    moni");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    moni
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockFile mockFile0 = new MockFile("g[+?IM<{Q`hjGg@A'Sc");
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("g[+?IM<{Q`hjGg@A'Sc", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("g[+?IM<{Q`hjGg@A'Sc", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("g[+?IM<{Q`hjGg@A'Sc", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("g[+?IM<{Q`hjGg@A'Sc", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) "g[+?IM<{Q`hjGg@A'Sc";
      objectArray0[4] = (Object) mockFile0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf("g[+?IM<{Q`hjGg@A'Sc", objectArray0);
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("g[+?IM<{Q`hjGg@A'Sc", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(19L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("g[+?IM<{Q`hjGg@A'Sc", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      Utility.printArray(printStream0, objectArray0);
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("g[+?IM<{Q`hjGg@A'Sc", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(212L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("g[+?IM<{Q`hjGg@A'Sc", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)64;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = Utility.typeOfSignature("[w6'BTx<aT");
      assertEquals((byte)13, byte0);
      
      String string0 = Utility.format(2879, (byte)64, true, '[');
      assertNotNull(string0);
      assertEquals("2879[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<mI7o<8`'/K");
      assertFalse(boolean0);
      
      byte byte0 = Utility.typeOfSignature("*S|3bA<2`CC}v");
      assertEquals((byte)9, byte0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.compactClassName("<mI7o<8`'/K", false);
      assertNotNull(string0);
      assertEquals("<mI7o<8`'.K", string0);
      
      String string1 = Utility.printArray((Object[]) null, false);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Jl q{&>^l/y5~");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte byte0 = Utility.typeOfSignature("Jl q{&>^l/y5~");
      assertEquals((byte)11, byte0);
      
      try { 
        Utility.methodSignatureArgumentTypes("K3Sx[+MH!u1-{XsvD", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K3Sx[+MH!u1-{XsvD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-76);
      byteArray0[0] = (byte)110;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "b";
      String string1 = Utility.replace(", handler_pc = ", ", handler_pc = ", "b");
      assertNotNull(string1);
      assertEquals("b", string1);
      assertTrue(string1.equals((Object)string0));
      
      try { 
        Utility.typeOfSignature("X=c^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X=c^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)85;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)70, (byte)0}, byteArray1);
      assertNotNull(byteSequence0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)70, (byte)0}, byteArray1);
      assertNotNull(string0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("fstore_3", string0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      try { 
        byteSequence0.readUTF();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = Pattern.UNIX_LINES;
      assertEquals(1, int0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(75);
      assertEquals(75, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-58);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-58), 1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((byte)33);
      assertNotNull(zoneOffset0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)33;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)33, (int) (byte)33);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-76);
      byte byte0 = (byte)110;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = " el\"GtCQS(wO7T~mJ^";
      String string1 = Utility.replace(", ", "java.lang.LJ;V", " el\"GtCQS(wO7T~mJ^");
      assertNotNull(string1);
      assertEquals(", ", string1);
      assertFalse(string1.equals((Object)string0));
      
      try { 
        Utility.typeOfSignature("N1=El/ +C6IM]vG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N1=El/ +C6IM]vG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      int int0 = 3011;
      String string0 = Utility.compactClassName("B7");
      assertNotNull(string0);
      assertEquals("B7", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string1 = Utility.signatureToString("B7");
      assertNotNull(string1);
      assertEquals("byte", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.format(3011, 3011, true, '?');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = "!/k]";
      try { 
        Utility.typeOfSignature("!/k]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /k]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      String string0 = Utility.format(1151, 4222, true, 'n');
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName(string0, "transienttransient", false);
      assertNotNull(string1);
      
      try { 
        Utility.typeOfSignature(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1151nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byteArray0[1] = (byte) (-106);
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-106), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      boolean boolean4 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      
      boolean boolean5 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      
      try { 
        Utility.typeOfSignature(", npairs = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , npairs = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object[] objectArray0 = new Object[15];
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[0] = object0;
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)111;
      byte byte0 = Utility.typeOfSignature("B7");
      assertEquals((byte)8, byte0);
      
      try { 
        Utility.methodSignatureArgumentTypes("java.lang.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte byte0 = Constants.ATTR_CONSTANT_VALUE;
      assertEquals((byte)1, byte0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-125);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      try { 
        Utility.typeOfSignature("%7NHD3{K.k7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %7NHD3{K.k7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      try { 
        Utility.typeOfSignature("\"2.ihk^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"2.ihk^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "?s{6: `+A_";
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string1);
      assertEquals("<clinit>", string1);
      assertFalse(string1.equals((Object)string0));
      
      try { 
        Utility.typeOfSignature("<clinit>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <clinit>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      String string0 = Utility.replace("fy=-aM?'^m[-u(hi?", "fy=-aM?'^m[-u(hi?", ", low = ");
      assertNotNull(string0);
      assertEquals(", low = ", string0);
      
      byte byte0 = Utility.typeOfSignature("CC?,W");
      assertEquals((byte)5, byte0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("N1=El/ +C6IM]vG", "lHfj~{H/iCTW|", "8N;k<}lwg/swkDr", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N1=El/ +C6IM]vG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      int int0 = Pattern.DOTALL;
      assertEquals(32, int0);
      
      String string0 = Utility.classOrInterface((byte)4);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      String string1 = Utility.printArray((Object[]) constantArray0);
      assertNotNull(string1);
      assertEquals("{null, null, null}", string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)106, (byte)106}, byteArray0);
      assertNotNull(byteSequence0);
      
      byte byte0 = byteSequence0.readByte();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)106, (byte)106}, byteArray0);
      assertEquals((byte)106, byte0);
      
      String string2 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string2);
      assertEquals("<clinit>", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)60, (int) (byte)106);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)92;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)86, (byte) (-75), (byte)92}, byteArray0);
      assertFalse(boolean0);
      
      String string0 = Utility.replace("-q?<TMyAq_%", "-q?<TMyAq_%", "vFVQ$$rv[uba`#>vj+(");
      assertNotNull(string0);
      assertEquals("vFVQ$$rv[uba`#>vj+(", string0);
      
      int int0 = 130;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = "fy=-aM?'^m[-u(hi?";
      String string2 = Utility.replace("fy=-aM?'^m[-u(hi?", "vFVQ$$rv[uba`#>vj+(", "vFVQ$$rv[uba`#>vj+(");
      assertNotNull(string2);
      assertEquals("fy=-aM?'^m[-u(hi?", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = "N1=El/ +C6IM]vG";
      try { 
        Utility.typeOfSignature("-q?<TMyAq_%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -q?<TMyAq_%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)110;
      String string0 = Utility.replace("Illegal type: ", "fy=-aM?'^m[-u(hi?", "Illegal type: ");
      assertNotNull(string0);
      assertEquals("Illegal type: ", string0);
      
      byte byte0 = Utility.typeOfSignature("Illegal type: ");
      assertEquals((byte)10, byte0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("N1=El/ +C6IM]vG", "p(DCQ\"JV*s 7.w)uTo", "java.lang.transient", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N1=El/ +C6IM]vG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      
      try { 
        Utility.typeOfSignature("'S&x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'S&x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Utility.typeOfSignature("G\bN25(rYJs3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G\bN25(rYJs3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = Pattern.COMMENTS;
      assertEquals(4, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)26;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2117, (int) (byte)26);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      String string1 = Utility.compactClassName("<illegal opcode>");
      assertNotNull(string1);
      assertEquals("<illegal opcode>", string1);
      assertTrue(string1.equals((Object)string0));
      
      MockFile mockFile0 = new MockFile("<illegal opcode>");
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("<illegal opcode>", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("<illegal opcode>", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)40;
      byteArray0[0] = (byte)40;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)40, 170);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)58;
      byteArray0[2] = (byte)58;
      byteArray0[2] = (byte) (-73);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)58, (int) (byte)58);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)4, (byte)42, (byte)4}, byteArray0);
      assertNotNull(byteSequence0);
      
      boolean boolean0 = byteSequence0.markSupported();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)4, (byte)42, (byte)4}, byteArray0);
      assertTrue(boolean0);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)4, (byte)42, (byte)4}, byteArray0);
      assertEquals(4, int0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = "class";
      String string1 = Utility.replace("", "class", "class");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      try { 
        Utility.typeOfSignature("+{kl|</");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {kl|</
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)66}, byteArray0);
      assertNotNull(string0);
      assertEquals("B", string0);
      
      MockFile mockFile0 = new MockFile("B", "B");
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/B", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("B", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/B/B", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertNotNull(mockFile0);
      
      String string1 = Utility.compactClassName("B", "B", false);
      assertNotNull(string1);
      assertEquals("B", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.compactClassName("[w6'BTx<am");
      assertNotNull(string2);
      assertEquals("[w6'BTx<am", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = Utility.getSignature("B");
      assertNotNull(string3);
      assertEquals("LB;", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)66}, byteArray0);
      assertNotNull(string4);
      assertEquals("42", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      byte byte0 = Utility.typeOfSignature("LB;");
      assertEquals((byte)14, byte0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)66}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string5 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)66}, byteArray0);
      assertNotNull(string5);
      assertEquals("lstore_3", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      String string0 = "8E(C yVP@Gu";
      try { 
        Utility.typeOfSignature("8E(C yVP@Gu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8E(C yVP@Gu
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)110;
      String string0 = Utility.replace("U2Ft(9!z76^x!i", "fy=-aM?'^m[-u(hi?", "U2Ft(9!z76^x!i");
      assertNotNull(string0);
      assertEquals("U2Ft(9!z76^x!i", string0);
      
      String string1 = "N1=El/ +C6IM]vG";
      try { 
        Utility.typeOfSignature("U2Ft(9!z76^x!i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U2Ft(9!z76^x!i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = object1;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      long long0 = byteSequence0.skip((-2250L));
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(0L, long0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(1, byteSequence0.getIndex());
      assertNotNull(string0);
      assertEquals("fcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      try { 
        Utility.typeOfSignature("W'D/BgTyh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W'D/BgTyh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = "u-jI;";
      String string1 = Utility.compactClassName("u-jI;");
      assertNotNull(string1);
      assertEquals("u-jI;", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.signatureToString("D12BClB85yjF");
      assertNotNull(string2);
      assertEquals("double", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)57;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)4, (byte)57, (byte)0, (byte)0, (byte)42, (byte)4}, byteArray0);
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", catch_type = ");
      assertFalse(boolean0);
      
      String string0 = Utility.getSignature(", catch_type = ");
      assertNotNull(string0);
      assertEquals("L,;", string0);
      
      byte byte0 = byteSequence0.readByte();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)4, (byte)57, (byte)0, (byte)0, (byte)42, (byte)4}, byteArray0);
      assertEquals((byte)4, byte0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)4, (byte)57, (byte)0, (byte)0, (byte)42, (byte)4}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      boolean boolean1 = false;
      long long0 = byteSequence1.skip(36);
      assertEquals(6, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)4, (byte)57, (byte)0, (byte)0, (byte)42, (byte)4}, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(6L, long0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      byte[] byteArray1 = Utility.decode(", catch_type = ", false);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = byteSequence1.read();
      assertEquals(6, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)4, (byte)57, (byte)0, (byte)0, (byte)42, (byte)4}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals((-1), int0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string1 = Utility.getSignature("L,;");
      assertNotNull(string1);
      assertEquals("LL,;;", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.signatureToString("LL,;;");
      assertNotNull(string2);
      assertEquals("L,", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = Utility.printArray((Object[]) null, false, true);
      assertNull(string3);
      
      String string4 = Utility.compactClassName("org.apache.commons.io.filefilter.SuffixFileFilter");
      assertNotNull(string4);
      assertEquals("org.apache.commons.io.filefilter.SuffixFileFilter", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      // Undeclared exception!
      Utility.codeToString(byteArray1, constantPool0, (-224), (int) (byte)4);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)99;
      byteArray0[7] = (byte) (-109);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)99, (-9));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = Utility.compactClassName("CgQi96N~\"*N?1");
      assertNotNull(string0);
      assertEquals("CgQi96N~\"*N?1", string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string1 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string1);
      assertEquals("<init>", string1);
      assertFalse(string1.equals((Object)string0));
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)87, 54);
      assertEquals(87, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(54, constantFieldref0.getNameAndTypeIndex());
      assertNotNull(constantFieldref0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      long long0 = byteSequence0.skip((-616L));
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, long0);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string2);
      assertEquals("nop", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = Utility.methodSignatureReturnType("CgQi96N~\"*N?1");
      assertNotNull(string3);
      assertEquals("char", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object1;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)19;
      objectArray0[0] = (Object) (byte) (-12);
      objectArray0[1] = (Object) (byte) (-12);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-12), (int) (byte) (-12));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-114);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-114), (byte)62}, byteArray0);
      assertNotNull(byteSequence0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, (-134));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("laload", false);
      assertArrayEquals(new byte[] {(byte)108, (byte)97, (byte)108, (byte)111, (byte)97, (byte)100}, byteArray0);
      assertNotNull(byteArray0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('M');
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)108, (byte)97, (byte)108, (byte)111, (byte)97, (byte)100}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)108, (byte)97, (byte)108, (byte)111, (byte)97, (byte)100}, byteArray0);
      assertNotNull(string0);
      assertEquals("idiv", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-125), (byte) (-125)}, byteArray0);
      assertNotNull(byteSequence0);
      
      byteSequence0.mark(24);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-125), (byte) (-125)}, byteArray0);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-125), (byte) (-125)}, byteArray0);
      assertEquals(131, int0);
      
      byteSequence0.reset();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-125), (byte) (-125)}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-125), (byte) (-125)}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("short");
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16384, (int) (byte) (-20));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-56);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-56), (byte)0, (byte) (-56), (byte) (-103), (byte) (-56), (byte)62, (byte)39}, byteArray0);
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-56), (byte)0, (byte) (-56), (byte) (-103), (byte) (-56), (byte)62, (byte)39}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      int int0 = byteSequence1.read();
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-56), (byte)0, (byte) (-56), (byte) (-103), (byte) (-56), (byte)62, (byte)39}, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(200, int0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      byteSequence0.reset();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-56), (byte)0, (byte) (-56), (byte) (-103), (byte) (-56), (byte)62, (byte)39}, byteArray0);
      assertNotSame(byteSequence0, byteSequence1);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("pu4tfield");
      assertNotNull(mockPrintWriter0);
      
      short short0 = byteSequence1.readShort();
      assertEquals(3, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-56), (byte)0, (byte) (-56), (byte) (-103), (byte) (-56), (byte)62, (byte)39}, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals((short)200, short0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      String string0 = mockHijrahDate0.getMockedClassName();
      assertNotNull(string0);
      assertEquals("java.time.chrono.HijrahDate", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 26, (int) (byte)62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$@<,@Uiskz!7490Vl}");
      assertNotNull(mockPrintWriter0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ZoneRules zoneRules0 = zoneOffset0.getRules();
      assertNotNull(zoneRules0);
      
      int int0 = zoneOffset0.getTotalSeconds();
      assertEquals(0, int0);
      
      String string0 = Utility.compactClassName("$@<,@Uiskz!7490Vl}", false);
      assertNotNull(string0);
      assertEquals("$@<,@Uiskz!7490Vl}", string0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)85;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Y5g[gW.|f>*z,");
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[18];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[10] = (byte)94;
      byteArray1[1] = (byte)73;
      byteArray1[12] = (byte)85;
      byteArray1[3] = (byte)40;
      byteArray1[4] = (byte)73;
      byteArray1[5] = (byte)85;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      int int0 = Pattern.LITERAL;
      assertEquals(16, int0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y5g[gW.|f>*z,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y5g[gW.|f>*z,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte) (-7);
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3");
      assertFalse(boolean0);
      
      byteArray0[1] = (byte)81;
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
      
      String string0 = Pattern.quote("3");
      assertNotNull(string0);
      assertEquals("\\Q3\\E", string0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('\"');
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-66), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-66), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence1, constantPool0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-66), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals("arraylength", string0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      // Undeclared exception!
      try { 
        constantPool0.getConstantString(670, (byte) (-66));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-74);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)5, (byte)35);
      assertEquals(5, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(35, constantFieldref0.getNameAndTypeIndex());
      assertNotNull(constantFieldref0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 36, (int) (byte)101);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = Utility.compactClassName("breakpoint");
      assertNotNull(string0);
      assertEquals("breakpoint", string0);
      
      MockFile mockFile0 = new MockFile("double", "<");
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("<", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/double", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/double/<", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "double");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-60);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-63), 372);
      assertArrayEquals(new byte[] {(byte) (-60)}, byteArray0);
      assertNotNull(string1);
      assertEquals("0:    wide\t(wide)\n", string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("breakpoint");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `breakpoint'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = Pattern.COMMENTS;
      assertEquals(4, int0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      try { 
        Utility.typeOfSignature("7L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      ConstantPool constantPool0 = null;
      int int0 = (-398);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 60, (-398));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      assertNotNull(hijrahDate0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "(RZ~`mQu0W}x?");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = Pattern.UNICODE_CASE;
      assertEquals(64, int0);
      
      int int1 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)90;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-111), (int) (byte) (-111));
      assertArrayEquals(new byte[] {(byte)90, (byte)33, (byte)90}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    dup_x1\n1:    lload_3\n2:    dup_x1\n", string0);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('k');
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte byte0 = Constants.ATTR_CONSTANT_VALUE;
      assertEquals((byte)1, byte0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-99), (byte) (-99)}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      String string1 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string1);
      assertEquals("<init>", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<init>");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 45, (int) (byte)70);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".\"rv0qb:6h9dExQwF)");
      assertFalse(boolean0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-36));
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((-36), constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      try { 
        Utility.typeOfSignature(".\"rv0qb:6h9dExQwF)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .\"rv0qb:6h9dExQwF)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis((-361L));
      String string0 = Utility.getSignature("pa%alY~0");
      assertNotNull(string0);
      assertEquals("Lpa%alY~0;", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)32;
      byte byte0 = (byte)103;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)81;
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      HijrahDate hijrahDate0 = MockHijrahDate.now((ZoneId) zoneOffset0);
      assertNotNull(hijrahDate0);
      
      HijrahDate hijrahDate1 = MockHijrahDate.now();
      assertNotNull(hijrahDate1);
      assertNotSame(hijrahDate1, hijrahDate0);
      assertTrue(hijrahDate1.equals((Object)hijrahDate0));
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 78, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = Utility.compactClassName("Qi96NU\"*N?1");
      assertNotNull(string0);
      assertEquals("Qi96NU\"*N?1", string0);
      
      String string1 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string1);
      assertEquals("<init>", string1);
      assertFalse(string1.equals((Object)string0));
      
      try { 
        Utility.methodSignatureReturnType("Qi96NU\"*N?1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qi96NU\"*N?1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)56, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = Utility.compactClassName("<init>");
      assertNotNull(string1);
      assertEquals("<init>", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = byteSequence0.readInt();
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)56, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3670016, int0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)56, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)56, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence2);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence3.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)56, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence3);
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)56;
      byteArray1[1] = (byte)56;
      byteArray1[4] = (byte)56;
      ByteSequence byteSequence4 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence4.getIndex());
      assertArrayEquals(new byte[] {(byte)56, (byte)56, (byte)0, (byte)0, (byte)56}, byteArray1);
      assertNotNull(byteSequence4);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence4.equals((Object)byteSequence0));
      assertFalse(byteSequence4.equals((Object)byteSequence1));
      assertFalse(byteSequence4.equals((Object)byteSequence2));
      assertFalse(byteSequence4.equals((Object)byteSequence3));
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string2 = Utility.printArray(objectArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)56, (int) (byte)56);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte byte0 = Constants.ATTR_CONSTANT_VALUE;
      assertEquals((byte)1, byte0);
      
      String string1 = Utility.replace("<clinit>", "<clinit>", "<clinit>");
      assertNotNull(string1);
      assertEquals("<clinit>", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-121), (byte) (-121)}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-121), (byte) (-121)}, byteArray0);
      assertNotNull(string2);
      assertEquals("i2d", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = Utility.convertString("i2d");
      assertNotNull(string3);
      assertEquals("i2d", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getfield");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<illegal opcode>");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string1 = Utility.replace("getfield", "<illegal opcode>", "bipush");
      assertNotNull(string1);
      assertEquals("getfield", string1);
      assertFalse(string1.equals((Object)string0));
      
      byte byte0 = Utility.typeOfSignature("T~B{33<fn{1ex");
      assertEquals((byte)14, byte0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("<illegal opcode>", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<illegal opcode>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "java.lang.B7";
      String string1 = Utility.replace("java.lang.B7", "java.lang.B7", "java.lang.B7");
      assertNotNull(string1);
      assertEquals("java.lang.B7", string1);
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = (byte) (-72);
      byteArray0[0] = (byte) (-72);
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-72), (byte)0, (byte)0, (byte)114, (byte)122, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      int int0 = 2337;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-72), 2337);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = Utility.replace("8", "8", "8");
      assertNotNull(string0);
      assertEquals("8", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = Utility.convertString("8");
      assertNotNull(string1);
      assertEquals("8", string1);
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte) (-89);
      String string2 = Utility.printArray((Object[]) null);
      assertNull(string2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 200, 546);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte) (-30);
      byteArray0[6] = (byte)60;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)124, 4, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      String string1 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string1);
      assertEquals("<init>", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.compactClassName("<init>");
      assertNotNull(string2);
      assertEquals("<init>", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)84, (byte) (-108), (byte)3}, byteArray0);
      assertNotNull(byteSequence0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)84, (byte) (-108), (byte)3}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)84, (byte) (-108), (byte)3}, byteArray0);
      assertNotNull(byteSequence2);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string3 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)3, (int) (byte) (-108));
      assertEquals(2, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)84, (byte) (-108), (byte)3}, byteArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = ";A7Mjm?K";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("<illegal type>", ";A7Mjm?K", ";A7Mjm?K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal type>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = Utility.isSet(4813, 220);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte) (-44);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)89, (int) (byte) (-40));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      String string1 = Utility.replace("Fj0`MD$m", "Code(max_stack = ", "{java.lang.Object@31f6ee84, java.lang.Object@55cc305c, java.lang.Object@66cc7d22}");
      assertNotNull(string1);
      assertEquals("Fj0`MD$m", string1);
      assertFalse(string1.equals((Object)string0));
      
      try { 
        Utility.typeOfSignature("QJ]QTe5D$e-wg0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QJ]QTe5D$e-wg0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)123;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "[fB-il";
      String string1 = Utility.compactClassName("[fB-il");
      assertNotNull(string1);
      assertEquals("[fB-il", string1);
      assertTrue(string1.equals((Object)string0));
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-68), (byte)123}, byteArray0);
      assertNotNull(byteSequence0);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)123;
      byteArray1[1] = (byte) (-45);
      byteArray1[2] = (byte)123;
      byteArray1[3] = (byte)98;
      byteArray1[4] = (byte) (-68);
      byteArray1[5] = (byte) (-68);
      byteArray1[6] = (byte) (-75);
      byteArray1[7] = (byte) (-45);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 923, 188);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)100;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-886), 125);
      assertArrayEquals(new byte[] {(byte) (-115), (byte)100, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string1);
      assertEquals("0:    f2d\n1:    isub\n2:    nop\n3:    nop\n", string1);
      
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = Pattern.UNIX_LINES;
      assertEquals(1, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      assertNotNull(zoneOffset0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)117;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)117, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 16, 176);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("c,Awqrke^!N");
      assertNotNull(mockPrintWriter0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      assertNotNull(hijrahDate0);
      
      ConstantClass constantClass0 = new ConstantClass(20);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(20, constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      HijrahDate hijrahDate1 = MockHijrahDate.now();
      assertNotNull(hijrahDate1);
      assertNotSame(hijrahDate1, hijrahDate0);
      assertTrue(hijrahDate1.equals((Object)hijrahDate0));
      
      HijrahDate hijrahDate2 = MockHijrahDate.now();
      assertNotNull(hijrahDate2);
      assertNotSame(hijrahDate2, hijrahDate1);
      assertNotSame(hijrahDate2, hijrahDate0);
      assertTrue(hijrahDate2.equals((Object)hijrahDate0));
      assertTrue(hijrahDate2.equals((Object)hijrahDate1));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), 171);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dup2_x1
         // 1:    lload\t\t%182
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("X(R6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X(R6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 775;
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-63);
      byteArray1[2] = (byte) (-63);
      byteArray1[3] = (byte) (-63);
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte) (-63);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-63), (byte) (-63), (byte) (-63), (byte)1, (byte) (-63)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      try { 
        Utility.typeOfSignature("java.lang.returnreturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.returnreturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-71);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-71));
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((-71), constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-71), (int) (byte) (-71));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ai_pKf/aDRJqT!");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-77);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-77), (byte)0, (byte)102, (byte)102}, byteArray0);
      assertNotNull(byteSequence0);
      
      long long0 = byteSequence0.skip((byte) (-77));
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-77), (byte)0, (byte)102, (byte)102}, byteArray0);
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-73), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte byte0 = Utility.typeOfSignature("Deprecated");
      assertEquals((byte)7, byte0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-66);
      byteArray0[6] = (byte) (-66);
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)7, (byte) (-66), (byte) (-66), (byte)0, (byte)117, (byte) (-66), (byte)7}, byteArray0);
      assertNotNull(byteSequence0);
      
      boolean boolean2 = Utility.isSet(1, (byte)117);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string1 = Utility.compactClassName("aeR18GDil4f");
      assertNotNull(string1);
      assertEquals("aeR18GDil4f", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = true;
      try { 
        Utility.decode("SRLZ!{qvjG+&$ .", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = Utility.convertString("<illegal opcode>");
      assertNotNull(string1);
      assertEquals("<illegal opcode>", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string2 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string2);
      assertEquals("<init>", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = Utility.compactClassName("private pr");
      assertNotNull(string3);
      assertEquals("private pr", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = Utility.getSignature("<illegal opcode>");
      assertNotNull(string4);
      assertEquals("L<illegal;", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-99);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)71, (byte)71);
      assertEquals(71, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(71, constantFieldref0.getClassIndex());
      assertNotNull(constantFieldref0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)71, (-2652));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-103)}, byteArray1);
      assertNotNull(byteSequence0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteSequence0.mark((-1178));
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-103)}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)64;
      ConstantPool constantPool0 = null;
      int int0 = (-398);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 60, (-398));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      String string1 = Utility.signatureToString("FULL", false);
      assertNotNull(string1);
      assertEquals("float", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string2);
      assertEquals("<illegal opcode>", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-777), (-777));
      assertTrue(boolean0);
      
      String string0 = "Sw";
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 184, 205);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[25];
      byteArray0[3] = (byte)126;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)126;
      byteArray0[0] = (byte)126;
      byteArray0[5] = (byte)126;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string0);
      assertEquals("iand", string0);
      
      try { 
        Utility.methodSignatureArgumentTypes("iand");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iand
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "`5%#gHbo^ts>=/Evd9";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`5%#gHbo^ts>=/Evd9");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`5%#gHbo^ts>=/Evd9");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = Utility.decode("`5%#gHbo^ts>=/Evd9", false);
      assertNotNull(byteArray0);
      
      ConstantPool constantPool0 = null;
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Illegally nested brackets:");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      int int0 = 27;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 27, (-3736));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte byte0 = (byte)62;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)112, (byte)62, (byte)112, (byte) (-101), (byte) (-56), (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)112, (byte)62, (byte)112, (byte) (-101), (byte) (-56), (byte)0, (byte)0}, byteArray0);
      assertEquals(112, int0);
      
      byte byte1 = byteSequence0.readByte();
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)112, (byte)62, (byte)112, (byte) (-101), (byte) (-56), (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)62, byte1);
      assertTrue(byte1 == byte0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(112, (byte)62);
      assertEquals(62, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(112, constantFieldref0.getClassIndex());
      assertNotNull(constantFieldref0);
      
      int int1 = byteSequence0.readInt();
      assertEquals(6, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)112, (byte)62, (byte)112, (byte) (-101), (byte) (-56), (byte)0, (byte)0}, byteArray0);
      assertEquals(1889257472, int1);
      assertFalse(int1 == int0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 620, (-215));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("AlQ=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AlQ=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "dreturn");
      assertFalse(boolean0);
      
      byteArray0[0] = (byte) (-115);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-115)}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.close();
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-115)}, byteArray0);
      
      int int0 = byteArrayInputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-115)}, byteArray0);
      assertEquals(141, int0);
      
      boolean boolean1 = byteArrayInputStream0.markSupported();
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-115)}, byteArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-115)}, byteArray0);
      assertNotNull(string0);
      assertEquals("8d", string0);
      
      byteArrayInputStream0.close();
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-115)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 96, 96);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      int int0 = Pattern.COMMENTS;
      assertEquals(4, int0);
      
      String string1 = Utility.replace("<illegal type>", "<illegal type>", "<illegal type>");
      assertNotNull(string1);
      assertEquals("<illegal type>", string1);
      assertTrue(string1.equals((Object)string0));
      
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      assertNotNull(hijrahDate0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string2 = "g@#A6vTB*a(|)5OFY";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Z^[8");
      assertEquals("Z^[8", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      ConstantClass constantClass0 = new ConstantClass(169);
      assertEquals(169, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertNotNull(constantClass0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 114, 45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)46, (byte)105, (byte) (-70), (byte)60, (byte)58}, byteArray0);
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)46, (byte)105, (byte) (-70), (byte)60, (byte)58}, byteArray0);
      assertNotNull(string0);
      assertEquals("iaload", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte byte0 = (byte)25;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)25;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)25}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      int int0 = 96;
      byteArrayInputStream0.close();
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)25}, byteArray0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 96);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)25}, byteArray0);
      assertNotNull(bufferedInputStream0);
      
      int int1 = bufferedInputStream0.available();
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)25}, byteArray0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = bufferedInputStream0.markSupported();
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)25}, byteArray0);
      assertTrue(boolean0);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)25}, byteArray0);
      assertNotNull(dataInputStream0);
      
      ConstantPool constantPool0 = null;
      int int2 = 3093;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 96, 3093);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      int int0 = Pattern.COMMENTS;
      assertEquals(4, int0);
      
      String string1 = Utility.replace("<illegal type>", "<illegal type>", "<illegal type>");
      assertNotNull(string1);
      assertEquals("<illegal type>", string1);
      assertTrue(string1.equals((Object)string0));
      
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      assertNotNull(hijrahDate0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)18}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)85;
      byte[] byteArray1 = new byte[18];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[10] = (byte)118;
      byteArray1[3] = (byte)118;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)85, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      byte[] byteArray2 = new byte[9];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)58;
      byteArray2[1] = (byte)118;
      byteArray2[2] = (byte)123;
      byteArray2[3] = (byte)58;
      byteArray2[4] = (byte)58;
      byteArray2[5] = (byte) (-73);
      byteArray2[6] = (byte)58;
      byteArray2[7] = (byte)123;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)85, (byte)118);
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(118, constantFieldref0.getNameAndTypeIndex());
      assertEquals(85, constantFieldref0.getClassIndex());
      assertNotNull(constantFieldref0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, constantPool0, (int) (byte)118, 168);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String[] stringArray0 = Constants.ITEM_NAMES;
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-82);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-82), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-82), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-82), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = null;
      int int0 = byteSequence0.skipBytes((byte) (-82));
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-82), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 67, 200);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int int0 = (-772);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.format((-772), (-772), true, ';');
      assertNotNull(string0);
      assertEquals("-772", string0);
      
      int int1 = Pattern.COMMENTS;
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte byte0 = (byte)112;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "-772";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "-772";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = object0;
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "boolean");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4, (int) (byte)19);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      int int0 = Pattern.UNIX_LINES;
      assertEquals(1, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("c,Awqrke^!N");
      assertNotNull(mockPrintWriter0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = zoneOffset0.toString();
      assertNotNull(string0);
      assertEquals("Z", string0);
      
      int int1 = zoneOffset0.getTotalSeconds();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      HijrahDate hijrahDate0 = MockHijrahDate.now((ZoneId) zoneOffset0);
      assertNotNull(hijrahDate0);
      
      ZoneOffset zoneOffset1 = ZoneOffset.from(zoneOffset0);
      assertNotNull(zoneOffset1);
      assertSame(zoneOffset0, zoneOffset1);
      assertSame(zoneOffset1, zoneOffset0);
      
      HijrahDate hijrahDate1 = MockHijrahDate.now();
      assertNotNull(hijrahDate1);
      assertNotSame(hijrahDate1, hijrahDate0);
      assertTrue(hijrahDate1.equals((Object)hijrahDate0));
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int2 = Utility.setBit(1362, 168);
      assertEquals(1362, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2149), 168);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      int int0 = (-772);
      boolean boolean0 = true;
      char char0 = 'H';
      String string0 = Utility.format((-772), (-772), true, 'H');
      assertNotNull(string0);
      assertEquals("-772", string0);
      
      String string1 = Utility.convertString("-772");
      assertNotNull(string1);
      assertEquals("-772", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.convertString("-772");
      assertNotNull(string2);
      assertEquals("-772", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string3 = Utility.replace("-772", "-772", "-772");
      assertNotNull(string3);
      assertEquals("-772", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      MockFile mockFile0 = new MockFile("-772");
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("-772", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("-772", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotNull(mockFile0);
      
      String string4 = Pattern.quote("-772");
      assertNotNull(string4);
      assertEquals("\\Q-772\\E", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[10];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-60);
      byteArray1[1] = (byte)54;
      byte byte0 = (byte)46;
      byteArray1[2] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)54, (int) (byte)46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-71);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)102, (int) (byte) (-71), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "e9,q(4z4[L8l($";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e9,q(4z4[L8l($");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e9,q(4z4[L8l($");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = Utility.decode("e9,q(4z4[L8l($", false);
      assertNotNull(byteArray0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = "^?H<d;+iF";
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^?H<d;+iF");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)93, (int) (byte)93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-87)}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-87)}, byteArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = Utility.compactClassName("<init>");
      assertNotNull(string1);
      assertEquals("<init>", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean2 = Utility.isJavaIdentifierPart('r');
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-87)}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      int int0 = byteSequence1.readUnsignedShort();
      assertEquals(2, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-87)}, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(0, int0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string2 = Utility.printArray((Object[]) null);
      assertNull(string2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1, 176);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    nop
         // 5:    nop
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)75;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)75, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)75, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("astore_0", string0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      String string1 = Utility.convertString("java.lang.Byte");
      assertNotNull(string1);
      assertEquals("java.lang.Byte", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = Pattern.UNIX_LINES;
      assertEquals(1, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      assertNotNull(zoneOffset0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte) (-117);
      int int1 = (-1505);
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)94;
      byteArray1[1] = (byte) (-117);
      byteArray1[2] = (byte)86;
      int int2 = 747;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 747, (-3209));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-78);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)88, (byte) (-78), (byte)0, (byte)0, (byte)125}, byteArray0);
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)88, (byte) (-78), (byte)0, (byte)0, (byte)125}, byteArray0);
      assertEquals(88, int0);
      
      short short0 = byteSequence0.readShort();
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)88, (byte) (-78), (byte)0, (byte)0, (byte)125}, byteArray0);
      assertEquals((short) (-19968), short0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 186, (int) (byte) (-78));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)58;
      byteArray0[4] = (byte)67;
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (-553));
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)58, (byte)58, (byte)0, (byte)0, (byte)67}, byteArray0);
      assertNotNull(string1);
      assertEquals("0:    astore\t\t%58\n2:    nop\n3:    nop\n4:    fstore_0\n", string1);
      assertFalse(string1.equals((Object)string0));
      
      try { 
        Utility.methodSignatureArgumentTypes("0i0UqXwIg|i.##h", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0i0UqXwIg|i.##h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-95);
      String string0 = "athrow";
      byte[] byteArray1 = Utility.decode("athrow", false);
      assertArrayEquals(new byte[] {(byte)97, (byte)116, (byte)104, (byte)114, (byte)111, (byte)119}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ConstantPool constantPool0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "invokestatic");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 185, (int) (byte) (-95), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-70), (byte)40, (byte) (-70), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.readInt();
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-70), (byte)40, (byte) (-70), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1171736064), int0);
      
      int int1 = byteSequence0.read();
      assertEquals(5, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-70), (byte)40, (byte) (-70), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), (int) (byte)40);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      String string1 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string1);
      assertEquals("<init>", string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)74;
      byte byte0 = (byte) (-73);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)74, (byte) (-82), (byte)106, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1451), (byte)106);
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals((-1451), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((-1451), constantInvokeDynamic0.getClassIndex());
      assertEquals(106, constantInvokeDynamic0.getNameAndTypeIndex());
      assertNotNull(constantInvokeDynamic0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)74, (byte) (-82), (byte)106, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string2);
      assertEquals("dstore_3", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("<init>", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<init>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      assertNotNull(hijrahDate0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      HijrahDate hijrahDate1 = MockHijrahDate.now();
      assertNotNull(hijrahDate1);
      assertNotSame(hijrahDate1, hijrahDate0);
      assertTrue(hijrahDate1.equals((Object)hijrahDate0));
      
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "(");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = Utility.replace("V+wp+fv4p?T+s;", "cO0M.>2P/~c '", "(");
      assertNotNull(string0);
      assertEquals("V+wp+fv4p?T+s;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte) (-27);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)59, (byte)13, (byte) (-74), (byte) (-74), (byte)13, (byte)59, (byte)22, (byte) (-27)}, byteArray0);
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)59, (byte)13, (byte) (-74), (byte) (-74), (byte)13, (byte)59, (byte)22, (byte) (-27)}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)59, (byte)13, (byte) (-74), (byte) (-74), (byte)13, (byte)59, (byte)22, (byte) (-27)}, byteArray0);
      assertNotNull(string1);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals("istore_0", string1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence1);
      assertEquals(5, byteSequence1.getIndex());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(230077965, constantInteger0.getBytes());
      assertArrayEquals(new byte[] {(byte)59, (byte)13, (byte) (-74), (byte) (-74), (byte)13, (byte)59, (byte)22, (byte) (-27)}, byteArray0);
      assertNotNull(constantInteger0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string2 = Utility.convertString("^Z/=n_:u!.`<cYuV");
      assertNotNull(string2);
      assertEquals("^Z/=n_:u!.`<cYuV", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-69);
      byteArray1[1] = (byte) (-74);
      byteArray1[2] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-74), (int) (byte)46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = Utility.compactClassName("breakpoint");
      assertNotNull(string0);
      assertEquals("breakpoint", string0);
      
      MockFile mockFile0 = new MockFile("breakpoint", "breakpoint");
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/breakpoint/breakpoint", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals("breakpoint", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/breakpoint", mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertNotNull(mockFile0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      assertNotNull(hijrahDate0);
      
      HijrahDate hijrahDate1 = MockHijrahDate.now();
      assertNotNull(hijrahDate1);
      assertNotSame(hijrahDate1, hijrahDate0);
      assertTrue(hijrahDate1.equals((Object)hijrahDate0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-65), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-65), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-65), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string1);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals("athrow", string1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.convertString("breakpoint");
      assertNotNull(string2);
      assertEquals("breakpoint", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)66}, byteArray0);
      assertNotNull(string0);
      assertEquals("B", string0);
      
      Object[] objectArray0 = new Object[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)66}, byteArray0);
      assertNotNull(byteSequence0);
      
      int int0 = Pattern.UNICODE_CASE;
      assertEquals(64, int0);
      
      byte byte0 = byteSequence0.readByte();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)66}, byteArray0);
      assertEquals((byte)66, byte0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int1 = byteSequence0.skipBytes(1311);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)66}, byteArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      try { 
        Utility.typeOfSignature("P&B<hd@y.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P&B<hd@y.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)112, (byte)62, (byte)112, (byte) (-103), (byte) (-56), (byte)62, (byte)16}, byteArray0);
      assertNotNull(byteSequence0);
      
      byteSequence0.readFully(byteArray0);
      assertEquals(7, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)112, (byte)62, (byte)112, (byte) (-103), (byte) (-56), (byte)62, (byte)16}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)112, (byte)62, (byte)112, (byte) (-103), (byte) (-56), (byte)62, (byte)16}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      int int0 = byteSequence1.read();
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)112, (byte)62, (byte)112, (byte) (-103), (byte) (-56), (byte)62, (byte)16}, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(112, int0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      byteSequence0.reset();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)112, (byte)62, (byte)112, (byte) (-103), (byte) (-56), (byte)62, (byte)16}, byteArray0);
      assertNotSame(byteSequence0, byteSequence1);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      
      String string0 = "pu4tfield";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("pu4tfield");
      assertNotNull(mockPrintWriter0);
      
      short short0 = byteSequence1.readShort();
      assertEquals(3, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)112, (byte)62, (byte)112, (byte) (-103), (byte) (-56), (byte)62, (byte)16}, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals((short)15984, short0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      String string1 = mockHijrahDate0.getMockedClassName();
      assertNotNull(string1);
      assertEquals("java.time.chrono.HijrahDate", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = mockHijrahDate0.getMockedClassName();
      assertNotNull(string2);
      assertEquals("java.time.chrono.HijrahDate", string2);
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 24, (int) (byte)62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)121;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 108, 199);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = ";<zV<";
      try { 
        Utility.typeOfSignature(";<zV<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;<zV<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("Bm6]7)&76es3,w");
      assertNotNull(string0);
      assertEquals("Bm6]7)&76es3,w", string0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-61), (byte) (-75), (byte) (-75), (byte) (-75), (byte) (-75), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-96), (int) (byte) (-61));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(string1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("", string1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 181, 731, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-95);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-95), (byte)62, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      String string1 = Utility.methodSignatureReturnType("ZIq]f*rFWcW]$");
      assertNotNull(string1);
      assertEquals("boolean", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      int int0 = Utility.setBit((byte)35, (byte)1);
      assertEquals(35, int0);
      
      try { 
        Utility.typeOfSignature("31icv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 31icv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = ">\t";
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string1);
      assertEquals("<init>", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "byte");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = "2'X*^%m+?";
      try { 
        Utility.typeOfSignature("*9NltW`m_!(:48W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9NltW`m_!(:48W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      int int0 = Pattern.COMMENTS;
      assertEquals(4, int0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      try { 
        Utility.typeOfSignature("66B%j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 66B%j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = Pattern.COMMENTS;
      assertEquals(4, int0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-70);
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte)12;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) ';', (int) (byte)12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[2] = object1;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      String string1 = Utility.getSignature("Cm~(juPa{{v+");
      assertNotNull(string1);
      assertEquals("LCm~(juPa{{v+;", string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)94;
      byte byte0 = Utility.typeOfSignature("Cm~(juPa{{v+");
      assertEquals((byte)5, byte0);
      
      try { 
        Utility.methodSignatureReturnType("Od,;;%K]-p'YIW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Od,;;%K]-p'YIW'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      String string0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 193, 193);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte byte0 = Utility.typeOfSignature("Fl\"b7I9z/x");
      assertEquals((byte)6, byte0);
      
      String string0 = Utility.getSignature("Fl\"b7I9z/x");
      assertNotNull(string0);
      assertEquals("LFl\"b7I9z/x;", string0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('o');
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = "$l$8b$I$A$";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("7m>xG^", (String) null, "invokeinterface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7m>xG^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte byte0 = (byte)72;
      byte[] byteArray0 = new byte[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.fillup(" high =: ", (byte)72, true, '\\');
      assertNotNull(string0);
      assertEquals(" high =: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", string0);
      
      String string1 = ":'j}";
      String string2 = Utility.replace(" high =: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", ")\t", ":'j}");
      assertNotNull(string2);
      assertEquals(" high =: \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = "Ai_pKf/aDRJqT!";
      String string1 = Utility.compactClassName("Ai_pKf/aDRJqT!");
      assertNotNull(string1);
      assertEquals("Ai_pKf.aDRJqT!", string1);
      assertFalse(string1.equals((Object)string0));
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "pyxi}rEb?HO");
      assertFalse(boolean0);
      
      String string2 = Utility.replace("e*JSKreo>& =YAD", "Ai_pKf/aDRJqT!", "pyxi}rEb?HO");
      assertNotNull(string2);
      assertEquals("e*JSKreo>& =YAD", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      try { 
        Utility.typeOfSignature("4C0vJqWdd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4C0vJqWdd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.getSignature("\nException hanEler(s) = \n");
      assertNotNull(string0);
      assertEquals("LException;", string0);
      
      String string1 = Utility.signatureToString("Lreturnreturn;AV");
      assertNotNull(string1);
      assertEquals("returnreturn", string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-119);
      MockFile mockFile0 = new MockFile("\nException hanEler(s) = \n", "`'/XS.xFScH`jXW");
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/\nException hanEler(s) = \n/`'", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/\nException hanEler(s) = \n/`'/XS.xFScH`jXW", mockFile0.toString());
      assertEquals("XS.xFScH`jXW", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertNotNull(mockFile0);
      
      String string2 = Utility.compactClassName("returnreturn", "Dont call getValueChar() on a non CHAR ElementValue", false);
      assertNotNull(string2);
      assertEquals("returnreturn", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = Utility.compactClassName("Lreturnreturn;AV");
      assertNotNull(string3);
      assertEquals("Lreturnreturn;AV", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = Utility.getSignature("`'/XS.xFScH`jXW");
      assertNotNull(string4);
      assertEquals("L`'/XS/xFScH`jXW;", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-55), (byte) (-119), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string5);
      assertEquals("00 c9 89 00 00 00", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      
      try { 
        Utility.typeOfSignature("EuE(lcP?b]M:%jl,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EuE(lcP?b]M:%jl,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-108);
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1448100986), (-1688));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "castore");
      assertFalse(boolean0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-80), (byte) (-80), (byte)18}, byteArray0);
      assertNotNull(byteSequence0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)67;
      byteArray1[1] = (byte)94;
      byteArray1[2] = (byte)67;
      byteArray1[3] = (byte) (-80);
      byteArray1[4] = (byte) (-91);
      String string0 = "(Unknown attribute ";
      try { 
        Utility.typeOfMethodSignature("(Unknown attribute ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (Unknown attribute 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@v9,e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @v9,e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      int int0 = Pattern.UNICODE_CASE;
      assertEquals(64, int0);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-100), (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      byte byte1 = byteSequence0.readByte();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-100), (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)0, byte1);
      assertFalse(byte1 == byte0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-100), (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-100), (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence2);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      
      int int1 = byteSequence2.skipBytes((byte)69);
      assertEquals(4, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-100), (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteSequence2, byteSequence1);
      assertNotSame(byteSequence2, byteSequence0);
      assertEquals(4, int1);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(int1 == int0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$@C'Ly #<r;9)^y.Tt2");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      try { 
        Utility.typeOfSignature("Ozb97\"gNtLnI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ozb97\"gNtLnI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-39);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)109, (byte) (-39)}, byteArray0);
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)109, (byte) (-39)}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)109, (byte) (-39)}, byteArray0);
      assertNotNull(byteSequence2);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      
      int int0 = byteSequence1.read();
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)109, (byte) (-39)}, byteArray0);
      assertNotSame(byteSequence1, byteSequence2);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(109, int0);
      assertFalse(byteSequence1.equals((Object)byteSequence2));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      byte byte0 = byteSequence2.readByte();
      assertEquals(1, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)109, (byte) (-39)}, byteArray0);
      assertNotSame(byteSequence2, byteSequence0);
      assertNotSame(byteSequence2, byteSequence1);
      assertEquals((byte)109, byte0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(187, (byte)109);
      assertEquals(109, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(187, constantFieldref0.getClassIndex());
      assertNotNull(constantFieldref0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-870), 902);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)109, (byte) (-39)}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    ldiv\n1:    <illegal opcode>\n", string0);
      
      String string1 = Utility.convertString("0:    ldiv\n1:    <illegal opcode>\n");
      assertNotNull(string1);
      assertEquals("0:    ldiv\\n1:    <illegal opcode>\\n", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[32];
      byteArray0[0] = (byte)74;
      byteArray0[2] = (byte)74;
      byteArray0[10] = (byte)67;
      byte[] byteArray1 = new byte[10];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray0[14] = (byte) (-85);
      byteArray0[7] = (byte)74;
      byteArray1[6] = (byte)67;
      byteArray1[7] = (byte)0;
      int int0 = Pattern.UNICODE_CASE;
      assertEquals(64, int0);
      
      byte[] byteArray2 = new byte[8];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)0;
      int int1 = Utility.setBit((byte)74, (byte)0);
      assertEquals(75, int1);
      assertFalse(int1 == int0);
      
      byteArray2[1] = (byte)67;
      byteArray2[3] = (byte) (-85);
      byteArray2[4] = (byte)74;
      byteArray2[5] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, (ConstantPool) null, (int) (byte)74, (int) (byte)74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "castore");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-107);
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-107), (int) (byte) (-107));
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-107), (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    fcmpl\n1:    nop\n2:    nop\n", string0);
      
      try { 
        Utility.methodSignatureReturnType("castore");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `castore'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-126);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 884, 884, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "castore");
      assertFalse(boolean0);
      
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-67);
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "castore");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-67), (int) (byte) (-67));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      Constant[] constantArray0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte) (-86);
      byteArray0[8] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1312, (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = Pattern.COMMENTS;
      assertEquals(4, int0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-70);
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte)12;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) ';', (int) (byte)12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)66}, byteArray0);
      assertNotNull(string0);
      assertEquals("B", string0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)66}, byteArray0);
      assertFalse(boolean0);
      
      String string1 = Utility.compactClassName("B", "B", false);
      assertNotNull(string1);
      assertEquals("B", string1);
      assertTrue(string1.equals((Object)string0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string2 = "[w6'BTx<aT";
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string3 = "44Rk=";
      String string4 = Utility.replace("6,{Wr/u-LBP.1h'Joe", "[w6'BTx<aT", "B");
      assertNotNull(string4);
      assertEquals("6,{Wr/u-LBP.1h'Joe", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)66}, byteArray0);
      assertNotNull(string5);
      assertEquals("B", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      
      String string6 = Utility.getSignature("B");
      assertNotNull(string6);
      assertEquals("LB;", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)66}, byteArray0);
      assertNotNull(string7);
      assertEquals("42", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      
      try { 
        Utility.typeOfSignature("Mwu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Mwu
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)125;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)125, (int) (byte)125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-126);
      byteArray0[3] = (byte) (-126);
      byteArray0[6] = (byte) (-118);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-118);
      byteArray1[1] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-126)}, byteArray1);
      assertNotNull(byteSequence0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteSequence0.reset();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-126)}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte byte0 = byteSequence0.readByte();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-126)}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((byte) (-118), byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteSequence0.reset();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-126)}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-126)}, byteArray1);
      assertNotNull(string0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("l2d", string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ITQo=Soq", "ITQo=Soq", "l2d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ITQo=Soq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Jl q{&>^l/y5~");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(92);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(92, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)77, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)77, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("astore_2", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      int int0 = Pattern.COMMENTS;
      assertEquals(4, int0);
      
      String string0 = "ptfield";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ptfield");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)78;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4, 316);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("&jG-r*Mw|Y*J^Y\"{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &jG-r*Mw|Y*J^Y\"{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-92), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.available();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-92), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, int0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(0, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-92), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("if_icmple\t\t#0", string0);
      
      int int1 = Utility.setBit(1829, 201);
      assertEquals(1829, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "if_icmple\t\t#0");
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("zIEz6ihKyN4Tq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: zIEz6ihKyN4Tq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-119)}, byteArray0);
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-119)}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-119)}, byteArray0);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(0, int0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      
      byte byte0 = Constants.T_VOID;
      assertEquals((byte)12, byte0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(187, (byte) (-119));
      assertEquals(187, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-119), constantFieldref0.getNameAndTypeIndex());
      assertNotNull(constantFieldref0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-870), 902);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-119)}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    l2f\n", string0);
      
      String string1 = Utility.convertString("0:    nop\n1:    l2f\n");
      assertNotNull(string1);
      assertEquals("0:    nop\\n1:    l2f\\n", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-119)}, byteArray0);
      assertNotNull(string2);
      assertEquals("$A$89", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.io.filefilter.CanReadFileFilter");
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("0:    nop\n1:    l2f\n");
      assertEquals((short) (-1), short0);
      
      String string3 = Utility.codeToString(byteArray0, constantPool0, 0, 58);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-119)}, byteArray0);
      assertNotNull(string3);
      assertEquals("0:    nop\n1:    l2f\n", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = Utility.compactClassName("P5Wy+>X", false);
      assertNotNull(string4);
      assertEquals("P5Wy+>X", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[4] = object1;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      int int0 = Pattern.COMMENTS;
      assertEquals(4, int0);
      
      int int1 = Pattern.UNICODE_CASE;
      assertEquals(64, int1);
      assertFalse(int1 == int0);
      
      int int2 = Utility.setBit(2496, (byte) (-85));
      assertEquals(2496, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 50, 1344);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      MockFile mockFile0 = new MockFile("<illegal opcode>");
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals("<illegal opcode>", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("<illegal opcode>", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdir();
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals("<illegal opcode>", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("<illegal opcode>", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(boolean0);
      
      boolean boolean1 = mockFile0.setReadable(false, false);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals("<illegal opcode>", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("<illegal opcode>", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MockFile mockFile1 = new MockFile("");
      assertEquals("", mockFile1.toString());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.canRead());
      assertFalse(mockFile1.isFile());
      assertEquals("", mockFile1.getName());
      assertFalse(mockFile1.isAbsolute());
      assertTrue(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.exists());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.canExecute());
      assertEquals(0L, mockFile1.length());
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      byte byte0 = Constants.ATTR_DEPRECATED;
      assertEquals((byte)8, byte0);
      
      short short0 = Utility.searchOpcode("[w6'BTx<am");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.getSignature("<illegal opcode>");
      assertNotNull(string1);
      assertEquals("L<illegal;", string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[3] = (byte)0;
      byteArray0[3] = (byte) (-79);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)8, (byte)0, (byte)0, (byte) (-79)}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(2048, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertArrayEquals(new byte[] {(byte)8, (byte)0, (byte)0, (byte) (-79)}, byteArray0);
      assertNotNull(constantClass0);
      
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(77);
      assertNotNull(zoneOffset0);
      
      HijrahDate hijrahDate0 = MockHijrahDate.now((ZoneId) zoneOffset0);
      assertNotNull(hijrahDate0);
      
      String string2 = Utility.compactClassName("[w6'BTx<am", "goto_w", false);
      assertNotNull(string2);
      assertEquals("[w6'BTx<am", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 47, (int) (byte) (-79));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-73);
      String string1 = Utility.replace("@qJA.Ph,#V", "@qJA.Ph,#V", "<illegal opcode>");
      assertNotNull(string1);
      assertEquals("<illegal opcode>", string1);
      assertTrue(string1.equals((Object)string0));
      
      byte byte0 = Utility.typeOfSignature("Zt#");
      assertEquals((byte)4, byte0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        Utility.methodSignatureReturnType("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<illegal opcode>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-100), (byte)24, (byte)33, (byte) (-28)}, byteArray0);
      assertNotNull(byteSequence0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        Utility.methodSignatureReturnType("Nd.8eR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Nd.8eR'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = "Sw";
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)120;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 184, 205);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)121, (byte)121, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      int int0 = Pattern.LITERAL;
      assertEquals(16, int0);
      
      String string0 = Utility.classOrInterface((-1790));
      assertNotNull(string0);
      assertEquals("class", string0);
      
      short short0 = byteSequence0.readShort();
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)121, (byte)121, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((short)31097, short0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) byteSequence0;
      objectArray0[1] = (Object) byteSequence0;
      objectArray0[2] = (Object) byteSequence0;
      objectArray0[3] = (Object) byteSequence0;
      objectArray0[4] = (Object) byteSequence0;
      objectArray0[5] = (Object) "class";
      objectArray0[6] = object0;
      objectArray0[7] = (Object) "class";
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = byteSequence0.read();
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)121, (byte)121, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string2 = "6+6;%jH";
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "class");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int2 = byteSequence0.skipBytes((short)31097);
      assertEquals(7, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)121, (byte)121, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      try { 
        Utility.typeOfSignature("!=aMUAvIVe8l%[m9_N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =aMUAvIVe8l%[m9_N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      int int0 = Pattern.COMMENTS;
      assertEquals(4, int0);
      
      String string1 = Utility.getSignature("Dont call getValueByte() on a non BYTE ElementValue");
      assertNotNull(string1);
      assertEquals("LDont;", string1);
      assertFalse(string1.equals((Object)string0));
      
      MockFile mockFile0 = new MockFile("hVjm6g$Eji:y-VZ#Z[]", "instanceof");
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/hVjm6g$Eji:y-VZ#Z[]", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("instanceof", mockFile0.getName());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/hVjm6g$Eji:y-VZ#Z[]/instanceof", mockFile0.toString());
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = Utility.decode("lstore_3", false);
      assertArrayEquals(new byte[] {(byte)108, (byte)115, (byte)116, (byte)111, (byte)114, (byte)101, (byte)95, (byte)51}, byteArray0);
      assertNotNull(byteArray0);
      
      int int1 = (-401);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 60, 88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-88), (byte)0, (byte)88}, byteArray0);
      assertNotNull(byteSequence0);
      
      int int0 = Pattern.LITERAL;
      assertEquals(16, int0);
      
      int int1 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-88), (byte)0, (byte)88}, byteArray0);
      assertEquals(168, int1);
      assertFalse(int1 == int0);
      
      short short0 = byteSequence0.readShort();
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-88), (byte)0, (byte)88}, byteArray0);
      assertEquals((short)88, short0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1241, 261);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = Pattern.UNIX_LINES;
      assertEquals(1, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("c,Awqrke^!N");
      assertNotNull(mockPrintWriter0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      assertNotNull(hijrahDate0);
      
      ConstantClass constantClass0 = new ConstantClass((byte)22);
      assertEquals(22, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertNotNull(constantClass0);
      
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantClass0;
      ConstantInteger constantInteger0 = new ConstantInteger(1);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(1, constantInteger0.getBytes());
      assertNotNull(constantInteger0);
      
      constantArray0[3] = (Constant) constantInteger0;
      constantArray0[6] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)22;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)22, (int) (byte)22);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      MockFile mockFile0 = new MockFile(" (", " (");
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/ (", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/ (/ (", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertEquals(" (", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(" (", " (");
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/ (/ (", mockFile1.toString());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.canWrite());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/ (", mockFile1.getParent());
      assertFalse(mockFile1.isDirectory());
      assertEquals(" (", mockFile1.getName());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.lastModified());
      assertNotNull(mockFile1);
      assertTrue(mockFile1.equals((Object)mockFile0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)79;
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte)86;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)118, (int) (byte) (-62));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-71), (byte) (-71), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-71), (byte) (-71), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      byteSequence0.readFully(byteArray0);
      assertEquals(7, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-71), (byte) (-71), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteSequence0, byteSequence1);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      
      long long0 = byteSequence0.skip((byte) (-71));
      assertEquals(7, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-71), (byte) (-71), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(0L, long0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-71), (byte) (-71), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence2);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte byte0 = byteSequence1.readByte();
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-71), (byte) (-71), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteSequence1, byteSequence2);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals((byte)0, byte0);
      assertFalse(byteSequence1.equals((Object)byteSequence2));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      int int1 = Utility.setBit((byte) (-71), 8257536);
      assertEquals((-71), int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-98);
      byteArray1[1] = (byte)0;
      byteArray1[3] = (byte) (-98);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 91, (-578));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      int int0 = Pattern.UNIX_LINES;
      assertEquals(1, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      assertNotNull(zoneOffset0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-117), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      byte byte0 = byteSequence0.readByte();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-117), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte) (-117), byte0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-117), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte) (-117), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence2);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      
      String string0 = Utility.codeToString(byteSequence2, constantPool0, false);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte) (-117), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertNotSame(byteSequence2, byteSequence1);
      assertNotSame(byteSequence2, byteSequence0);
      assertEquals("f2i", string0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      
      try { 
        Utility.methodSignatureReturnType("breakpoint");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `breakpoint'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-81);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 44, 2158);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)126;
      byteArray0[1] = (byte)126;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)126, (byte)0, (byte)0, (byte)126, (byte)126, (byte) (-112)}, byteArray0);
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)126, (byte)0, (byte)0, (byte)126, (byte)126, (byte) (-112)}, byteArray0);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      boolean boolean1 = byteSequence0.markSupported();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)126, (byte)0, (byte)0, (byte)126, (byte)126, (byte) (-112)}, byteArray0);
      assertNotSame(byteSequence0, byteSequence1);
      assertTrue(boolean1);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertTrue(boolean1 == boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)126, (byte)0, (byte)0, (byte)126, (byte)126, (byte) (-112)}, byteArray0);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(0, int0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      
      try { 
        Utility.typeOfSignature("$Bt:X~^Cg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $Bt:X~^Cg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      int int0 = Pattern.COMMENTS;
      assertEquals(4, int0);
      
      String string1 = Utility.replace("<illegal type>", "<illegal type>", "<illegal type>");
      assertNotNull(string1);
      assertEquals("<illegal type>", string1);
      assertTrue(string1.equals((Object)string0));
      
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      assertNotNull(hijrahDate0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)107, (byte) (-99), (byte) (-99), (byte) (-99), (byte) (-99), (byte) (-99), (byte) (-99), (byte) (-99)}, byteArray0);
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)107, (byte) (-99), (byte) (-99), (byte) (-99), (byte) (-99), (byte) (-99), (byte) (-99), (byte) (-99)}, byteArray0);
      assertNotNull(string2);
      assertEquals("dmul", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = Utility.convertString("SimpleElementValue doesnt know how to write out type ");
      assertNotNull(string3);
      assertEquals("SimpleElementValue doesnt know how to write out type ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-59);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((byte) (-59));
      assertNotNull(zoneOffset0);
      
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      constantPool1.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-5118), 189, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      String string1 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string1);
      assertEquals("<init>", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-73), (-484), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iconst_3
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = Pattern.UNIX_LINES;
      assertEquals(1, int0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(75);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(75, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte) (-47);
      byteArray0[8] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)123, (byte)125, (byte) (-92), (byte) (-95), (byte) (-85), (byte) (-104), (byte) (-63), (byte) (-47), (byte)57}, byteArray0);
      assertNotNull(byteSequence0);
      
      byte byte0 = byteSequence0.readByte();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)123, (byte)125, (byte) (-92), (byte) (-95), (byte) (-85), (byte) (-104), (byte) (-63), (byte) (-47), (byte)57}, byteArray0);
      assertEquals((byte)123, byte0);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1151, 2526);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[26];
      byteArray0[12] = (byte)85;
      byteArray0[4] = (byte)85;
      byteArray0[2] = (byte)85;
      byteArray0[10] = (byte)85;
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "static");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray1 = new byte[10];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray0[23] = (byte)85;
      byteArray0[7] = (byte)85;
      byteArray1[6] = (byte)85;
      byteArray1[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)85, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteSequence0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = Pattern.UNICODE_CASE;
      assertEquals(64, int0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)85, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(string0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("nop", string0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = new byte[8];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)85;
      int int1 = Utility.setBit((byte)85, (byte)0);
      assertEquals(85, int1);
      assertFalse(int1 == int0);
      
      byteArray2[3] = (byte)85;
      byteArray2[4] = (byte)85;
      byteArray2[5] = (byte)85;
      byte byte0 = byteSequence0.readByte();
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)85, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((byte)0, byte0);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray2[7] = (byte)85;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)85, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)85, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(constantPool0);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      
      LocalVariableTable localVariableTable0 = new LocalVariableTable(188, (byte)85, byteSequence0, (ConstantPool) null);
      assertEquals(0, localVariableTable0.getTableLength());
      assertEquals((byte)5, localVariableTable0.getTag());
      assertEquals(85, localVariableTable0.getLength());
      assertEquals(188, localVariableTable0.getNameIndex());
      assertEquals(6, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)85, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(localVariableTable0);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      
      LocalVariableTable localVariableTable1 = new LocalVariableTable(localVariableTable0);
      assertEquals(0, localVariableTable0.getTableLength());
      assertEquals((byte)5, localVariableTable0.getTag());
      assertEquals(85, localVariableTable0.getLength());
      assertEquals(188, localVariableTable0.getNameIndex());
      assertEquals((byte)5, localVariableTable1.getTag());
      assertEquals(188, localVariableTable1.getNameIndex());
      assertEquals(85, localVariableTable1.getLength());
      assertEquals(0, localVariableTable1.getTableLength());
      assertEquals(6, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)85, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(localVariableTable1);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(localVariableTable1.equals((Object)localVariableTable0));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      
      try { 
        Utility.methodSignatureToString("(!D:UIjQk|gi%", "nop", "(!D:UIjQk|gi%", true, localVariableTable1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `!D:UIjQk|gi%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "hVj;m6$Eji:y-VZ#Z");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byteArray0[3] = (byte)33;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-111);
      byteArray0[1] = (byte)90;
      int int0 = Pattern.UNICODE_CASE;
      assertEquals(64, int0);
      
      int int1 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 64, (int) (byte)90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-120);
      Constant[] constantArray0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-120), (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      int int0 = (-870);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-870), 902);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-120), (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    l2i\n1:    nop\n", string0);
      
      try { 
        Utility.methodSignatureReturnType("0:    l2i\n1:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    l2i
         // 1:    nop
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)109, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(158, (byte)109);
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(109, constantFieldref0.getNameAndTypeIndex());
      assertEquals(158, constantFieldref0.getClassIndex());
      assertNotNull(constantFieldref0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantPool0.accept(emptyVisitor0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-870), 902);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)109, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    ldiv\n1:    nop\n", string0);
      
      String string1 = Utility.convertString("0:    ldiv\n1:    nop\n");
      assertNotNull(string1);
      assertEquals("0:    ldiv\\n1:    nop\\n", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)109, (byte)0}, byteArray0);
      assertNotNull(string2);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      byte[] byteArray1 = new byte[16];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)109, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      byteArray1[0] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (-870), 1123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      int int0 = Pattern.COMMENTS;
      assertEquals(4, int0);
      
      String string1 = Utility.replace("<illegal type>", "<illegal type>", "<illegal type>");
      assertNotNull(string1);
      assertEquals("<illegal type>", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = Utility.convertString("<illegal type>");
      assertNotNull(string2);
      assertEquals("<illegal type>", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = Utility.printArray((Object[]) null, true);
      assertNull(string3);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      String string4 = Utility.compactClassName("Code(max_stack = ", false);
      assertNotNull(string4);
      assertEquals("Code(max_stack = ", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)34;
      byteArray0[4] = (byte)34;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)34, 44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = Pattern.quote("A<Vb{VIXA^NA BX6S");
      assertNotNull(string0);
      assertEquals("\\QA<Vb{VIXA^NA BX6S\\E", string0);
      
      String string1 = "H[ ";
      try { 
        Utility.typeOfSignature("H[ ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H[ 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("c,Awqrke^!N");
      assertNotNull(mockPrintWriter0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      assertNotNull(hijrahDate0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte)63;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-94), (int) (byte)63);
      assertArrayEquals(new byte[] {(byte)63, (byte)63, (byte)63, (byte)63, (byte) (-94), (byte)123, (byte)63, (byte)63}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    lstore_0\n1:    lstore_0\n2:    lstore_0\n3:    lstore_0\n4:    if_icmpge\t\t#31555\n7:    lstore_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte byte0 = (byte) (-106);
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-106);
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-106), (byte) (-106), (byte) (-106)}, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-84);
      byteArray1[1] = (byte) (-106);
      byteArray1[2] = (byte) (-106);
      byteArray1[3] = (byte) (-106);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 10, (int) (byte) (-106));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      boolean boolean0 = byteSequence0.readBoolean();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      byteSequence0.close();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)83;
      byteArray1[1] = (byte) (-40);
      byteArray1[2] = (byte)6;
      byteArray1[3] = (byte) (-93);
      byteArray1[4] = (byte)56;
      byteArray1[5] = (byte) (-72);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 218, 1540);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte byte0 = Constants.ATTR_CONSTANT_VALUE;
      assertEquals((byte)1, byte0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-113);
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-113)}, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int0 = (-1017);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-113), (-1017));
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-113)}, byteArray0);
      assertNotNull(string1);
      assertEquals("0:    d2l\n", string1);
      assertFalse(string1.equals((Object)string0));
      
      System.setCurrentTimeMillis((-1696L));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-113)}, byteArray0);
      assertNotNull(byteSequence0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-113)}, byteArray0);
      assertNotNull(bufferedInputStream0);
      
      long long0 = bufferedInputStream0.skip((-3071L));
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-113)}, byteArray0);
      assertEquals(0L, long0);
      
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-113)}, byteArray0);
      assertNotNull(bufferedInputStream1);
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      byteArray0[2] = (byte) (-106);
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-106), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte) (-70);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean4 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[D{E1DE");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      
      String string0 = Utility.methodSignatureReturnType("[D{E1DE");
      assertNotNull(string0);
      assertEquals("double[]", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Constant[] constantArray0 = null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte byte0 = Constants.ATTR_CONSTANT_VALUE;
      assertEquals((byte)1, byte0);
      
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-73);
      int int0 = 192;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 124, 192, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = Utility.compactClassName("breakpoint");
      assertNotNull(string0);
      assertEquals("breakpoint", string0);
      
      MockFile mockFile0 = new MockFile("breakpoint", "breakpoint");
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("breakpoint", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/breakpoint", mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/breakpoint/breakpoint", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertNotNull(mockFile0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      assertNotNull(hijrahDate0);
      
      HijrahDate hijrahDate1 = MockHijrahDate.now();
      assertNotNull(hijrahDate1);
      assertNotSame(hijrahDate1, hijrahDate0);
      assertTrue(hijrahDate1.equals((Object)hijrahDate0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-74);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte)47;
      int int0 = (-3470);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)20, 2403);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = "?!.{&#dK";
      try { 
        Utility.typeOfSignature("?!.{&#dK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?!.{&#dK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-126);
      byteArray0[3] = (byte) (-126);
      byteArray0[6] = (byte) (-118);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-118);
      byte[] byteArray2 = new byte[3];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-118);
      byteArray2[1] = (byte) (-118);
      byteArray2[2] = (byte) (-122);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, constantPool0, 691, 46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      int int0 = Utility.setBit(176, (-906));
      assertEquals(4194480, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)36, (byte) (-109), (byte) (-95), (byte)125, (byte) (-58), (byte) (-61)}, byteArray0);
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)36, (byte) (-109), (byte) (-95), (byte)125, (byte) (-58), (byte) (-61)}, byteArray0);
      assertNotNull(string0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("fload_2", string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte byte0 = Constants.ATTR_CONSTANT_VALUE;
      assertEquals((byte)1, byte0);
      
      String string0 = Utility.replace("qmISBQ#>/|8#O[", "M[eO;s", ":b");
      assertNotNull(string0);
      assertEquals("qmISBQ#>/|8#O[", string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-116);
      byteArray0[4] = (byte) (-116);
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qmISBQ#>/|8#O[");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-116), (byte)1, (byte) (-116), (byte)0, (byte) (-116), (byte)1, (byte)1}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((-1946055680), constantInteger0.getBytes());
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-116), (byte)1, (byte) (-116), (byte)0, (byte) (-116), (byte)1, (byte)1}, byteArray0);
      assertNotNull(constantInteger0);
      
      String string1 = constantInteger0.toString();
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((-1946055680), constantInteger0.getBytes());
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-116), (byte)1, (byte) (-116), (byte)0, (byte) (-116), (byte)1, (byte)1}, byteArray0);
      assertNotNull(string1);
      assertEquals("CONSTANT_Integer[3](bytes = -1946055680)", string1);
      assertFalse(string1.equals((Object)string0));
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantInteger0.accept(emptyVisitor0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((-1946055680), constantInteger0.getBytes());
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-116), (byte)1, (byte) (-116), (byte)0, (byte) (-116), (byte)1, (byte)1}, byteArray0);
      
      ConstantInteger constantInteger1 = (ConstantInteger)constantInteger0.clone();
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((-1946055680), constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger1.getTag());
      assertEquals((-1946055680), constantInteger1.getBytes());
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-116), (byte)1, (byte) (-116), (byte)0, (byte) (-116), (byte)1, (byte)1}, byteArray0);
      assertNotNull(constantInteger1);
      assertNotSame(constantInteger0, constantInteger1);
      assertNotSame(constantInteger1, constantInteger0);
      assertTrue(constantInteger1.equals((Object)constantInteger0));
      
      ConstantInteger constantInteger2 = new ConstantInteger(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((-1946055680), constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger2.getTag());
      assertEquals((-1946055680), constantInteger2.getBytes());
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-116), (byte)1, (byte) (-116), (byte)0, (byte) (-116), (byte)1, (byte)1}, byteArray0);
      assertNotNull(constantInteger2);
      assertTrue(constantInteger0.equals((Object)constantInteger1));
      assertTrue(constantInteger2.equals((Object)constantInteger0));
      assertTrue(constantInteger2.equals((Object)constantInteger1));
      
      String string2 = constantPool0.constantToString((Constant) constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((-1946055680), constantInteger0.getBytes());
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-116), (byte)1, (byte) (-116), (byte)0, (byte) (-116), (byte)1, (byte)1}, byteArray0);
      assertNotNull(string2);
      assertNotSame(constantInteger0, constantInteger2);
      assertNotSame(constantInteger0, constantInteger1);
      assertEquals("-1946055680", string2);
      assertTrue(constantInteger0.equals((Object)constantInteger1));
      assertTrue(constantInteger0.equals((Object)constantInteger2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-116), (byte)1, (byte) (-116), (byte)0, (byte) (-116), (byte)1, (byte)1}, byteArray0);
      assertNotNull(string3);
      assertEquals("f2l", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-116);
      String string4 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(6, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-116), (byte)1, (byte) (-116), (byte)0, (byte) (-116), (byte)1, (byte)1}, byteArray0);
      assertNotNull(string4);
      assertNotSame(byteArray0, byteArray1);
      assertEquals("aconst_null", string4);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
  }
}
