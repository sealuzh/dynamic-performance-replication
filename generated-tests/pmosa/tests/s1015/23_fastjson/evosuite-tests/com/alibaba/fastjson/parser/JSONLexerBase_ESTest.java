/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 07:02:10 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.PushbackReader;
import java.io.StringReader;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[5];
      char char0 = 'i';
      charArray0[0] = 'i';
      char char1 = 'Y';
      charArray0[1] = 'Y';
      char char2 = ']';
      charArray0[2] = ']';
      charArray0[3] = '8';
      char char3 = 'L';
      charArray0[4] = 'L';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 402);
      jSONReaderScanner0.charArrayCompare(charArray0);
      char char4 = 'A';
      jSONReaderScanner0.scanUUID('A');
      char[] charArray1 = jSONReaderScanner0.sub_chars(1368, 1368);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(1368, charArray1, (-402), 119);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanUUID('i');
      boolean boolean0 = jSONScanner0.isRef();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.ZoneOffset");
      jSONReaderScanner0.nextToken((-14));
      assertEquals('a', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "not support type ";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not support type ", 605);
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(605);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan null error");
      jSONScanner0.scanInt('L');
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-1289));
      jSONScanner0.scanLong('n');
      jSONScanner0.token = 0;
      jSONScanner0.tokenName();
      jSONScanner0.setToken((-41));
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanFieldFloat(charArray0);
      Locale locale0 = Locale.FRENCH;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Feature> arrayList1 = new ArrayList<Feature>();
      arrayList0.retainAll(arrayList1);
      Class<Object> class0 = Object.class;
      Collection<String> collection0 = jSONScanner0.newCollectionByType(class0);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, collection0);
      jSONScanner0.setLocale(locale0);
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.resetStringPosition();
      jSONScanner0.scanDate(']');
      assertEquals((-41), jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanNumber();
      jSONScanner0.intValue();
      long long0 = jSONScanner0.longValue();
      assertEquals(2, jSONScanner0.token());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("c");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.nextToken(45380);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("%");
      jSONReaderScanner0.isEnabled(0);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("E");
      jSONScanner0.scanFloat('%');
      int int0 = 732;
      int int1 = (-2824);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2824));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2326);
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.isBlankInput();
      TimeZone.getDefault();
      jSONScanner0.next();
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanInt('w');
      SymbolTable symbolTable0 = new SymbolTable(25);
      jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = ", ";
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      charArray0[1] = 'D';
      charArray0[2] = 'e';
      charArray0[3] = 'y';
      jSONScanner0.scanFieldFloat(charArray0);
      charArray0[4] = '-';
      jSONScanner0.skipWhitespace();
      charArray0[5] = '1';
      charArray0[6] = '@';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-155));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.ch = '|';
      jSONScanner0.scanInt('V');
      long long0 = jSONScanner0.longValue();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanLong('s');
      jSONReaderScanner0.getCalendar();
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONReaderScanner0.setTimeZone(timeZone0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\"';
      charArray0[1] = 'R';
      charArray0[2] = '4';
      charArray0[3] = 'l';
      charArray0[4] = '(';
      String string0 = JSONLexerBase.readString(charArray0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 125, 125);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('a');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 522);
      Feature feature0 = Feature.AllowISO8601DateFormat;
      jSONReaderScanner0.sp = 522;
      stringReader0.mark(0);
      jSONReaderScanner0.config(feature0, true);
      stringReader0.ready();
      char[] charArray0 = new char[1];
      jSONReaderScanner0.scanDouble('G');
      charArray0[0] = 'G';
      jSONReaderScanner0.arrayCopy(0, charArray0, 0, 0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      CharBuffer charBuffer0 = uTF8Decoder0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      byteBuffer1.duplicate();
      byteBuffer1.slice();
      CharBuffer charBuffer1 = charset0.decode(byteBuffer1);
      charBuffer1.flip();
      stringReader0.read(charBuffer1);
      jSONReaderScanner0.indexOf('G', 3326);
      jSONReaderScanner0.setToken(0);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e.JmqdS>)KVV");
      Feature feature0 = Feature.UseObjectArray;
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner0.scanDate('_');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M");
      jSONScanner0.scanInt('\'');
      SymbolTable symbolTable0 = new SymbolTable(45);
      jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("_");
      jSONScanner0.scanISO8601DateIfMatch(true);
      jSONScanner0.longValue();
      jSONScanner0.nextToken((-4552));
      char[] charArray0 = new char[1];
      char char0 = '\"';
      charArray0[0] = '\"';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-'SM,HRTm5C/!v/$?L)", 95);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("M");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanLong('s');
      MockCalendar.getInstance();
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONReaderScanner0.setTimeZone(timeZone0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 522);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("9:j,rC%");
      long long0 = jSONReaderScanner1.scanLong('c');
      assertEquals(9L, long0);
      
      jSONReaderScanner0.getCalendar();
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONReaderScanner1.setTimeZone(timeZone0);
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2}@09t", 111);
      long long0 = jSONReaderScanner0.scanLong('v');
      assertEquals(2L, long0);
      
      jSONReaderScanner0.scanFieldDouble(charArray0);
      int int0 = jSONReaderScanner0.token();
      assertEquals(0, int0);
      assertEquals(111, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*:l9$YO'+^r@~2pU");
      jSONReaderScanner0.stringDefaultValue = "*:l9$YO'+^r@~2pU";
      jSONReaderScanner0.scanDate('9');
      jSONReaderScanner0.nextToken(792);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = 'x';
      charArray0[2] = '5';
      charArray0[3] = 'd';
      charArray0[4] = 'F';
      charArray0[5] = 'k';
      charArray0[6] = 'o';
      charArray0[7] = '~';
      charArray0[8] = '5';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 46, 46);
      jSONReaderScanner0.scanDate('b');
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@QyMx5uY3%;~0!|");
      jSONReaderScanner0.scanDate('9');
      jSONReaderScanner0.nextToken(207);
      assertEquals('Q', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 20);
      char[] charArray0 = new char[5];
      charArray0[0] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 9999999, 20);
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // empty String, 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 522);
      Feature feature0 = Feature.AllowISO8601DateFormat;
      jSONReaderScanner0.sp = 522;
      stringReader0.mark(0);
      jSONReaderScanner0.config(feature0, true);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("r", 1837);
      char char0 = ']';
      char char1 = 'p';
      jSONScanner0.scanIdent();
      jSONScanner0.scanFloat('p');
      jSONScanner0.bytesValue();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2562));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.util.concurrent.atomic.LongAdder");
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.putChar('b');
      jSONScanner0.nextIdent();
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\"';
      char char0 = 'R';
      charArray0[1] = 'R';
      charArray0[2] = '4';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[j>]e:", 61);
      jSONReaderScanner0.nextToken(61);
      jSONReaderScanner0.scanDouble('B');
      jSONReaderScanner0.putChar('B');
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("uQS#0^B,D 7");
      jSONScanner0.hasSpecial = false;
      jSONScanner0.charArrayCompare(charArray0);
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(61, 1262, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined", 97);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanLong('s');
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = 'w';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 345);
      jSONReaderScanner2.scanFieldFloat(charArray0);
      boolean boolean0 = JSONScanner.charArrayCompare("fA4", 345, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@QyMx5uY3%;~0!|");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.nextToken(0);
      jSONReaderScanner0.scanString('2');
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 522);
      Feature feature0 = Feature.AllowISO8601DateFormat;
      jSONReaderScanner0.sp = 522;
      stringReader0.mark(0);
      jSONReaderScanner0.config(feature0, true);
      stringReader0.ready();
      char[] charArray0 = new char[7];
      jSONReaderScanner0.scanDouble('G');
      charArray0[0] = 'G';
      jSONReaderScanner0.arrayCopy(0, charArray0, 0, 0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      CharBuffer charBuffer0 = uTF8Decoder0.decode(byteBuffer0);
      charset0.encode(charBuffer0);
      byteBuffer0.duplicate();
      JSONScanner jSONScanner0 = new JSONScanner("Zaf$1jO_Ut|lD", 0);
      jSONScanner0.indexOf('G', 1502);
      jSONReaderScanner0.scanString(';');
      assertEquals(554, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 125, 125);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M");
      assertEquals(0, jSONScanner0.matchStat);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONScanner0.scanInt(',');
      boolean boolean0 = jSONScanner0.isRef();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("@QyMx5uY3%;~0!|");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.indexOf('[', 365);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan null error");
      int int0 = Calendar.FRIDAY;
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      int int0 = Calendar.AM_PM;
      SymbolTable symbolTable0 = new SymbolTable(9);
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[1] = '`';
      charArray0[2] = '\\';
      charArray0[3] = '!';
      charArray0[4] = '}';
      charArray0[5] = 'S';
      charArray0[6] = 'Y';
      charArray0[7] = '\"';
      charArray0[8] = '`';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 522);
      jSONReaderScanner0.sp = 522;
      JSONScanner jSONScanner0 = new JSONScanner("", 522);
      char[] charArray0 = new char[8];
      charArray0[0] = '_';
      charArray0[1] = 'c';
      charArray0[2] = 'a';
      charArray0[3] = '';
      charArray0[4] = '\\';
      charArray0[5] = '+';
      charArray0[6] = '9';
      charArray0[7] = 'g';
      jSONScanner0.scanFieldFloat(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("", 0);
      jSONScanner1.skipWhitespace();
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 522);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONScanner jSONScanner0 = new JSONScanner("@QyMx5uY3%;~0!|");
      jSONScanner0.longValue();
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanLong('l');
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONReaderScanner0.setTimeZone(timeZone0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextIdent();
      long long0 = jSONScanner0.longValue();
      assertEquals(20, jSONScanner0.token());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[1] = 'L';
      jSONScanner0.nextIdent();
      charArray0[3] = 'L';
      charArray0[4] = 'L';
      charArray0[5] = 'L';
      charArray0[6] = 'L';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 26);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("c,", 1837);
      jSONScanner0.eofPos = 120;
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.scanFloat(']');
      jSONScanner0.bytesValue();
      SymbolTable symbolTable0 = new SymbolTable(120);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'N');
      char[] charArray0 = new char[0];
      jSONScanner0.charArrayCompare(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 120, (-1));
      jSONReaderScanner0.subString(1517, 120);
      assertEquals((-1), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '<';
      charArray0[1] = '$';
      charArray0[2] = 'k';
      charArray0[3] = ' ';
      JSONScanner jSONScanner0 = new JSONScanner("java.time.Period");
      SymbolTable symbolTable0 = new SymbolTable(17);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'k');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^3u");
      jSONReaderScanner0.nextToken((-14));
      SymbolTable symbolTable0 = new SymbolTable(2906);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'Q');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan null error");
      char[] charArray0 = new char[5];
      charArray0[0] = 'L';
      charArray0[1] = '0';
      charArray0[2] = 'H';
      charArray0[3] = 'L';
      charArray0[4] = 'H';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 57, (-1254));
      jSONReaderScanner0.info();
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan null error");
      jSONScanner0.scanInt('L');
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      int int0 = jSONScanner0.intValue();
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("zp\"");
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      jSONScanner0.scanInt('l');
      JSONScanner jSONScanner1 = new JSONScanner("Yn");
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = 'L';
      charArray0[2] = 'l';
      charArray0[3] = 'L';
      char[] charArray1 = new char[4];
      charArray1[0] = 'l';
      charArray1[1] = '0';
      charArray1[2] = 'D';
      charArray1[3] = 'L';
      jSONScanner1.scanFieldInt(charArray1);
      charArray0[4] = 'L';
      charArray0[5] = 'L';
      charArray0[6] = 'l';
      charArray0[7] = 'L';
      jSONScanner1.matchField(charArray0);
      assertEquals(989, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      int int0 = 522;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 522);
      Feature feature0 = Feature.AllowISO8601DateFormat;
      jSONReaderScanner0.sp = 522;
      boolean boolean0 = true;
      stringReader0.mark(0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = '6';
      charArray0[2] = 'I';
      charArray0[3] = '}';
      charArray0[4] = 'k';
      charArray0[5] = 'b';
      charArray0[6] = 'o';
      charArray0[7] = 'v';
      SymbolTable symbolTable0 = new SymbolTable(1280);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 1280, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = '}';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 2);
      jSONScanner0.bp = (-2147483647);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\"';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illega str", 52);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDouble('.');
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = new SymbolTable(51);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '.');
      jSONReaderScanner0.info();
      int int0 = jSONReaderScanner0.pos();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\"';
      charArray0[1] = 'R';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 39, 39);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan null error");
      jSONScanner0.scanInt('L');
      JSONScanner jSONScanner1 = new JSONScanner(":", (-1));
      char[] charArray0 = new char[5];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      charArray0[3] = 'L';
      charArray0[4] = 'L';
      jSONScanner1.scanFieldFloat(charArray0);
      jSONScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-2671));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@QyMx5uY3%;~0!|");
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      int int0 = jSONReaderScanner0.scanType("fWRr`6l'n");
      assertEquals((-2), int0);
      
      jSONReaderScanner0.nextToken(976);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONLexerBase.isWhitespace(' ');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("int", 859);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.matchStat();
      jSONReaderScanner0.scanDate(' ');
      char[] charArray0 = new char[9];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = ' ';
      charArray0[3] = ' ';
      charArray0[4] = ' ';
      charArray0[5] = ' ';
      charArray0[6] = ' ';
      charArray0[7] = ' ';
      charArray0[8] = ' ';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 859, 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "<jr'E-+}bsea.TBGo}";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("<jr'E-+}bsea.TBGo}", 15);
      jSONReaderScanner0.token();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1581));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nr_");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 14);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner1.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Feature.AllowSingleQuotes is false");
      jSONScanner0.scanInt('w');
      SymbolTable symbolTable0 = new SymbolTable(25);
      jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3t;\"a<GW");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3t;\"a<GW");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan null error");
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextIdent();
      jSONScanner0.close();
      jSONScanner0.scanDouble('-');
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan null error");
      jSONScanner0.scanInt('L');
      SymbolTable symbolTable0 = new SymbolTable(3795);
      jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanDecimal('z');
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      jSONScanner0.scanStringArray(set0, 'N');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[5];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'z';
      charArray0[3] = 'z';
      charArray0[4] = 'z';
      jSONScanner0.close();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanStringArray((Collection<String>) null, 'z');
      SymbolTable symbolTable0 = new SymbolTable(144);
      char[] charArray1 = new char[7];
      charArray1[0] = 'z';
      charArray1[1] = 'z';
      charArray1[2] = 'z';
      charArray1[3] = 'z';
      charArray1[4] = 'z';
      charArray1[5] = 'z';
      charArray1[6] = 'z';
      boolean boolean0 = jSONScanner0.matchField(charArray1);
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      jSONScanner0.subString(0, 0);
      boolean boolean0 = jSONScanner0.isEnabled(108, 119);
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\"';
      charArray0[1] = 'R';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 39, 39);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M");
      jSONScanner0.scanDecimal('<');
      jSONScanner0.scanLong('N');
      boolean boolean0 = jSONScanner0.isRef();
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("_");
      jSONScanner0.scanDecimal('0');
      jSONScanner0.scanISO8601DateIfMatch(true);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      int int0 = (-4552);
      jSONScanner0.nextToken((-4552));
      char[] charArray0 = new char[1];
      charArray0[0] = '\"';
      jSONScanner0.scanDecimal('\"');
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, '\"');
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-870), (-870));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan null error");
      int int0 = 2503;
      SymbolTable symbolTable0 = new SymbolTable(2503);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - n, info : pos 5, json : scan null error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ';';
      charArray0[1] = '3';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Hur@BOfct-+*h6d3R");
      charArray0[2] = 'k';
      charArray0[3] = 'A';
      charArray0[4] = '~';
      charArray0[5] = 'F';
      charArray0[6] = '!';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 115);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.intValue();
      jSONScanner0.subString(0, 0);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanInt('W');
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = 'W';
      charArray0[3] = 'W';
      charArray0[4] = 'V';
      charArray0[5] = 'W';
      charArray0[6] = 'W';
      charArray0[7] = 'W';
      jSONScanner0.scanBoolean('j');
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, (-1));
      jSONScanner1.isRef();
      assertEquals((-1), jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("r");
      jSONScanner0.scanBoolean('5');
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("N");
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      int int0 = jSONScanner0.pos();
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M");
      jSONScanner0.nextIdent();
      jSONScanner0.longValue();
      jSONScanner0.getCurrent();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan null error");
      jSONScanner0.scanInt('L');
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(2010);
      jSONScanner0.scanEnum(class0, symbolTable0, '(');
      jSONScanner0.getTimeZone();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 3392903);
      SymbolTable symbolTable0 = new SymbolTable(21);
      jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanInt('w');
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = 'x';
      charArray0[2] = '5';
      charArray0[3] = 'd';
      charArray0[4] = 'F';
      charArray0[5] = 'k';
      charArray0[6] = 'o';
      charArray0[7] = '~';
      charArray0[8] = '5';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 46, 46);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.util.concurrent.atomic.LongAdder", 16);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      char[] charArray0 = new char[1];
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.nextToken(16);
      long long1 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 540, 125);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 540, 2167);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%q");
      jSONScanner0.np = 256;
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.isEOF();
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("et-(*>K~` \"@0r");
      jSONScanner0.scanInt('L');
      char[] charArray0 = new char[3];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanString();
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanBoolean('L');
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals('@', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%q");
      jSONScanner0.isRef();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      Feature feature0 = Feature.AllowISO8601DateFormat;
      jSONScanner0.config(feature0, true);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*:l9$YO'+^r@~2pU");
      JSONScanner jSONScanner0 = new JSONScanner("-xy+e|/)+r1MGMG+", (-3064));
      // Undeclared exception!
      try { 
        jSONScanner0.intValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-29);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(inputStreamReader0, (-314));
      jSONReaderScanner0.nextToken(92);
      assertEquals('S', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n");
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = 'S';
      jSONScanner0.getFeatures();
      int int0 = jSONScanner0.getFeatures();
      assertEquals(989, int0);
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$:N!U+{ut`5aWNWx");
      jSONReaderScanner0.nextToken(4);
      SymbolTable symbolTable0 = new SymbolTable(2379);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : :
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*:l9$YO'+^r@~2pU");
      jSONReaderScanner0.nextToken(13);
      assertEquals(':', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      charArray0[1] = 'S';
      charArray0[2] = 'i';
      charArray0[3] = '|';
      charArray0[4] = '\"';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 3, 3);
      jSONScanner0.scanFloat('|');
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(226, charArray0, 3, 229);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("pmJNML%Epp");
      jSONReaderScanner0.nextToken(19);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("wJp_t314m%/]Iy**_.y");
      jSONReaderScanner0.nextToken(5);
      assertEquals('J', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'u';
      charArray0[2] = 'A';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2200);
      jSONReaderScanner0.sp = 100;
      jSONReaderScanner0.indexOf('-', 100);
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u0000\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = 'u';
      charArray0[2] = 'A';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2200);
      jSONReaderScanner0.sp = 100;
      jSONReaderScanner0.indexOf('-', 100);
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u0000\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-aU");
      // Undeclared exception!
      try { 
        jSONScanner0.longValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      SymbolTable symbolTable0 = new SymbolTable(1263);
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1263, 1263);
      jSONReaderScanner0.nextToken(1263);
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^3u");
      jSONReaderScanner0.scanInt('I');
      jSONReaderScanner0.nextToken((-14));
      assertEquals('3', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      jSONReaderScanner0.nextToken(13);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("@QyMx5uY3%;~0!|");
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONScanner0.isBlankInput();
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanLong('D');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("t\"#S_+sc");
      int int0 = Calendar.FRIDAY;
      jSONScanner0.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.matchField(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan null error");
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = '<';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 13, (-3711));
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.nextToken(16);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*:l9$YO'+^r@~2pU");
      jSONReaderScanner0.stringDefaultValue = "*:l9$YO'+^r@~2pU";
      jSONReaderScanner0.scanInt('2');
      jSONReaderScanner0.nextToken(52429);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("T*pQ0]$:_{BV");
      jSONReaderScanner0.nextToken(800);
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xs");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(273);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. s
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = '/';
      charArray0[2] = 'l';
      charArray0[3] = 'z';
      charArray0[4] = 'G';
      charArray0[5] = '9';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      charArray0[6] = 'P';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 982);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray1);
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("[>2guUm/*LTio)-", (-863), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")");
      jSONReaderScanner0.nextToken(948);
      assertEquals(11, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("T*pQ0]$:_{BV");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(" is not a primitive type");
      jSONReaderScanner1.nextToken(76);
      assertEquals(1, jSONReaderScanner1.pos());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*:l9$YO'+^r@~2pU");
      jSONReaderScanner0.nextToken(12);
      int[] intArray0 = JSONLexerBase.digits;
      jSONReaderScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldUUID((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("scan null error");
      jSONScanner0.scanDecimal('<');
      char[] charArray0 = new char[7];
      charArray0[0] = 'N';
      charArray0[1] = '<';
      charArray0[2] = 'L';
      charArray0[3] = 'N';
      charArray0[4] = '<';
      charArray0[5] = '<';
      charArray0[6] = '<';
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.scanLong('N');
      jSONScanner0.isRef();
      jSONScanner0.getLocale();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2501);
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 540);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("]");
      jSONScanner0.nextIdent();
      assertEquals(15, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan null error");
      char[] charArray0 = new char[21];
      charArray0[0] = 'R';
      charArray0[1] = ')';
      charArray0[2] = 'L';
      charArray0[3] = ']';
      charArray0[4] = 'H';
      charArray0[5] = 'l';
      charArray0[6] = 'B';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 59);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.nextToken((-1590));
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@YKiYc(|");
      int int0 = 14;
      jSONReaderScanner0.nextToken(14);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      jSONReaderScanner0.nextToken(13);
      JSONScanner jSONScanner0 = new JSONScanner("/o5Gm5xGvR|");
      char[] charArray0 = new char[6];
      charArray0[0] = '4';
      charArray0[1] = 'x';
      charArray0[2] = '\\';
      charArray0[3] = '9';
      charArray0[4] = '?';
      charArray0[5] = 'x';
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.indexOf('h', 13);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      SymbolTable symbolTable0 = new SymbolTable(1263);
      SymbolTable symbolTable1 = new SymbolTable(108);
      char[] charArray0 = new char[7];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = 'Q';
      char char0 = 'P';
      charArray0[4] = 'P';
      charArray0[5] = 'Q';
      charArray0[6] = 'Q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 103);
      jSONReaderScanner0.scanString('R');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nebw");
      char char0 = 'X';
      jSONReaderScanner0.scanInt('X');
      char[] charArray0 = new char[0];
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan null error");
      int int0 = Calendar.FRIDAY;
      char[] charArray0 = new char[0];
      jSONScanner0.sp = 6;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 6);
      jSONReaderScanner0.nextToken(6);
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nebw");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanDecimal('.');
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan null error");
      int int0 = Calendar.FRIDAY;
      JSONScanner jSONScanner1 = new JSONScanner("scan null error");
      SymbolTable symbolTable0 = new SymbolTable(6);
      jSONScanner0.scanSymbol(symbolTable0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'H';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1179);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*:l9$YO'+^r@~2pU");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.nextToken(13);
      jSONReaderScanner0.scanDate('i');
      assertEquals(1, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"", 40);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString('`');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(1263);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"", 40);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanString('B');
      assertEquals(40, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Hgf6Tg]TIrw@Mz0)Z");
      SymbolTable symbolTable0 = new SymbolTable(120);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-e]Zt");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanString('+');
      assertEquals(']', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parsenull or new");
      jSONReaderScanner0.scanNumber();
      assertEquals(3, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("R< ");
      jSONReaderScanner0.nextToken(4);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(1263);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.nextToken(116);
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[1] = 'Y';
      charArray0[2] = '$';
      charArray0[3] = ',';
      charArray0[4] = '&';
      charArray0[5] = '3';
      charArray0[6] = 'X';
      char char0 = '\\';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fV8{!k?E&LFjDDn");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = 40;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"", 40);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanUUID('G');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 110);
      jSONReaderScanner0.indexOf('4', 91);
      Locale locale0 = Locale.JAPANESE;
      jSONReaderScanner0.setLocale(locale0);
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan null error");
      int int0 = Calendar.FRIDAY;
      jSONScanner0.sp = 6;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("28-itQi7U$F\"%`zF~");
      double double0 = jSONReaderScanner0.scanDouble('W');
      assertEquals(28.0, double0, 0.01);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n");
      jSONScanner0.scanDecimal('z');
      jSONScanner0.close();
      HashSet<String> hashSet0 = new HashSet<String>();
      jSONScanner0.scanStringArray(hashSet0, 'z');
      jSONScanner0.scanIdent();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n");
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(558);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONScanner0.scanStringArray(linkedList0, '1');
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.scanEnum(class0, symbolTable0, '9');
      jSONScanner0.getCalendar();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.nextToken(20);
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0i2L0/6}NB^&!EV2\"'S", 39);
      char[] charArray0 = new char[5];
      charArray0[0] = 'Q';
      charArray0[1] = 'O';
      charArray0[2] = ';';
      charArray0[3] = 'm';
      charArray0[4] = ':';
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('?');
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals(39, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("r");
      jSONScanner0.scanIdent();
      jSONScanner0.scanBoolean('5');
      char[] charArray0 = new char[9];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      charArray0[4] = '';
      charArray0[5] = '5';
      charArray0[6] = '5';
      charArray0[7] = '5';
      charArray0[8] = '5';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      jSONReaderScanner0.nextToken(10);
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.util.concurrent.atomic.LongAdder", 12);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.nextToken(12);
      boolean boolean0 = jSONReaderScanner0.isEnabled(2, 2114);
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 522);
      Feature feature0 = Feature.AllowISO8601DateFormat;
      jSONReaderScanner0.sp = 522;
      stringReader0.mark(522);
      jSONReaderScanner0.config(feature0, true);
      stringReader0.ready();
      char[] charArray0 = new char[7];
      jSONReaderScanner0.scanDouble('G');
      charArray0[0] = 'G';
      jSONReaderScanner0.arrayCopy(0, charArray0, 0, 0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      CharBuffer charBuffer0 = uTF8Decoder0.decode(byteBuffer0);
      charset0.encode(charBuffer0);
      jSONReaderScanner0.isEnabled(26376, 0);
      SymbolTable symbolTable0 = new SymbolTable(43);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan null error");
      int int0 = Calendar.FRIDAY;
      char[] charArray0 = new char[0];
      jSONScanner0.sp = 6;
      jSONScanner0.isRef();
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 5);
      char[] charArray0 = new char[9];
      charArray0[0] = 'k';
      charArray0[1] = 'a';
      charArray0[2] = 'X';
      charArray0[3] = 'A';
      charArray0[4] = 'N';
      charArray0[5] = '5';
      charArray0[6] = 'R';
      charArray0[7] = ',';
      charArray0[8] = 'i';
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.nextToken(5);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.scanNullOrNew();
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.nextToken(4);
      SymbolTable symbolTable0 = new SymbolTable(6);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char char0 = 'z';
      jSONScanner0.scanFloat('z');
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. n
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(";|tMOu%Pho!/ySd");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(63, "B.5V");
      char[] charArray0 = new char[4];
      charArray0[0] = '<';
      charArray0[1] = 't';
      charArray0[2] = 'Y';
      charArray0[3] = '5';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.nextToken((-2377));
      assertEquals('|', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n");
      jSONScanner0.scanString('i');
      char[] charArray0 = new char[4];
      jSONScanner0.isRef();
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n");
      jSONScanner0.scanString('i');
      char[] charArray0 = new char[4];
      charArray0[0] = 'i';
      charArray0[1] = 'T';
      charArray0[2] = 'i';
      charArray0[3] = 'i';
      jSONScanner0.scanFieldDecimal(charArray0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("p");
      SymbolTable symbolTable0 = new SymbolTable(25);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.isEOF();
      jSONScanner0.next();
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, '\u001A');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = Calendar.AM_PM;
      SymbolTable symbolTable0 = new SymbolTable(9);
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[1] = '`';
      charArray0[2] = '\\';
      charArray0[3] = '!';
      charArray0[4] = '}';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4H~I!!lvZg");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('!');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = 88;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3N,P%s\"gnu&7q0$D1h", 88);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanDate('7');
      int int1 = (-230);
      char char0 = 'J';
      jSONReaderScanner0.scanLong('J');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      int int0 = Calendar.AM_PM;
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(117);
      jSONScanner0.scanEnum(class0, symbolTable0, ':');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 125, 125);
      char[] charArray1 = new char[6];
      charArray1[0] = ',';
      charArray1[1] = 'N';
      charArray1[2] = 'i';
      charArray1[3] = 'A';
      charArray1[4] = '5';
      charArray1[5] = '5';
      jSONReaderScanner0.scanFieldDouble(charArray1);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray1, 8, 34);
      jSONReaderScanner1.nextToken(8);
      assertEquals(16, jSONReaderScanner1.token());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n");
      jSONScanner0.scanFloat('5');
      jSONScanner0.scanUUID('8');
      jSONScanner0.next();
      jSONScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.nextToken(800);
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", 3);
      char[] charArray0 = new char[6];
      charArray0[0] = 'L';
      charArray0[1] = '(';
      charArray0[2] = 'w';
      charArray0[3] = 'u';
      charArray0[4] = '}';
      charArray0[5] = '\'';
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.nextToken(2641);
      assertEquals(6, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      char char0 = ':';
      JSONScanner jSONScanner0 = new JSONScanner("null");
      int int0 = Calendar.AM_PM;
      Class<Object> class0 = Object.class;
      jSONScanner0.scanString(':');
      SymbolTable symbolTable0 = new SymbolTable(117);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("null", (-1), (-164), 95);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanString('M');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%q");
      Feature feature0 = Feature.IgnoreAutoType;
      jSONScanner0.config(feature0, true);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("%q");
      jSONReaderScanner0.nextToken(0);
      jSONReaderScanner0.nextToken(3);
      char char0 = jSONReaderScanner0.charAt(17);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ");
      int int0 = Calendar.FRIDAY;
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[1] = 'p';
      charArray0[2] = '*';
      charArray0[3] = 'H';
      charArray0[4] = 'c';
      charArray0[5] = 'F';
      jSONScanner0.sbuf = charArray0;
      char[] charArray1 = new char[0];
      jSONScanner0.sp = 6;
      jSONScanner0.scanFieldDecimal(charArray1);
      // Undeclared exception!
      try { 
        jSONScanner0.matchField(charArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("@QyMx5uY3%;~0!|");
      char[] charArray0 = new char[0];
      jSONScanner0.scanIdent();
      jSONScanner0.scanFieldDecimal(charArray0);
      long long0 = jSONScanner0.longValue();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(2006632313L, long0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.util.concurrent.atomic.LongAdder", 16);
      jSONReaderScanner0.longValue();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.nextToken(16);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nebw");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('W');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Set");
      int int0 = jSONReaderScanner0.scanInt('X');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanDecimal('S');
      jSONReaderScanner0.scanLong('l');
      jSONReaderScanner0.scanDate('l');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int int0 = 2289;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8e$AyH:K@ZlsY", 2289);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String string0 = "8Pe$AyHK@ZlsY";
      int int0 = 2289;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8Pe$AyHK@ZlsY");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      String string0 = "8e$AyH:K@ZlsY";
      int int0 = 2289;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8e$AyH:K@ZlsY", 2289);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("]");
      jSONScanner0.setLocale((Locale) null);
      char[] charArray0 = new char[2];
      charArray0[0] = 'y';
      charArray0[1] = ',';
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.nextToken(17);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.isEOF();
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.isEOF();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("n?bjM*`Hcan");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n");
      jSONScanner0.scanString('~');
      char[] charArray0 = new char[0];
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.longValue();
      jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.scanFieldBigInteger(charArray0);
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-173701140));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.matchField(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.scanBoolean(' ');
      jSONReaderScanner0.stringDefaultValue = ")=[tMBqf";
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(800);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-e]Zt");
      JSONScanner jSONScanner0 = new JSONScanner("-e]Zt", (-947));
      char[] charArray0 = new char[8];
      charArray0[0] = 'J';
      charArray0[1] = 'a';
      charArray0[2] = '8';
      charArray0[3] = ']';
      charArray0[4] = '.';
      charArray0[5] = '%';
      charArray0[6] = ';';
      charArray0[7] = 'l';
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanUUID('a');
      jSONReaderScanner0.scanDate('8');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fV8{kE&LFjDDn");
      jSONReaderScanner0.features = (-1718);
      jSONReaderScanner0.scanBoolean('y');
      jSONReaderScanner0.scanDouble('y');
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      charArray0[2] = 'y';
      charArray0[3] = 'y';
      charArray0[5] = 'y';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((-2193));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fV8{!k?E&LFjDDn");
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.features = (-1718);
      jSONReaderScanner0.scanBoolean('y');
      jSONReaderScanner0.scanDouble('y');
      Class<Feature> class0 = Feature.class;
      jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, 'y');
      char[] charArray0 = new char[7];
      charArray0[0] = 'y';
      charArray0[1] = 'O';
      charArray0[2] = 'y';
      charArray0[3] = 'y';
      charArray0[4] = 'y';
      charArray0[5] = 'y';
      charArray0[6] = 'y';
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      int int0 = Calendar.AM_PM;
      SymbolTable symbolTable0 = new SymbolTable(9);
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[1] = '`';
      charArray0[2] = '\\';
      charArray0[3] = '!';
      char[] charArray1 = new char[9];
      charArray1[0] = '`';
      charArray1[1] = 'A';
      charArray1[2] = '!';
      charArray1[3] = '`';
      charArray1[4] = '\\';
      charArray1[5] = '`';
      charArray1[6] = '!';
      charArray1[7] = '2';
      jSONScanner0.putChar('`');
      charArray1[8] = '}';
      jSONScanner0.sbuf = charArray1;
      charArray0[4] = '}';
      charArray0[5] = 'c';
      jSONScanner0.scanDecimal('L');
      jSONScanner0.scanLong('\\');
      jSONScanner0.scanFieldUUID(charArray1);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      int int0 = Calendar.AM_PM;
      SymbolTable symbolTable0 = new SymbolTable(9);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}@&be{U%L");
      jSONReaderScanner0.scanDouble('8');
      char[] charArray0 = new char[7];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = 'Q';
      charArray0[4] = 'Q';
      charArray0[5] = 'G';
      charArray0[6] = '8';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 9, 0);
      jSONReaderScanner0.nextToken(9);
      assertEquals(13, jSONReaderScanner0.token());
      
      Feature feature0 = Feature.UseBigDecimal;
      char[] charArray1 = new char[0];
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray1, 242, (-1));
      boolean boolean0 = jSONReaderScanner2.isEnabled(feature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan null error");
      jSONScanner0.scanIdent();
      int int0 = Calendar.FRIDAY;
      jSONScanner0.sp = 6;
      jSONScanner0.isRef();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.skipWhitespace();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("1U}iW`jeP`r");
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.scanUUID('P');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", property ");
      jSONReaderScanner0.scanDate('.');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanDouble('R');
      jSONReaderScanner0.nextToken((-467));
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      int int0 = Calendar.AM_PM;
      SymbolTable symbolTable0 = new SymbolTable(9);
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[1] = '`';
      charArray0[2] = '\\';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3392903);
      jSONReaderScanner0.scanDouble('\"');
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("sfL5bRZ&,0g7");
      jSONScanner0.scanDecimal('`');
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.indexOf('`', 365);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, 'r');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = ".";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".");
      int int0 = 4;
      jSONReaderScanner0.nextToken(2339);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1589));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("*:l9$YO'+^r@~2pU");
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      int int0 = Calendar.AM_PM;
      SymbolTable symbolTable0 = new SymbolTable(9);
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[1] = '`';
      charArray0[2] = 'j';
      charArray0[3] = '!';
      jSONScanner0.sbuf = charArray0;
      charArray0[4] = '}';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 101);
      jSONReaderScanner0.nextToken(101);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.scanFieldFloatArray(jSONScanner0.sbuf);
      jSONReaderScanner0.integerValue();
      SymbolTable symbolTable1 = null;
      try {
        symbolTable1 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      int int0 = Calendar.AM_PM;
      SymbolTable symbolTable0 = new SymbolTable(9);
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[1] = '`';
      charArray0[2] = '\\';
      charArray0[3] = '!';
      jSONScanner0.sbuf = charArray0;
      charArray0[4] = '}';
      charArray0[5] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 101);
      jSONReaderScanner0.nextToken(101);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.scanFieldFloatArray(jSONScanner0.sbuf);
      jSONReaderScanner0.integerValue();
      SymbolTable symbolTable1 = null;
      try {
        symbolTable1 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      String string0 = "8Pe$AyHK@ZlsY";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8Pe$AyHK@ZlsY", 2289);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$:N!U+{ut`5aWNWx");
      JSONScanner jSONScanner0 = new JSONScanner("$:N!U+{ut`5aWNWx");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan null error");
      int int0 = Calendar.FRIDAY;
      JSONScanner jSONScanner1 = new JSONScanner("[&h", 83);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONScanner1.scanStringArray(linkedHashSet0, '\u0019');
      // Undeclared exception!
      try { 
        jSONScanner1.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "$:N!U+{ut`5aWNWx";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$:N!U+{ut`5aWNWx");
      char[] charArray0 = new char[8];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = 'H';
      charArray0[4] = 'H';
      charArray0[5] = 'H';
      charArray0[6] = 'H';
      charArray0[7] = 'H';
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.nextToken(7);
      jSONReaderScanner0.nextToken(7);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      int int0 = Calendar.AM_PM;
      SymbolTable symbolTable0 = new SymbolTable(9);
      char[] charArray0 = new char[9];
      charArray0[1] = '`';
      charArray0[2] = '\\';
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("null");
      jSONScanner0.scanStringArray(linkedHashSet0, ',');
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 21);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      int int0 = Calendar.AM_PM;
      SymbolTable symbolTable0 = new SymbolTable(9);
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[1] = '`';
      charArray0[2] = '\\';
      charArray0[3] = '!';
      JSONScanner jSONScanner1 = new JSONScanner("null", (-262));
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONScanner1.scanStringArray(linkedHashSet0, '5');
      // Undeclared exception!
      try { 
        jSONScanner1.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      int int0 = Calendar.AM_PM;
      SymbolTable symbolTable0 = new SymbolTable(9);
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'L; !1", 9);
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 9, 0);
      jSONScanner1.intValue();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(".AllowSingleQuotes is fa");
      jSONReaderScanner1.scanNumber();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = ',';
      charArray0[2] = 'p';
      charArray0[3] = 'M';
      charArray0[4] = 'y';
      charArray0[5] = 'r';
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.stringDefaultValue = "null";
      jSONReaderScanner0.scanInt('1');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(52429);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0i2L0/6}NB^&!EV2\"'S");
      char[] charArray0 = new char[7];
      charArray0[0] = 'x';
      charArray0[1] = 'p';
      charArray0[2] = 'M';
      charArray0[3] = 'x';
      charArray0[4] = 'x';
      charArray0[5] = ',';
      charArray0[6] = 'M';
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanInt('p');
      jSONReaderScanner0.nextToken(52429);
      assertEquals(2, jSONReaderScanner0.token());
  }
}
