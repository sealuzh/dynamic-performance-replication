/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 06 08:56:12 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.io.StringReader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.DateFormat;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.time.LocalDate;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[float");
      ParseContext parseContext0 = defaultJSONParser0.setContext((ParseContext) null, (Object) "[float", (Object) null);
      Point point0 = new Point(10, 0);
      Insets insets0 = new Insets(13, 0, 100, 0);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints((-1012), 0, 0, 64, 0, 2, 91, 13, insets0, 0, (-138));
      defaultJSONParser0.setContext(parseContext0, (Object) point0, (Object) gridBagConstraints0);
      Object object0 = defaultJSONParser0.resolveReference("[float");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".000000");
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(1915, 680);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("java.util.OptionalLong", parserConfig0);
      defaultJSONParser0.accept(1, (-659));
      assertEquals(1, DefaultJSONParser.NeedToResolve);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 288);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(288);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("D0a<D\"/FP1*Q2KjG\"Wk");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.BACKGROUND;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) bufferCapabilities0, (Object) imageCapabilities0);
      Properties properties0 = new Properties();
      ParseContext parseContext1 = defaultJSONParser0.setContext(parseContext0, (Object) parseContext0, (Object) bufferCapabilities_FlipContents0);
      ParseContext parseContext2 = defaultJSONParser0.setContext(parseContext1, (Object) properties0, (Object) properties0);
      assertFalse(parseContext2.equals((Object)parseContext1));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{Z/O'xe\"~KA5G`Et");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{Z/O'xe\"~KA5G`Et");
      Insets insets0 = new Insets(13, 0, (-1704), 0);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints(0, 0, 0, 1, 2, 1, 0, 1, insets0, 18, 2079);
      ParseContext parseContext0 = defaultJSONParser1.setContext((Object) null, (Object) gridBagConstraints0);
      ParseContext parseContext1 = defaultJSONParser0.setContext(parseContext0, (Object) parseContext0, (Object) null);
      assertNotSame(parseContext0, parseContext1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[0];
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("chek");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "chek");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("o9F76rVF=Ir");
      Type[] typeArray0 = new Type[2];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".kl|Sack:@s6/2");
      Class<Timestamp> class0 = Timestamp.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but ., pos 1, json : .kl|Sack:@s6/2
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0);
      IdentityHashMap<Integer, Point> identityHashMap0 = new IdentityHashMap<Integer, Point>();
      Object object0 = defaultJSONParser0.parseObject((Map) identityHashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}utR]ZNpe3", parserConfig0, 427);
      Class<MockDateFormat> class0 = MockDateFormat.class;
      MockDateFormat mockDateFormat0 = defaultJSONParser0.parseObject(class0);
      assertNotNull(mockDateFormat0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Object object0 = defaultJSONParser0.parseKey();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Object object0 = defaultJSONParser0.parse();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Feature feature0 = Feature.DisableFieldSmartMatch;
      boolean boolean0 = defaultJSONParser0.isEnabled(feature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) rectangle0, (Object) null);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "ErF vu~f'dB;k^");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertTrue(list0.contains(defaultJSONParser_ResolveTask0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("check");
      defaultJSONParser0.setResolveStatus((-997));
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals((-997), defaultJSONParser0.resolveStatus);
      assertEquals((-997), int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("illegal ref, ", parserConfig0, (-948));
      JSONLexer jSONLexer0 = defaultJSONParser0.getLexer();
      assertEquals(0, jSONLexer0.pos());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("check");
      Object object0 = new Object();
      Properties properties0 = new Properties();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) properties0, object0);
      ParseContext parseContext1 = defaultJSONParser0.getContext();
      assertSame(parseContext1, parseContext0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("BYw!lH<:2$*Q/F9G43");
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("NaN", (-2147483647));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException((-1232));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("b", parserConfig0);
      defaultJSONParser0.setResolveStatus(123);
      assertEquals(123, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("*");
      defaultJSONParser0.setResolveStatus((-2175));
      Hashtable<Rectangle, JobAttributes> hashtable0 = new Hashtable<Rectangle, JobAttributes>();
      defaultJSONParser0.checkMapResolve(hashtable0, "*");
      assertEquals((-2175), defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.setDateFormat((String) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.setDateFormat("");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[>We!");
      defaultJSONParser0.setDateFomrat((DateFormat) null);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("java.util.OptionalLong", parserConfig0);
      Locale locale0 = Locale.UK;
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance(locale0);
      Insets insets0 = new Insets((-463), 17, 91, 258);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) breakIterator0, (Object) insets0);
      assertNotNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("+]");
      ParseContext parseContext0 = defaultJSONParser0.setContext((ParseContext) null, (Object) null, (Object) null);
      assertNotNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Locale locale0 = Locale.forLanguageTag("fastjson.parser.deny");
      MessageFormat messageFormat0 = new MessageFormat("fastjson.parser.autoTypeSupport", locale0);
      char[] charArray0 = new char[8];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 782, 58);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(messageFormat0, jSONReaderScanner0, parserConfig0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((ParseContext) null, (Object) bufferCapabilities0, (Object) bufferCapabilities_FlipContents0);
      defaultJSONParser0.setContext(parseContext0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("<8");
      defaultJSONParser0.setConfig((ParserConfig) null);
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Object object0 = defaultJSONParser0.resolveReference((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      Object object0 = defaultJSONParser0.resolveReference("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      HashMap<Point, Integer> hashMap0 = new HashMap<Point, Integer>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashMap0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 16);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) null, (Object) mockDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{Z/OB'xe\"~KA5G`Et");
      IdentityHashMap<ParameterizedTypeImpl, RenderingHints> identityHashMap0 = new IdentityHashMap<ParameterizedTypeImpl, RenderingHints>();
      IdentityHashMap<RenderingHints.Key, MessageFormat> identityHashMap1 = new IdentityHashMap<RenderingHints.Key, MessageFormat>();
      RenderingHints renderingHints0 = new RenderingHints(identityHashMap1);
      identityHashMap0.put((ParameterizedTypeImpl) null, renderingHints0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0, (Object) bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("check");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, json : check
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("NN", 123);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      Hashtable<Float, Insets> hashtable0 = new Hashtable<Float, Insets>();
      Float float0 = new Float((float) 0);
      Insets insets0 = new Insets(0, (-1011), (-222), 2290);
      hashtable0.put(float0, insets0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ident, pos 2, json : NN
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("VB_lE", parserConfig0, 85);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null, (Object) classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : VB_lE
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      Byte byte0 = new Byte((byte)13);
      GridBagConstraints gridBagConstraints0 = defaultJSONParser0.parseObject((Type) null, (Object) byte0);
      assertNull(gridBagConstraints0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("check");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : check
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Boolean boolean0 = defaultJSONParser0.parseObject((Class<Boolean>) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("check");
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      ZoneInfo zoneInfo0 = (ZoneInfo)JSON.defaultTimeZone;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra(zoneInfo0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("check");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra((Object) null, "I@_9Ro|WdkUI9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - h, info : pos 1, json : check
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("D0a<D\"/FP1*Q2KjG\"Wk");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.BACKGROUND;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) bufferCapabilities0, (Object) imageCapabilities0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra(parseContext0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 0, info : pos 1, json : D0a<D\"/FP1*Q2KjG\"Wk
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("mlEz||(~ntTwCJ6V");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("6'-pj;:1hk");
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) null, (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but int, pos 1, json : 6'-pj;:1hk
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Fd$hfcQDHly", parserConfig0);
      TreeSet<TimeZone> treeSet0 = new TreeSet<TimeZone>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) null, (Collection) treeSet0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : Fd$hfcQDHly
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{Z/O'xe\"~KA5G`Et");
      StringReader stringReader0 = new StringReader("{Z/O'xe\"~KA5G`Et");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Vector<ImageCapabilities> vector0 = new Vector<ImageCapabilities>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) parameterizedTypeImpl0, (Collection) vector0, (Object) stringReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {Z/O'xe\"~KA5G`Et
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but ident, pos 3, json : NaN
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{(c;4VR");
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) parameterizedTypeImpl0, (Collection) linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {(c;4VR
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("java.util.OptionalLong", parserConfig0);
      Class<Dimension> class0 = Dimension.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : java.util.OptionalLong
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("&V$", parserConfig0, 8);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ArrayList<MessageFormat> arrayList0 = new ArrayList<MessageFormat>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : &V$
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{F/-O'xe\"~KA5G`Et");
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {F/-O'xe\"~KA5G`Et
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("check");
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : check
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Object object0 = defaultJSONParser0.parse((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";>>");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ;, pos 0, fieldName 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("java.util.OptionalLong");
      PageAttributes pageAttributes0 = new PageAttributes();
      defaultJSONParser0.handleResovleTask(pageAttributes0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$'d4n");
      Object object0 = defaultJSONParser0.getObject((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Object object0 = defaultJSONParser0.getObject("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaVN");
      Feature feature0 = Feature.DisableFieldSmartMatch;
      defaultJSONParser0.config(feature0, false);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 85);
      Hashtable<BigInteger, Annotation> hashtable0 = new Hashtable<BigInteger, Annotation>();
      defaultJSONParser0.checkMapResolve(hashtable0, (Object) null);
      assertTrue(hashtable0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("check");
      RenderingHints renderingHints0 = new RenderingHints((Map<RenderingHints.Key, ?>) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      defaultJSONParser0.checkMapResolve(renderingHints0, locale_FilteringMode0);
      assertEquals(0, renderingHints0.size());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{KZ>mz[fcRp");
      defaultJSONParser0.checkMapResolve((Map) null, locale0);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      IdentityHashMap<PageAttributes, Float> identityHashMap0 = new IdentityHashMap<PageAttributes, Float>();
      PageAttributes pageAttributes0 = new PageAttributes();
      Float float0 = new Float((float) 1);
      identityHashMap0.put(pageAttributes0, float0);
      Short short0 = new Short((short)23);
      defaultJSONParser0.checkMapResolve(identityHashMap0, short0);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{Z/O'xe\"~KA5G`Et");
      defaultJSONParser0.checkListResolve((Collection) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("|");
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("java/lang/String");
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - a, info : pos 1, json : java/lang/String
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 288);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 288);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept((-75), (-75));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept((-1069));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{Z/O'xe\"~KA5G`Et");
      // Undeclared exception!
      defaultJSONParser0.parseObject((Object) defaultJSONParser0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("chek");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      Class<BigDecimal> class0 = BigDecimal.class;
      // Undeclared exception!
      defaultJSONParser0.parseObject(class0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unclosed");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(":K5/[{Xb:1;Zpad~c_$", parserConfig0, (-1195));
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("-cM,8", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse((Object) defaultJSONParser0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{KZ>mz[fcRp");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual >
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{Z/O'xe\"~KA5G`Et");
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{F/-O'xe\"~KA5G`Et");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getInput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unclosed");
      defaultJSONParser0.setDateFormat("not support type ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.getDateFormat();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'n'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("NaN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 3, json : NaN
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(charArray0, 6, parserConfig0, (-82));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((char[]) null, 1226, parserConfig0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.autoTypeSupport", parserConfig0, (-1295));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("not close json text, token : ", (ParserConfig) null, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.autoTypeAccept", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((String) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.autoTypeAccept");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser("", defaultJSONParser0.lexer, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(gridBagConstraints0, (JSONLexer) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.deny");
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((JSONLexer) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((JSONLexer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unclosed");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "unclosed");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 8, json : unclosed
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}|($ze7_0In{");
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) numberFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : }|($ze7_0In{
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("java.util.OptionalLong", parserConfig0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : java.util.OptionalLong
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1FwPCeq+_");
      defaultJSONParser0.parse((Object) "1FwPCeq+_");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.java.awt.GridBagConstraints@ce98567");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("G", defaultJSONParser0.lexer, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse((Object) aSMDeserializerFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : $.java.awt.GridBagConstraints@ce98567
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(C)I", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : (C)I
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-60));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      JSONObject jSONObject0 = new JSONObject(2, true);
      defaultJSONParser0.setContext((ParseContext) null, (Object) imageCapabilities0, (Object) jSONObject0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 18, (-1070));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.setContext((ParseContext) null);
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[Z");
      ArrayDeque<Date> arrayDeque0 = new ArrayDeque<Date>();
      LocalDate localDate0 = MockLocalDate.ofYearDay(17, 19);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) arrayDeque0, (Object) localDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [Z
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[float");
      TreeSet<RenderingHints> treeSet0 = new TreeSet<RenderingHints>();
      Class<Short> class0 = Short.TYPE;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) treeSet0, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("set");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) parameterizedTypeImpl0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : set
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ArrayDeque<Date> arrayDeque0 = new ArrayDeque<Date>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{Z/OB'xe\"~KA5G`Et", parserConfig0, 22);
      Hashtable<Double, ThrowableDeserializer> hashtable0 = new Hashtable<Double, ThrowableDeserializer>(4096, 477.0F);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashtable0, (Object) arrayDeque0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}|($ze7_0In{", parserConfig0, 90);
      TreeMap<Annotation, Point> treeMap0 = new TreeMap<Annotation, Point>();
      MessageFormat messageFormat0 = new MessageFormat("AxBvELvf");
      defaultJSONParser0.parseObject((Map) treeMap0, (Object) messageFormat0);
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(type0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0, 174);
      LinkedHashMap<Double, JavaBeanDeserializer> linkedHashMap0 = new LinkedHashMap<Double, JavaBeanDeserializer>();
      Byte byte0 = new Byte((byte) (-69));
      defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) byte0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("+]");
      defaultJSONParser0.getContext();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException(106);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("VB_lE");
      ParserConfig parserConfig0 = defaultJSONParser0.getConfig();
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNotNull(parserConfig0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{KZ>mz[fcRp", parserConfig0, 58);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) propertyProcessable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("@");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName @
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{KZ>mz[fcRp");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) propertyProcessable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual >
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(":K5/[{Xb:1;Zpad~c_$");
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertNotNull(list0);
      
      defaultJSONParser0.handleResovleTask((Object) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("+]");
      defaultJSONParser0.setContext((ParseContext) null, (Object) "+]", (Object) "+]");
      Object object0 = defaultJSONParser0.resolveReference("getSymbolTable");
      assertNull(object0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.close();
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")DMa<", 1226);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.close();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("c`Mk");
      defaultJSONParser0.accept(1);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      defaultJSONParser0.parse((Object) "NaN");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "NaN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : NaN
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".class", parserConfig0, 90);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : .class
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(":K5/[{Xb:1;Zpad~c_$");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) ":K5/[{Xb:1;Zpad~c_$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : :K5/[{Xb:1;Zpad~c_$
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", segement ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "]ttx#2HPWo@8bxS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : , segement 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]ttx#2HPWGso@8bxS");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "]ttx#2HPWGso@8bxS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ]ttx#2HPWGso@8bxS
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}|($ze7_0In{", parserConfig0, 66);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : }|($ze7_0In{
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{Z/O'xe\"~K5G`Et");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "{Z/O'xe\"~K5G`Et");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0, 174);
      Stack<ExtraProcessor> stack0 = new Stack<ExtraProcessor>();
      defaultJSONParser0.parse((Object) stack0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1kiA5+B<csb+X%I0dz");
      defaultJSONParser0.parse((Object) "1kiA5+B<csb+X%I0dz");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      Object object0 = defaultJSONParser0.parseKey();
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("J*G[cgn]", parserConfig0, 3678080);
      defaultJSONParser0.setContext((Object) parserConfig0, (Object) "+]");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) rectangle0, (Object) null);
      assertNotNull(parseContext0);
      
      defaultJSONParser0.popContext();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("w&{`", parserConfig0, (-1752));
      defaultJSONParser0.popContext();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{Z/O'xe\"~KA5G`Et");
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertNotNull(list0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("chek");
      defaultJSONParser0.getExtraProcessors();
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) rectangle0, (Object) null);
      assertNotNull(parseContext0);
      
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertNotNull(list0);
      
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[Z");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "[Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [Z
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("check");
      defaultJSONParser0.getObject("check");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Type[] typeArray0 = new Type[1];
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      typeArray0[0] = (Type) parameterizedTypeImpl0;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Type[] typeArray0 = new Type[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO : com.alibaba.fastjson.util.ParameterizedTypeImpl@745f
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Type[] typeArray0 = new Type[8];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support type com.alibaba.fastjson.util.ParameterizedTypeImpl@94e4b2c1
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 1);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(":K5/[{Xb:1;Zpad~c_$");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but :, pos 1, json : :K5/[{Xb:1;Zpad~c_$
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{F/-O'xe\"~KA5G`Et");
      IdentityHashMap<Dimension, Insets> identityHashMap0 = new IdentityHashMap<Dimension, Insets>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - /, info : pos 2, json : {F/-O'xe\"~KA5G`Et
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", pos ");
      Locale locale0 = Locale.KOREAN;
      MessageFormat messageFormat0 = new MessageFormat(", pos ", locale0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) messageFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 6, json : , pos 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[float");
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 18);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Type[] typeArray0 = new Type[2];
      defaultJSONParser0.parseArray(typeArray0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      Class<Boolean> class0 = Boolean.TYPE;
      defaultJSONParser0.parseObject((Type) class0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{F/-O'xe\"~KA5G`E,", parserConfig0, (-695));
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", pos ");
      LinkedHashMap<Time, NumberFormat> linkedHashMap0 = new LinkedHashMap<Time, NumberFormat>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) ", pos ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}|($ze7_0In{", parserConfig0, 90);
      JSONObject jSONObject0 = defaultJSONParser0.parseObject();
      assertNotNull(jSONObject0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      defaultJSONParser0.parseObject();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      char[] charArray0 = new char[3];
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, (-533));
      defaultJSONParser0.getInput();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[>We!");
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("@");
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      assertNotNull(dateFormat0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("@");
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      defaultJSONParser0.getDateFormat();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1kiA5+B<csb+X%I0dz");
      defaultJSONParser0.getSymbolTable();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("XZ7RA8Gv$xqY2*n@]");
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      char[] charArray0 = new char[0];
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(charArray0, 18, parserConfig0, 18);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, expect ", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : syntax error, expect 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{Z/O'xe\"~K5G`ZREt");
      Feature feature0 = Feature.AutoCloseSource;
      defaultJSONParser0.isEnabled(feature0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(Ljava/lang/Object;Ljava/lang/String;)V");
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      defaultJSONParser0.config(feature0, true);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{Z/OB'xe\"~KA5G`Et");
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("check");
      defaultJSONParser0.getFieldTypeResolver();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{Z~O'xe\"~K5G`Et");
      defaultJSONParser0.setResolveStatus(0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("()I", parserConfig0, (-1957));
      defaultJSONParser0.setConfig(parserConfig0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{Z/O'xe\"~KA5G`Et");
      defaultJSONParser0.getDateFomartPattern();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{Z/O'xe\"~K5G`Et");
      JSONLexer jSONLexer0 = defaultJSONParser0.getLexer();
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNotNull(jSONLexer0);
      assertEquals(12, jSONLexer0.token());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }
}
